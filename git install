dale Downloads # ls ~/gitlocal/cmpy/
ls: cannot access /root/gitlocal/cmpy/: No such file or directory
dale Downloads # ls ~/gitlocal/cmpy/
ls: cannot access /root/gitlocal/cmpy/: No such file or directory
dale Downloads # pip install --user -e ~/gitlocal/cmpy/
/root/gitlocal/cmpy/ should either be a path to a local project or a VCS url beginning with svn+, git+, hg+, or bzr+
Storing debug log for failure in /root/.pip/pip.log
dale Downloads # sudo dpkg -i googleplaydownloader_1.4-1_all.deb
dpkg: error processing archive googleplaydownloader_1.4-1_all.deb (--install):
 cannot access archive: No such file or directory
Errors were encountered while processing:
 googleplaydownloader_1.4-1_all.deb
dale Downloads # apt-get git-svn
E: Invalid operation git-svn
dale Downloads # git-svn --help
git-svn: command not found
dale Downloads # ls
~           git-2.10.1.tar.gz
get-pip.py  install_and_setup_python_and_packages_on_ubuntu_14_04.html
git-2.10.1
dale Downloads # cd git-2.10.1
dale git-2.10.1 # make configure
GIT_VERSION = 2.10.1
    GEN configure
/bin/sh: 1: autoconf: not found
make: *** [configure] Error 127
dale git-2.10.1 # make prefix=/usr
    * new build flags
    CC credential-store.o
    * new link flags
    CC common-main.o
    CC abspath.o
    CC advice.o
    CC alias.o
    CC alloc.o
    CC archive.o
    CC archive-tar.o
    CC archive-zip.o
    CC argv-array.o
    * new prefix flags
    CC attr.o
    CC base85.o
    CC bisect.o
    CC blob.o
    CC branch.o
    CC bulk-checkin.o
    CC bundle.o
    CC cache-tree.o
    CC color.o
    CC column.o
    CC combine-diff.o
    CC commit.o
    CC compat/obstack.o
    CC compat/terminal.o
    CC config.o
    CC connect.o
    CC connected.o
    CC convert.o
    CC copy.o
    CC credential.o
    CC csum-file.o
    CC ctype.o
    CC date.o
    CC decorate.o
    CC diffcore-break.o
    CC diffcore-delta.o
    CC diffcore-order.o
    CC diffcore-pickaxe.o
    CC diffcore-rename.o
    CC diff-delta.o
    CC diff-lib.o
    CC diff-no-index.o
    CC diff.o
    CC dir.o
    CC dir-iterator.o
    CC editor.o
    CC entry.o
    CC environment.o
    CC ewah/bitmap.o
    CC ewah/ewah_bitmap.o
    CC ewah/ewah_io.o
    CC ewah/ewah_rlw.o
    CC exec_cmd.o
    CC fetch-pack.o
    CC fsck.o
    CC gettext.o
    CC gpg-interface.o
    CC graph.o
    CC grep.o
    CC hashmap.o
    GEN common-cmds.h
    CC help.o
    CC hex.o
    CC ident.o
    CC kwset.o
    CC levenshtein.o
    CC line-log.o
    CC line-range.o
    CC list-objects.o
    CC ll-merge.o
    CC lockfile.o
    CC log-tree.o
    CC mailinfo.o
    CC mailmap.o
    CC match-trees.o
    CC merge.o
    CC merge-blobs.o
    CC merge-recursive.o
    CC mergesort.o
    CC mru.o
    CC name-hash.o
    CC notes.o
    CC notes-cache.o
    CC notes-merge.o
    CC notes-utils.o
    CC object.o
    CC pack-bitmap.o
    CC pack-bitmap-write.o
    CC pack-check.o
    CC pack-objects.o
    CC pack-revindex.o
    CC pack-write.o
    CC pager.o
    CC parse-options.o
    CC parse-options-cb.o
    CC patch-delta.o
    CC patch-ids.o
    CC path.o
    CC pathspec.o
    CC pkt-line.o
    CC preload-index.o
    CC pretty.o
    CC prio-queue.o
    CC progress.o
    CC prompt.o
    CC quote.o
    CC reachable.o
    CC read-cache.o
    CC reflog-walk.o
    CC refs.o
    CC refs/files-backend.o
    CC refs/iterator.o
    CC ref-filter.o
    CC remote.o
    CC replace_object.o
    CC rerere.o
    CC resolve-undo.o
    CC revision.o
    CC run-command.o
    CC send-pack.o
    CC sequencer.o
    CC server-info.o
    CC setup.o
    CC sha1-array.o
    CC sha1-lookup.o
    CC sha1_file.o
    CC sha1_name.o
    CC shallow.o
    CC sideband.o
    CC sigchain.o
    CC split-index.o
    CC strbuf.o
    CC streaming.o
    CC string-list.o
    CC submodule.o
    CC submodule-config.o
    CC symlinks.o
    CC tag.o
    CC tempfile.o
    CC trace.o
    CC trailer.o
    CC transport.o
    CC transport-helper.o
    CC tree-diff.o
    CC tree.o
    CC tree-walk.o
    CC unpack-trees.o
    CC url.o
    CC urlmatch.o
    CC usage.o
    CC userdiff.o
    CC utf8.o
    CC varint.o
    CC version.o
    CC versioncmp.o
    CC walker.o
    CC wildmatch.o
    CC worktree.o
    CC wrapper.o
    CC write_or_die.o
    CC ws.o
    CC wt-status.o
    CC xdiff-interface.o
    CC zlib.o
    CC unix-socket.o
    CC thread-utils.o
    CC compat/strlcpy.o
    AR libgit.a
    CC xdiff/xdiffi.o
    CC xdiff/xprepare.o
    CC xdiff/xutils.o
    CC xdiff/xemit.o
    CC xdiff/xmerge.o
    CC xdiff/xpatience.o
    CC xdiff/xhistogram.o
    AR xdiff/lib.a
    LINK git-credential-store
    CC daemon.o
    LINK git-daemon
    CC fast-import.o
    LINK git-fast-import
    CC http-backend.o
    LINK git-http-backend
    CC imap-send.o
    CC http.o
    LINK git-imap-send
    CC sh-i18n--envsubst.o
    LINK git-sh-i18n--envsubst
    CC shell.o
    LINK git-shell
    CC show-index.o
    LINK git-show-index
    CC upload-pack.o
    LINK git-upload-pack
    CC remote-testsvn.o
    CC vcs-svn/line_buffer.o
    CC vcs-svn/sliding_window.o
    CC vcs-svn/repo_tree.o
    CC vcs-svn/fast_export.o
    CC vcs-svn/svndiff.o
    CC vcs-svn/svndump.o
    AR vcs-svn/lib.a
    LINK git-remote-testsvn
    CC http-walker.o
    CC http-fetch.o
    LINK git-http-fetch
    CC http-push.o
    LINK git-http-push
    CC credential-cache.o
    LINK git-credential-cache
    CC credential-cache--daemon.o
    LINK git-credential-cache--daemon
    CC remote-curl.o
    LINK git-remote-http
    LN/CP git-remote-https
    LN/CP git-remote-ftp
    LN/CP git-remote-ftps
    * new script parameters
    GEN git-bisect
    GEN git-difftool--helper
    GEN git-filter-branch
    GEN git-merge-octopus
    GEN git-merge-one-file
    GEN git-merge-resolve
    GEN git-mergetool
    GEN git-quiltimport
    GEN git-rebase
    GEN git-request-pull
    GEN git-stash
    GEN git-submodule
    GEN git-web--browse
    SUBDIR perl
/usr/bin/perl Makefile.PL PREFIX='/usr' INSTALL_BASE='' --localedir='/usr/share/locale'
Writing perl.mak for Git
Writing MYMETA.yml and MYMETA.json
    * new perl-specific parameters
    GEN git-add--interactive
    GEN git-difftool
    GEN git-archimport
    GEN git-cvsexportcommit
    GEN git-cvsimport
    GEN git-cvsserver
    GEN git-relink
    GEN git-send-email
    GEN git-svn
    * new Python interpreter location
    GEN git-p4
    GEN git-instaweb
    GEN git-mergetool--lib
    GEN git-parse-remote
    GEN git-rebase--am
    GEN git-rebase--interactive
    GEN git-rebase--merge
    GEN git-sh-setup
    GEN git-sh-i18n
    CC git.o
    CC builtin/add.o
    CC builtin/am.o
    CC builtin/annotate.o
    CC builtin/apply.o
    CC builtin/archive.o
    CC builtin/bisect--helper.o
    CC builtin/blame.o
    CC builtin/branch.o
    CC builtin/bundle.o
    CC builtin/cat-file.o
    CC builtin/check-attr.o
    CC builtin/check-ignore.o
    CC builtin/check-mailmap.o
    CC builtin/check-ref-format.o
    CC builtin/checkout-index.o
    CC builtin/checkout.o
    CC builtin/clean.o
    CC builtin/clone.o
    CC builtin/column.o
    CC builtin/commit-tree.o
    CC builtin/commit.o
    CC builtin/config.o
    CC builtin/count-objects.o
    CC builtin/credential.o
    CC builtin/describe.o
    CC builtin/diff-files.o
    CC builtin/diff-index.o
    CC builtin/diff-tree.o
    CC builtin/diff.o
    CC builtin/fast-export.o
    CC builtin/fetch-pack.o
    CC builtin/fetch.o
    CC builtin/fmt-merge-msg.o
    CC builtin/for-each-ref.o
    CC builtin/fsck.o
    CC builtin/gc.o
    CC builtin/get-tar-commit-id.o
    CC builtin/grep.o
    CC builtin/hash-object.o
    CC builtin/help.o
    CC builtin/index-pack.o
    CC builtin/init-db.o
    CC builtin/interpret-trailers.o
    CC builtin/log.o
    CC builtin/ls-files.o
    CC builtin/ls-remote.o
    CC builtin/ls-tree.o
    CC builtin/mailinfo.o
    CC builtin/mailsplit.o
    CC builtin/merge.o
    CC builtin/merge-base.o
    CC builtin/merge-file.o
    CC builtin/merge-index.o
    CC builtin/merge-ours.o
    CC builtin/merge-recursive.o
    CC builtin/merge-tree.o
    CC builtin/mktag.o
    CC builtin/mktree.o
    CC builtin/mv.o
    CC builtin/name-rev.o
    CC builtin/notes.o
    CC builtin/pack-objects.o
    CC builtin/pack-redundant.o
    CC builtin/pack-refs.o
    CC builtin/patch-id.o
    CC builtin/prune-packed.o
    CC builtin/prune.o
    CC builtin/pull.o
    CC builtin/push.o
    CC builtin/read-tree.o
    CC builtin/receive-pack.o
    CC builtin/reflog.o
    CC builtin/remote.o
    CC builtin/remote-ext.o
    CC builtin/remote-fd.o
    CC builtin/repack.o
    CC builtin/replace.o
    CC builtin/rerere.o
    CC builtin/reset.o
    CC builtin/rev-list.o
    CC builtin/rev-parse.o
    CC builtin/revert.o
    CC builtin/rm.o
    CC builtin/send-pack.o
    CC builtin/shortlog.o
    CC builtin/show-branch.o
    CC builtin/show-ref.o
    CC builtin/stripspace.o
    CC builtin/submodule--helper.o
    CC builtin/symbolic-ref.o
    CC builtin/tag.o
    CC builtin/unpack-file.o
    CC builtin/unpack-objects.o
    CC builtin/update-index.o
    CC builtin/update-ref.o
    CC builtin/update-server-info.o
    CC builtin/upload-archive.o
    CC builtin/var.o
    CC builtin/verify-commit.o
    CC builtin/verify-pack.o
    CC builtin/verify-tag.o
    CC builtin/worktree.o
    CC builtin/write-tree.o
    LINK git
    BUILTIN git-add
    BUILTIN git-am
    BUILTIN git-annotate
    BUILTIN git-apply
    BUILTIN git-archive
    BUILTIN git-bisect--helper
    BUILTIN git-blame
    BUILTIN git-branch
    BUILTIN git-bundle
    BUILTIN git-cat-file
    BUILTIN git-check-attr
    BUILTIN git-check-ignore
    BUILTIN git-check-mailmap
    BUILTIN git-check-ref-format
    BUILTIN git-checkout-index
    BUILTIN git-checkout
    BUILTIN git-clean
    BUILTIN git-clone
    BUILTIN git-column
    BUILTIN git-commit-tree
    BUILTIN git-commit
    BUILTIN git-config
    BUILTIN git-count-objects
    BUILTIN git-credential
    BUILTIN git-describe
    BUILTIN git-diff-files
    BUILTIN git-diff-index
    BUILTIN git-diff-tree
    BUILTIN git-diff
    BUILTIN git-fast-export
    BUILTIN git-fetch-pack
    BUILTIN git-fetch
    BUILTIN git-fmt-merge-msg
    BUILTIN git-for-each-ref
    BUILTIN git-fsck
    BUILTIN git-gc
    BUILTIN git-get-tar-commit-id
    BUILTIN git-grep
    BUILTIN git-hash-object
    BUILTIN git-help
    BUILTIN git-index-pack
    BUILTIN git-init-db
    BUILTIN git-interpret-trailers
    BUILTIN git-log
    BUILTIN git-ls-files
    BUILTIN git-ls-remote
    BUILTIN git-ls-tree
    BUILTIN git-mailinfo
    BUILTIN git-mailsplit
    BUILTIN git-merge
    BUILTIN git-merge-base
    BUILTIN git-merge-file
    BUILTIN git-merge-index
    BUILTIN git-merge-ours
    BUILTIN git-merge-recursive
    BUILTIN git-merge-tree
    BUILTIN git-mktag
    BUILTIN git-mktree
    BUILTIN git-mv
    BUILTIN git-name-rev
    BUILTIN git-notes
    BUILTIN git-pack-objects
    BUILTIN git-pack-redundant
    BUILTIN git-pack-refs
    BUILTIN git-patch-id
    BUILTIN git-prune-packed
    BUILTIN git-prune
    BUILTIN git-pull
    BUILTIN git-push
    BUILTIN git-read-tree
    BUILTIN git-receive-pack
    BUILTIN git-reflog
    BUILTIN git-remote
    BUILTIN git-remote-ext
    BUILTIN git-remote-fd
    BUILTIN git-repack
    BUILTIN git-replace
    BUILTIN git-rerere
    BUILTIN git-reset
    BUILTIN git-rev-list
    BUILTIN git-rev-parse
    BUILTIN git-revert
    BUILTIN git-rm
    BUILTIN git-send-pack
    BUILTIN git-shortlog
    BUILTIN git-show-branch
    BUILTIN git-show-ref
    BUILTIN git-stripspace
    BUILTIN git-submodule--helper
    BUILTIN git-symbolic-ref
    BUILTIN git-tag
    BUILTIN git-unpack-file
    BUILTIN git-unpack-objects
    BUILTIN git-update-index
    BUILTIN git-update-ref
    BUILTIN git-update-server-info
    BUILTIN git-upload-archive
    BUILTIN git-var
    BUILTIN git-verify-commit
    BUILTIN git-verify-pack
    BUILTIN git-verify-tag
    BUILTIN git-worktree
    BUILTIN git-write-tree
    BUILTIN git-cherry
    BUILTIN git-cherry-pick
    BUILTIN git-format-patch
    BUILTIN git-fsck-objects
    BUILTIN git-init
    BUILTIN git-merge-subtree
    BUILTIN git-show
    BUILTIN git-stage
    BUILTIN git-status
    BUILTIN git-whatchanged
    SUBDIR git-gui
GITGUI_VERSION = 0.20.GITGUI
    * new locations or Tcl/Tk interpreter
    GEN git-gui
    INDEX lib/
    MSGFMT    po/bg.msg 547 translated.
    MSGFMT    po/de.msg 520 translated.
    MSGFMT    po/el.msg 381 translated, 4 fuzzy, 6 untranslated.
    MSGFMT    po/fr.msg 520 translated.
    MSGFMT    po/hu.msg 514 translated.
    MSGFMT    po/it.msg 519 translated, 1 untranslated.
    MSGFMT    po/ja.msg 546 translated, 1 untranslated.
    MSGFMT    po/nb.msg 474 translated, 39 untranslated.
    MSGFMT po/pt_br.msg 520 translated.
    MSGFMT    po/ru.msg 516 translated, 4 untranslated.
    MSGFMT    po/sv.msg 547 translated.
    MSGFMT    po/vi.msg 543 translated.
    MSGFMT po/zh_cn.msg 366 translated, 7 fuzzy, 17 untranslated.
    SUBDIR gitk-git
    * new Tcl/Tk interpreter location
    GEN gitk-wish
Generating catalog po/bg.msg
msgfmt --statistics --tcl po/bg.po -l bg -d po/
311 translated messages.
Generating catalog po/ca.msg
msgfmt --statistics --tcl po/ca.po -l ca -d po/
307 translated messages.
Generating catalog po/de.msg
msgfmt --statistics --tcl po/de.po -l de -d po/
307 translated messages.
Generating catalog po/es.msg
msgfmt --statistics --tcl po/es.po -l es -d po/
184 translated messages, 46 fuzzy translations, 77 untranslated messages.
Generating catalog po/fr.msg
msgfmt --statistics --tcl po/fr.po -l fr -d po/
311 translated messages.
Generating catalog po/hu.msg
msgfmt --statistics --tcl po/hu.po -l hu -d po/
277 translated messages, 18 fuzzy translations, 12 untranslated messages.
Generating catalog po/it.msg
msgfmt --statistics --tcl po/it.po -l it -d po/
274 translated messages, 17 fuzzy translations, 16 untranslated messages.
Generating catalog po/ja.msg
msgfmt --statistics --tcl po/ja.po -l ja -d po/
311 translated messages.
Generating catalog po/pt_br.msg
msgfmt --statistics --tcl po/pt_br.po -l pt_br -d po/
279 translated messages, 16 fuzzy translations, 12 untranslated messages.
Generating catalog po/ru.msg
msgfmt --statistics --tcl po/ru.po -l ru -d po/
307 translated messages.
Generating catalog po/sv.msg
msgfmt --statistics --tcl po/sv.po -l sv -d po/
311 translated messages.
Generating catalog po/vi.msg
msgfmt --statistics --tcl po/vi.po -l vi -d po/
307 translated messages.
    SUBDIR perl
/usr/bin/perl -pe "s<\Q++LOCALEDIR++\E></usr/share/locale>" <Git/SVN/Utils.pm >blib/lib/Git/SVN/Utils.pm
/usr/bin/perl -pe "s<\Q++LOCALEDIR++\E></usr/share/locale>" <Git/SVN/Prompt.pm >blib/lib/Git/SVN/Prompt.pm
/usr/bin/perl -pe "s<\Q++LOCALEDIR++\E></usr/share/locale>" <Git/SVN/Editor.pm >blib/lib/Git/SVN/Editor.pm
/usr/bin/perl -pe "s<\Q++LOCALEDIR++\E></usr/share/locale>" <Git/SVN/GlobSpec.pm >blib/lib/Git/SVN/GlobSpec.pm
/usr/bin/perl -pe "s<\Q++LOCALEDIR++\E></usr/share/locale>" <Git/SVN/Log.pm >blib/lib/Git/SVN/Log.pm
/usr/bin/perl -pe "s<\Q++LOCALEDIR++\E></usr/share/locale>" <Git/SVN/Memoize/YAML.pm >blib/lib/Git/SVN/Memoize/YAML.pm
/usr/bin/perl -pe "s<\Q++LOCALEDIR++\E></usr/share/locale>" <Git/I18N.pm >blib/lib/Git/I18N.pm
/usr/bin/perl -pe "s<\Q++LOCALEDIR++\E></usr/share/locale>" <Git/IndexInfo.pm >blib/lib/Git/IndexInfo.pm
/usr/bin/perl -pe "s<\Q++LOCALEDIR++\E></usr/share/locale>" <Git/SVN/Fetcher.pm >blib/lib/Git/SVN/Fetcher.pm
/usr/bin/perl -pe "s<\Q++LOCALEDIR++\E></usr/share/locale>" <Git/SVN.pm >blib/lib/Git/SVN.pm
/usr/bin/perl -pe "s<\Q++LOCALEDIR++\E></usr/share/locale>" <Git/SVN/Ra.pm >blib/lib/Git/SVN/Ra.pm
/usr/bin/perl -pe "s<\Q++LOCALEDIR++\E></usr/share/locale>" <Git/SVN/Migration.pm >blib/lib/Git/SVN/Migration.pm
/usr/bin/perl -pe "s<\Q++LOCALEDIR++\E></usr/share/locale>" <Git.pm >blib/lib/Git.pm
Manifying blib/man3/Git::SVN::Ra.3pm
Manifying blib/man3/Git::SVN::Editor.3pm
Manifying blib/man3/Git::SVN::Memoize::YAML.3pm
Manifying blib/man3/Git.3pm
Manifying blib/man3/Git::SVN::Fetcher.3pm
Manifying blib/man3/Git::SVN::Prompt.3pm
Manifying blib/man3/Git::SVN::Utils.3pm
Manifying blib/man3/Git::I18N.3pm
    SUBDIR templates
    MSGFMT po/build/locale/bg/LC_MESSAGES/git.mo
2597 translated messages.
    MSGFMT po/build/locale/ca/LC_MESSAGES/git.mo
2757 translated messages.
    MSGFMT po/build/locale/de/LC_MESSAGES/git.mo
2597 translated messages.
    MSGFMT po/build/locale/fr/LC_MESSAGES/git.mo
2757 translated messages.
    MSGFMT po/build/locale/is/LC_MESSAGES/git.mo
14 translated messages.
    MSGFMT po/build/locale/it/LC_MESSAGES/git.mo
716 translated messages, 350 untranslated messages.
    MSGFMT po/build/locale/ko/LC_MESSAGES/git.mo
2789 translated messages.
    MSGFMT po/build/locale/pt_PT/LC_MESSAGES/git.mo
2757 translated messages.
    MSGFMT po/build/locale/ru/LC_MESSAGES/git.mo
2597 translated messages.
    MSGFMT po/build/locale/sv/LC_MESSAGES/git.mo
2757 translated messages.
    MSGFMT po/build/locale/vi/LC_MESSAGES/git.mo
2757 translated messages.
    MSGFMT po/build/locale/zh_CN/LC_MESSAGES/git.mo
2757 translated messages.
    CC t/helper/test-chmtime.o
    LINK t/helper/test-chmtime
    CC t/helper/test-ctype.o
    LINK t/helper/test-ctype
    CC t/helper/test-config.o
    LINK t/helper/test-config
    CC t/helper/test-date.o
    LINK t/helper/test-date
    CC t/helper/test-delta.o
    LINK t/helper/test-delta
    CC t/helper/test-dump-cache-tree.o
    LINK t/helper/test-dump-cache-tree
    CC t/helper/test-dump-split-index.o
    LINK t/helper/test-dump-split-index
    CC t/helper/test-dump-untracked-cache.o
    LINK t/helper/test-dump-untracked-cache
    CC t/helper/test-fake-ssh.o
    LINK t/helper/test-fake-ssh
    CC t/helper/test-genrandom.o
    LINK t/helper/test-genrandom
    CC t/helper/test-hashmap.o
    LINK t/helper/test-hashmap
    CC t/helper/test-index-version.o
    LINK t/helper/test-index-version
    CC t/helper/test-line-buffer.o
    LINK t/helper/test-line-buffer
    CC t/helper/test-match-trees.o
    LINK t/helper/test-match-trees
    CC t/helper/test-mergesort.o
    LINK t/helper/test-mergesort
    CC t/helper/test-mktemp.o
    LINK t/helper/test-mktemp
    CC t/helper/test-parse-options.o
    LINK t/helper/test-parse-options
    CC t/helper/test-path-utils.o
    LINK t/helper/test-path-utils
    CC t/helper/test-prio-queue.o
    LINK t/helper/test-prio-queue
    CC t/helper/test-read-cache.o
    LINK t/helper/test-read-cache
    CC t/helper/test-regex.o
    LINK t/helper/test-regex
    CC t/helper/test-revision-walking.o
    LINK t/helper/test-revision-walking
    CC t/helper/test-run-command.o
    LINK t/helper/test-run-command
    CC t/helper/test-scrap-cache-tree.o
    LINK t/helper/test-scrap-cache-tree
    CC t/helper/test-sha1.o
    LINK t/helper/test-sha1
    CC t/helper/test-sha1-array.o
    LINK t/helper/test-sha1-array
    CC t/helper/test-sigchain.o
    LINK t/helper/test-sigchain
    CC t/helper/test-string-list.o
    LINK t/helper/test-string-list
    CC t/helper/test-submodule-config.o
    LINK t/helper/test-submodule-config
    CC t/helper/test-subprocess.o
    LINK t/helper/test-subprocess
    CC t/helper/test-svn-fe.o
    LINK t/helper/test-svn-fe
    CC t/helper/test-urlmatch-normalization.o
    LINK t/helper/test-urlmatch-normalization
    CC t/helper/test-wildmatch.o
    LINK t/helper/test-wildmatch
    GEN bin-wrappers/git
    GEN bin-wrappers/git-upload-pack
    GEN bin-wrappers/git-receive-pack
    GEN bin-wrappers/git-upload-archive
    GEN bin-wrappers/git-shell
    GEN bin-wrappers/git-cvsserver
    GEN bin-wrappers/test-chmtime
    GEN bin-wrappers/test-ctype
    GEN bin-wrappers/test-config
    GEN bin-wrappers/test-date
    GEN bin-wrappers/test-delta
    GEN bin-wrappers/test-dump-cache-tree
    GEN bin-wrappers/test-dump-split-index
    GEN bin-wrappers/test-dump-untracked-cache
    GEN bin-wrappers/test-fake-ssh
    GEN bin-wrappers/test-genrandom
    GEN bin-wrappers/test-hashmap
    GEN bin-wrappers/test-index-version
    GEN bin-wrappers/test-line-buffer
    GEN bin-wrappers/test-match-trees
    GEN bin-wrappers/test-mergesort
    GEN bin-wrappers/test-mktemp
    GEN bin-wrappers/test-parse-options
    GEN bin-wrappers/test-path-utils
    GEN bin-wrappers/test-prio-queue
    GEN bin-wrappers/test-read-cache
    GEN bin-wrappers/test-regex
    GEN bin-wrappers/test-revision-walking
    GEN bin-wrappers/test-run-command
    GEN bin-wrappers/test-scrap-cache-tree
    GEN bin-wrappers/test-sha1
    GEN bin-wrappers/test-sha1-array
    GEN bin-wrappers/test-sigchain
    GEN bin-wrappers/test-string-list
    GEN bin-wrappers/test-submodule-config
    GEN bin-wrappers/test-subprocess
    GEN bin-wrappers/test-svn-fe
    GEN bin-wrappers/test-urlmatch-normalization
    GEN bin-wrappers/test-wildmatch
    GEN git-remote-testgit
dale git-2.10.1 # make prefix=/usr install install-doc install-html install-info    SUBDIR perl
/usr/bin/perl Makefile.PL PREFIX='/usr' INSTALL_BASE='' --localedir='/usr/share/locale'
Writing perl.mak for Git
Writing MYMETA.yml and MYMETA.json
    GEN git-add--interactive
    GEN git-difftool
    GEN git-archimport
    GEN git-cvsexportcommit
    GEN git-cvsimport
    GEN git-cvsserver
    GEN git-relink
    GEN git-send-email
    GEN git-svn
    SUBDIR git-gui
    SUBDIR gitk-git
    SUBDIR perl
/usr/bin/perl -pe "s<\Q++LOCALEDIR++\E></usr/share/locale>" <Git/SVN/Editor.pm >blib/lib/Git/SVN/Editor.pm
/usr/bin/perl -pe "s<\Q++LOCALEDIR++\E></usr/share/locale>" <Git/SVN/Log.pm >blib/lib/Git/SVN/Log.pm
/usr/bin/perl -pe "s<\Q++LOCALEDIR++\E></usr/share/locale>" <Git/SVN/Migration.pm >blib/lib/Git/SVN/Migration.pm
/usr/bin/perl -pe "s<\Q++LOCALEDIR++\E></usr/share/locale>" <Git/SVN/Utils.pm >blib/lib/Git/SVN/Utils.pm
/usr/bin/perl -pe "s<\Q++LOCALEDIR++\E></usr/share/locale>" <Git.pm >blib/lib/Git.pm
/usr/bin/perl -pe "s<\Q++LOCALEDIR++\E></usr/share/locale>" <Git/SVN.pm >blib/lib/Git/SVN.pm
/usr/bin/perl -pe "s<\Q++LOCALEDIR++\E></usr/share/locale>" <Git/SVN/Memoize/YAML.pm >blib/lib/Git/SVN/Memoize/YAML.pm
/usr/bin/perl -pe "s<\Q++LOCALEDIR++\E></usr/share/locale>" <Git/SVN/Fetcher.pm >blib/lib/Git/SVN/Fetcher.pm
/usr/bin/perl -pe "s<\Q++LOCALEDIR++\E></usr/share/locale>" <Git/I18N.pm >blib/lib/Git/I18N.pm
/usr/bin/perl -pe "s<\Q++LOCALEDIR++\E></usr/share/locale>" <Git/SVN/Prompt.pm >blib/lib/Git/SVN/Prompt.pm
/usr/bin/perl -pe "s<\Q++LOCALEDIR++\E></usr/share/locale>" <Git/SVN/Ra.pm >blib/lib/Git/SVN/Ra.pm
/usr/bin/perl -pe "s<\Q++LOCALEDIR++\E></usr/share/locale>" <Git/IndexInfo.pm >blib/lib/Git/IndexInfo.pm
/usr/bin/perl -pe "s<\Q++LOCALEDIR++\E></usr/share/locale>" <Git/SVN/GlobSpec.pm >blib/lib/Git/SVN/GlobSpec.pm
    SUBDIR templates
install -d -m 755 '/usr/bin'
install -d -m 755 '/usr/libexec/git-core'
install   git-credential-store git-daemon git-fast-import git-http-backend git-imap-send git-sh-i18n--envsubst git-shell git-show-index git-upload-pack git-remote-testsvn git-http-fetch git-http-push git-credential-cache git-credential-cache--daemon git-remote-http git-remote-https git-remote-ftp git-remote-ftps git-bisect git-difftool--helper git-filter-branch git-merge-octopus git-merge-one-file git-merge-resolve git-mergetool git-quiltimport git-rebase git-request-pull git-stash git-submodule git-web--browse git-add--interactive git-difftool git-archimport git-cvsexportcommit git-cvsimport git-cvsserver git-relink git-send-email git-svn git-p4 git-instaweb '/usr/libexec/git-core'
install -m 644  git-mergetool--lib git-parse-remote git-rebase--am git-rebase--interactive git-rebase--merge git-sh-setup git-sh-i18n '/usr/libexec/git-core'
install git git-upload-pack git-receive-pack git-upload-archive git-shell git-cvsserver '/usr/bin'
make -C templates DESTDIR='' install
make[1]: Entering directory `/home/chip/Downloads/git-2.10.1/templates'
install -d -m 755 '/usr/share/git-core/templates'
(cd blt && tar cf - .) | \
	(cd '/usr/share/git-core/templates' && umask 022 && tar xof -)
make[1]: Leaving directory `/home/chip/Downloads/git-2.10.1/templates'
install -d -m 755 '/usr/libexec/git-core/mergetools'
install -m 644 mergetools/* '/usr/libexec/git-core/mergetools'
install -d -m 755 '/usr/share/locale'
(cd po/build/locale && tar cf - .) | \
	(cd '/usr/share/locale' && umask 022 && tar xof -)
make -C perl prefix='/usr' DESTDIR='' install
make[1]: Entering directory `/home/chip/Downloads/git-2.10.1/perl'
make[2]: Entering directory `/home/chip/Downloads/git-2.10.1/perl'
Installing /usr/share/perl/5.18.2/Git.pm
Installing /usr/share/perl/5.18.2/Git/IndexInfo.pm
Installing /usr/share/perl/5.18.2/Git/SVN.pm
Installing /usr/share/perl/5.18.2/Git/I18N.pm
Installing /usr/share/perl/5.18.2/Git/SVN/Ra.pm
Installing /usr/share/perl/5.18.2/Git/SVN/Editor.pm
Installing /usr/share/perl/5.18.2/Git/SVN/Log.pm
Installing /usr/share/perl/5.18.2/Git/SVN/Utils.pm
Installing /usr/share/perl/5.18.2/Git/SVN/GlobSpec.pm
Installing /usr/share/perl/5.18.2/Git/SVN/Migration.pm
Installing /usr/share/perl/5.18.2/Git/SVN/Prompt.pm
Installing /usr/share/perl/5.18.2/Git/SVN/Fetcher.pm
Installing /usr/share/perl/5.18.2/Git/SVN/Memoize/YAML.pm
Installing /usr/share/man/man3/Git::SVN::Utils.3pm
Installing /usr/share/man/man3/Git::SVN::Editor.3pm
Installing /usr/share/man/man3/Git::SVN::Memoize::YAML.3pm
Installing /usr/share/man/man3/Git::I18N.3pm
Installing /usr/share/man/man3/Git.3pm
Installing /usr/share/man/man3/Git::SVN::Fetcher.3pm
Installing /usr/share/man/man3/Git::SVN::Prompt.3pm
Installing /usr/share/man/man3/Git::SVN::Ra.3pm
Appending installation info to /usr/lib/perl/5.18.2/perllocal.pod
make[2]: Leaving directory `/home/chip/Downloads/git-2.10.1/perl'
make[1]: Leaving directory `/home/chip/Downloads/git-2.10.1/perl'
make -C gitweb install
make[1]: Entering directory `/home/chip/Downloads/git-2.10.1/gitweb'
make[2]: Entering directory `/home/chip/Downloads/git-2.10.1'
make[2]: `GIT-VERSION-FILE' is up to date.
make[2]: Leaving directory `/home/chip/Downloads/git-2.10.1'
    GEN gitweb.cgi
    GEN static/gitweb.js
install -d -m 755 '/usr/share/gitweb'
install -m 755 gitweb.cgi '/usr/share/gitweb'
install -d -m 755 '/usr/share/gitweb/static'
install -m 644 static/gitweb.js static/gitweb.css static/git-logo.png static/git-favicon.png '/usr/share/gitweb/static'
make[1]: Leaving directory `/home/chip/Downloads/git-2.10.1/gitweb'
make -C gitk-git install
make[1]: Entering directory `/home/chip/Downloads/git-2.10.1/gitk-git'
install -m 755 gitk-wish '/usr/bin'/gitk
install -d -m 755 '/usr/share/gitk/lib/msgs'
install -m 644 po/bg.msg '/usr/share/gitk/lib/msgs' &&  install -m 644 po/ca.msg '/usr/share/gitk/lib/msgs' &&  install -m 644 po/de.msg '/usr/share/gitk/lib/msgs' &&  install -m 644 po/es.msg '/usr/share/gitk/lib/msgs' &&  install -m 644 po/fr.msg '/usr/share/gitk/lib/msgs' &&  install -m 644 po/hu.msg '/usr/share/gitk/lib/msgs' &&  install -m 644 po/it.msg '/usr/share/gitk/lib/msgs' &&  install -m 644 po/ja.msg '/usr/share/gitk/lib/msgs' &&  install -m 644 po/pt_br.msg '/usr/share/gitk/lib/msgs' &&  install -m 644 po/ru.msg '/usr/share/gitk/lib/msgs' &&  install -m 644 po/sv.msg '/usr/share/gitk/lib/msgs' &&  install -m 644 po/vi.msg '/usr/share/gitk/lib/msgs' && true
make[1]: Leaving directory `/home/chip/Downloads/git-2.10.1/gitk-git'
make -C git-gui gitexecdir='/usr/libexec/git-core' install
make[1]: Entering directory `/home/chip/Downloads/git-2.10.1/git-gui'
  DEST /usr/libexec/git-core
    INSTALL 755 git-gui
    INSTALL 755 git-gui--askpass
    LINK        git-citool -> git-gui
  DEST /usr/share/git-gui/lib
    INSTALL 644 tclIndex
    INSTALL 644 about.tcl
    INSTALL 644 blame.tcl
    INSTALL 644 branch_checkout.tcl
    INSTALL 644 branch_create.tcl
    INSTALL 644 branch_delete.tcl
    INSTALL 644 branch_rename.tcl
    INSTALL 644 branch.tcl
    INSTALL 644 browser.tcl
    INSTALL 644 checkout_op.tcl
    INSTALL 644 choose_font.tcl
    INSTALL 644 choose_repository.tcl
    INSTALL 644 choose_rev.tcl
    INSTALL 644 class.tcl
    INSTALL 644 commit.tcl
    INSTALL 644 console.tcl
    INSTALL 644 database.tcl
    INSTALL 644 date.tcl
    INSTALL 644 diff.tcl
    INSTALL 644 encoding.tcl
    INSTALL 644 error.tcl
    INSTALL 644 index.tcl
    INSTALL 644 line.tcl
    INSTALL 644 logo.tcl
    INSTALL 644 merge.tcl
    INSTALL 644 mergetool.tcl
    INSTALL 644 option.tcl
    INSTALL 644 remote_add.tcl
    INSTALL 644 remote_branch_delete.tcl
    INSTALL 644 remote.tcl
    INSTALL 644 search.tcl
    INSTALL 644 shortcut.tcl
    INSTALL 644 spellcheck.tcl
    INSTALL 644 sshkey.tcl
    INSTALL 644 status_bar.tcl
    INSTALL 644 themed.tcl
    INSTALL 644 tools_dlg.tcl
    INSTALL 644 tools.tcl
    INSTALL 644 transport.tcl
    INSTALL 644 win32.tcl
    INSTALL 644 git-gui.ico
    INSTALL 644 win32_shortcut.js
  DEST /usr/share/git-gui/lib/msgs
    INSTALL 644 bg.msg
    INSTALL 644 de.msg
    INSTALL 644 el.msg
    INSTALL 644 fr.msg
    INSTALL 644 hu.msg
    INSTALL 644 it.msg
    INSTALL 644 ja.msg
    INSTALL 644 nb.msg
    INSTALL 644 pt_br.msg
    INSTALL 644 ru.msg
    INSTALL 644 sv.msg
    INSTALL 644 vi.msg
    INSTALL 644 zh_cn.msg
make[1]: Leaving directory `/home/chip/Downloads/git-2.10.1/git-gui'
bindir=$(cd '/usr/bin' && pwd) && \
	execdir=$(cd '/usr/libexec/git-core' && pwd) && \
	{ test "$bindir/" = "$execdir/" || \
	  for p in git git-shell git-upload-pack git-cvsserver; do \
		rm -f "$execdir/$p" && \
		test -z "" && \
		ln "$bindir/$p" "$execdir/$p" 2>/dev/null || \
		cp "$bindir/$p" "$execdir/$p" || exit; \
	  done; \
	} && \
	for p in git-receive-pack git-upload-archive; do \
		rm -f "$bindir/$p" && \
		test -z "" && \
		ln "$bindir/git" "$bindir/$p" 2>/dev/null || \
		ln -s "git" "$bindir/$p" 2>/dev/null || \
		cp "$bindir/git" "$bindir/$p" || exit; \
	done && \
	for p in  git-add git-am git-annotate git-apply git-archive git-bisect--helper git-blame git-branch git-bundle git-cat-file git-check-attr git-check-ignore git-check-mailmap git-check-ref-format git-checkout-index git-checkout git-clean git-clone git-column git-commit-tree git-commit git-config git-count-objects git-credential git-describe git-diff-files git-diff-index git-diff-tree git-diff git-fast-export git-fetch-pack git-fetch git-fmt-merge-msg git-for-each-ref git-fsck git-gc git-get-tar-commit-id git-grep git-hash-object git-help git-index-pack git-init-db git-interpret-trailers git-log git-ls-files git-ls-remote git-ls-tree git-mailinfo git-mailsplit git-merge git-merge-base git-merge-file git-merge-index git-merge-ours git-merge-recursive git-merge-tree git-mktag git-mktree git-mv git-name-rev git-notes git-pack-objects git-pack-redundant git-pack-refs git-patch-id git-prune-packed git-prune git-pull git-push git-read-tree git-receive-pack git-reflog git-remote git-remote-ext git-remote-fd git-repack git-replace git-rerere git-reset git-rev-list git-rev-parse git-revert git-rm git-send-pack git-shortlog git-show-branch git-show-ref git-stripspace git-submodule--helper git-symbolic-ref git-tag git-unpack-file git-unpack-objects git-update-index git-update-ref git-update-server-info git-upload-archive git-var git-verify-commit git-verify-pack git-verify-tag git-worktree git-write-tree git-cherry git-cherry-pick git-format-patch git-fsck-objects git-init git-merge-subtree git-show git-stage git-status git-whatchanged; do \
		rm -f "$execdir/$p" && \
		test -z "" && \
		ln "$execdir/git" "$execdir/$p" 2>/dev/null || \
		ln -s "git" "$execdir/$p" 2>/dev/null || \
		cp "$execdir/git" "$execdir/$p" || exit; \
	done && \
	remote_curl_aliases="git-remote-https git-remote-ftp git-remote-ftps" && \
	for p in $remote_curl_aliases; do \
		rm -f "$execdir/$p" && \
		test -z "" && \
		ln "$execdir/git-remote-http" "$execdir/$p" 2>/dev/null || \
		ln -s "git-remote-http" "$execdir/$p" 2>/dev/null || \
		cp "$execdir/git-remote-http" "$execdir/$p" || exit; \
	done && \
	./check_bindir "z$bindir" "z$execdir" "$bindir/git-add"
make -C Documentation install
make[1]: Entering directory `/home/chip/Downloads/git-2.10.1/Documentation'
    GEN mergetools-list.made
    GEN cmd-list.made
    GEN doc.dep
make[2]: Entering directory `/home/chip/Downloads/git-2.10.1'
make[2]: `GIT-VERSION-FILE' is up to date.
make[2]: Leaving directory `/home/chip/Downloads/git-2.10.1'
make[1]: Leaving directory `/home/chip/Downloads/git-2.10.1/Documentation'
make[1]: Entering directory `/home/chip/Downloads/git-2.10.1/Documentation'
make[2]: Entering directory `/home/chip/Downloads/git-2.10.1'
make[2]: `GIT-VERSION-FILE' is up to date.
make[2]: Leaving directory `/home/chip/Downloads/git-2.10.1'
sed "s|@@MAN_BASE_URL@@|file:///usr/share/doc/git-doc/|" manpage-base-url.xsl.in > manpage-base-url.xsl
    ASCIIDOC git-add.xml
    XMLTO git-add.1
    ASCIIDOC git-am.xml
    XMLTO git-am.1
    ASCIIDOC git-annotate.xml
    XMLTO git-annotate.1
    ASCIIDOC git-apply.xml
    XMLTO git-apply.1
    ASCIIDOC git-archimport.xml
    XMLTO git-archimport.1
    ASCIIDOC git-archive.xml
    XMLTO git-archive.1
    ASCIIDOC git-bisect.xml
    XMLTO git-bisect.1
    ASCIIDOC git-blame.xml
    XMLTO git-blame.1
    ASCIIDOC git-branch.xml
    XMLTO git-branch.1
    ASCIIDOC git-bundle.xml
    XMLTO git-bundle.1
    ASCIIDOC git-cat-file.xml
    XMLTO git-cat-file.1
    ASCIIDOC git-check-attr.xml
    XMLTO git-check-attr.1
    ASCIIDOC git-check-ignore.xml
    XMLTO git-check-ignore.1
    ASCIIDOC git-check-mailmap.xml
    XMLTO git-check-mailmap.1
    ASCIIDOC git-checkout-index.xml
    XMLTO git-checkout-index.1
    ASCIIDOC git-checkout.xml
    XMLTO git-checkout.1
    ASCIIDOC git-check-ref-format.xml
    XMLTO git-check-ref-format.1
    ASCIIDOC git-cherry-pick.xml
    XMLTO git-cherry-pick.1
    ASCIIDOC git-cherry.xml
    XMLTO git-cherry.1
    ASCIIDOC git-citool.xml
    XMLTO git-citool.1
    ASCIIDOC git-clean.xml
    XMLTO git-clean.1
    ASCIIDOC git-clone.xml
    XMLTO git-clone.1
    ASCIIDOC git-column.xml
    XMLTO git-column.1
    ASCIIDOC git-commit-tree.xml
    XMLTO git-commit-tree.1
    ASCIIDOC git-commit.xml
    XMLTO git-commit.1
    ASCIIDOC git-config.xml
    XMLTO git-config.1
    ASCIIDOC git-count-objects.xml
    XMLTO git-count-objects.1
    ASCIIDOC git-credential-cache--daemon.xml
    XMLTO git-credential-cache--daemon.1
    ASCIIDOC git-credential-cache.xml
    XMLTO git-credential-cache.1
    ASCIIDOC git-credential-store.xml
    XMLTO git-credential-store.1
    ASCIIDOC git-credential.xml
    XMLTO git-credential.1
    ASCIIDOC git-cvsexportcommit.xml
    XMLTO git-cvsexportcommit.1
    ASCIIDOC git-cvsimport.xml
    XMLTO git-cvsimport.1
    ASCIIDOC git-cvsserver.xml
    XMLTO git-cvsserver.1
    ASCIIDOC git-daemon.xml
    XMLTO git-daemon.1
    ASCIIDOC git-describe.xml
    XMLTO git-describe.1
    ASCIIDOC git-diff-files.xml
    XMLTO git-diff-files.1
    ASCIIDOC git-diff-index.xml
    XMLTO git-diff-index.1
    ASCIIDOC git-difftool.xml
    XMLTO git-difftool.1
    ASCIIDOC git-diff-tree.xml
    XMLTO git-diff-tree.1
    ASCIIDOC git-diff.xml
    XMLTO git-diff.1
    ASCIIDOC git-fast-export.xml
    XMLTO git-fast-export.1
    ASCIIDOC git-fast-import.xml
    XMLTO git-fast-import.1
    ASCIIDOC git-fetch-pack.xml
    XMLTO git-fetch-pack.1
    ASCIIDOC git-fetch.xml
    XMLTO git-fetch.1
    ASCIIDOC git-filter-branch.xml
    XMLTO git-filter-branch.1
    ASCIIDOC git-fmt-merge-msg.xml
    XMLTO git-fmt-merge-msg.1
    ASCIIDOC git-for-each-ref.xml
    XMLTO git-for-each-ref.1
    ASCIIDOC git-format-patch.xml
    XMLTO git-format-patch.1
    ASCIIDOC git-fsck-objects.xml
    XMLTO git-fsck-objects.1
    ASCIIDOC git-fsck.xml
    XMLTO git-fsck.1
    ASCIIDOC git-gc.xml
    XMLTO git-gc.1
    ASCIIDOC git-get-tar-commit-id.xml
    XMLTO git-get-tar-commit-id.1
    ASCIIDOC git-grep.xml
    XMLTO git-grep.1
    ASCIIDOC git-gui.xml
    XMLTO git-gui.1
    ASCIIDOC git-hash-object.xml
    XMLTO git-hash-object.1
    ASCIIDOC git-help.xml
    XMLTO git-help.1
    ASCIIDOC git-http-backend.xml
    XMLTO git-http-backend.1
    ASCIIDOC git-http-fetch.xml
    XMLTO git-http-fetch.1
    ASCIIDOC git-http-push.xml
    XMLTO git-http-push.1
    ASCIIDOC git-imap-send.xml
    XMLTO git-imap-send.1
    ASCIIDOC git-index-pack.xml
    XMLTO git-index-pack.1
    ASCIIDOC git-init-db.xml
    XMLTO git-init-db.1
    ASCIIDOC git-init.xml
    XMLTO git-init.1
    ASCIIDOC git-instaweb.xml
    XMLTO git-instaweb.1
    ASCIIDOC git-interpret-trailers.xml
    XMLTO git-interpret-trailers.1
    ASCIIDOC git-log.xml
    XMLTO git-log.1
    ASCIIDOC git-ls-files.xml
    XMLTO git-ls-files.1
    ASCIIDOC git-ls-remote.xml
    XMLTO git-ls-remote.1
    ASCIIDOC git-ls-tree.xml
    XMLTO git-ls-tree.1
    ASCIIDOC git-mailinfo.xml
    XMLTO git-mailinfo.1
    ASCIIDOC git-mailsplit.xml
    XMLTO git-mailsplit.1
    ASCIIDOC git-merge-base.xml
    XMLTO git-merge-base.1
    ASCIIDOC git-merge-file.xml
    XMLTO git-merge-file.1
    ASCIIDOC git-merge-index.xml
    XMLTO git-merge-index.1
    ASCIIDOC git-merge-one-file.xml
    XMLTO git-merge-one-file.1
    ASCIIDOC git-mergetool--lib.xml
    XMLTO git-mergetool--lib.1
    ASCIIDOC git-mergetool.xml
    XMLTO git-mergetool.1
    ASCIIDOC git-merge-tree.xml
    XMLTO git-merge-tree.1
    ASCIIDOC git-merge.xml
    XMLTO git-merge.1
    ASCIIDOC git-mktag.xml
    XMLTO git-mktag.1
    ASCIIDOC git-mktree.xml
    XMLTO git-mktree.1
    ASCIIDOC git-mv.xml
    XMLTO git-mv.1
    ASCIIDOC git-name-rev.xml
    XMLTO git-name-rev.1
    ASCIIDOC git-notes.xml
    XMLTO git-notes.1
    ASCIIDOC git-p4.xml
    XMLTO git-p4.1
    ASCIIDOC git-pack-objects.xml
    XMLTO git-pack-objects.1
    ASCIIDOC git-pack-redundant.xml
    XMLTO git-pack-redundant.1
    ASCIIDOC git-pack-refs.xml
    XMLTO git-pack-refs.1
    ASCIIDOC git-parse-remote.xml
    XMLTO git-parse-remote.1
    ASCIIDOC git-patch-id.xml
    XMLTO git-patch-id.1
    ASCIIDOC git-prune-packed.xml
    XMLTO git-prune-packed.1
    ASCIIDOC git-prune.xml
    XMLTO git-prune.1
    ASCIIDOC git-pull.xml
    XMLTO git-pull.1
    ASCIIDOC git-push.xml
    XMLTO git-push.1
    ASCIIDOC git-quiltimport.xml
    XMLTO git-quiltimport.1
    ASCIIDOC git-read-tree.xml
    XMLTO git-read-tree.1
    ASCIIDOC git-rebase.xml
    XMLTO git-rebase.1
    ASCIIDOC git-receive-pack.xml
    XMLTO git-receive-pack.1
    ASCIIDOC git-reflog.xml
    XMLTO git-reflog.1
    ASCIIDOC git-relink.xml
    XMLTO git-relink.1
    ASCIIDOC git-remote-ext.xml
    XMLTO git-remote-ext.1
    ASCIIDOC git-remote-fd.xml
    XMLTO git-remote-fd.1
    ASCIIDOC git-remote-testgit.xml
    XMLTO git-remote-testgit.1
    ASCIIDOC git-remote.xml
    XMLTO git-remote.1
    ASCIIDOC git-repack.xml
    XMLTO git-repack.1
    ASCIIDOC git-replace.xml
    XMLTO git-replace.1
    ASCIIDOC git-request-pull.xml
    XMLTO git-request-pull.1
    ASCIIDOC git-rerere.xml
    XMLTO git-rerere.1
    ASCIIDOC git-reset.xml
    XMLTO git-reset.1
    ASCIIDOC git-revert.xml
    XMLTO git-revert.1
    ASCIIDOC git-rev-list.xml
    XMLTO git-rev-list.1
    ASCIIDOC git-rev-parse.xml
    XMLTO git-rev-parse.1
    ASCIIDOC git-rm.xml
    XMLTO git-rm.1
    ASCIIDOC git-send-email.xml
    XMLTO git-send-email.1
    ASCIIDOC git-send-pack.xml
    XMLTO git-send-pack.1
    ASCIIDOC git-shell.xml
    XMLTO git-shell.1
    ASCIIDOC git-sh-i18n--envsubst.xml
    XMLTO git-sh-i18n--envsubst.1
    ASCIIDOC git-sh-i18n.xml
    XMLTO git-sh-i18n.1
    ASCIIDOC git-shortlog.xml
    XMLTO git-shortlog.1
    ASCIIDOC git-show-branch.xml
    XMLTO git-show-branch.1
    ASCIIDOC git-show-index.xml
    XMLTO git-show-index.1
    ASCIIDOC git-show-ref.xml
    XMLTO git-show-ref.1
    ASCIIDOC git-show.xml
    XMLTO git-show.1
    ASCIIDOC git-sh-setup.xml
    XMLTO git-sh-setup.1
    ASCIIDOC git-stage.xml
    XMLTO git-stage.1
    ASCIIDOC git-stash.xml
    XMLTO git-stash.1
    ASCIIDOC git-status.xml
    XMLTO git-status.1
    ASCIIDOC git-stripspace.xml
    XMLTO git-stripspace.1
    ASCIIDOC git-submodule.xml
    XMLTO git-submodule.1
    ASCIIDOC git-svn.xml
    XMLTO git-svn.1
    ASCIIDOC git-symbolic-ref.xml
    XMLTO git-symbolic-ref.1
    ASCIIDOC git-tag.xml
    XMLTO git-tag.1
    ASCIIDOC git-unpack-file.xml
    XMLTO git-unpack-file.1
    ASCIIDOC git-unpack-objects.xml
    XMLTO git-unpack-objects.1
    ASCIIDOC git-update-index.xml
    XMLTO git-update-index.1
    ASCIIDOC git-update-ref.xml
    XMLTO git-update-ref.1
    ASCIIDOC git-update-server-info.xml
    XMLTO git-update-server-info.1
    ASCIIDOC git-upload-archive.xml
    XMLTO git-upload-archive.1
    ASCIIDOC git-upload-pack.xml
    XMLTO git-upload-pack.1
    ASCIIDOC git-var.xml
    XMLTO git-var.1
    ASCIIDOC git-verify-commit.xml
    XMLTO git-verify-commit.1
    ASCIIDOC git-verify-pack.xml
    XMLTO git-verify-pack.1
    ASCIIDOC git-verify-tag.xml
    XMLTO git-verify-tag.1
    ASCIIDOC git-web--browse.xml
    XMLTO git-web--browse.1
    ASCIIDOC git-whatchanged.xml
    XMLTO git-whatchanged.1
    ASCIIDOC git-worktree.xml
    XMLTO git-worktree.1
    ASCIIDOC git-write-tree.xml
    XMLTO git-write-tree.1
    ASCIIDOC git.xml
    XMLTO git.1
    ASCIIDOC gitk.xml
    XMLTO gitk.1
    ASCIIDOC gitremote-helpers.xml
    XMLTO gitremote-helpers.1
    ASCIIDOC gitweb.xml
    XMLTO gitweb.1
    ASCIIDOC gitattributes.xml
    XMLTO gitattributes.5
    ASCIIDOC githooks.xml
    XMLTO githooks.5
    ASCIIDOC gitignore.xml
    XMLTO gitignore.5
    ASCIIDOC gitmodules.xml
    XMLTO gitmodules.5
    ASCIIDOC gitrepository-layout.xml
    XMLTO gitrepository-layout.5
    ASCIIDOC gitweb.conf.xml
    XMLTO gitweb.conf.5
    ASCIIDOC gitcli.xml
    XMLTO gitcli.7
    ASCIIDOC gitcore-tutorial.xml
    XMLTO gitcore-tutorial.7
    ASCIIDOC gitcredentials.xml
    XMLTO gitcredentials.7
    ASCIIDOC gitcvs-migration.xml
    XMLTO gitcvs-migration.7
    ASCIIDOC gitdiffcore.xml
    XMLTO gitdiffcore.7
    ASCIIDOC giteveryday.xml
    XMLTO giteveryday.7
    ASCIIDOC gitglossary.xml
    XMLTO gitglossary.7
    ASCIIDOC gitnamespaces.xml
    XMLTO gitnamespaces.7
    ASCIIDOC gitrevisions.xml
    XMLTO gitrevisions.7
    ASCIIDOC gittutorial-2.xml
    XMLTO gittutorial-2.7
    ASCIIDOC gittutorial.xml
    XMLTO gittutorial.7
    ASCIIDOC gitworkflows.xml
    XMLTO gitworkflows.7
install -d -m 755 /usr/share/man/man1
install -d -m 755 /usr/share/man/man5
install -d -m 755 /usr/share/man/man7
install -m 644 git-add.1 git-am.1 git-annotate.1 git-apply.1 git-archimport.1 git-archive.1 git-bisect.1 git-blame.1 git-branch.1 git-bundle.1 git-cat-file.1 git-check-attr.1 git-check-ignore.1 git-check-mailmap.1 git-checkout-index.1 git-checkout.1 git-check-ref-format.1 git-cherry-pick.1 git-cherry.1 git-citool.1 git-clean.1 git-clone.1 git-column.1 git-commit-tree.1 git-commit.1 git-config.1 git-count-objects.1 git-credential-cache--daemon.1 git-credential-cache.1 git-credential-store.1 git-credential.1 git-cvsexportcommit.1 git-cvsimport.1 git-cvsserver.1 git-daemon.1 git-describe.1 git-diff-files.1 git-diff-index.1 git-difftool.1 git-diff-tree.1 git-diff.1 git-fast-export.1 git-fast-import.1 git-fetch-pack.1 git-fetch.1 git-filter-branch.1 git-fmt-merge-msg.1 git-for-each-ref.1 git-format-patch.1 git-fsck-objects.1 git-fsck.1 git-gc.1 git-get-tar-commit-id.1 git-grep.1 git-gui.1 git-hash-object.1 git-help.1 git-http-backend.1 git-http-fetch.1 git-http-push.1 git-imap-send.1 git-index-pack.1 git-init-db.1 git-init.1 git-instaweb.1 git-interpret-trailers.1 git-log.1 git-ls-files.1 git-ls-remote.1 git-ls-tree.1 git-mailinfo.1 git-mailsplit.1 git-merge-base.1 git-merge-file.1 git-merge-index.1 git-merge-one-file.1 git-mergetool--lib.1 git-mergetool.1 git-merge-tree.1 git-merge.1 git-mktag.1 git-mktree.1 git-mv.1 git-name-rev.1 git-notes.1 git-p4.1 git-pack-objects.1 git-pack-redundant.1 git-pack-refs.1 git-parse-remote.1 git-patch-id.1 git-prune-packed.1 git-prune.1 git-pull.1 git-push.1 git-quiltimport.1 git-read-tree.1 git-rebase.1 git-receive-pack.1 git-reflog.1 git-relink.1 git-remote-ext.1 git-remote-fd.1 git-remote-testgit.1 git-remote.1 git-repack.1 git-replace.1 git-request-pull.1 git-rerere.1 git-reset.1 git-revert.1 git-rev-list.1 git-rev-parse.1 git-rm.1 git-send-email.1 git-send-pack.1 git-shell.1 git-sh-i18n--envsubst.1 git-sh-i18n.1 git-shortlog.1 git-show-branch.1 git-show-index.1 git-show-ref.1 git-show.1 git-sh-setup.1 git-stage.1 git-stash.1 git-status.1 git-stripspace.1 git-submodule.1 git-svn.1 git-symbolic-ref.1 git-tag.1 git-unpack-file.1 git-unpack-objects.1 git-update-index.1 git-update-ref.1 git-update-server-info.1 git-upload-archive.1 git-upload-pack.1 git-var.1 git-verify-commit.1 git-verify-pack.1 git-verify-tag.1 git-web--browse.1 git-whatchanged.1 git-worktree.1 git-write-tree.1 git.1 gitk.1 gitremote-helpers.1 gitweb.1 /usr/share/man/man1
install -m 644 gitattributes.5 githooks.5 gitignore.5 gitmodules.5 gitrepository-layout.5 gitweb.conf.5 /usr/share/man/man5
install -m 644 gitcli.7 gitcore-tutorial.7 gitcredentials.7 gitcvs-migration.7 gitdiffcore.7 giteveryday.7 gitglossary.7 gitnamespaces.7 gitrevisions.7 gittutorial-2.7 gittutorial.7 gitworkflows.7 /usr/share/man/man7
make[1]: Leaving directory `/home/chip/Downloads/git-2.10.1/Documentation'
make -C Documentation install-html
make[1]: Entering directory `/home/chip/Downloads/git-2.10.1/Documentation'
make[2]: Entering directory `/home/chip/Downloads/git-2.10.1'
make[2]: `GIT-VERSION-FILE' is up to date.
make[2]: Leaving directory `/home/chip/Downloads/git-2.10.1'
    ASCIIDOC git-add.html
    ASCIIDOC git-am.html
    ASCIIDOC git-annotate.html
    ASCIIDOC git-apply.html
    ASCIIDOC git-archimport.html
    ASCIIDOC git-archive.html
    ASCIIDOC git-bisect.html
    ASCIIDOC git-blame.html
    ASCIIDOC git-branch.html
    ASCIIDOC git-bundle.html
    ASCIIDOC git-cat-file.html
    ASCIIDOC git-check-attr.html
    ASCIIDOC git-check-ignore.html
    ASCIIDOC git-check-mailmap.html
    ASCIIDOC git-checkout-index.html
    ASCIIDOC git-checkout.html
    ASCIIDOC git-check-ref-format.html
    ASCIIDOC git-cherry-pick.html
    ASCIIDOC git-cherry.html
    ASCIIDOC git-citool.html
    ASCIIDOC git-clean.html
    ASCIIDOC git-clone.html
    ASCIIDOC git-column.html
    ASCIIDOC git-commit-tree.html
    ASCIIDOC git-commit.html
    ASCIIDOC git-config.html
    ASCIIDOC git-count-objects.html
    ASCIIDOC git-credential-cache--daemon.html
    ASCIIDOC git-credential-cache.html
    ASCIIDOC git-credential-store.html
    ASCIIDOC git-credential.html
    ASCIIDOC git-cvsexportcommit.html
    ASCIIDOC git-cvsimport.html
    ASCIIDOC git-cvsserver.html
    ASCIIDOC git-daemon.html
    ASCIIDOC git-describe.html
    ASCIIDOC git-diff-files.html
    ASCIIDOC git-diff-index.html
    ASCIIDOC git-difftool.html
    ASCIIDOC git-diff-tree.html
    ASCIIDOC git-diff.html
    ASCIIDOC git-fast-export.html
    ASCIIDOC git-fast-import.html
    ASCIIDOC git-fetch-pack.html
    ASCIIDOC git-fetch.html
    ASCIIDOC git-filter-branch.html
    ASCIIDOC git-fmt-merge-msg.html
    ASCIIDOC git-for-each-ref.html
    ASCIIDOC git-format-patch.html
    ASCIIDOC git-fsck-objects.html
    ASCIIDOC git-fsck.html
    ASCIIDOC git-gc.html
    ASCIIDOC git-get-tar-commit-id.html
    ASCIIDOC git-grep.html
    ASCIIDOC git-gui.html
    ASCIIDOC git-hash-object.html
    ASCIIDOC git-help.html
    ASCIIDOC git-http-backend.html
    ASCIIDOC git-http-fetch.html
    ASCIIDOC git-http-push.html
    ASCIIDOC git-imap-send.html
    ASCIIDOC git-index-pack.html
    ASCIIDOC git-init-db.html
    ASCIIDOC git-init.html
    ASCIIDOC git-instaweb.html
    ASCIIDOC git-interpret-trailers.html
    ASCIIDOC git-log.html
    ASCIIDOC git-ls-files.html
    ASCIIDOC git-ls-remote.html
    ASCIIDOC git-ls-tree.html
    ASCIIDOC git-mailinfo.html
    ASCIIDOC git-mailsplit.html
    ASCIIDOC git-merge-base.html
    ASCIIDOC git-merge-file.html
    ASCIIDOC git-merge-index.html
    ASCIIDOC git-merge-one-file.html
    ASCIIDOC git-mergetool--lib.html
    ASCIIDOC git-mergetool.html
    ASCIIDOC git-merge-tree.html
    ASCIIDOC git-merge.html
    ASCIIDOC git-mktag.html
    ASCIIDOC git-mktree.html
    ASCIIDOC git-mv.html
    ASCIIDOC git-name-rev.html
    ASCIIDOC git-notes.html
    ASCIIDOC git-p4.html
    ASCIIDOC git-pack-objects.html
    ASCIIDOC git-pack-redundant.html
    ASCIIDOC git-pack-refs.html
    ASCIIDOC git-parse-remote.html
    ASCIIDOC git-patch-id.html
    ASCIIDOC git-prune-packed.html
    ASCIIDOC git-prune.html
    ASCIIDOC git-pull.html
    ASCIIDOC git-push.html
    ASCIIDOC git-quiltimport.html
    ASCIIDOC git-read-tree.html
    ASCIIDOC git-rebase.html
    ASCIIDOC git-receive-pack.html
    ASCIIDOC git-reflog.html
    ASCIIDOC git-relink.html
    ASCIIDOC git-remote-ext.html
    ASCIIDOC git-remote-fd.html
    ASCIIDOC git-remote-testgit.html
    ASCIIDOC git-remote.html
    ASCIIDOC git-repack.html
    ASCIIDOC git-replace.html
    ASCIIDOC git-request-pull.html
    ASCIIDOC git-rerere.html
    ASCIIDOC git-reset.html
    ASCIIDOC git-revert.html
    ASCIIDOC git-rev-list.html
    ASCIIDOC git-rev-parse.html
    ASCIIDOC git-rm.html
    ASCIIDOC git-send-email.html
    ASCIIDOC git-send-pack.html
    ASCIIDOC git-shell.html
    ASCIIDOC git-sh-i18n--envsubst.html
    ASCIIDOC git-sh-i18n.html
    ASCIIDOC git-shortlog.html
    ASCIIDOC git-show-branch.html
    ASCIIDOC git-show-index.html
    ASCIIDOC git-show-ref.html
    ASCIIDOC git-show.html
    ASCIIDOC git-sh-setup.html
    ASCIIDOC git-stage.html
    ASCIIDOC git-stash.html
    ASCIIDOC git-status.html
    ASCIIDOC git-stripspace.html
    ASCIIDOC git-submodule.html
    ASCIIDOC git-svn.html
    ASCIIDOC git-symbolic-ref.html
    ASCIIDOC git-tag.html
    ASCIIDOC git-unpack-file.html
    ASCIIDOC git-unpack-objects.html
    ASCIIDOC git-update-index.html
    ASCIIDOC git-update-ref.html
    ASCIIDOC git-update-server-info.html
    ASCIIDOC git-upload-archive.html
    ASCIIDOC git-upload-pack.html
    ASCIIDOC git-var.html
    ASCIIDOC git-verify-commit.html
    ASCIIDOC git-verify-pack.html
    ASCIIDOC git-verify-tag.html
    ASCIIDOC git-web--browse.html
    ASCIIDOC git-whatchanged.html
    ASCIIDOC git-worktree.html
    ASCIIDOC git-write-tree.html
    ASCIIDOC git.html
    ASCIIDOC gitk.html
    ASCIIDOC gitremote-helpers.html
    ASCIIDOC gitweb.html
    ASCIIDOC gitattributes.html
    ASCIIDOC githooks.html
    ASCIIDOC gitignore.html
    ASCIIDOC gitmodules.html
    ASCIIDOC gitrepository-layout.html
    ASCIIDOC gitweb.conf.html
    ASCIIDOC gitcli.html
    ASCIIDOC gitcore-tutorial.html
    ASCIIDOC gitcredentials.html
    ASCIIDOC gitcvs-migration.html
    ASCIIDOC gitdiffcore.html
    ASCIIDOC giteveryday.html
    ASCIIDOC gitglossary.html
    ASCIIDOC gitnamespaces.html
    ASCIIDOC gitrevisions.html
    ASCIIDOC gittutorial-2.html
    ASCIIDOC gittutorial.html
    ASCIIDOC gitworkflows.html
    ASCIIDOC everyday.html
    ASCIIDOC git-remote-helpers.html
    GEN howto-index.txt
    ASCIIDOC howto-index.html
    ASCIIDOC git-tools.html
    ASCIIDOC git-bisect-lk2009.html
    ASCIIDOC user-manual.xml
    XSLTPROC user-manual.html
    ASCIIDOC howto/new-command.html
    ASCIIDOC howto/revert-branch-rebase.html
    ASCIIDOC howto/using-merge-subtree.html
    ASCIIDOC howto/using-signed-tag-in-pull-request.html
    ASCIIDOC howto/use-git-daemon.html
    ASCIIDOC howto/update-hook-example.html
    ASCIIDOC howto/setup-git-server-over-http.html
    ASCIIDOC howto/separating-topic-branches.html
    ASCIIDOC howto/revert-a-faulty-merge.html
    ASCIIDOC howto/recover-corrupted-blob-object.html
    ASCIIDOC howto/recover-corrupted-object-harder.html
    ASCIIDOC howto/rebuild-from-update-hook.html
    ASCIIDOC howto/rebase-from-internal-branch.html
    ASCIIDOC howto/keep-canonical-history-correct.html
    ASCIIDOC howto/maintain-git.html
    ASCIIDOC technical/api-allocation-growing.html
    ASCIIDOC technical/api-argv-array.html
    ASCIIDOC technical/api-builtin.html
    ASCIIDOC technical/api-config.html
    ASCIIDOC technical/api-credentials.html
    ASCIIDOC technical/api-decorate.html
    ASCIIDOC technical/api-diff.html
    ASCIIDOC technical/api-directory-listing.html
    ASCIIDOC technical/api-error-handling.html
    ASCIIDOC technical/api-gitattributes.html
    ASCIIDOC technical/api-grep.html
    ASCIIDOC technical/api-hashmap.html
    ASCIIDOC technical/api-history-graph.html
    ASCIIDOC technical/api-in-core-index.html
    ASCIIDOC technical/api-merge.html
    ASCIIDOC technical/api-object-access.html
    ASCIIDOC technical/api-parse-options.html
    ASCIIDOC technical/api-quote.html
    ASCIIDOC technical/api-ref-iteration.html
    ASCIIDOC technical/api-remote.html
    ASCIIDOC technical/api-revision-walking.html
    ASCIIDOC technical/api-run-command.html
    ASCIIDOC technical/api-setup.html
    ASCIIDOC technical/api-sha1-array.html
    ASCIIDOC technical/api-sigchain.html
    ASCIIDOC technical/api-string-list.html
    ASCIIDOC technical/api-submodule-config.html
    ASCIIDOC technical/api-trace.html
    ASCIIDOC technical/api-tree-walking.html
    ASCIIDOC technical/api-xdiff-interface.html
    ASCIIDOC technical/http-protocol.html
    ASCIIDOC technical/index-format.html
    ASCIIDOC technical/pack-format.html
    ASCIIDOC technical/pack-heuristics.html
    ASCIIDOC technical/pack-protocol.html
    ASCIIDOC technical/protocol-capabilities.html
    ASCIIDOC technical/protocol-common.html
    ASCIIDOC technical/racy-git.html
    ASCIIDOC technical/send-pack-pipeline.html
    ASCIIDOC technical/shallow.html
    ASCIIDOC technical/signature-format.html
    ASCIIDOC technical/trivial-merge.html
    GEN technical/api-index.txt
    ASCIIDOC technical/api-index.html
'/bin/sh' ./install-webdoc.sh /usr/share/doc/git-doc
--- /usr/share/doc/git-doc/blame-options.txt	2016-03-21 09:24:28.000000000 -0600
+++ blame-options.txt	2016-10-03 14:24:18.000000000 -0600
@@ -4,13 +4,13 @@
 
 --root::
 	Do not treat root commits as boundaries.  This can also be
-	controlled via the `blame.showroot` config option.
+	controlled via the `blame.showRoot` config option.
 
 --show-stats::
 	Include additional statistics at the end of blame output.
 
 -L <start>,<end>::
--L :<regex>::
+-L :<funcname>::
 	Annotate only the given line range. May be specified multiple times.
 	Overlapping ranges are allowed.
 +
@@ -63,13 +63,19 @@
 	`-` to make the command read from the standard input).
 
 --date <format>::
-	The value is one of the following alternatives:
-	{relative,local,default,iso,rfc,short}. If --date is not
+	Specifies the format used to output dates. If --date is not
 	provided, the value of the blame.date config variable is
 	used. If the blame.date config variable is also not set, the
-	iso format is used. For more information, See the discussion
+	iso format is used. For supported values, see the discussion
 	of the --date option at linkgit:git-log[1].
 
+--[no-]progress::
+	Progress status is reported on the standard error stream
+	by default when it is attached to a terminal. This flag
+	enables progress reporting even if not attached to a
+	terminal. Can't use `--progress` together with `--porcelain`
+	or `--incremental`.
+
 -M|<num>|::
 	Detect moved or copied lines within a file. When a commit
 	moves or copies a block of lines (e.g. the original file
# install blame-options.txt /usr/share/doc/git-doc/blame-options.txt
--- /usr/share/doc/git-doc/cmds-ancillaryinterrogators.txt	2016-03-21 09:24:28.000000000 -0600
+++ cmds-ancillaryinterrogators.txt	2016-10-15 00:40:38.600071132 -0600
@@ -37,6 +37,9 @@
 linkgit:git-show-branch[1]::
 	Show branches and their commits.
 
+linkgit:git-verify-commit[1]::
+	Check the GPG signature of commits.
+
 linkgit:git-verify-tag[1]::
 	Check the GPG signature of tags.
 
# install cmds-ancillaryinterrogators.txt /usr/share/doc/git-doc/cmds-ancillaryinterrogators.txt
--- /usr/share/doc/git-doc/cmds-ancillarymanipulators.txt	2016-03-21 09:24:28.000000000 -0600
+++ cmds-ancillarymanipulators.txt	2016-10-15 00:40:38.600071132 -0600
@@ -26,7 +26,7 @@
 	Hardlink common objects in local repositories.
 
 linkgit:git-remote[1]::
-	manage set of tracked repositories.
+	Manage set of tracked repositories.
 
 linkgit:git-repack[1]::
 	Pack unpacked objects in a repository.
# install cmds-ancillarymanipulators.txt /usr/share/doc/git-doc/cmds-ancillarymanipulators.txt
--- /usr/share/doc/git-doc/cmds-mainporcelain.txt	2016-03-21 09:24:28.000000000 -0600
+++ cmds-mainporcelain.txt	2016-10-15 00:40:38.600071132 -0600
@@ -8,7 +8,7 @@
 	Create an archive of files from a named tree.
 
 linkgit:git-bisect[1]::
-	Find by binary search the change that introduced a bug.
+	Use binary search to find the commit that introduced a bug.
 
 linkgit:git-branch[1]::
 	List, create, or delete branches.
@@ -17,7 +17,7 @@
 	Move objects and refs by archive.
 
 linkgit:git-checkout[1]::
-	Checkout a branch or paths to the working tree.
+	Switch branches or restore working tree files.
 
 linkgit:git-cherry-pick[1]::
 	Apply the changes introduced by some existing commits.
@@ -35,7 +35,7 @@
 	Record changes to the repository.
 
 linkgit:git-describe[1]::
-	Show the most recent tag that is reachable from a commit.
+	Describe a commit using the most recent tag reachable from it.
 
 linkgit:git-diff[1]::
 	Show changes between commits, commit and working tree, etc.
@@ -77,7 +77,7 @@
 	Update remote refs along with associated objects.
 
 linkgit:git-rebase[1]::
-	Forward-port local commits to the updated upstream head.
+	Reapply commits on top of another base tip.
 
 linkgit:git-reset[1]::
 	Reset current HEAD to the specified state.
@@ -106,6 +106,9 @@
 linkgit:git-tag[1]::
 	Create, list, delete or verify a tag object signed with GPG.
 
+linkgit:git-worktree[1]::
+	Manage multiple working trees.
+
 linkgit:gitk[1]::
 	The Git repository browser.
 
# install cmds-mainporcelain.txt /usr/share/doc/git-doc/cmds-mainporcelain.txt
--- /usr/share/doc/git-doc/cmds-purehelpers.txt	2016-03-21 09:24:28.000000000 -0600
+++ cmds-purehelpers.txt	2016-10-15 00:40:38.600071132 -0600
@@ -25,6 +25,9 @@
 linkgit:git-fmt-merge-msg[1]::
 	Produce a merge commit message.
 
+linkgit:git-interpret-trailers[1]::
+	help add structured information into commit messages.
+
 linkgit:git-mailinfo[1]::
 	Extracts patch and authorship from a single e-mail message.
 
# install cmds-purehelpers.txt /usr/share/doc/git-doc/cmds-purehelpers.txt
--- /usr/share/doc/git-doc/config.txt	2016-03-21 09:24:28.000000000 -0600
+++ config.txt	2016-10-03 14:24:18.000000000 -0600
@@ -14,7 +14,8 @@
 dot-separated segment and the section name is everything before the last
 dot. The variable names are case-insensitive, allow only alphanumeric
 characters and `-`, and must start with an alphabetic character.  Some
-variables may appear multiple times.
+variables may appear multiple times; we say then that the variable is
+multivalued.
 
 Syntax
 ~~~~~~
@@ -25,7 +26,7 @@
 
 The file consists of sections and variables.  A section begins with
 the name of the section in square brackets and continues until the next
-section begins.  Section names are not case sensitive.  Only alphanumeric
+section begins.  Section names are case-insensitive.  Only alphanumeric
 characters, `-` and `.` are allowed in section names.  Each variable
 must belong to some section, which means that there must be a section
 header before the first setting of a variable.
@@ -40,8 +41,8 @@
 --------
 
 Subsection names are case sensitive and can contain any characters except
-newline (doublequote `"` and backslash have to be escaped as `\"` and `\\`,
-respectively).  Section headers cannot span multiple
+newline (doublequote `"` and backslash can be included by escaping them
+as `\"` and `\\`, respectively).  Section headers cannot span multiple
 lines.  Variables may belong directly to a section or to a given subsection.
 You can have `[section]` if you have `[section "subsection"]`, but you
 don't need to.
@@ -53,51 +54,43 @@
 
 All the other lines (and the remainder of the line after the section
 header) are recognized as setting variables, in the form
-'name = value'.  If there is no equal sign on the line, the entire line
-is taken as 'name' and the variable is recognized as boolean "true".
+'name = value' (or just 'name', which is a short-hand to say that
+the variable is the boolean "true").
 The variable names are case-insensitive, allow only alphanumeric characters
-and `-`, and must start with an alphabetic character.  There can be more
-than one value for a given variable; we say then that the variable is
-multivalued.
+and `-`, and must start with an alphabetic character.
 
-Leading and trailing whitespace in a variable value is discarded.
-Internal whitespace within a variable value is retained verbatim.
+A line that defines a value can be continued to the next line by
+ending it with a `\`; the backquote and the end-of-line are
+stripped.  Leading whitespaces after 'name =', the remainder of the
+line after the first comment character '#' or ';', and trailing
+whitespaces of the line are discarded unless they are enclosed in
+double quotes.  Internal whitespaces within the value are retained
+verbatim.
 
-The values following the equals sign in variable assign are all either
-a string, an integer, or a boolean.  Boolean values may be given as yes/no,
-1/0, true/false or on/off.  Case is not significant in boolean values, when
-converting value to the canonical form using '--bool' type specifier;
-'git config' will ensure that the output is "true" or "false".
-
-String values may be entirely or partially enclosed in double quotes.
-You need to enclose variable values in double quotes if you want to
-preserve leading or trailing whitespace, or if the variable value contains
-comment characters (i.e. it contains '#' or ';').
-Double quote `"` and backslash `\` characters in variable values must
-be escaped: use `\"` for `"` and `\\` for `\`.
+Inside double quotes, double quote `"` and backslash `\` characters
+must be escaped: use `\"` for `"` and `\\` for `\`.
 
 The following escape sequences (beside `\"` and `\\`) are recognized:
 `\n` for newline character (NL), `\t` for horizontal tabulation (HT, TAB)
-and `\b` for backspace (BS).  No other char escape sequence, nor octal
-char sequences are valid.
-
-Variable values ending in a `\` are continued on the next line in the
-customary UNIX fashion.
+and `\b` for backspace (BS).  Other char escape sequences (including octal
+escape sequences) are invalid.
 
-Some variables may require a special value format.
 
 Includes
 ~~~~~~~~
 
 You can include one config file from another by setting the special
 `include.path` variable to the name of the file to be included. The
+variable takes a pathname as its value, and is subject to tilde
+expansion.
+
+The
 included file is expanded immediately, as if its contents had been
 found at the location of the include directive. If the value of the
 `include.path` variable is a relative path, the path is considered to be
 relative to the configuration file in which the include directive was
-found. The value of `include.path` is subject to tilde expansion: `~/`
-is expanded to the value of `$HOME`, and `~user/` to the specified
-user's home directory. See below for examples.
+found.  See below for examples.
+
 
 Example
 ~~~~~~~
@@ -124,15 +117,88 @@
 	[include]
 		path = /path/to/foo.inc ; include by absolute path
 		path = foo ; expand "foo" relative to the current file
-		path = ~/foo ; expand "foo" in your $HOME directory
+		path = ~/foo ; expand "foo" in your `$HOME` directory
+
+
+Values
+~~~~~~
+
+Values of many variables are treated as a simple string, but there
+are variables that take values of specific types and there are rules
+as to how to spell them.
+
+boolean::
+
+       When a variable is said to take a boolean value, many
+       synonyms are accepted for 'true' and 'false'; these are all
+       case-insensitive.
+
+       true;; Boolean true can be spelled as `yes`, `on`, `true`,
+		or `1`.  Also, a variable defined without `= <value>`
+		is taken as true.
+
+       false;; Boolean false can be spelled as `no`, `off`,
+		`false`, or `0`.
++
+When converting value to the canonical form using `--bool` type
+specifier; 'git config' will ensure that the output is "true" or
+"false" (spelled in lowercase).
+
+integer::
+       The value for many variables that specify various sizes can
+       be suffixed with `k`, `M`,... to mean "scale the number by
+       1024", "by 1024x1024", etc.
+
+color::
+       The value for a variable that takes a color is a list of
+       colors (at most two, one for foreground and one for background)
+       and attributes (as many as you want), separated by spaces.
++
+The basic colors accepted are `normal`, `black`, `red`, `green`, `yellow`,
+`blue`, `magenta`, `cyan` and `white`.  The first color given is the
+foreground; the second is the background.
++
+Colors may also be given as numbers between 0 and 255; these use ANSI
+256-color mode (but note that not all terminals may support this).  If
+your terminal supports it, you may also specify 24-bit RGB values as
+hex, like `#ff0ab3`.
++
+The accepted attributes are `bold`, `dim`, `ul`, `blink`, `reverse`,
+`italic`, and `strike` (for crossed-out or "strikethrough" letters).
+The position of any attributes with respect to the colors
+(before, after, or in between), doesn't matter. Specific attributes may
+be turned off by prefixing them with `no` or `no-` (e.g., `noreverse`,
+`no-ul`, etc).
++
+For git's pre-defined color slots, the attributes are meant to be reset
+at the beginning of each item in the colored output. So setting
+`color.decorate.branch` to `black` will paint that branch name in a
+plain `black`, even if the previous thing on the same output line (e.g.
+opening parenthesis before the list of branch names in `log --decorate`
+output) is set to be painted with `bold` or some other attribute.
+However, custom log formats may do more complicated and layered
+coloring, and the negated forms may be useful there.
+
+pathname::
+	A variable that takes a pathname value can be given a
+	string that begins with "`~/`" or "`~user/`", and the usual
+	tilde expansion happens to such a string: `~/`
+	is expanded to the value of `$HOME`, and `~user/` to the
+	specified user's home directory.
+
 
 Variables
 ~~~~~~~~~
 
 Note that this list is non-comprehensive and not necessarily complete.
 For command-specific variables, you will find a more detailed description
-in the appropriate manual page. You will find a description of non-core
-porcelain configuration variables in the respective porcelain documentation.
+in the appropriate manual page.
+
+Other git-related tools may and do use their own variables.  When
+inventing new variables for use in your own tool, make sure their
+names do not conflict with those that are used by Git itself and
+other popular tools, and describe them in your documentation.
+
 
 advice.*::
 	These variables control various optional help messages designed to
@@ -142,19 +208,13 @@
 --
 	pushUpdateRejected::
 		Set this variable to 'false' if you want to disable
-		'pushNonFFCurrent', 'pushNonFFDefault',
+		'pushNonFFCurrent',
 		'pushNonFFMatching', 'pushAlreadyExists',
 		'pushFetchFirst', and 'pushNeedsForce'
 		simultaneously.
 	pushNonFFCurrent::
 		Advice shown when linkgit:git-push[1] fails due to a
 		non-fast-forward update to the current branch.
-	pushNonFFDefault::
-		Advice to set 'push.default' to 'upstream' or 'current'
-		when you ran linkgit:git-push[1] and pushed 'matching
-		refs' by default (i.e. you did not provide an explicit
-		refspec, and no 'push.default' configuration was set)
-		and it resulted in a non-fast-forward error.
 	pushNonFFMatching::
 		Advice shown when you ran linkgit:git-push[1] and pushed
 		'matching refs' explicitly (i.e. you used ':', or
@@ -205,15 +265,34 @@
 --
 
 core.fileMode::
-	If false, the executable bit differences between the index and
-	the working tree are ignored; useful on broken filesystems like FAT.
-	See linkgit:git-update-index[1].
+	Tells Git if the executable bit of files in the working tree
+	is to be honored.
 +
-The default is true, except linkgit:git-clone[1] or linkgit:git-init[1]
-will probe and set core.fileMode false if appropriate when the
-repository is created.
+Some filesystems lose the executable bit when a file that is
+marked as executable is checked out, or checks out an
+non-executable file with executable bit on.
+linkgit:git-clone[1] or linkgit:git-init[1] probe the filesystem
+to see if it handles the executable bit correctly
+and this variable is automatically set as necessary.
++
+A repository, however, may be on a filesystem that handles
+the filemode correctly, and this variable is set to 'true'
+when created, but later may be made accessible from another
+environment that loses the filemode (e.g. exporting ext4 via
+CIFS mount, visiting a Cygwin created repository with
+Git for Windows or Eclipse).
+In such a case it may be necessary to set this variable to 'false'.
+See linkgit:git-update-index[1].
++
+The default is true (when core.filemode is not specified in the config file).
+
+core.hideDotFiles::
+	(Windows-only) If true, mark newly-created directories and files whose
+	name starts with a dot as hidden.  If 'dotGitOnly', only the `.git/`
+	directory is hidden, but no other files starting with a dot.  The
+	default mode is 'dotGitOnly'.
 
-core.ignorecase::
+core.ignoreCase::
 	If true, this option enables various workarounds to enable
 	Git to work better on filesystems that are not case sensitive,
 	like FAT. For example, if a directory listing finds
@@ -222,12 +301,12 @@
 	"Makefile".
 +
 The default is false, except linkgit:git-clone[1] or linkgit:git-init[1]
-will probe and set core.ignorecase true if appropriate when the repository
+will probe and set core.ignoreCase true if appropriate when the repository
 is created.
 
-core.precomposeunicode::
+core.precomposeUnicode::
 	This option is only used by Mac OS implementation of Git.
-	When core.precomposeunicode=true, Git reverts the unicode decomposition
+	When core.precomposeUnicode=true, Git reverts the unicode decomposition
 	of filenames done by Mac OS. This is useful when sharing a repository
 	between Mac OS and Linux or Windows.
 	(Git for Windows 1.7.10 or higher is needed, or Git under cygwin 1.7).
@@ -252,13 +331,22 @@
 	crawlers and some backup systems).
 	See linkgit:git-update-index[1]. True by default.
 
-core.checkstat::
+core.untrackedCache::
+	Determines what to do about the untracked cache feature of the
+	index. It will be kept, if this variable is unset or set to
+	`keep`. It will automatically be added if set to `true`. And
+	it will automatically be removed, if set to `false`. Before
+	setting it to `true`, you should check that mtime is working
+	properly on your system.
+	See linkgit:git-update-index[1]. `keep` by default.
+
+core.checkStat::
 	Determines which stat fields to match between the index
 	and work tree. The user can set this to 'default' or
 	'minimal'. Default (or explicitly 'default'), is to check
 	all fields, including the sub-second part of mtime and ctime.
 
-core.quotepath::
+core.quotePath::
 	The commands that output paths (e.g. 'ls-files',
 	'diff'), when not given the `-z` option, will quote
 	"unusual" characters in the pathname by enclosing the
@@ -272,9 +360,9 @@
 
 core.eol::
 	Sets the line ending type to use in the working directory for
-	files that have the `text` property set.  Alternatives are
-	'lf', 'crlf' and 'native', which uses the platform's native
-	line ending.  The default value is `native`.  See
+	files that have the `text` property set when core.autocrlf is false.
+	Alternatives are 'lf', 'crlf' and 'native', which uses the platform's
+	native line ending.  The default value is `native`.  See
 	linkgit:gitattributes[5] for more information on end-of-line
 	conversion.
 
@@ -324,13 +412,11 @@
 mechanism.
 
 core.autocrlf::
-	Setting this variable to "true" is almost the same as setting
-	the `text` attribute to "auto" on all files except that text
-	files are not guaranteed to be normalized: files that contain
-	`CRLF` in the repository will not be touched.  Use this
-	setting if you want to have `CRLF` line endings in your
-	working directory even though the repository does not have
-	normalized line endings.  This variable can be set to 'input',
+	Setting this variable to "true" is the same as setting
+	the `text` attribute to "auto" on all files and core.eol to "crlf".
+	Set to true if you want to have `CRLF` line endings in your
+	working directory and the repository has LF line endings.
+	This variable can be set to 'input',
 	in which case no output conversion is performed.
 
 core.symlinks::
@@ -353,7 +439,7 @@
 	may be set multiple times and is matched in the given order;
 	the first match wins.
 +
-Can be overridden by the 'GIT_PROXY_COMMAND' environment variable
+Can be overridden by the `GIT_PROXY_COMMAND` environment variable
 (which always applies universally, without the special "for"
 handling).
 +
@@ -362,15 +448,27 @@
 This is useful for excluding servers inside a firewall from
 proxy use, while defaulting to a common proxy for external domains.
 
+core.sshCommand::
+	If this variable is set, `git fetch` and `git push` will
+	use the specified command instead of `ssh` when they need to
+	connect to a remote system. The command is in the same form as
+	the `GIT_SSH_COMMAND` environment variable and is overridden
+	when the environment variable is set.
+
 core.ignoreStat::
-	If true, commands which modify both the working tree and the index
-	will mark the updated paths with the "assume unchanged" bit in the
-	index. These marked files are then assumed to stay unchanged in the
-	working tree, until you mark them otherwise manually - Git will not
-	detect the file changes	by lstat() calls. This is useful on systems
-	where those are very slow, such as Microsoft Windows.
-	See linkgit:git-update-index[1].
-	False by default.
+	If true, Git will avoid using lstat() calls to detect if files have
+	changed by setting the "assume-unchanged" bit for those tracked files
+	which it has updated identically in both the index and working tree.
++
+When files are modified outside of Git, the user will need to stage
+the modified files explicitly (e.g. see 'Examples' section in
+linkgit:git-update-index[1]).
+Git will not normally detect changes to those files.
++
+This is useful on systems where lstat() calls are very slow, such as
+CIFS/Microsoft Windows.
++
+False by default.
 
 core.preferSymlinkRefs::
 	Instead of the default "symref" format for HEAD
@@ -392,8 +490,10 @@
 
 core.worktree::
 	Set the path to the root of the working tree.
-	This can be overridden by the GIT_WORK_TREE environment
-	variable and the '--work-tree' command line option.
+	If `GIT_COMMON_DIR` environment variable is set, core.worktree
+	is ignored and not used for determining the root of working tree.
+	This can be overridden by the `GIT_WORK_TREE` environment
+	variable and the `--work-tree` command-line option.
 	The value can be an absolute path or relative to the path to
 	the .git directory, which is either specified by --git-dir
 	or GIT_DIR, or automatically discovered.
@@ -414,10 +514,10 @@
 
 core.logAllRefUpdates::
 	Enable the reflog. Updates to a ref <ref> is logged to the file
-	"$GIT_DIR/logs/<ref>", by appending the new and old
+	"`$GIT_DIR/logs/<ref>`", by appending the new and old
 	SHA-1, the date/time and the reason of the update, but
 	only when the file exists.  If this configuration
-	variable is set to true, missing "$GIT_DIR/logs/<ref>"
+	variable is set to true, missing "`$GIT_DIR/logs/<ref>`"
 	file is automatically created for branch heads (i.e. under
 	refs/heads/), remote refs (i.e. under refs/remotes/),
 	note refs (i.e. under refs/notes/), and the symbolic ref HEAD.
@@ -457,9 +557,9 @@
 	-1 is the zlib default. 0 means no compression,
 	and 1..9 are various speed/size tradeoffs, 9 being slowest.
 	If set, this provides a default to other compression variables,
-	such as 'core.loosecompression' and 'pack.compression'.
+	such as `core.looseCompression` and `pack.compression`.
 
-core.loosecompression::
+core.looseCompression::
 	An integer -1..9, indicating the compression level for objects that
 	are not in a pack file. -1 is the zlib default. 0 means no
 	compression, and 1..9 are various speed/size tradeoffs, 9 being
@@ -501,7 +601,7 @@
 	to avoid unpacking and decompressing frequently used base
 	objects multiple times.
 +
-Default is 16 MiB on all platforms.  This should be reasonable
+Default is 96 MiB on all platforms.  This should be reasonable
 for all users/operating systems, except on the largest projects.
 You probably do not need to adjust this value.
 +
@@ -511,7 +611,8 @@
 	Files larger than this size are stored deflated, without
 	attempting delta compression.  Storing large files without
 	delta compression avoids excessive memory usage, at the
-	slight expense of increased disk usage.
+	slight expense of increased disk usage. Additionally files
+	larger than this size are always treated as binary.
 +
 Default is 512 MiB on all platforms.  This should be reasonable
 for most projects as source code and other text files can still
@@ -519,31 +620,47 @@
 +
 Common unit suffixes of 'k', 'm', or 'g' are supported.
 
-core.excludesfile::
-	In addition to '.gitignore' (per-directory) and
-	'.git/info/exclude', Git looks into this file for patterns
-	of files which are not meant to be tracked.  "`~/`" is expanded
-	to the value of `$HOME` and "`~user/`" to the specified user's
-	home directory. Its default value is $XDG_CONFIG_HOME/git/ignore.
-	If $XDG_CONFIG_HOME is either not set or empty, $HOME/.config/git/ignore
+core.excludesFile::
+	Specifies the pathname to the file that contains patterns to
+	describe paths that are not meant to be tracked, in addition
+	to '.gitignore' (per-directory) and '.git/info/exclude'.
+	Defaults to `$XDG_CONFIG_HOME/git/ignore`.
+	If `$XDG_CONFIG_HOME` is either not set or empty, `$HOME/.config/git/ignore`
 	is used instead. See linkgit:gitignore[5].
 
-core.askpass::
+core.askPass::
 	Some commands (e.g. svn and http interfaces) that interactively
 	ask for a password can be told to use an external program given
-	via the value of this variable. Can be overridden by the 'GIT_ASKPASS'
+	via the value of this variable. Can be overridden by the `GIT_ASKPASS`
 	environment variable. If not set, fall back to the value of the
-	'SSH_ASKPASS' environment variable or, failing that, a simple password
+	`SSH_ASKPASS` environment variable or, failing that, a simple password
 	prompt. The external program shall be given a suitable prompt as
-	command line argument and write the password on its STDOUT.
+	command-line argument and write the password on its STDOUT.
 
-core.attributesfile::
+core.attributesFile::
 	In addition to '.gitattributes' (per-directory) and
 	'.git/info/attributes', Git looks into this file for attributes
 	(see linkgit:gitattributes[5]). Path expansions are made the same
-	way as for `core.excludesfile`. Its default value is
-	$XDG_CONFIG_HOME/git/attributes. If $XDG_CONFIG_HOME is either not
-	set or empty, $HOME/.config/git/attributes is used instead.
+	way as for `core.excludesFile`. Its default value is
+	`$XDG_CONFIG_HOME/git/attributes`. If `$XDG_CONFIG_HOME` is either not
+	set or empty, `$HOME/.config/git/attributes` is used instead.
+
+core.hooksPath::
+	By default Git will look for your hooks in the
+	'$GIT_DIR/hooks' directory. Set this to different path,
+	e.g. '/etc/git/hooks', and Git will try to find your hooks in
+	that directory, e.g. '/etc/git/hooks/pre-receive' instead of
+	in '$GIT_DIR/hooks/pre-receive'.
++
+The path can be either absolute or relative. A relative path is
+taken as relative to the directory where the hooks are run (see
+the "DESCRIPTION" section of linkgit:githooks[5]).
++
+This configuration variable is useful in cases where you'd like to
+centrally configure your Git hooks instead of configuring them on a
+per-repository basis, or as a more flexible and centralized
+alternative to having an `init.templateDir` where you've changed
+default hooks.
 
 core.editor::
 	Commands such as `commit` and `tag` that lets you edit
@@ -551,11 +668,20 @@
 	variable when it is set, and the environment variable
 	`GIT_EDITOR` is not set.  See linkgit:git-var[1].
 
-core.commentchar::
+core.commentChar::
 	Commands such as `commit` and `tag` that lets you edit
 	messages consider a line that begins with this character
 	commented, and removes them after the editor returns
 	(default '#').
++
+If set to "auto", `git-commit` would select a character that is not
+the beginning character of any line in existing commit messages.
+
+core.packedRefsTimeout::
+	The length of time, in milliseconds, to retry when trying to
+	lock the `packed-refs` file. Value 0 means not to retry at
+	all; -1 means to try indefinitely. Default is 1000 (i.e.,
+	retry for 1 second).
 
 sequence.editor::
 	Text editor used by `git rebase -i` for editing the rebase instruction file.
@@ -570,14 +696,19 @@
 	configuration, then `$PAGER`, and then the default chosen at
 	compile time (usually 'less').
 +
-When the `LESS` environment variable is unset, Git sets it to `FRSX`
+When the `LESS` environment variable is unset, Git sets it to `FRX`
 (if `LESS` environment variable is set, Git does not change it at
 all).  If you want to selectively override Git's default setting
-for `LESS`, you can set `core.pager` to e.g. `less -+S`.  This will
+for `LESS`, you can set `core.pager` to e.g. `less -S`.  This will
 be passed to the shell by Git, which will translate the final
-command to `LESS=FRSX less -+S`. The environment tells the command
-to set the `S` option to chop long lines but the command line
-resets it to the default to fold long lines.
+command to `LESS=FRX less -S`. The environment does not set the
+`S` option but the command line does, instructing less to truncate
+long lines. Similarly, setting `core.pager` to `less -+F` will
+deactivate the `F` option specified by the environment from the
+command-line, deactivating the "quit if one screen" behavior of
+`less`.  One can specifically activate some flags for particular
+commands: for example, setting `pager.blame` to `less -S` enables
+line truncation only for `git blame`.
 +
 Likewise, when the `LV` environment variable is unset, Git sets it
 to `-c`.  You can override this setting by exporting `LV` with
@@ -612,7 +743,7 @@
   is relevant for `indent-with-non-tab` and when Git fixes `tab-in-indent`
   errors. The default tab width is 8. Allowed values are 1 to 63.
 
-core.fsyncobjectfiles::
+core.fsyncObjectFiles::
 	This boolean will enable 'fsync()' when writing object files.
 +
 This is a total waste of time and effort on a filesystem that orders
@@ -620,14 +751,14 @@
 journalling (traditional UNIX filesystems) or that only journal metadata
 and not file contents (OS X's HFS+, or Linux ext3 with "data=writeback").
 
-core.preloadindex::
+core.preloadIndex::
 	Enable parallel index preload for operations like 'git diff'
 +
 This can speed up operations like 'git diff' and 'git status' especially
 on filesystems like NFS that have weak caching semantics and thus
-relatively high IO latencies.  With this set to 'true', Git will do the
+relatively high IO latencies.  When enabled, Git will do the
 index comparison to the filesystem data in parallel, allowing
-overlapping IO's.
+overlapping IO's.  Defaults to true.
 
 core.createObject::
 	You can set this to 'link', in which case a hardlink followed by
@@ -645,7 +776,7 @@
 	notes should be printed.
 +
 This setting defaults to "refs/notes/commits", and it can be overridden by
-the 'GIT_NOTES_REF' environment variable.  See linkgit:git-notes[1].
+the `GIT_NOTES_REF` environment variable.  See linkgit:git-notes[1].
 
 core.sparseCheckout::
 	Enable "sparse checkout" feature. See section "Sparse checkout" in
@@ -657,14 +788,13 @@
 	for abbreviated object names to stay unique for sufficiently long
 	time.
 
-add.ignore-errors::
 add.ignoreErrors::
+add.ignore-errors (deprecated)::
 	Tells 'git add' to continue adding files when some files cannot be
-	added due to indexing errors. Equivalent to the '--ignore-errors'
-	option of linkgit:git-add[1].  Older versions of Git accept only
-	`add.ignore-errors`, which does not follow the usual naming
-	convention for configuration variables.  Newer versions of Git
-	honor `add.ignoreErrors` as well.
+	added due to indexing errors. Equivalent to the `--ignore-errors`
+	option of linkgit:git-add[1].  `add.ignore-errors` is deprecated,
+	as it does not follow the usual naming convention for configuration
+	variables.
 
 alias.*::
 	Command aliases for the linkgit:git[1] command wrapper - e.g.
@@ -673,7 +803,7 @@
 	confusion and troubles with script usage, aliases that
 	hide existing Git commands are ignored. Arguments are split by
 	spaces, the usual shell quoting and escaping is supported.
-	quote pair and a backslash can be used to quote them.
+	A quote pair or a backslash can be used to quote them.
 +
 If the alias expansion is prefixed with an exclamation point,
 it will be treated as a shell command.  For example, defining
@@ -682,19 +812,27 @@
 "gitk --all --not ORIG_HEAD".  Note that shell commands will be
 executed from the top-level directory of a repository, which may
 not necessarily be the current directory.
-'GIT_PREFIX' is set as returned by running 'git rev-parse --show-prefix'
+`GIT_PREFIX` is set as returned by running 'git rev-parse --show-prefix'
 from the original current directory. See linkgit:git-rev-parse[1].
 
 am.keepcr::
 	If true, git-am will call git-mailsplit for patches in mbox format
-	with parameter '--keep-cr'. In this case git-mailsplit will
+	with parameter `--keep-cr`. In this case git-mailsplit will
 	not remove `\r` from lines ending with `\r\n`. Can be overridden
-	by giving '--no-keep-cr' from the command line.
+	by giving `--no-keep-cr` from the command line.
 	See linkgit:git-am[1], linkgit:git-mailsplit[1].
 
-apply.ignorewhitespace::
+am.threeWay::
+	By default, `git am` will fail if the patch does not apply cleanly. When
+	set to true, this setting tells `git am` to fall back on 3-way merge if
+	the patch records the identity of blobs it is supposed to apply to and
+	we have those blobs available locally (equivalent to giving the `--3way`
+	option from the command line). Defaults to `false`.
+	See linkgit:git-am[1].
+
+apply.ignoreWhitespace::
 	When set to 'change', tells 'git apply' to ignore changes in
-	whitespace, in the same way as the '--ignore-space-change'
+	whitespace, in the same way as the `--ignore-space-change`
 	option.
 	When set to one of: no, none, never, false tells 'git apply' to
 	respect all whitespace differences.
@@ -702,9 +840,9 @@
 
 apply.whitespace::
 	Tells 'git apply' how to handle whitespaces, in the same way
-	as the '--whitespace' option. See linkgit:git-apply[1].
+	as the `--whitespace` option. See linkgit:git-apply[1].
 
-branch.autosetupmerge::
+branch.autoSetupMerge::
 	Tells 'git branch' and 'git checkout' to set up new branches
 	so that linkgit:git-pull[1] will appropriately merge from the
 	starting point branch. Note that even if this option is not set,
@@ -716,7 +854,7 @@
 	local branch or remote-tracking
 	branch. This option defaults to true.
 
-branch.autosetuprebase::
+branch.autoSetupRebase::
 	When a new branch is created with 'git branch' or 'git checkout'
 	that tracks another branch, this variable tells Git to set
 	up pull to rebase instead of merge (see "branch.<name>.rebase").
@@ -727,27 +865,27 @@
 	remote-tracking branches.
 	When `always`, rebase will be set to true for all tracking
 	branches.
-	See "branch.autosetupmerge" for details on how to set up a
+	See "branch.autoSetupMerge" for details on how to set up a
 	branch to track another branch.
 	This option defaults to never.
 
 branch.<name>.remote::
 	When on branch <name>, it tells 'git fetch' and 'git push'
 	which remote to fetch from/push to.  The remote to push to
-	may be overridden with `remote.pushdefault` (for all branches).
+	may be overridden with `remote.pushDefault` (for all branches).
 	The remote to push to, for the current branch, may be further
-	overridden by `branch.<name>.pushremote`.  If no remote is
+	overridden by `branch.<name>.pushRemote`.  If no remote is
 	configured, or if you are not on any branch, it defaults to
-	`origin` for fetching and `remote.pushdefault` for pushing.
+	`origin` for fetching and `remote.pushDefault` for pushing.
 	Additionally, `.` (a period) is the current local repository
 	(a dot-repository), see `branch.<name>.merge`'s final note below.
 
-branch.<name>.pushremote::
+branch.<name>.pushRemote::
 	When on branch <name>, it overrides `branch.<name>.remote` for
-	pushing.  It also overrides `remote.pushdefault` for pushing
+	pushing.  It also overrides `remote.pushDefault` for pushing
 	from branch <name>.  When you pull from one place (e.g. your
 	upstream) and push to another place (e.g. your own publishing
-	repository), you would want to set `remote.pushdefault` to
+	repository), you would want to set `remote.pushDefault` to
 	specify the remote to push to for all branches, and use this
 	option to override it for a specific branch.
 
@@ -769,7 +907,7 @@
 	branch.<name>.merge to the desired branch, and use the relative path
 	setting `.` (a period) for branch.<name>.remote.
 
-branch.<name>.mergeoptions::
+branch.<name>.mergeOptions::
 	Sets default options for merging into branch <name>. The syntax and
 	supported options are the same as those of linkgit:git-merge[1], but
 	option values containing whitespace characters are currently not
@@ -781,9 +919,11 @@
 	"git pull" is run. See "pull.rebase" for doing this in a non
 	branch-specific manner.
 +
-	When preserve, also pass `--preserve-merges` along to 'git rebase'
-	so that locally committed merge commits will not be flattened
-	by running 'git pull'.
+When preserve, also pass `--preserve-merges` along to 'git rebase'
+so that locally committed merge commits will not be flattened
+by running 'git pull'.
++
+When the value is `interactive`, the rebase is run in interactive mode.
 +
 *NOTE*: this is a possibly dangerous operation; do *not* use
 it unless you understand the implications (see linkgit:git-rebase[1]
@@ -802,7 +942,7 @@
 
 browser.<tool>.path::
 	Override the path for the given tool that may be used to
-	browse HTML help (see '-w' option in linkgit:git-help[1]) or a
+	browse HTML help (see `-w` option in linkgit:git-help[1]) or a
 	working repository in gitweb (see linkgit:git-instaweb[1]).
 
 clean.requireForce::
@@ -813,7 +953,8 @@
 	A boolean to enable/disable color in the output of
 	linkgit:git-branch[1]. May be set to `always`,
 	`false` (or `never`) or `auto` (or `true`), in which case colors are used
-	only when the output is to a terminal. Defaults to false.
+	only when the output is to a terminal. If unset, then the
+	value of `color.ui` is used (`auto` by default).
 
 color.branch.<slot>::
 	Use customized color for branch coloration. `<slot>` is one of
@@ -821,14 +962,6 @@
 	`remote` (a remote-tracking branch in refs/remotes/),
 	`upstream` (upstream tracking branch), `plain` (other
 	refs).
-+
-The value for these configuration variables is a list of colors (at most
-two) and attributes (at most one), separated by spaces.  The colors
-accepted are `normal`, `black`, `red`, `green`, `yellow`, `blue`,
-`magenta`, `cyan` and `white`; the attributes are `bold`, `dim`, `ul`,
-`blink` and `reverse`.  The first color given is the foreground; the
-second is the background.  The position of the attribute, if any,
-doesn't matter.
 
 color.diff::
 	Whether to use ANSI escape sequences to add color to patches.
@@ -836,20 +969,21 @@
 	linkgit:git-log[1], and linkgit:git-show[1] will use color
 	for all patches.  If it is set to `true` or `auto`, those
 	commands will only use color when output is to the terminal.
-	Defaults to false.
+	If unset, then the value of `color.ui` is used (`auto` by
+	default).
 +
-This does not affect linkgit:git-format-patch[1] nor the
+This does not affect linkgit:git-format-patch[1] or the
 'git-diff-{asterisk}' plumbing commands.  Can be overridden on the
 command line with the `--color[=<when>]` option.
 
 color.diff.<slot>::
 	Use customized color for diff colorization.  `<slot>` specifies
 	which part of the patch to use the specified color, and is one
-	of `plain` (context text), `meta` (metainformation), `frag`
+	of `context` (context text - `plain` is a historical synonym),
+	`meta` (metainformation), `frag`
 	(hunk header), 'func' (function in hunk header), `old` (removed lines),
 	`new` (added lines), `commit` (commit headers), or `whitespace`
-	(highlighting whitespace errors). The values of these variables may be
-	specified as in color.branch.<slot>.
+	(highlighting whitespace errors).
 
 color.decorate.<slot>::
 	Use customized color for 'git log --decorate' output.  `<slot>` is one
@@ -859,7 +993,8 @@
 color.grep::
 	When set to `always`, always highlight matches.  When `false` (or
 	`never`), never.  When set to `true` or `auto`, use color only
-	when the output is written to the terminal.  Defaults to `false`.
+	when the output is written to the terminal.  If unset, then the
+	value of `color.ui` is used (`auto` by default).
 
 color.grep.<slot>::
 	Use customized color for grep colorization.  `<slot>` specifies which
@@ -875,45 +1010,49 @@
 `linenumber`;;
 	line number prefix (when using `-n`)
 `match`;;
-	matching text
+	matching text (same as setting `matchContext` and `matchSelected`)
+`matchContext`;;
+	matching text in context lines
+`matchSelected`;;
+	matching text in selected lines
 `selected`;;
 	non-matching text in selected lines
 `separator`;;
 	separators between fields on a line (`:`, `-`, and `=`)
 	and between hunks (`--`)
 --
-+
-The values of these variables may be specified as in color.branch.<slot>.
 
 color.interactive::
 	When set to `always`, always use colors for interactive prompts
 	and displays (such as those used by "git-add --interactive" and
 	"git-clean --interactive"). When false (or `never`), never.
 	When set to `true` or `auto`, use colors only when the output is
-	to the terminal. Defaults to false.
+	to the terminal. If unset, then the value of `color.ui` is
+	used (`auto` by default).
 
 color.interactive.<slot>::
 	Use customized color for 'git add --interactive' and 'git clean
 	--interactive' output. `<slot>` may be `prompt`, `header`, `help`
 	or `error`, for four distinct types of normal output from
-	interactive commands.  The values of these variables may be
-	specified as in color.branch.<slot>.
+	interactive commands.
 
 color.pager::
 	A boolean to enable/disable colored output when the pager is in
 	use (default is true).
 
-color.showbranch::
+color.showBranch::
 	A boolean to enable/disable color in the output of
 	linkgit:git-show-branch[1]. May be set to `always`,
 	`false` (or `never`) or `auto` (or `true`), in which case colors are used
-	only when the output is to a terminal. Defaults to false.
+	only when the output is to a terminal. If unset, then the
+	value of `color.ui` is used (`auto` by default).
 
 color.status::
 	A boolean to enable/disable color in the output of
 	linkgit:git-status[1]. May be set to `always`,
 	`false` (or `never`) or `auto` (or `true`), in which case colors are used
-	only when the output is to a terminal. Defaults to false.
+	only when the output is to a terminal. If unset, then the
+	value of `color.ui` is used (`auto` by default).
 
 color.status.<slot>::
 	Use customized color for status colorization. `<slot>` is
@@ -921,10 +1060,10 @@
 	`added` or `updated` (files which are added but not committed),
 	`changed` (files which are changed but not added in the index),
 	`untracked` (files which are not tracked by Git),
-	`branch` (the current branch), or
+	`branch` (the current branch),
 	`nobranch` (the color the 'no branch' warning is shown in, defaulting
-	to red). The values of these variables may be specified as in
-	color.branch.<slot>.
+	to red), or
+	`unmerged` (files which have unmerged changes).
 
 color.ui::
 	This variable determines the default value for variables such
@@ -1003,21 +1142,33 @@
 	have to remove the help lines that begin with `#` in the commit log
 	template yourself, if you do this).
 
+commit.gpgSign::
+
+	A boolean to specify whether all commits should be GPG signed.
+	Use of this option when doing operations such as rebase can
+	result in a large number of commits being signed. It may be
+	convenient to use an agent to avoid typing your GPG passphrase
+	several times.
+
 commit.status::
 	A boolean to enable/disable inclusion of status information in the
 	commit message template when using an editor to prepare the commit
 	message.  Defaults to true.
 
 commit.template::
-	Specify a file to use as the template for new commit messages.
-	"`~/`" is expanded to the value of `$HOME` and "`~user/`" to the
-	specified user's home directory.
+	Specify the pathname of a file to use as the template for
+	new commit messages.
+
+commit.verbose::
+	A boolean or int to specify the level of verbose with `git commit`.
+	See linkgit:git-commit[1].
 
 credential.helper::
 	Specify an external helper to be called when a username or
 	password credential is needed; the helper may consult external
-	storage to avoid prompting the user for the credentials. See
-	linkgit:gitcredentials[7] for details.
+	storage to avoid prompting the user for the credentials. Note
+	that multiple helpers may be defined. See linkgit:gitcredentials[7]
+	for details.
 
 credential.useHttpPath::
 	When acquiring credentials, consider the "path" component of an http
@@ -1036,6 +1187,9 @@
 	example.com. See linkgit:gitcredentials[7] for details on how URLs are
 	matched.
 
+credentialCache.ignoreSIGHUP::
+	Tell git-credential-cache--daemon to ignore SIGHUP, instead of quitting.
+
 include::diff-config.txt[]
 
 difftool.<tool>.path::
@@ -1053,6 +1207,15 @@
 difftool.prompt::
 	Prompt before each invocation of the diff tool.
 
+fastimport.unpackLimit::
+	If the number of objects imported by linkgit:git-fast-import[1]
+	is below this limit, then the objects will be unpacked into
+	loose object files.  However if the number of imported objects
+	equals or exceeds this limit then the pack will be stored as a
+	pack.  Storing the pack from a fast-import can make the import
+	operation complete faster, especially on slow filesystems.  If
+	not set, the value of `transfer.unpackLimit` is used instead.
+
 fetch.recurseSubmodules::
 	This option can be either set to a boolean value or to 'on-demand'.
 	Setting it to a boolean changes the behavior of fetch and pull to
@@ -1084,6 +1247,11 @@
 	If true, fetch will automatically behave as if the `--prune`
 	option was given on the command line.  See also `remote.<name>.prune`.
 
+fetch.output::
+	Control how ref update status is printed. Valid values are
+	`full` and `compact`. Default value is `full`. See section
+	OUTPUT in linkgit:git-fetch[1] for detail.
+
 format.attach::
 	Enable multipart/mixed attachments as the default for
 	'format-patch'.  The value can also be a double quoted string
@@ -1091,6 +1259,16 @@
 	value as the boundary.  See the --attach option in
 	linkgit:git-format-patch[1].
 
+format.from::
+	Provides the default value for the `--from` option to format-patch.
+	Accepts a boolean value, or a name and email address.  If false,
+	format-patch defaults to `--no-from`, using commit authors directly in
+	the "From:" field of patch mails.  If true, format-patch defaults to
+	`--from`, using your committer identity in the "From:" field of patch
+	mails and including a "From:" field in the body of the patch mail if
+	different.  If set to a non-boolean value, format-patch uses that
+	value instead of your committer identity.  Defaults to false.
+
 format.numbered::
 	A boolean which can enable or disable sequence numbers in patch
 	subjects.  It defaults to "auto" which enables it only if there
@@ -1108,7 +1286,7 @@
 	by mail.  See the --to and --cc options in
 	linkgit:git-format-patch[1].
 
-format.subjectprefix::
+format.subjectPrefix::
 	The default for format-patch is to output files with the '[PATCH]'
 	subject prefix. Use this variable to change that prefix.
 
@@ -1118,6 +1296,10 @@
 	Set this variable to the empty string ("") to suppress
 	signature generation.
 
+format.signatureFile::
+	Works just like format.signature except the contents of the
+	file specified by this variable will be used as the signature.
+
 format.suffix::
 	The default for format-patch is to output files with the suffix
 	`.patch`. Use this variable to change that suffix (make sure to
@@ -1138,7 +1320,7 @@
 	A true boolean value is the same as `shallow`, and a false
 	value disables threading.
 
-format.signoff::
+format.signOff::
 	A boolean value which lets you enable the `-s/--signoff` option of
 	format-patch by default. *Note:* Adding the Signed-off-by: line to a
 	patch should be a conscious act and means that you certify you have
@@ -1150,6 +1332,14 @@
 	format-patch is invoked, but in addition can be set to "auto", to
 	generate a cover-letter only when there's more than one patch.
 
+format.outputDirectory::
+	Set a custom directory to store the resulting files instead of the
+	current working directory.
+
+format.useAutoBase::
+	A boolean value which lets you enable the `--base=auto` option of
+	format-patch by default.
+
 filter.<driver>.clean::
 	The command which is used to convert the content of a worktree
 	file to a blob upon checkin.  See linkgit:gitattributes[5] for
@@ -1160,6 +1350,30 @@
 	object to a worktree file upon checkout.  See
 	linkgit:gitattributes[5] for details.
 
+fsck.<msg-id>::
+	Allows overriding the message type (error, warn or ignore) of a
+	specific message ID such as `missingEmail`.
++
+For convenience, fsck prefixes the error/warning with the message ID,
+e.g.  "missingEmail: invalid author/committer line - missing email" means
+that setting `fsck.missingEmail = ignore` will hide that issue.
++
+This feature is intended to support working with legacy repositories
+which cannot be repaired without disruptive changes.
+
+fsck.skipList::
+	The path to a sorted list of object names (i.e. one SHA-1 per
+	line) that are known to be broken in a non-fatal way and should
+	be ignored. This feature is useful when an established project
+	should be accepted despite early commits containing errors that
+	can be safely ignored such as invalid committer email addresses.
+	Note: corrupt objects cannot be skipped with this setting.
+
+gc.aggressiveDepth::
+	The depth parameter used in the delta compression
+	algorithm used by 'git gc --aggressive'.  This defaults
+	to 50.
+
 gc.aggressiveWindow::
 	The window size parameter used in the delta compression
 	algorithm used by 'git gc --aggressive'.  This defaults
@@ -1172,13 +1386,17 @@
 	light-weight garbage collection from time to time.  The
 	default value is 6700.  Setting this to 0 disables it.
 
-gc.autopacklimit::
+gc.autoPackLimit::
 	When there are more than this many packs that are not
 	marked with `*.keep` file in the repository, `git gc
 	--auto` consolidates them into one larger pack.  The
 	default	value is 50.  Setting this to 0 disables it.
 
-gc.packrefs::
+gc.autoDetach::
+	Make `git gc --auto` return immediately and run in background
+	if the system supports it. Default is true.
+
+gc.packRefs::
 	Running `git pack-refs` in a repository renders it
 	unclonable by Git versions prior to 1.5.1.2 over dumb
 	transports such as HTTP.  This variable determines whether
@@ -1186,38 +1404,51 @@
 	to enable it within all non-bare repos or it can be set to a
 	boolean value.  The default is `true`.
 
-gc.pruneexpire::
+gc.pruneExpire::
 	When 'git gc' is run, it will call 'prune --expire 2.weeks.ago'.
 	Override the grace period with this config variable.  The value
-	"now" may be used to disable this  grace period and always prune
-	unreachable objects immediately.
+	"now" may be used to disable this grace period and always prune
+	unreachable objects immediately, or "never" may be used to
+	suppress pruning.
+
+gc.worktreePruneExpire::
+	When 'git gc' is run, it calls
+	'git worktree prune --expire 3.months.ago'.
+	This config variable can be used to set a different grace
+	period. The value "now" may be used to disable the grace
+	period and prune `$GIT_DIR/worktrees` immediately, or "never"
+	may be used to suppress pruning.
 
-gc.reflogexpire::
-gc.<pattern>.reflogexpire::
+gc.reflogExpire::
+gc.<pattern>.reflogExpire::
 	'git reflog expire' removes reflog entries older than
-	this time; defaults to 90 days.  With "<pattern>" (e.g.
+	this time; defaults to 90 days. The value "now" expires all
+	entries immediately, and "never" suppresses expiration
+	altogether. With "<pattern>" (e.g.
 	"refs/stash") in the middle the setting applies only to
 	the refs that match the <pattern>.
 
-gc.reflogexpireunreachable::
-gc.<ref>.reflogexpireunreachable::
+gc.reflogExpireUnreachable::
+gc.<pattern>.reflogExpireUnreachable::
 	'git reflog expire' removes reflog entries older than
 	this time and are not reachable from the current tip;
-	defaults to 30 days.  With "<pattern>" (e.g. "refs/stash")
+	defaults to 30 days. The value "now" expires all entries
+	immediately, and "never" suppresses expiration altogether.
+	With "<pattern>" (e.g. "refs/stash")
 	in the middle, the setting applies only to the refs that
 	match the <pattern>.
 
-gc.rerereresolved::
+gc.rerereResolved::
 	Records of conflicted merge you resolved earlier are
 	kept for this many days when 'git rerere gc' is run.
 	The default is 60 days.  See linkgit:git-rerere[1].
 
-gc.rerereunresolved::
+gc.rerereUnresolved::
 	Records of conflicted merge you have not resolved are
 	kept for this many days when 'git rerere gc' is run.
 	The default is 15 days.  See linkgit:git-rerere[1].
 
-gitcvs.commitmsgannotation::
+gitcvs.commitMsgAnnotation::
 	Append this string to each commit message. Set to empty string
 	to disable this feature. Defaults to "via git-CVS emulator".
 
@@ -1225,32 +1456,32 @@
 	Whether the CVS server interface is enabled for this repository.
 	See linkgit:git-cvsserver[1].
 
-gitcvs.logfile::
+gitcvs.logFile::
 	Path to a log file where the CVS server interface well... logs
 	various stuff. See linkgit:git-cvsserver[1].
 
 gitcvs.usecrlfattr::
 	If true, the server will look up the end-of-line conversion
-	attributes for files to determine the '-k' modes to use. If
+	attributes for files to determine the `-k` modes to use. If
 	the attributes force Git to treat a file as text,
-	the '-k' mode will be left blank so CVS clients will
+	the `-k` mode will be left blank so CVS clients will
 	treat it as text. If they suppress text conversion, the file
 	will be set with '-kb' mode, which suppresses any newline munging
 	the client might otherwise do. If the attributes do not allow
-	the file type to be determined, then 'gitcvs.allbinary' is
+	the file type to be determined, then `gitcvs.allBinary` is
 	used. See linkgit:gitattributes[5].
 
-gitcvs.allbinary::
-	This is used if 'gitcvs.usecrlfattr' does not resolve
+gitcvs.allBinary::
+	This is used if `gitcvs.usecrlfattr` does not resolve
 	the correct '-kb' mode to use. If true, all
 	unresolved files are sent to the client in
 	mode '-kb'. This causes the client to treat them
 	as binary files, which suppresses any newline munging it
 	otherwise might do. Alternatively, if it is set to "guess",
 	then the contents of the file are examined to decide if
-	it is binary, similar to 'core.autocrlf'.
+	it is binary, similar to `core.autocrlf`.
 
-gitcvs.dbname::
+gitcvs.dbName::
 	Database used by git-cvsserver to cache revision information
 	derived from the Git repository. The exact meaning depends on the
 	used database driver, for SQLite (which is the default driver) this
@@ -1258,7 +1489,7 @@
 	linkgit:git-cvsserver[1] for details). May not contain semicolons (`;`).
 	Default: '%Ggitcvs.%m.sqlite'
 
-gitcvs.dbdriver::
+gitcvs.dbDriver::
 	Used Perl DBI driver. You can specify any available driver
 	for this here, but it might not work. git-cvsserver is tested
 	with 'DBD::SQLite', reported to work with 'DBD::Pg', and
@@ -1266,10 +1497,10 @@
 	May not contain double colons (`:`). Default: 'SQLite'.
 	See linkgit:git-cvsserver[1].
 
-gitcvs.dbuser, gitcvs.dbpass::
-	Database user and password. Only useful if setting 'gitcvs.dbdriver',
+gitcvs.dbUser, gitcvs.dbPass::
+	Database user and password. Only useful if setting `gitcvs.dbDriver`,
 	since SQLite has no concept of database users and/or passwords.
-	'gitcvs.dbuser' supports variable substitution (see
+	'gitcvs.dbUser' supports variable substitution (see
 	linkgit:git-cvsserver[1] for details).
 
 gitcvs.dbTableNamePrefix::
@@ -1279,8 +1510,8 @@
 	linkgit:git-cvsserver[1] for details).  Any non-alphabetic
 	characters will be replaced with underscores.
 
-All gitcvs variables except for 'gitcvs.usecrlfattr' and
-'gitcvs.allbinary' can also be specified as
+All gitcvs variables except for `gitcvs.usecrlfattr` and
+`gitcvs.allBinary` can also be specified as
 'gitcvs.<access_method>.<varname>' (where 'access_method'
 is one of "ext" and "pserver") to make them apply only for the given
 access method.
@@ -1298,43 +1529,55 @@
 gitweb.patches::
 gitweb.pickaxe::
 gitweb.remote_heads::
-gitweb.showsizes::
+gitweb.showSizes::
 gitweb.snapshot::
 	See linkgit:gitweb.conf[5] for description.
 
 grep.lineNumber::
-	If set to true, enable '-n' option by default.
+	If set to true, enable `-n` option by default.
 
 grep.patternType::
 	Set the default matching behavior. Using a value of 'basic', 'extended',
-	'fixed', or 'perl' will enable the '--basic-regexp', '--extended-regexp',
-	'--fixed-strings', or '--perl-regexp' option accordingly, while the
+	'fixed', or 'perl' will enable the `--basic-regexp`, `--extended-regexp`,
+	`--fixed-strings`, or `--perl-regexp` option accordingly, while the
 	value 'default' will return to the default matching behavior.
 
 grep.extendedRegexp::
-	If set to true, enable '--extended-regexp' option by default. This
-	option is ignored when the 'grep.patternType' option is set to a value
+	If set to true, enable `--extended-regexp` option by default. This
+	option is ignored when the `grep.patternType` option is set to a value
 	other than 'default'.
 
+grep.threads::
+	Number of grep worker threads to use.
+	See `grep.threads` in linkgit:git-grep[1] for more information.
+
+grep.fallbackToNoIndex::
+	If set to true, fall back to git grep --no-index if git grep
+	is executed outside of a git repository.  Defaults to false.
+
 gpg.program::
-	Use this custom program instead of "gpg" found on $PATH when
+	Use this custom program instead of "`gpg`" found on `$PATH` when
 	making or verifying a PGP signature. The program must support the
-	same command line interface as GPG, namely, to verify a detached
-	signature, "gpg --verify $file - <$signature" is run, and the
+	same command-line interface as GPG, namely, to verify a detached
+	signature, "`gpg --verify $file - <$signature`" is run, and the
 	program is expected to signal a good signature by exiting with
-	code 0, and to generate an ascii-armored detached signature, the
-	standard input of "gpg -bsau $key" is fed with the contents to be
+	code 0, and to generate an ASCII-armored detached signature, the
+	standard input of "`gpg -bsau $key`" is fed with the contents to be
 	signed, and the program is expected to send the result to its
 	standard output.
 
-gui.commitmsgwidth::
+gui.commitMsgWidth::
 	Defines how wide the commit message window is in the
 	linkgit:git-gui[1]. "75" is the default.
 
-gui.diffcontext::
+gui.diffContext::
 	Specifies how many context lines should be used in calls to diff
 	made by the linkgit:git-gui[1]. The default is "5".
 
+gui.displayUntracked::
+	Determines if linkgit:git-gui[1] shows untracked files
+	in the file list. The default is "true".
+
 gui.encoding::
 	Specifies the default encoding to use for displaying of
 	file contents in linkgit:git-gui[1] and linkgit:gitk[1].
@@ -1343,16 +1586,16 @@
 	If this option is not set, the tools default to the
 	locale encoding.
 
-gui.matchtrackingbranch::
+gui.matchTrackingBranch::
 	Determines if new branches created with linkgit:git-gui[1] should
 	default to tracking remote branches with matching names or
 	not. Default: "false".
 
-gui.newbranchtemplate::
+gui.newBranchTemplate::
 	Is used as suggested name when creating new branches using the
 	linkgit:git-gui[1].
 
-gui.pruneduringfetch::
+gui.pruneDuringFetch::
 	"true" if linkgit:git-gui[1] should prune remote-tracking branches when
 	performing a fetch. The default value is "false".
 
@@ -1360,17 +1603,17 @@
 	Determines if linkgit:git-gui[1] should trust the file modification
 	timestamp or not. By default the timestamps are not trusted.
 
-gui.spellingdictionary::
+gui.spellingDictionary::
 	Specifies the dictionary used for spell checking commit messages in
 	the linkgit:git-gui[1]. When set to "none" spell checking is turned
 	off.
 
-gui.fastcopyblame::
+gui.fastCopyBlame::
 	If true, 'git gui blame' uses `-C` instead of `-C -C` for original
 	location detection. It makes blame significantly faster on huge
 	repositories at the expense of less thorough copy detection.
 
-gui.copyblamethreshold::
+gui.copyBlameThreshold::
 	Specifies the threshold to use in 'git gui blame' original location
 	detection, measured in alphanumeric characters. See the
 	linkgit:git-blame[1] manual for more information on copy detection.
@@ -1386,40 +1629,40 @@
 	of the linkgit:git-gui[1] `Tools` menu is invoked. This option is
 	mandatory for every tool. The command is executed from the root of
 	the working directory, and in the environment it receives the name of
-	the tool as 'GIT_GUITOOL', the name of the currently selected file as
+	the tool as `GIT_GUITOOL`, the name of the currently selected file as
 	'FILENAME', and the name of the current branch as 'CUR_BRANCH' (if
 	the head is detached, 'CUR_BRANCH' is empty).
 
-guitool.<name>.needsfile::
+guitool.<name>.needsFile::
 	Run the tool only if a diff is selected in the GUI. It guarantees
 	that 'FILENAME' is not empty.
 
-guitool.<name>.noconsole::
+guitool.<name>.noConsole::
 	Run the command silently, without creating a window to display its
 	output.
 
-guitool.<name>.norescan::
+guitool.<name>.noRescan::
 	Don't rescan the working directory for changes after the tool
 	finishes execution.
 
 guitool.<name>.confirm::
 	Show a confirmation dialog before actually running the tool.
 
-guitool.<name>.argprompt::
+guitool.<name>.argPrompt::
 	Request a string argument from the user, and pass it to the tool
-	through the 'ARGS' environment variable. Since requesting an
+	through the `ARGS` environment variable. Since requesting an
 	argument implies confirmation, the 'confirm' option has no effect
 	if this is enabled. If the option is set to 'true', 'yes', or '1',
 	the dialog uses a built-in generic prompt; otherwise the exact
 	value of the variable is used.
 
-guitool.<name>.revprompt::
+guitool.<name>.revPrompt::
 	Request a single valid revision from the user, and set the
-	'REVISION' environment variable. In other aspects this option
-	is similar to 'argprompt', and can be used together with it.
+	`REVISION` environment variable. In other aspects this option
+	is similar to 'argPrompt', and can be used together with it.
 
-guitool.<name>.revunmerged::
-	Show only unmerged branches in the 'revprompt' subdialog.
+guitool.<name>.revUnmerged::
+	Show only unmerged branches in the 'revPrompt' subdialog.
 	This is useful for tools similar to merge or rebase, but not
 	for things like checkout or reset.
 
@@ -1429,7 +1672,7 @@
 
 guitool.<name>.prompt::
 	Specifies the general prompt string to display at the top of
-	the dialog, before subsections for 'argprompt' and 'revprompt'.
+	the dialog, before subsections for 'argPrompt' and 'revPrompt'.
 	The default value includes the actual command.
 
 help.browser::
@@ -1441,7 +1684,7 @@
 	Values 'man', 'info', 'web' and 'html' are supported. 'man' is
 	the default. 'web' and 'html' are the same.
 
-help.autocorrect::
+help.autoCorrect::
 	Automatically correct and execute mistyped commands after
 	waiting for the given number of deciseconds (0.1 sec). If more
 	than one command can be deduced from the entered text, nothing
@@ -1450,7 +1693,7 @@
 	value is 0 - the command will be just shown but not executed.
 	This is the default.
 
-help.htmlpath::
+help.htmlPath::
 	Specify the path where the HTML documentation resides. File system paths
 	and URLs are supported. HTML pages will be prefixed with this path when
 	help is displayed in the 'web' format. This defaults to the documentation
@@ -1458,52 +1701,134 @@
 
 http.proxy::
 	Override the HTTP proxy, normally configured using the 'http_proxy',
-	'https_proxy', and 'all_proxy' environment variables (see
-	`curl(1)`).  This can be overridden on a per-remote basis; see
-	remote.<name>.proxy
+	'https_proxy', and 'all_proxy' environment variables (see `curl(1)`). In
+	addition to the syntax understood by curl, it is possible to specify a
+	proxy string with a user name but no password, in which case git will
+	attempt to acquire one in the same way it does for other credentials. See
+	linkgit:gitcredentials[7] for more information. The syntax thus is
+	'[protocol://][user[:password]@]proxyhost[:port]'. This can be overridden
+	on a per-remote basis; see remote.<name>.proxy
+
+http.proxyAuthMethod::
+	Set the method with which to authenticate against the HTTP proxy. This
+	only takes effect if the configured proxy string contains a user name part
+	(i.e. is of the form 'user@host' or 'user@host:port'). This can be
+	overridden on a per-remote basis; see `remote.<name>.proxyAuthMethod`.
+	Both can be overridden by the `GIT_HTTP_PROXY_AUTHMETHOD` environment
+	variable.  Possible values are:
++
+--
+* `anyauth` - Automatically pick a suitable authentication method. It is
+  assumed that the proxy answers an unauthenticated request with a 407
+  status code and one or more Proxy-authenticate headers with supported
+  authentication methods. This is the default.
+* `basic` - HTTP Basic authentication
+* `digest` - HTTP Digest authentication; this prevents the password from being
+  transmitted to the proxy in clear text
+* `negotiate` - GSS-Negotiate authentication (compare the --negotiate option
+  of `curl(1)`)
+* `ntlm` - NTLM authentication (compare the --ntlm option of `curl(1)`)
+--
 
-http.cookiefile::
-	File containing previously stored cookie lines which should be used
+http.emptyAuth::
+	Attempt authentication without seeking a username or password.  This
+	can be used to attempt GSS-Negotiate authentication without specifying
+	a username in the URL, as libcurl normally requires a username for
+	authentication.
+
+http.extraHeader::
+	Pass an additional HTTP header when communicating with a server.  If
+	more than one such entry exists, all of them are added as extra
+	headers.  To allow overriding the settings inherited from the system
+	config, an empty value will reset the extra headers to the empty list.
+
+http.cookieFile::
+	The pathname of a file containing previously stored cookie lines,
+	which should be used
 	in the Git http session, if they match the server. The file format
 	of the file to read cookies from should be plain HTTP headers or
-	the Netscape/Mozilla cookie file format (see linkgit:curl[1]).
-	NOTE that the file specified with http.cookiefile is only used as
+	the Netscape/Mozilla cookie file format (see `curl(1)`).
+	NOTE that the file specified with http.cookieFile is used only as
 	input unless http.saveCookies is set.
 
-http.savecookies::
+http.saveCookies::
 	If set, store cookies received during requests to the file specified by
-	http.cookiefile. Has no effect if http.cookiefile is unset.
+	http.cookieFile. Has no effect if http.cookieFile is unset.
+
+http.sslVersion::
+	The SSL version to use when negotiating an SSL connection, if you
+	want to force the default.  The available and default version
+	depend on whether libcurl was built against NSS or OpenSSL and the
+	particular configuration of the crypto library in use. Internally
+	this sets the 'CURLOPT_SSL_VERSION' option; see the libcurl
+	documentation for more details on the format of this option and
+	for the ssl version supported. Actually the possible values of
+	this option are:
+
+	- sslv2
+	- sslv3
+	- tlsv1
+	- tlsv1.0
+	- tlsv1.1
+	- tlsv1.2
+
++
+Can be overridden by the `GIT_SSL_VERSION` environment variable.
+To force git to use libcurl's default ssl version and ignore any
+explicit http.sslversion option, set `GIT_SSL_VERSION` to the
+empty string.
+
+http.sslCipherList::
+  A list of SSL ciphers to use when negotiating an SSL connection.
+  The available ciphers depend on whether libcurl was built against
+  NSS or OpenSSL and the particular configuration of the crypto
+  library in use.  Internally this sets the 'CURLOPT_SSL_CIPHER_LIST'
+  option; see the libcurl documentation for more details on the format
+  of this list.
++
+Can be overridden by the `GIT_SSL_CIPHER_LIST` environment variable.
+To force git to use libcurl's default cipher list and ignore any
+explicit http.sslCipherList option, set `GIT_SSL_CIPHER_LIST` to the
+empty string.
 
 http.sslVerify::
 	Whether to verify the SSL certificate when fetching or pushing
-	over HTTPS. Can be overridden by the 'GIT_SSL_NO_VERIFY' environment
+	over HTTPS. Can be overridden by the `GIT_SSL_NO_VERIFY` environment
 	variable.
 
 http.sslCert::
 	File containing the SSL certificate when fetching or pushing
-	over HTTPS. Can be overridden by the 'GIT_SSL_CERT' environment
+	over HTTPS. Can be overridden by the `GIT_SSL_CERT` environment
 	variable.
 
 http.sslKey::
 	File containing the SSL private key when fetching or pushing
-	over HTTPS. Can be overridden by the 'GIT_SSL_KEY' environment
+	over HTTPS. Can be overridden by the `GIT_SSL_KEY` environment
 	variable.
 
 http.sslCertPasswordProtected::
 	Enable Git's password prompt for the SSL certificate.  Otherwise
 	OpenSSL will prompt the user, possibly many times, if the
 	certificate or private key is encrypted.  Can be overridden by the
-	'GIT_SSL_CERT_PASSWORD_PROTECTED' environment variable.
+	`GIT_SSL_CERT_PASSWORD_PROTECTED` environment variable.
 
 http.sslCAInfo::
 	File containing the certificates to verify the peer with when
 	fetching or pushing over HTTPS. Can be overridden by the
-	'GIT_SSL_CAINFO' environment variable.
+	`GIT_SSL_CAINFO` environment variable.
 
 http.sslCAPath::
 	Path containing files with the CA certificates to verify the peer
 	with when fetching or pushing over HTTPS. Can be overridden
-	by the 'GIT_SSL_CAPATH' environment variable.
+	by the `GIT_SSL_CAPATH` environment variable.
+
+http.pinnedpubkey::
+	Public key of the https service. It may either be the filename of
+	a PEM or DER encoded public key file or a string starting with
+	'sha256//' followed by the base64 encoded sha256 hash of the
+	public key. See also libcurl 'CURLOPT_PINNEDPUBLICKEY'. git will
+	exit with an error if this option is set but not supported by
+	cURL.
 
 http.sslTry::
 	Attempt to use AUTH SSL/TLS and encrypted data transfers
@@ -1515,7 +1840,7 @@
 
 http.maxRequests::
 	How many HTTP requests to launch in parallel. Can be overridden
-	by the 'GIT_HTTP_MAX_REQUESTS' environment variable. Default is 5.
+	by the `GIT_HTTP_MAX_REQUESTS` environment variable. Default is 5.
 
 http.minSessions::
 	The number of curl sessions (counted across slots) to be kept across
@@ -1534,26 +1859,26 @@
 http.lowSpeedLimit, http.lowSpeedTime::
 	If the HTTP transfer speed is less than 'http.lowSpeedLimit'
 	for longer than 'http.lowSpeedTime' seconds, the transfer is aborted.
-	Can be overridden by the 'GIT_HTTP_LOW_SPEED_LIMIT' and
-	'GIT_HTTP_LOW_SPEED_TIME' environment variables.
+	Can be overridden by the `GIT_HTTP_LOW_SPEED_LIMIT` and
+	`GIT_HTTP_LOW_SPEED_TIME` environment variables.
 
 http.noEPSV::
 	A boolean which disables using of EPSV ftp command by curl.
 	This can helpful with some "poor" ftp servers which don't
-	support EPSV mode. Can be overridden by the 'GIT_CURL_FTP_NO_EPSV'
+	support EPSV mode. Can be overridden by the `GIT_CURL_FTP_NO_EPSV`
 	environment variable. Default is false (curl will use EPSV).
 
-http.useragent::
+http.userAgent::
 	The HTTP USER_AGENT string presented to an HTTP server.  The default
 	value represents the version of the client Git such as git/1.7.1.
 	This option allows you to override this value to a more common value
 	such as Mozilla/4.0.  This may be necessary, for instance, if
 	connecting through a firewall that restricts HTTP connections to a set
 	of common USER_AGENT strings (but not including those like git/1.7.1).
-	Can be overridden by the 'GIT_HTTP_USER_AGENT' environment variable.
+	Can be overridden by the `GIT_HTTP_USER_AGENT` environment variable.
 
 http.<url>.*::
-	Any of the http.* options above can be applied selectively to some urls.
+	Any of the http.* options above can be applied selectively to some URLs.
 	For a config key to match a URL, each element of the config key is
 	compared to that of the URL, in the following order:
 +
@@ -1592,8 +1917,8 @@
 +
 All URLs are normalized before attempting any matching (the password part,
 if embedded in the URL, is always ignored for matching purposes) so that
-equivalent urls that are simply spelled differently will match properly.
-Environment variable settings always override any matches.  The urls that are
+equivalent URLs that are simply spelled differently will match properly.
+Environment variable settings always override any matches.  The URLs that are
 matched against are those given directly to Git commands.  This means any URLs
 visited as a result of a redirection do not participate in matching.
 
@@ -1612,7 +1937,11 @@
 	The configuration variables in the 'imap' section are described
 	in linkgit:git-imap-send[1].
 
-init.templatedir::
+index.version::
+	Specify the version with which new index files should be
+	initialized.  This does not affect existing repositories.
+
+init.templateDir::
 	Specify the directory from which templates will be copied.
 	(See the "TEMPLATE DIRECTORY" section of linkgit:git-init[1].)
 
@@ -1628,7 +1957,7 @@
 	If true the web server started by linkgit:git-instaweb[1] will
 	be bound to the local IP (127.0.0.1).
 
-instaweb.modulepath::
+instaweb.modulePath::
 	The default module path for linkgit:git-instaweb[1] to use
 	instead of /usr/lib/apache2/modules.  Only used if httpd
 	is Apache.
@@ -1637,14 +1966,22 @@
 	The port number to bind the gitweb httpd to. See
 	linkgit:git-instaweb[1].
 
-interactive.singlekey::
+interactive.singleKey::
 	In interactive commands, allow the user to provide one-letter
 	input with a single key (i.e., without hitting enter).
 	Currently this is used by the `--patch` mode of
 	linkgit:git-add[1], linkgit:git-checkout[1], linkgit:git-commit[1],
 	linkgit:git-reset[1], and linkgit:git-stash[1]. Note that this
 	setting is silently ignored if portable keystroke input
-	is not available.
+	is not available; requires the Perl module Term::ReadKey.
+
+interactive.diffFilter::
+	When an interactive command (such as `git add --patch`) shows
+	a colorized diff, git will pipe the diff through the shell
+	command defined by this configuration variable. The command may
+	mark up the diff further for human consumption, provided that it
+	retains a one-to-one correspondence with the lines in the
+	original diff. Defaults to disabled (no filtering).
 
 log.abbrevCommit::
 	If true, makes linkgit:git-log[1], linkgit:git-show[1], and
@@ -1654,18 +1991,25 @@
 log.date::
 	Set the default date-time mode for the 'log' command.
 	Setting a value for log.date is similar to using 'git log''s
-	`--date` option.  Possible values are `relative`, `local`,
-	`default`, `iso`, `rfc`, and `short`; see linkgit:git-log[1]
-	for details.
+	`--date` option.  See linkgit:git-log[1] for details.
 
 log.decorate::
 	Print out the ref names of any commits that are shown by the log
 	command. If 'short' is specified, the ref name prefixes 'refs/heads/',
 	'refs/tags/' and 'refs/remotes/' will not be printed. If 'full' is
 	specified, the full ref name (including prefix) will be printed.
-	This is the same as the log commands '--decorate' option.
+	If 'auto' is specified, then if the output is going to a terminal,
+	the ref names are shown as if 'short' were given, otherwise no ref
+	names are shown. This is the same as the `--decorate` option
+	of the `git log`.
+
+log.follow::
+	If `true`, `git log` will act as if the `--follow` option was used when
+	a single <path> is given.  This has the same limitations as `--follow`,
+	i.e. it cannot be used to follow multiple files and does not work well
+	on non-linear history.
 
-log.showroot::
+log.showRoot::
 	If true, the initial commit will be shown as a big creation event.
 	This is equivalent to a diff against an empty tree.
 	Tools like linkgit:git-log[1] or linkgit:git-whatchanged[1], which
@@ -1675,6 +2019,13 @@
 	If true, makes linkgit:git-log[1], linkgit:git-show[1], and
 	linkgit:git-whatchanged[1] assume `--use-mailmap`.
 
+mailinfo.scissors::
+	If true, makes linkgit:git-mailinfo[1] (and therefore
+	linkgit:git-am[1]) act by default as if the --scissors option
+	was provided on the command-line. When active, this features
+	removes everything from the message body before a scissors
+	line (i.e. consisting mainly of ">8", "8<" and "-").
+
 mailmap.file::
 	The location of an augmenting mailmap file. The default
 	mailmap, located in the root of the repository, is loaded
@@ -1729,6 +2080,15 @@
 	if the file has been updated, otherwise the user is prompted to
 	indicate the success of the merge.
 
+mergetool.meld.hasOutput::
+	Older versions of `meld` do not support the `--output` option.
+	Git will attempt to detect whether `meld` supports `--output`
+	by inspecting the output of `meld --help`.  Configuring
+	`mergetool.meld.hasOutput` will make Git skip these checks and
+	use the configured value instead.  Setting `mergetool.meld.hasOutput`
+	to `true` tells Git to unconditionally use the `--output` option,
+	and `false` avoids using `--output`.
+
 mergetool.keepBackup::
 	After performing a merge, the original file with conflict markers
 	can be saved as a file with a `.orig` extension.  If this variable
@@ -1742,9 +2102,27 @@
 	preserved, otherwise they will be removed after the tool has
 	exited. Defaults to `false`.
 
+mergetool.writeToTemp::
+	Git writes temporary 'BASE', 'LOCAL', and 'REMOTE' versions of
+	conflicting files in the worktree by default.  Git will attempt
+	to use a temporary directory for these files when set `true`.
+	Defaults to `false`.
+
 mergetool.prompt::
 	Prompt before each invocation of the merge resolution program.
 
+notes.mergeStrategy::
+	Which merge strategy to choose by default when resolving notes
+	conflicts.  Must be one of `manual`, `ours`, `theirs`, `union`, or
+	`cat_sort_uniq`.  Defaults to `manual`.  See "NOTES MERGE STRATEGIES"
+	section of linkgit:git-notes[1] for more information on each strategy.
+
+notes.<name>.mergeStrategy::
+	Which merge strategy to choose when doing a notes merge into
+	refs/notes/<name>.  This overrides the more general
+	"notes.mergeStrategy".  See the "NOTES MERGE STRATEGIES" section in
+	linkgit:git-notes[1] for more information on the available strategies.
+
 notes.displayRef::
 	The (fully qualified) refname from which to show notes when
 	showing commit messages.  The value of this variable can be set
@@ -1773,8 +2151,8 @@
 	When copying notes during a rewrite (see the
 	"notes.rewrite.<command>" option), determines what to do if
 	the target commit already has a note.  Must be one of
-	`overwrite`, `concatenate`, or `ignore`.  Defaults to
-	`concatenate`.
+	`overwrite`, `concatenate`, `cat_sort_uniq`, or `ignore`.
+	Defaults to `concatenate`.
 +
 This setting can be overridden with the `GIT_NOTES_REWRITE_MODE`
 environment variable.
@@ -1802,10 +2180,11 @@
 	maximum depth is given on the command line. Defaults to 50.
 
 pack.windowMemory::
-	The window memory size limit used by linkgit:git-pack-objects[1]
-	when no limit is given on the command line.  The value can be
-	suffixed with "k", "m", or "g".  Defaults to 0, meaning no
-	limit.
+	The maximum size of memory that is consumed by each thread
+	in linkgit:git-pack-objects[1] for pack window memory when
+	no limit is given on the command line.  The value can be
+	suffixed with "k", "m", or "g".  When left unconfigured (or
+	set explicitly to 0), there will be no limit.
 
 pack.compression::
 	An integer -1..9, indicating the compression level for objects
@@ -1857,7 +2236,7 @@
 	larger than 2 GB.
 +
 If you have an old Git that does not understand the version 2 `*.idx` file,
-cloning or fetching over a non native protocol (e.g. "http" and "rsync")
+cloning or fetching over a non native protocol (e.g. "http")
 that will copy both `*.pack` file and corresponding `*.idx` file from the
 other side may give you a repository that cannot be accessed with your
 older version of Git. If the `*.pack` file is smaller than 2 GB, however,
@@ -1868,11 +2247,34 @@
 	The maximum size of a pack.  This setting only affects
 	packing to a file when repacking, i.e. the git:// protocol
 	is unaffected.  It can be overridden by the `--max-pack-size`
-	option of linkgit:git-repack[1]. The minimum size allowed is
-	limited to 1 MiB. The default is unlimited.
+	option of linkgit:git-repack[1].  Reaching this limit results
+	in the creation of multiple packfiles; which in turn prevents
+	bitmaps from being created.
+	The minimum size allowed is limited to 1 MiB.
+	The default is unlimited.
 	Common unit suffixes of 'k', 'm', or 'g' are
 	supported.
 
+pack.useBitmaps::
+	When true, git will use pack bitmaps (if available) when packing
+	to stdout (e.g., during the server side of a fetch). Defaults to
+	true. You should not generally need to turn this off unless
+	you are debugging pack bitmaps.
+
+pack.writeBitmaps (deprecated)::
+	This is a deprecated synonym for `repack.writeBitmaps`.
+
+pack.writeBitmapHashCache::
+	When true, git will include a "hash cache" section in the bitmap
+	index (if one is written). This cache can be used to feed git's
+	delta heuristics, potentially leading to better deltas between
+	bitmapped and non-bitmapped objects (e.g., when serving a fetch
+	between an older, bitmapped pack and objects that have been
+	pushed since the last gc). The downside is that it consumes 4
+	bytes per object of disk space, and that JGit's bitmap
+	implementation does not understand it, causing it to complain if
+	Git and JGit are used on the same repository. Defaults to false.
+
 pager.<cmd>::
 	If the value is boolean, turns on or off pagination of the
 	output of a particular Git subcommand when writing to a tty.
@@ -1892,15 +2294,27 @@
 	Note that an alias with the same name as a built-in format
 	will be silently ignored.
 
+pull.ff::
+	By default, Git does not create an extra merge commit when merging
+	a commit that is a descendant of the current commit. Instead, the
+	tip of the current branch is fast-forwarded. When set to `false`,
+	this variable tells Git to create an extra merge commit in such
+	a case (equivalent to giving the `--no-ff` option from the command
+	line). When set to `only`, only such fast-forward merges are
+	allowed (equivalent to giving the `--ff-only` option from the
+	command line). This setting overrides `merge.ff` when pulling.
+
 pull.rebase::
 	When true, rebase branches on top of the fetched branch, instead
 	of merging the default branch from the default remote when "git
 	pull" is run. See "branch.<name>.rebase" for setting this on a
 	per-branch basis.
 +
-	When preserve, also pass `--preserve-merges` along to 'git rebase'
-	so that locally committed merge commits will not be flattened
-	by running 'git pull'.
+When preserve, also pass `--preserve-merges` along to 'git rebase'
+so that locally committed merge commits will not be flattened
+by running 'git pull'.
++
+When the value is `interactive`, the rebase is run in interactive mode.
 +
 *NOTE*: this is a possibly dangerous operation; do *not* use
 it unless you understand the implications (see linkgit:git-rebase[1]
@@ -1944,7 +2358,7 @@
 pull from, work as `current`.  This is the safest option and is suited
 for beginners.
 +
-This mode will become the default in Git 2.0.
+This mode has become the default in Git 2.0.
 
 * `matching` - push all branches having the same name on both ends.
   This makes the repository you are pushing to remember the set of
@@ -1963,19 +2377,47 @@
 people may add new branches there, or update the tip of existing
 branches outside your control.
 +
-This is currently the default, but Git 2.0 will change the default
-to `simple`.
+This used to be the default, but not since Git 2.0 (`simple` is the
+new default).
 
 --
 
+push.followTags::
+	If set to true enable `--follow-tags` option by default.  You
+	may override this configuration at time of push by specifying
+	`--no-follow-tags`.
+
+push.gpgSign::
+	May be set to a boolean value, or the string 'if-asked'. A true
+	value causes all pushes to be GPG signed, as if `--signed` is
+	passed to linkgit:git-push[1]. The string 'if-asked' causes
+	pushes to be signed if the server supports it, as if
+	`--signed=if-asked` is passed to 'git push'. A false value may
+	override a value from a lower-priority config file. An explicit
+	command-line flag always overrides this config option.
+
+push.recurseSubmodules::
+	Make sure all submodule commits used by the revisions to be pushed
+	are available on a remote-tracking branch. If the value is 'check'
+	then Git will verify that all submodule commits that changed in the
+	revisions to be pushed are available on at least one remote of the
+	submodule. If any commits are missing, the push will be aborted and
+	exit with non-zero status. If the value is 'on-demand' then all
+	submodules that changed in the revisions to be pushed will be
+	pushed. If on-demand was not able to push all necessary revisions
+	it will also be aborted and exit with non-zero status. If the value
+	is 'no' then default behavior of ignoring submodules when pushing
+	is retained. You may override this configuration at time of push by
+	specifying '--recurse-submodules=check|on-demand|no'.
+
 rebase.stat::
 	Whether to show a diffstat of what changed upstream since the last
 	rebase. False by default.
 
-rebase.autosquash::
-	If set to true enable '--autosquash' option by default.
+rebase.autoSquash::
+	If set to true enable `--autosquash` option by default.
 
-rebase.autostash::
+rebase.autoStash::
 	When set to true, automatically create a temporary stash
 	before the operation begins, and apply it after the operation
 	ends.  This means that you can run rebase on a dirty worktree.
@@ -1983,11 +2425,56 @@
 	successful rebase might result in non-trivial conflicts.
 	Defaults to false.
 
+rebase.missingCommitsCheck::
+	If set to "warn", git rebase -i will print a warning if some
+	commits are removed (e.g. a line was deleted), however the
+	rebase will still proceed. If set to "error", it will print
+	the previous warning and stop the rebase, 'git rebase
+	--edit-todo' can then be used to correct the error. If set to
+	"ignore", no checking is done.
+	To drop a commit without warning or error, use the `drop`
+	command in the todo-list.
+	Defaults to "ignore".
+
+rebase.instructionFormat
+	A format string, as specified in linkgit:git-log[1], to be used for
+	the instruction list during an interactive rebase.  The format will automatically
+	have the long commit hash prepended to the format.
+
+receive.advertiseAtomic::
+	By default, git-receive-pack will advertise the atomic push
+	capability to its clients. If you don't want to advertise this
+	capability, set this variable to false.
+
+receive.advertisePushOptions::
+	By default, git-receive-pack will advertise the push options
+	capability to its clients. If you don't want to advertise this
+	capability, set this variable to false.
+
 receive.autogc::
 	By default, git-receive-pack will run "git-gc --auto" after
 	receiving data from git-push and updating refs.  You can stop
 	it by setting this variable to false.
 
+receive.certNonceSeed::
+	By setting this variable to a string, `git receive-pack`
+	will accept a `git push --signed` and verifies it by using
+	a "nonce" protected by HMAC using this string as a secret
+	key.
+
+receive.certNonceSlop::
+	When a `git push --signed` sent a push certificate with a
+	"nonce" that was issued by a receive-pack serving the same
+	repository within this many seconds, export the "nonce"
+	found in the certificate to `GIT_PUSH_CERT_NONCE` to the
+	hooks (instead of what the receive-pack asked the sending
+	side to include).  This may allow writing checks in
+	`pre-receive` and `post-receive` a bit easier.  Instead of
+	checking `GIT_PUSH_CERT_NONCE_SLOP` environment variable
+	that records by how many seconds the nonce is stale to
+	decide if they want to accept the certificate, they only
+	can check `GIT_PUSH_CERT_NONCE_STATUS` is `OK`.
+
 receive.fsckObjects::
 	If it is set to true, git-receive-pack will check all received
 	objects. It will abort in the case of a malformed object or a
@@ -1995,6 +2482,37 @@
 	Defaults to false. If not set, the value of `transfer.fsckObjects`
 	is used instead.
 
+receive.fsck.<msg-id>::
+	When `receive.fsckObjects` is set to true, errors can be switched
+	to warnings and vice versa by configuring the `receive.fsck.<msg-id>`
+	setting where the `<msg-id>` is the fsck message ID and the value
+	is one of `error`, `warn` or `ignore`. For convenience, fsck prefixes
+	the error/warning with the message ID, e.g. "missingEmail: invalid
+	author/committer line - missing email" means that setting
+	`receive.fsck.missingEmail = ignore` will hide that issue.
++
+This feature is intended to support working with legacy repositories
+which would not pass pushing when `receive.fsckObjects = true`, allowing
+the host to accept repositories with certain known issues but still catch
+other issues.
+
+receive.fsck.skipList::
+	The path to a sorted list of object names (i.e. one SHA-1 per
+	line) that are known to be broken in a non-fatal way and should
+	be ignored. This feature is useful when an established project
+	should be accepted despite early commits containing errors that
+	can be safely ignored such as invalid committer email addresses.
+	Note: corrupt objects cannot be skipped with this setting.
+
+receive.keepAlive::
+	After receiving the pack from the client, `receive-pack` may
+	produce no output (if `--quiet` was specified) while processing
+	the pack, causing some networks to drop the TCP connection.
+	With this option set, if `receive-pack` does not transmit
+	any data in this phase for `receive.keepAlive` seconds, it will
+	send a short keepalive packet.  The default is 5 seconds; set
+	to 0 to disable keepalives entirely.
+
 receive.unpackLimit::
 	If the number of objects received in a push is below this
 	limit then the objects will be unpacked into loose object
@@ -2021,6 +2539,17 @@
 	print a warning of such a push to stderr, but allow the push to
 	proceed. If set to false or "ignore", allow such pushes with no
 	message. Defaults to "refuse".
++
+Another option is "updateInstead" which will update the working
+tree if pushing into the current branch.  This option is
+intended for synchronizing working directories when one side is not easily
+accessible via interactive ssh (e.g. a live web site, hence the requirement
+that the working directory be clean). This mode also comes in handy when
+developing inside a VM to test and fix code on different Operating Systems.
++
+By default, "updateInstead" will refuse the push if the working tree or
+the index have any difference from the HEAD, but the `push-to-checkout`
+hook can be used to customize this.  See linkgit:githooks[5].
 
 receive.denyNonFastForwards::
 	If set to true, git-receive-pack will deny a ref update which is
@@ -2028,27 +2557,24 @@
 	even if that push is forced. This configuration variable is
 	set when initializing a shared repository.
 
-receive.hiderefs::
-	String(s) `receive-pack` uses to decide which refs to omit
-	from its initial advertisement.  Use more than one
-	definitions to specify multiple prefix strings. A ref that
-	are under the hierarchies listed on the value of this
-	variable is excluded, and is hidden when responding to `git
-	push`, and an attempt to update or delete a hidden ref by
-	`git push` is rejected.
+receive.hideRefs::
+	This variable is the same as `transfer.hideRefs`, but applies
+	only to `receive-pack` (and so affects pushes, but not fetches).
+	An attempt to update or delete a hidden ref by `git push` is
+	rejected.
 
-receive.updateserverinfo::
+receive.updateServerInfo::
 	If set to true, git-receive-pack will run git-update-server-info
 	after receiving data from git-push and updating refs.
 
-receive.shallowupdate::
+receive.shallowUpdate::
 	If set to true, .git/shallow can be updated when new refs
 	require new shallow roots. Otherwise those refs are rejected.
 
-remote.pushdefault::
+remote.pushDefault::
 	The remote to push to by default.  Overrides
 	`branch.<name>.remote` for all branches, and is overridden by
-	`branch.<name>.pushremote` for specific branches.
+	`branch.<name>.pushRemote` for specific branches.
 
 remote.<name>.url::
 	The URL of a remote repository.  See linkgit:git-fetch[1] or
@@ -2062,6 +2588,11 @@
 	the proxy to use for that remote.  Set to the empty string to
 	disable proxying for that remote.
 
+remote.<name>.proxyAuthMethod::
+	For remotes that require curl (http, https and ftp), the method to use for
+	authenticating against the proxy in use (probably set in
+	`remote.<name>.proxy`). See `http.proxyAuthMethod`.
+
 remote.<name>.fetch::
 	The default set of "refspec" for linkgit:git-fetch[1]. See
 	linkgit:git-fetch[1].
@@ -2086,18 +2617,18 @@
 
 remote.<name>.receivepack::
 	The default program to execute on the remote side when pushing.  See
-	option \--receive-pack of linkgit:git-push[1].
+	option --receive-pack of linkgit:git-push[1].
 
 remote.<name>.uploadpack::
 	The default program to execute on the remote side when fetching.  See
-	option \--upload-pack of linkgit:git-fetch-pack[1].
+	option --upload-pack of linkgit:git-fetch-pack[1].
 
-remote.<name>.tagopt::
-	Setting this value to \--no-tags disables automatic tag following when
-	fetching from remote <name>. Setting it to \--tags will fetch every
+remote.<name>.tagOpt::
+	Setting this value to --no-tags disables automatic tag following when
+	fetching from remote <name>. Setting it to --tags will fetch every
 	tag from remote <name>, even if they are not reachable from remote
 	branch heads. Passing these flags directly to linkgit:git-fetch[1] can
-	override this setting. See options \--tags and \--no-tags of
+	override this setting. See options --tags and --no-tags of
 	linkgit:git-fetch[1].
 
 remote.<name>.vcs::
@@ -2114,7 +2645,7 @@
 	The list of remotes which are fetched by "git remote update
 	<group>".  See linkgit:git-remote[1].
 
-repack.usedeltabaseoffset::
+repack.useDeltaBaseOffset::
 	By default, linkgit:git-repack[1] creates packs that use
 	delta-base offset. If you need to share your repository with
 	Git older than version 1.4.4, either directly or via a dumb
@@ -2122,7 +2653,23 @@
 	"false" and repack. Access from old Git versions over the
 	native protocol are unaffected by this option.
 
-rerere.autoupdate::
+repack.packKeptObjects::
+	If set to true, makes `git repack` act as if
+	`--pack-kept-objects` was passed. See linkgit:git-repack[1] for
+	details. Defaults to `false` normally, but `true` if a bitmap
+	index is being written (either via `--write-bitmap-index` or
+	`repack.writeBitmaps`).
+
+repack.writeBitmaps::
+	When true, git will write a bitmap index when packing all
+	objects to disk (e.g., when `git repack -a` is run).  This
+	index can speed up the "counting objects" phase of subsequent
+	packs created for clones and fetches, at the cost of some disk
+	space and extra time spent on the initial repack.  This has
+	no effect if multiple packfiles are created.
+	Defaults to false.
+
+rerere.autoUpdate::
 	When set to true, `git-rerere` updates the index with the
 	resulting contents after it cleanly resolves conflicts using
 	previously recorded resolution.  Defaults to false.
@@ -2139,14 +2686,14 @@
 	A configuration identity. When given, causes values in the
 	'sendemail.<identity>' subsection to take precedence over
 	values in the 'sendemail' section. The default identity is
-	the value of 'sendemail.identity'.
+	the value of `sendemail.identity`.
 
-sendemail.smtpencryption::
+sendemail.smtpEncryption::
 	See linkgit:git-send-email[1] for description.  Note that this
 	setting is not subject to the 'identity' mechanism.
 
-sendemail.smtpssl::
-	Deprecated alias for 'sendemail.smtpencryption = ssl'.
+sendemail.smtpssl (deprecated)::
+	Deprecated alias for 'sendemail.smtpEncryption = ssl'.
 
 sendemail.smtpsslcertpath::
 	Path to ca-certificates (either a directory or a single file).
@@ -2156,35 +2703,37 @@
 	Identity-specific versions of the 'sendemail.*' parameters
 	found below, taking precedence over those when the this
 	identity is selected, through command-line or
-	'sendemail.identity'.
+	`sendemail.identity`.
 
-sendemail.aliasesfile::
-sendemail.aliasfiletype::
+sendemail.aliasesFile::
+sendemail.aliasFileType::
 sendemail.annotate::
 sendemail.bcc::
 sendemail.cc::
-sendemail.cccmd::
-sendemail.chainreplyto::
+sendemail.ccCmd::
+sendemail.chainReplyTo::
 sendemail.confirm::
-sendemail.envelopesender::
+sendemail.envelopeSender::
 sendemail.from::
-sendemail.multiedit::
+sendemail.multiEdit::
 sendemail.signedoffbycc::
-sendemail.smtppass::
+sendemail.smtpPass::
 sendemail.suppresscc::
-sendemail.suppressfrom::
+sendemail.suppressFrom::
 sendemail.to::
-sendemail.smtpdomain::
-sendemail.smtpserver::
-sendemail.smtpserverport::
-sendemail.smtpserveroption::
-sendemail.smtpuser::
+sendemail.smtpDomain::
+sendemail.smtpServer::
+sendemail.smtpServerPort::
+sendemail.smtpServerOption::
+sendemail.smtpUser::
 sendemail.thread::
+sendemail.transferEncoding::
 sendemail.validate::
+sendemail.xmailer::
 	See linkgit:git-send-email[1] for description.
 
-sendemail.signedoffcc::
-	Deprecated alias for 'sendemail.signedoffbycc'.
+sendemail.signedoffcc (deprecated)::
+	Deprecated alias for `sendemail.signedoffbycc`.
 
 showbranch.default::
 	The default set of branches for linkgit:git-show-branch[1].
@@ -2216,7 +2765,7 @@
 	files which are not currently tracked by Git. Directories which
 	contain only untracked files, are shown with the directory name
 	only. Showing untracked files means that Git needs to lstat() all
-	all the files in the whole repository, which might be slow on some
+	the files in the whole repository, which might be slow on some
 	systems. So, this variable controls how the commands displays
 	the untracked files. Possible values are:
 +
@@ -2230,7 +2779,7 @@
 This variable can be overridden with the -u|--untracked-files option
 of linkgit:git-status[1] and linkgit:git-commit[1].
 
-status.submodulesummary::
+status.submoduleSummary::
 	Defaults to false.
 	If this is set to a non zero number or true (identical to -1 or an
 	unlimited number), the submodule summary will be enabled and a
@@ -2238,20 +2787,36 @@
 	--summary-limit option of linkgit:git-submodule[1]). Please note
 	that the summary output command will be suppressed for all
 	submodules when `diff.ignoreSubmodules` is set to 'all' or only
-	for those submodules where `submodule.<name>.ignore=all`. To
+	for those submodules where `submodule.<name>.ignore=all`. The only
+	exception to that rule is that status and commit will show staged
+	submodule changes. To
 	also view the summary for ignored submodules you can either use
-	the --ignore-submodules=dirty command line option or the 'git
+	the --ignore-submodules=dirty command-line option or the 'git
 	submodule summary' command, which shows a similar output but does
 	not honor these settings.
 
+stash.showPatch::
+	If this is set to true, the `git stash show` command without an
+	option will show the stash in patch form.  Defaults to false.
+	See description of 'show' command in linkgit:git-stash[1].
+
+stash.showStat::
+	If this is set to true, the `git stash show` command without an
+	option will show diffstat of the stash.  Defaults to true.
+	See description of 'show' command in linkgit:git-stash[1].
+
 submodule.<name>.path::
 submodule.<name>.url::
+	The path within this project and URL for a submodule. These
+	variables are initially populated by 'git submodule init'. See
+	linkgit:git-submodule[1] and linkgit:gitmodules[5] for
+	details.
+
 submodule.<name>.update::
-	The path within this project, URL, and the updating strategy
-	for a submodule.  These variables are initially populated
-	by 'git submodule init'; edit them to override the
-	URL and other values found in the `.gitmodules` file.  See
-	linkgit:git-submodule[1] and linkgit:gitmodules[5] for details.
+	The default update procedure for a submodule. This variable
+	is populated by `git submodule init` from the
+	linkgit:gitmodules[5] file. See description of 'update'
+	command in linkgit:git-submodule[1].
 
 submodule.<name>.branch::
 	The remote branch name for a submodule, used by `git submodule
@@ -2262,14 +2827,16 @@
 submodule.<name>.fetchRecurseSubmodules::
 	This option can be used to control recursive fetching of this
 	submodule. It can be overridden by using the --[no-]recurse-submodules
-	command line option to "git fetch" and "git pull".
+	command-line option to "git fetch" and "git pull".
 	This setting will override that from in the linkgit:gitmodules[5]
 	file.
 
 submodule.<name>.ignore::
 	Defines under what circumstances "git status" and the diff family show
 	a submodule as modified. When set to "all", it will never be considered
-	modified, "dirty" will ignore all changes to the submodules work tree and
+	modified (but it will nonetheless show up in the output of status and
+	commit when it has been staged), "dirty" will ignore all changes
+	to the submodules work tree and
 	takes only differences between the HEAD of the submodule and the commit
 	recorded in the superproject into account. "untracked" will additionally
 	let submodules with modified tracked files in their work tree show up.
@@ -2280,6 +2847,22 @@
 	"--ignore-submodules" option. The 'git submodule' commands are not
 	affected by this setting.
 
+submodule.fetchJobs::
+	Specifies how many submodules are fetched/cloned at the same time.
+	A positive integer allows up to that number of submodules fetched
+	in parallel. A value of 0 will give some reasonable default.
+	If unset, it defaults to 1.
+
+tag.forceSignAnnotated::
+	A boolean to specify whether annotated tags created should be GPG signed.
+	If `--annotate` is specified on the command line, it takes
+	precedence over this option.
+
+tag.sort::
+	This variable controls the sort ordering of tags when displayed by
+	linkgit:git-tag[1]. Without the "--sort=<value>" option provided, the
+	value of this variable will be used as the default.
+
 tar.umask::
 	This variable can be used to restrict the permission bits of
 	tar archive entries.  The default is 0002, which turns off the
@@ -2292,32 +2875,60 @@
 	not set, the value of this variable is used instead.
 	Defaults to false.
 
-transfer.hiderefs::
-	This variable can be used to set both `receive.hiderefs`
-	and `uploadpack.hiderefs` at the same time to the same
-	values.  See entries for these other variables.
+transfer.hideRefs::
+	String(s) `receive-pack` and `upload-pack` use to decide which
+	refs to omit from their initial advertisements.  Use more than
+	one definition to specify multiple prefix strings. A ref that is
+	under the hierarchies listed in the value of this variable is
+	excluded, and is hidden when responding to `git push` or `git
+	fetch`.  See `receive.hideRefs` and `uploadpack.hideRefs` for
+	program-specific versions of this config.
++
+You may also include a `!` in front of the ref name to negate the entry,
+explicitly exposing it, even if an earlier entry marked it as hidden.
+If you have multiple hideRefs values, later entries override earlier ones
+(and entries in more-specific config files override less-specific ones).
++
+If a namespace is in use, the namespace prefix is stripped from each
+reference before it is matched against `transfer.hiderefs` patterns.
+For example, if `refs/heads/master` is specified in `transfer.hideRefs` and
+the current namespace is `foo`, then `refs/namespaces/foo/refs/heads/master`
+is omitted from the advertisements but `refs/heads/master` and
+`refs/namespaces/bar/refs/heads/master` are still advertised as so-called
+"have" lines. In order to match refs before stripping, add a `^` in front of
+the ref name. If you combine `!` and `^`, `!` must be specified first.
 
 transfer.unpackLimit::
 	When `fetch.unpackLimit` or `receive.unpackLimit` are
 	not set, the value of this variable is used instead.
 	The default value is 100.
 
-uploadpack.hiderefs::
-	String(s) `upload-pack` uses to decide which refs to omit
-	from its initial advertisement.  Use more than one
-	definitions to specify multiple prefix strings. A ref that
-	are under the hierarchies listed on the value of this
-	variable is excluded, and is hidden from `git ls-remote`,
-	`git fetch`, etc.  An attempt to fetch a hidden ref by `git
-	fetch` will fail.  See also `uploadpack.allowtipsha1inwant`.
+uploadarchive.allowUnreachable::
+	If true, allow clients to use `git archive --remote` to request
+	any tree, whether reachable from the ref tips or not. See the
+	discussion in the `SECURITY` section of
+	linkgit:git-upload-archive[1] for more details. Defaults to
+	`false`.
+
+uploadpack.hideRefs::
+	This variable is the same as `transfer.hideRefs`, but applies
+	only to `upload-pack` (and so affects only fetches, not pushes).
+	An attempt to fetch a hidden ref by `git fetch` will fail.  See
+	also `uploadpack.allowTipSHA1InWant`.
 
-uploadpack.allowtipsha1inwant::
-	When `uploadpack.hiderefs` is in effect, allow `upload-pack`
+uploadpack.allowTipSHA1InWant::
+	When `uploadpack.hideRefs` is in effect, allow `upload-pack`
 	to accept a fetch request that asks for an object at the tip
 	of a hidden ref (by default, such a request is rejected).
-	see also `uploadpack.hiderefs`.
+	see also `uploadpack.hideRefs`.
 
-uploadpack.keepalive::
+uploadpack.allowReachableSHA1InWant::
+	Allow `upload-pack` to accept a fetch request that asks for an
+	object that is reachable from any ref tip. However, note that
+	calculating object reachability is computationally expensive.
+	Defaults to `false`.
+
+uploadpack.keepAlive::
 	When `upload-pack` has started `pack-objects`, there may be a
 	quiet period while `pack-objects` prepares the pack. Normally
 	it would output progress information, but if `--quiet` was used
@@ -2325,9 +2936,24 @@
 	the pack data begins. Some clients and networks may consider
 	the server to be hung and give up. Setting this option instructs
 	`upload-pack` to send an empty keepalive packet every
-	`uploadpack.keepalive` seconds. Setting this option to 0
+	`uploadpack.keepAlive` seconds. Setting this option to 0
 	disables keepalive packets entirely. The default is 5 seconds.
 
+uploadpack.packObjectsHook::
+	If this option is set, when `upload-pack` would run
+	`git pack-objects` to create a packfile for a client, it will
+	run this shell command instead.  The `pack-objects` command and
+	arguments it _would_ have run (including the `git pack-objects`
+	at the beginning) are appended to the shell command. The stdin
+	and stdout of the hook are treated as if `pack-objects` itself
+	was run. I.e., `upload-pack` will feed input intended for
+	`pack-objects` to the hook, and expects a completed packfile on
+	stdout.
++
+Note that this configuration variable is ignored if it is seen in the
+repository-level config (this is a safety measure against fetching from
+untrusted repositories).
+
 url.<base>.insteadOf::
 	Any URL that starts with this value will be rewritten to
 	start, instead, with <base>. In cases where some site serves a
@@ -2354,21 +2980,43 @@
 
 user.email::
 	Your email address to be recorded in any newly created commits.
-	Can be overridden by the 'GIT_AUTHOR_EMAIL', 'GIT_COMMITTER_EMAIL', and
-	'EMAIL' environment variables.  See linkgit:git-commit-tree[1].
+	Can be overridden by the `GIT_AUTHOR_EMAIL`, `GIT_COMMITTER_EMAIL`, and
+	`EMAIL` environment variables.  See linkgit:git-commit-tree[1].
 
 user.name::
 	Your full name to be recorded in any newly created commits.
-	Can be overridden by the 'GIT_AUTHOR_NAME' and 'GIT_COMMITTER_NAME'
+	Can be overridden by the `GIT_AUTHOR_NAME` and `GIT_COMMITTER_NAME`
 	environment variables.  See linkgit:git-commit-tree[1].
 
-user.signingkey::
+user.useConfigOnly::
+	Instruct Git to avoid trying to guess defaults for `user.email`
+	and `user.name`, and instead retrieve the values only from the
+	configuration. For example, if you have multiple email addresses
+	and would like to use a different one for each repository, then
+	with this configuration option set to `true` in the global config
+	along with a name, Git will prompt you to set up an email before
+	making new commits in a newly cloned repository.
+	Defaults to `false`.
+
+user.signingKey::
 	If linkgit:git-tag[1] or linkgit:git-commit[1] is not selecting the
 	key you want it to automatically when creating a signed tag or
 	commit, you can override the default selection with this variable.
 	This option is passed unchanged to gpg's --local-user parameter,
 	so you may specify a key using any method that gpg supports.
 
+versionsort.prereleaseSuffix::
+	When version sort is used in linkgit:git-tag[1], prerelease
+	tags (e.g. "1.0-rc1") may appear after the main release
+	"1.0". By specifying the suffix "-rc" in this variable,
+	"1.0-rc1" will appear before "1.0".
++
+This variable can be specified multiple times, once per suffix. The
+order of suffixes in the config file determines the sorting order
+(e.g. if "-pre" appears before "-rc" in the config file then 1.0-preXX
+is sorted before 1.0-rcXX). The sorting order between different
+suffixes is undefined if they are in multiple config files.
+
 web.browser::
 	Specify a web browser that may be used by some commands.
 	Currently only linkgit:git-instaweb[1] and linkgit:git-help[1]
# install config.txt /usr/share/doc/git-doc/config.txt
--- /usr/share/doc/git-doc/date-formats.txt	2016-03-21 09:24:28.000000000 -0600
+++ date-formats.txt	2016-10-03 14:24:18.000000000 -0600
@@ -1,7 +1,7 @@
 DATE FORMATS
 ------------
 
-The GIT_AUTHOR_DATE, GIT_COMMITTER_DATE environment variables
+The `GIT_AUTHOR_DATE`, `GIT_COMMITTER_DATE` environment variables
 ifdef::git-commit[]
 and the `--date` option
 endif::git-commit[]
# install date-formats.txt /usr/share/doc/git-doc/date-formats.txt
--- /usr/share/doc/git-doc/diff-config.txt	2016-03-21 09:24:28.000000000 -0600
+++ diff-config.txt	2016-10-03 14:24:18.000000000 -0600
@@ -1,4 +1,4 @@
-diff.autorefreshindex::
+diff.autoRefreshIndex::
 	When using 'git diff' to compare with work tree
 	files, do not consider stat-only change as changed.
 	Instead, silently run `git update-index --refresh` to
@@ -75,11 +75,11 @@
 	commands such as 'git diff-files'. 'git checkout' also honors
 	this setting when reporting uncommitted changes. Setting it to
 	'all' disables the submodule summary normally shown by 'git commit'
-	and 'git status' when 'status.submodulesummary' is set unless it is
-	overridden by using the --ignore-submodules command line option.
+	and 'git status' when `status.submoduleSummary` is set unless it is
+	overridden by using the --ignore-submodules command-line option.
 	The 'git submodule' commands are not affected by this setting.
 
-diff.mnemonicprefix::
+diff.mnemonicPrefix::
 	If set, 'git diff' uses a prefix pair that is different from the
 	standard "a/" and "b/" depending on what is being compared.  When
 	this configuration is in effect, reverse diff output also swaps
@@ -98,19 +98,23 @@
 diff.noprefix::
 	If set, 'git diff' does not show any source or destination prefix.
 
-diff.orderfile::
+diff.orderFile::
 	File indicating how to order files within a diff, using
 	one shell glob pattern per line.
 	Can be overridden by the '-O' option to linkgit:git-diff[1].
 
 diff.renameLimit::
 	The number of files to consider when performing the copy/rename
-	detection; equivalent to the 'git diff' option '-l'.
+	detection; equivalent to the 'git diff' option `-l`.
 
 diff.renames::
-	Tells Git to detect renames.  If set to any boolean value, it
-	will enable basic rename detection.  If set to "copies" or
-	"copy", it will detect copies, as well.
+	Whether and how Git detects renames.  If set to "false",
+	rename detection is disabled. If set to "true", basic rename
+	detection is enabled.  If set to "copies" or "copy", Git will
+	detect copies, as well.  Defaults to true.  Note that this
+	affects only 'git diff' Porcelain like linkgit:git-diff[1] and
+	linkgit:git-log[1], and not lower level commands such as
+	linkgit:git-diff-files[1].
 
 diff.suppressBlankEmpty::
 	A boolean to inhibit the standard behavior of printing a space
@@ -148,7 +152,7 @@
 	conversion is used to generate a human-readable diff.  See
 	linkgit:gitattributes[5] for details.
 
-diff.<driver>.wordregex::
+diff.<driver>.wordRegex::
 	The regular expression that the diff driver should use to
 	split words in a line.  See linkgit:gitattributes[5] for
 	details.
@@ -166,6 +170,11 @@
 
 include::mergetools-diff.txt[]
 
+diff.compactionHeuristic::
+	Set this option to `true` to enable an experimental heuristic that
+	shifts the hunk boundary in an attempt to make the resulting
+	patch easier to read.
+
 diff.algorithm::
 	Choose a diff algorithm.  The variants are as follows:
 +
# install diff-config.txt /usr/share/doc/git-doc/diff-config.txt
--- /usr/share/doc/git-doc/diff-format.txt	2016-03-21 09:24:28.000000000 -0600
+++ diff-format.txt	2016-10-03 14:24:18.000000000 -0600
@@ -46,11 +46,11 @@
 . sha1 for "dst"; 0\{40\} if creation, unmerged or "look at work tree".
 . a space.
 . status, followed by optional "score" number.
-. a tab or a NUL when '-z' option is used.
+. a tab or a NUL when `-z` option is used.
 . path for "src"
-. a tab or a NUL when '-z' option is used; only exists for C or R.
+. a tab or a NUL when `-z` option is used; only exists for C or R.
 . path for "dst"; only exists for C or R.
-. an LF or a NUL when '-z' option is used, to terminate the record.
+. an LF or a NUL when `-z` option is used, to terminate the record.
 
 Possible status letters are:
 
@@ -66,7 +66,8 @@
 
 Status letters C and R are always followed by a score (denoting the
 percentage of similarity between the source and target of the move or
-copy), and are the only ones to be so.
+copy).  Status letter M may be followed by a score (denoting the
+percentage of dissimilarity) for file rewrites.
 
 <sha1> is shown as all 0's if a file is new on the filesystem
 and it is out of sync with the index.
@@ -85,7 +86,7 @@
 ----------------------
 
 "git-diff-tree", "git-diff-files" and "git-diff --raw"
-can take '-c' or '--cc' option
+can take `-c` or `--cc` option
 to generate diff output also for merge commits.  The output differs
 from the format described above in the following way:
 
# install diff-format.txt /usr/share/doc/git-doc/diff-format.txt
--- /usr/share/doc/git-doc/diff-generate-patch.txt	2016-03-21 09:24:28.000000000 -0600
+++ diff-generate-patch.txt	2016-10-03 14:24:18.000000000 -0600
@@ -2,11 +2,11 @@
 --------------------------
 
 When "git-diff-index", "git-diff-tree", or "git-diff-files" are run
-with a '-p' option, "git diff" without the '--raw' option, or
+with a `-p` option, "git diff" without the `--raw` option, or
 "git log" with the "-p" option, they
 do not produce the output described above; instead they produce a
 patch file.  You can customize the creation of such patches via the
-GIT_EXTERNAL_DIFF and the GIT_DIFF_OPTS environment variables.
+`GIT_EXTERNAL_DIFF` and the `GIT_DIFF_OPTS` environment variables.
 
 What the -p option produces is slightly different from the traditional
 diff format:
@@ -77,7 +77,7 @@
 Any diff-generating command can take the `-c` or `--cc` option to
 produce a 'combined diff' when showing a merge. This is the default
 format when showing merges with linkgit:git-diff[1] or
-linkgit:git-show[1]. Note also that you can give the `-m' option to any
+linkgit:git-show[1]. Note also that you can give the `-m` option to any
 of these commands to force generation of diffs with individual parents
 of a merge.
 
@@ -114,11 +114,11 @@
 ------------
 
 1.   It is preceded with a "git diff" header, that looks like
-     this (when '-c' option is used):
+     this (when `-c` option is used):
 
        diff --combined file
 +
-or like this (when '--cc' option is used):
+or like this (when `--cc` option is used):
 
        diff --cc file
 
@@ -174,7 +174,7 @@
 In the above example output, the function signature was changed
 from both files (hence two `-` removals from both file1 and
 file2, plus `++` to mean one line that was added does not appear
-in either file1 nor file2).  Also eight other lines are the same
+in either file1 or file2).  Also eight other lines are the same
 from file1 but do not appear in file2 (hence prefixed with `+`).
 
 When shown by `git diff-tree -c`, it compares the parents of a
# install diff-generate-patch.txt /usr/share/doc/git-doc/diff-generate-patch.txt
--- /usr/share/doc/git-doc/diff-options.txt	2016-03-21 09:24:28.000000000 -0600
+++ diff-options.txt	2016-10-03 14:24:18.000000000 -0600
@@ -23,13 +23,15 @@
 -u::
 --patch::
 	Generate patch (see section on generating patches).
-	{git-diff? This is the default.}
-endif::git-format-patch[]
+ifdef::git-diff[]
+	This is the default.
+endif::git-diff[]
 
 -s::
 --no-patch::
 	Suppress diff output. Useful for commands like `git show` that
 	show the patch by default, or to cancel the effect of `--patch`.
+endif::git-format-patch[]
 
 -U<n>::
 --unified=<n>::
@@ -41,8 +43,19 @@
 
 ifndef::git-format-patch[]
 --raw::
-	Generate the raw format.
-	{git-diff-core? This is the default.}
+ifndef::git-log[]
+	Generate the diff in raw format.
+ifdef::git-diff-core[]
+	This is the default.
+endif::git-diff-core[]
+endif::git-log[]
+ifdef::git-log[]
+	For each commit, show a summary of changes using the raw diff
+	format. See the "RAW OUTPUT FORMAT" section of
+	linkgit:git-diff[1]. This is different from showing the log
+	itself in raw format, which you can achieve with
+	`--format=raw`.
+endif::git-log[]
 endif::git-format-patch[]
 
 ifndef::git-format-patch[]
@@ -50,6 +63,13 @@
 	Synonym for `-p --raw`.
 endif::git-format-patch[]
 
+--compaction-heuristic::
+--no-compaction-heuristic::
+	These are to help debugging and tuning an experimental
+	heuristic (which is off by default) that shifts the hunk
+	boundary in an attempt to make the resulting patch easier
+	to read.
+
 --minimal::
 	Spend extra time to make sure the smallest possible
 	diff is produced.
@@ -254,8 +274,11 @@
 A match that contains a newline is silently truncated(!) at the
 newline.
 +
+For example, `--word-diff-regex=.` will treat each character as a word
+and, correspondingly, show differences character by character.
++
 The regex can also be set via a diff driver or configuration option, see
-linkgit:gitattributes[1] or linkgit:git-config[1].  Giving it explicitly
+linkgit:gitattributes[5] or linkgit:git-config[1].  Giving it explicitly
 overrides any diff driver or configuration setting.  Diff drivers
 override configuration settings.
 
@@ -270,14 +293,24 @@
 
 ifndef::git-format-patch[]
 --check::
-	Warn if changes introduce whitespace errors.  What are
-	considered whitespace errors is controlled by `core.whitespace`
+	Warn if changes introduce conflict markers or whitespace errors.
+	What are considered whitespace errors is controlled by `core.whitespace`
 	configuration.  By default, trailing whitespaces (including
 	lines that solely consist of whitespaces) and a space character
 	that is immediately followed by a tab character inside the
 	initial indent of the line are considered whitespace errors.
 	Exits with non-zero status if problems are found. Not compatible
 	with --exit-code.
+
+--ws-error-highlight=<kind>::
+	Highlight whitespace errors on lines specified by <kind>
+	in the color specified by `color.diff.whitespace`.  <kind>
+	is a comma separated list of `old`, `new`, `context`.  When
+	this option is not given, only whitespace errors in `new`
+	lines are highlighted.  E.g. `--ws-error-highlight=new,old`
+	highlights whitespace errors on both deleted and added lines.
+	`all` can be used as a short-hand for `old,new,context`.
+
 endif::git-format-patch[]
 
 --full-index::
@@ -358,7 +391,7 @@
 --irreversible-delete::
 	Omit the preimage for deletes, i.e. print only the header but not
 	the diff between the preimage and `/dev/null`. The resulting patch
-	is not meant to be applied with `patch` nor `git apply`; this is
+	is not meant to be applied with `patch` or `git apply`; this is
 	solely for people who want to just concentrate on reviewing the
 	text after the change. In addition, the output obviously lack
 	enough information to apply such a patch in reverse, even manually,
@@ -386,6 +419,9 @@
 	paths are selected if there is any file that matches
 	other criteria in the comparison; if there is no file
 	that matches other criteria, nothing is selected.
++
+Also, these upper-case letters can be downcased to exclude.  E.g.
+`--diff-filter=ad` excludes added and deleted paths.
 
 -S<string>::
 	Look for differences that change the number of occurrences of
@@ -432,8 +468,8 @@
 -O<orderfile>::
 	Output the patch in the order specified in the
 	<orderfile>, which has one shell glob pattern per line.
-	This overrides the `diff.orderfile` configuration variable
-	(see linkgit:git-config[1]).  To cancel `diff.orderfile`,
+	This overrides the `diff.orderFile` configuration variable
+	(see linkgit:git-config[1]).  To cancel `diff.orderFile`,
 	use `-O/dev/null`.
 
 ifndef::git-format-patch[]
# install diff-options.txt /usr/share/doc/git-doc/diff-options.txt
--- /usr/share/doc/git-doc/fetch-options.txt	2016-03-21 09:24:28.000000000 -0600
+++ fetch-options.txt	2016-10-03 14:24:18.000000000 -0600
@@ -8,10 +8,11 @@
 	option old data in `.git/FETCH_HEAD` will be overwritten.
 
 --depth=<depth>::
-	Deepen or shorten the history of a 'shallow' repository created by
-	`git clone` with `--depth=<depth>` option (see linkgit:git-clone[1])
-	to the specified number of commits from the tip of each remote
-	branch history. Tags for the deepened commits are not fetched.
+	Limit fetching to the specified number of commits from the tip of
+	each remote branch history. If fetching to a 'shallow' repository
+	created by `git clone` with `--depth=<depth>` option (see
+	linkgit:git-clone[1]), deepen or shorten the history to the specified
+	number of commits. Tags for the deepened commits are not fetched.
 
 --unshallow::
 	If the source repository is complete, convert a shallow
@@ -51,7 +52,7 @@
 
 -p::
 --prune::
-	After fetching, remove any remote-tracking references that no
+	Before fetching, remove any remote-tracking references that no
 	longer exist on the remote.  Tags are not subject to pruning
 	if they are fetched only because of the default tag
 	auto-following or due to a --tags option.  However, if tags
@@ -68,10 +69,18 @@
 	By default, tags that point at objects that are downloaded
 	from the remote repository are fetched and stored locally.
 	This option disables this automatic tag following. The default
-	behavior for a remote may be specified with the remote.<name>.tagopt
+	behavior for a remote may be specified with the remote.<name>.tagOpt
 	setting. See linkgit:git-config[1].
 
 ifndef::git-pull[]
+--refmap=<refspec>::
+	When fetching refs listed on the command line, use the
+	specified refspec (can be given more than once) to map the
+	refs to remote-tracking branches, instead of the values of
+	`remote.*.fetch` configuration variables for the remote
+	repository.  See section on "Configured Remote-tracking
+	Branches" for details.
+
 -t::
 --tags::
 	Fetch all tags from the remote (i.e., fetch remote tags
@@ -79,7 +88,7 @@
 	to whatever else would otherwise be fetched.  Using this
 	option alone does not subject tags to pruning, even if --prune
 	is used (though tags may be pruned anyway if they are also the
-	destination of an explicit refspec; see '--prune').
+	destination of an explicit refspec; see `--prune`).
 
 --recurse-submodules[=yes|on-demand|no]::
 	This option controls if and under what conditions new commits of
@@ -92,9 +101,16 @@
 	reference to a commit that isn't already in the local submodule
 	clone.
 
+-j::
+--jobs=<n>::
+	Number of parallel children to be used for fetching submodules.
+	Each will fetch from different submodules, such that fetching many
+	submodules will be faster. By default submodules will be fetched
+	one at a time.
+
 --no-recurse-submodules::
 	Disable recursive fetching of submodules (this has the same effect as
-	using the '--recurse-submodules=no' option).
+	using the `--recurse-submodules=no` option).
 
 --submodule-prefix=<path>::
 	Prepend <path> to paths printed in informative messages
@@ -121,7 +137,7 @@
 
 --upload-pack <upload-pack>::
 	When given, and the repository to fetch from is handled
-	by 'git fetch-pack', '--exec=<upload-pack>' is passed to
+	by 'git fetch-pack', `--exec=<upload-pack>` is passed to
 	the command to specify non-default path for the command
 	run on the other end.
 
@@ -142,3 +158,11 @@
 	by default when it is attached to a terminal, unless -q
 	is specified. This flag forces progress status even if the
 	standard error stream is not directed to a terminal.
+
+-4::
+--ipv4::
+	Use IPv4 addresses only, ignoring IPv6 addresses.
+
+-6::
+--ipv6::
+	Use IPv6 addresses only, ignoring IPv4 addresses.
# install fetch-options.txt /usr/share/doc/git-doc/fetch-options.txt
# install fmt-merge-msg-config.txt /usr/share/doc/git-doc/fmt-merge-msg-config.txt
--- /usr/share/doc/git-doc/git-add.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-add.txt	2016-10-03 14:24:18.000000000 -0600
@@ -8,10 +8,10 @@
 SYNOPSIS
 --------
 [verse]
-'git add' [-n] [-v] [--force | -f] [--interactive | -i] [--patch | -p]
+'git add' [--verbose | -v] [--dry-run | -n] [--force | -f] [--interactive | -i] [--patch | -p]
 	  [--edit | -e] [--[no-]all | --[no-]ignore-removal | [--update | -u]]
 	  [--intent-to-add | -N] [--refresh] [--ignore-errors] [--ignore-missing]
-	  [--] [<pathspec>...]
+	  [--chmod=(+|-)x] [--] [<pathspec>...]
 
 DESCRIPTION
 -----------
@@ -24,7 +24,7 @@
 
 The "index" holds a snapshot of the content of the working tree, and it
 is this snapshot that is taken as the contents of the next commit.  Thus
-after making any changes to the working directory, and before running
+after making any changes to the working tree, and before running
 the commit command, you must use the `add` command to add any new or
 modified files to the index.
 
@@ -53,8 +53,14 @@
 	Files to add content from.  Fileglobs (e.g. `*.c`) can
 	be given to add all matching files.  Also a
 	leading directory name (e.g. `dir` to add `dir/file1`
-	and `dir/file2`) can be given to add all files in the
-	directory, recursively.
+	and `dir/file2`) can be given to update the index to
+	match the current state of the directory as a whole (e.g.
+	specifying `dir` will record not just a file `dir/file1`
+	modified in the working tree, a file `dir/file2` added to
+	the working tree, but also a file `dir/file3` removed from
+	the working tree.  Note that older versions of Git used
+	to ignore removed files; use `--no-all` option if you want
+	to add modified or new files but ignore removed	ones.
 
 -n::
 --dry-run::
@@ -87,7 +93,8 @@
 initial command menu and directly jumps to the `patch` subcommand.
 See ``Interactive mode'' for details.
 
--e, \--edit::
+-e::
+--edit::
 	Open the diff vs. the index in an editor and let the user
 	edit it.  After the editor was closed, adjust the hunk headers
 	and apply the patch to the index.
@@ -104,10 +111,10 @@
 	<pathspec>.  This removes as well as modifies index entries to
 	match the working tree, but adds no new files.
 +
-If no <pathspec> is given, the current version of Git defaults to
-"."; in other words, update all tracked files in the current directory
-and its subdirectories. This default will change in a future version
-of Git, hence the form without <pathspec> should not be used.
+If no <pathspec> is given when `-u` option is used, all
+tracked files in the entire working tree are updated (old versions
+of Git used to limit the update to the current directory and its
+subdirectories).
 
 -A::
 --all::
@@ -117,10 +124,10 @@
 	entry.	This adds, modifies, and removes index entries to
 	match the working tree.
 +
-If no <pathspec> is given, the current version of Git defaults to
-"."; in other words, update all files in the current directory
-and its subdirectories. This default will change in a future version
-of Git, hence the form without <pathspec> should not be used.
+If no <pathspec> is given when `-A` option is used, all
+files in the entire working tree are updated (old versions
+of Git used to limit the update to the current directory and its
+subdirectories).
 
 --no-all::
 --ignore-removal::
@@ -129,11 +136,9 @@
 	files that have been removed from the working tree.  This
 	option is a no-op when no <pathspec> is used.
 +
-This option is primarily to help the current users of Git, whose
-"git add <pathspec>..." ignores removed files.  In future versions
-of Git, "git add <pathspec>..." will be a synonym to "git add -A
-<pathspec>..." and "git add --ignore-removal <pathspec>..." will behave like
-today's "git add <pathspec>...", ignoring removed files.
+This option is primarily to help users who are used to older
+versions of Git, whose "git add <pathspec>..." was a synonym
+for "git add --no-all <pathspec>...", i.e. ignored removed files.
 
 -N::
 --intent-to-add::
@@ -160,6 +165,11 @@
 	be ignored, no matter if they are already present in the work
 	tree or not.
 
+--chmod=(+|-)x::
+	Override the executable bit of the added files.  The executable
+	bit is only changed in the index, the files on disk are left
+	unchanged.
+
 \--::
 	This option can be used to separate command-line options from
 	the list of files, (useful when filenames might be mistaken
@@ -169,7 +179,7 @@
 Configuration
 -------------
 
-The optional configuration variable `core.excludesfile` indicates a path to a
+The optional configuration variable `core.excludesFile` indicates a path to a
 file containing patterns of file names to exclude from git-add, similar to
 $GIT_DIR/info/exclude.  Patterns in the exclude file are used in addition to
 those in info/exclude.  See linkgit:gitignore[5].
@@ -296,9 +306,9 @@
 
        y - stage this hunk
        n - do not stage this hunk
-       q - quit; do not stage this hunk nor any of the remaining ones
+       q - quit; do not stage this hunk or any of the remaining ones
        a - stage this hunk and all later hunks in the file
-       d - do not stage this hunk nor any of the later hunks in the file
+       d - do not stage this hunk or any of the later hunks in the file
        g - select a hunk to go to
        / - search for a hunk matching the given regex
        j - leave this hunk undecided, see next undecided hunk
@@ -313,7 +323,7 @@
 that was chosen, the index is updated with the selected hunks.
 +
 You can omit having to type return here, by setting the configuration
-variable `interactive.singlekey` to `true`.
+variable `interactive.singleKey` to `true`.
 
 diff::
 
# install git-add.txt /usr/share/doc/git-doc/git-add.txt
--- /usr/share/doc/git-doc/git-am.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-am.txt	2016-10-03 14:24:18.000000000 -0600
@@ -10,11 +10,11 @@
 --------
 [verse]
 'git am' [--signoff] [--keep] [--[no-]keep-cr] [--[no-]utf8]
-	 [--3way] [--interactive] [--committer-date-is-author-date]
+	 [--[no-]3way] [--interactive] [--committer-date-is-author-date]
 	 [--ignore-date] [--ignore-space-change | --ignore-whitespace]
 	 [--whitespace=<option>] [-C<n>] [-p<n>] [--directory=<dir>]
 	 [--exclude=<path>] [--include=<path>] [--reject] [-q | --quiet]
-	 [--[no-]scissors]
+	 [--[no-]scissors] [-S[<keyid>]] [--patch-format=<format>]
 	 [(<mbox> | <Maildir>)...]
 'git am' (--continue | --skip | --abort)
 
@@ -35,6 +35,7 @@
 --signoff::
 	Add a `Signed-off-by:` line to the commit message, using
 	the committer identity of yourself.
+	See the signoff option in linkgit:git-commit[1] for more information.
 
 -k::
 --keep::
@@ -52,11 +53,23 @@
 -c::
 --scissors::
 	Remove everything in body before a scissors line (see
-	linkgit:git-mailinfo[1]).
+	linkgit:git-mailinfo[1]). Can be activated by default using
+	the `mailinfo.scissors` configuration variable.
 
 --no-scissors::
 	Ignore scissors lines (see linkgit:git-mailinfo[1]).
 
+-m::
+--message-id::
+	Pass the `-m` flag to 'git mailinfo' (see linkgit:git-mailinfo[1]),
+	so that the Message-ID header is added to the commit message.
+	The `am.messageid` configuration variable can be used to specify
+	the default behaviour.
+
+--no-message-id::
+	Do not add the Message-ID header to the commit message.
+	`no-message-id` is useful to override `am.messageid`.
+
 -q::
 --quiet::
 	Be quiet. Only print error messages.
@@ -78,12 +91,14 @@
 
 -3::
 --3way::
+--no-3way::
 	When the patch does not apply cleanly, fall back on
 	3-way merge if the patch records the identity of blobs
 	it is supposed to apply to and we have those blobs
-	available locally.
+	available locally. `--no-3way` can be used to override
+	am.threeWay configuration variable. For more information,
+	see am.threeWay in linkgit:git-config[1].
 
---ignore-date::
 --ignore-space-change::
 --ignore-whitespace::
 --whitespace=<option>::
@@ -97,6 +112,13 @@
 	program that applies
 	the patch.
 
+--patch-format::
+	By default the command will try to detect the patch format
+	automatically. This option allows the user to bypass the automatic
+	detection and specify the patch format that the patch(es) should be
+	interpreted as. Valid formats are mbox, mboxrd,
+	stgit, stgit-series and hg.
+
 -i::
 --interactive::
 	Run interactively.
@@ -119,6 +141,12 @@
 	Skip the current patch.  This is only meaningful when
 	restarting an aborted patch.
 
+-S[<keyid>]::
+--gpg-sign[=<keyid>]::
+	GPG-sign commits. The `keyid` argument is optional and
+	defaults to the committer identity; if specified, it must be
+	stuck to the option without a space.
+
 --continue::
 -r::
 --resolved::
@@ -171,12 +199,12 @@
 to process.  Upon seeing the first patch that does not apply, it
 aborts in the middle.  You can recover from this in one of two ways:
 
-. skip the current patch by re-running the command with the '--skip'
+. skip the current patch by re-running the command with the `--skip`
   option.
 
 . hand resolve the conflict in the working directory, and update
   the index file to bring it into a state that the patch should
-  have produced.  Then run the command with the '--continue' option.
+  have produced.  Then run the command with the `--continue` option.
 
 The command refuses to process new mailboxes until the current
 operation is finished, so if you decide to start over from scratch,
@@ -189,6 +217,11 @@
 commits that is more easily fixed by changing the mailbox (e.g.
 errors in the "From:" lines).
 
+HOOKS
+-----
+This command can run `applypatch-msg`, `pre-applypatch`,
+and `post-applypatch` hooks.  See linkgit:githooks[5] for more
+information.
 
 SEE ALSO
 --------
# install git-am.txt /usr/share/doc/git-doc/git-am.txt
--- /usr/share/doc/git-doc/git-apply.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-apply.txt	2016-10-03 14:24:18.000000000 -0600
@@ -13,14 +13,16 @@
 	  [--apply] [--no-add] [--build-fake-ancestor=<file>] [-R | --reverse]
 	  [--allow-binary-replacement | --binary] [--reject] [-z]
 	  [-p<n>] [-C<n>] [--inaccurate-eof] [--recount] [--cached]
-	  [--ignore-space-change | --ignore-whitespace ]
+	  [--ignore-space-change | --ignore-whitespace]
 	  [--whitespace=(nowarn|warn|fix|error|error-all)]
 	  [--exclude=<path>] [--include=<path>] [--directory=<root>]
-	  [--verbose] [<patch>...]
+	  [--verbose] [--unsafe-paths] [<patch>...]
 
 DESCRIPTION
 -----------
 Reads the supplied diff output (i.e. "a patch") and applies it to files.
+When running from a subdirectory in a repository, patched paths
+outside the directory are ignored.
 With the `--index` option the patch is also applied to the index, and
 with the `--cached` option the patch is only applied to the index.
 Without these options, the command applies the patch only to files,
@@ -229,10 +231,20 @@
 can be applied to the file in the working tree `modules/git-gui/git-gui.sh` by
 running `git apply --directory=modules/git-gui`.
 
+--unsafe-paths::
+	By default, a patch that affects outside the working area
+	(either a Git controlled working tree, or the current working
+	directory when "git apply" is used as a replacement of GNU
+	patch) is rejected as a mistake (or a mischief).
++
+When `git apply` is used as a "better GNU patch", the user can pass
+the `--unsafe-paths` option to override this safety check.  This option
+has no effect when `--index` or `--cached` is in use.
+
 Configuration
 -------------
 
-apply.ignorewhitespace::
+apply.ignoreWhitespace::
 	Set to 'change' if you want changes in whitespace to be ignored by default.
 	Set to one of: no, none, never, false if you want changes in
 	whitespace to be significant.
# install git-apply.txt /usr/share/doc/git-doc/git-apply.txt
--- /usr/share/doc/git-doc/git-archive.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-archive.txt	2016-10-03 14:24:18.000000000 -0600
@@ -65,7 +65,10 @@
 
 --remote=<repo>::
 	Instead of making a tar archive from the local repository,
-	retrieve a tar archive from a remote repository.
+	retrieve a tar archive from a remote repository. Note that the
+	remote repository may place restrictions on which sha1
+	expressions may be allowed in `<tree-ish>`. See
+	linkgit:git-upload-archive[1] for details.
 
 --exec=<git-upload-archive>::
 	Used with --remote to specify the path to the
# install git-archive.txt /usr/share/doc/git-doc/git-archive.txt
--- /usr/share/doc/git-doc/git-bisect-lk2009.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-bisect-lk2009.txt	2016-10-03 14:24:18.000000000 -0600
@@ -119,7 +119,7 @@
 of people. And as there are often many people who depend (sometimes
 critically) on such software, regressions are a really big problem.
 
-One such software is the linux kernel. And if we look at the linux
+One such software is the Linux kernel. And if we look at the Linux
 kernel, we can see that a lot of time and effort is spent to fight
 regressions. The release cycle start with a 2 weeks long merge
 window. Then the first release candidate (rc) version is tagged. And
@@ -132,7 +132,7 @@
 time. But this is not the end of the fight yet, as of course it
 continues after the release.
 
-And then this is what Ingo Molnar (a well known linux kernel
+And then this is what Ingo Molnar (a well known Linux kernel
 developer) says about his use of git bisect:
 
 _____________
@@ -366,7 +366,7 @@
 
 Or if you want more control, you can inspect the current state using
 for example "git bisect visualize". It will launch gitk (or "git log"
-if the DISPLAY environment variable is not set) to help you find a
+if the `DISPLAY` environment variable is not set) to help you find a
 better bisection point.
 
 Either way, if you have a string of untestable commits, it might
@@ -1321,7 +1321,7 @@
 _____________
 
 Acknowledgments
-----------------
+---------------
 
 Many thanks to Junio Hamano for his help in reviewing this paper, for
 reviewing the patches I sent to the Git mailing list, for discussing
# install git-bisect-lk2009.txt /usr/share/doc/git-doc/git-bisect-lk2009.txt
--- /usr/share/doc/git-doc/git-bisect.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-bisect.txt	2016-10-03 14:24:18.000000000 -0600
@@ -3,7 +3,7 @@
 
 NAME
 ----
-git-bisect - Find by binary search the change that introduced a bug
+git-bisect - Use binary search to find the commit that introduced a bug
 
 
 SYNOPSIS
@@ -16,74 +16,89 @@
 The command takes various subcommands, and different options depending
 on the subcommand:
 
- git bisect help
- git bisect start [--no-checkout] [<bad> [<good>...]] [--] [<paths>...]
- git bisect bad [<rev>]
- git bisect good [<rev>...]
+ git bisect start [--term-{old,good}=<term> --term-{new,bad}=<term>]
+		  [--no-checkout] [<bad> [<good>...]] [--] [<paths>...]
+ git bisect (bad|new) [<rev>]
+ git bisect (good|old) [<rev>...]
+ git bisect terms [--term-good | --term-bad]
  git bisect skip [(<rev>|<range>)...]
  git bisect reset [<commit>]
  git bisect visualize
  git bisect replay <logfile>
  git bisect log
  git bisect run <cmd>...
+ git bisect help
 
-This command uses 'git rev-list --bisect' to help drive the
-binary search process to find which change introduced a bug, given an
-old "good" commit object name and a later "bad" commit object name.
-
-Getting help
-~~~~~~~~~~~~
-
-Use "git bisect" to get a short usage description, and "git bisect
-help" or "git bisect -h" to get a long usage description.
+This command uses a binary search algorithm to find which commit in
+your project's history introduced a bug. You use it by first telling
+it a "bad" commit that is known to contain the bug, and a "good"
+commit that is known to be before the bug was introduced. Then `git
+bisect` picks a commit between those two endpoints and asks you
+whether the selected commit is "good" or "bad". It continues narrowing
+down the range until it finds the exact commit that introduced the
+change.
+
+In fact, `git bisect` can be used to find the commit that changed
+*any* property of your project; e.g., the commit that fixed a bug, or
+the commit that caused a benchmark's performance to improve. To
+support this more general usage, the terms "old" and "new" can be used
+in place of "good" and "bad", or you can choose your own terms. See
+section "Alternate terms" below for more information.
 
 Basic bisect commands: start, bad, good
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
-Using the Linux kernel tree as an example, basic use of the bisect
-command is as follows:
+As an example, suppose you are trying to find the commit that broke a
+feature that was known to work in version `v2.6.13-rc2` of your
+project. You start a bisect session as follows:
 
 ------------------------------------------------
 $ git bisect start
 $ git bisect bad                 # Current version is bad
-$ git bisect good v2.6.13-rc2    # v2.6.13-rc2 was the last version
-                                 # tested that was good
+$ git bisect good v2.6.13-rc2    # v2.6.13-rc2 is known to be good
+------------------------------------------------
+
+Once you have specified at least one bad and one good commit, `git
+bisect` selects a commit in the middle of that range of history,
+checks it out, and outputs something similar to the following:
+
+------------------------------------------------
+Bisecting: 675 revisions left to test after this (roughly 10 steps)
 ------------------------------------------------
 
-When you have specified at least one bad and one good version, the
-command bisects the revision tree and outputs something similar to
-the following:
+You should now compile the checked-out version and test it. If that
+version works correctly, type
 
 ------------------------------------------------
-Bisecting: 675 revisions left to test after this
+$ git bisect good
 ------------------------------------------------
 
-The state in the middle of the set of revisions is then checked out.
-You would now compile that kernel and boot it. If the booted kernel
-works correctly, you would then issue the following command:
+If that version is broken, type
 
 ------------------------------------------------
-$ git bisect good			# this one is good
+$ git bisect bad
 ------------------------------------------------
 
-The output of this command would be something similar to the following:
+Then `git bisect` will respond with something like
 
 ------------------------------------------------
-Bisecting: 337 revisions left to test after this
+Bisecting: 337 revisions left to test after this (roughly 9 steps)
 ------------------------------------------------
 
-You keep repeating this process, compiling the tree, testing it, and
-depending on whether it is good or bad issuing the command "git bisect good"
-or "git bisect bad" to ask for the next bisection.
+Keep repeating the process: compile the tree, test it, and depending
+on whether it is good or bad run `git bisect good` or `git bisect bad`
+to ask for the next commit that needs testing.
+
+Eventually there will be no more revisions left to inspect, and the
+command will print out a description of the first bad commit. The
+reference `refs/bisect/bad` will be left pointing at that commit.
 
-Eventually there will be no more revisions left to bisect, and you
-will have been left with the first bad kernel revision in "refs/bisect/bad".
 
 Bisect reset
 ~~~~~~~~~~~~
 
 After a bisect session, to clean up the bisection state and return to
-the original HEAD (i.e., to quit bisecting), issue the following command:
+the original HEAD, issue the following command:
 
 ------------------------------------------------
 $ git bisect reset
@@ -100,9 +115,83 @@
 $ git bisect reset <commit>
 ------------------------------------------------
 
-For example, `git bisect reset HEAD` will leave you on the current
-bisection commit and avoid switching commits at all, while `git bisect
-reset bisect/bad` will check out the first bad revision.
+For example, `git bisect reset bisect/bad` will check out the first
+bad revision, while `git bisect reset HEAD` will leave you on the
+current bisection commit and avoid switching commits at all.
+
+
+Alternate terms
+~~~~~~~~~~~~~~~
+
+Sometimes you are not looking for the commit that introduced a
+breakage, but rather for a commit that caused a change between some
+other "old" state and "new" state. For example, you might be looking
+for the commit that introduced a particular fix. Or you might be
+looking for the first commit in which the source-code filenames were
+finally all converted to your company's naming standard. Or whatever.
+
+In such cases it can be very confusing to use the terms "good" and
+"bad" to refer to "the state before the change" and "the state after
+the change". So instead, you can use the terms "old" and "new",
+respectively, in place of "good" and "bad". (But note that you cannot
+mix "good" and "bad" with "old" and "new" in a single session.)
+
+In this more general usage, you provide `git bisect` with a "new"
+commit has some property and an "old" commit that doesn't have that
+property. Each time `git bisect` checks out a commit, you test if that
+commit has the property. If it does, mark the commit as "new";
+otherwise, mark it as "old". When the bisection is done, `git bisect`
+will report which commit introduced the property.
+
+To use "old" and "new" instead of "good" and bad, you must run `git
+bisect start` without commits as argument and then run the following
+commands to add the commits:
+
+------------------------------------------------
+git bisect old [<rev>]
+------------------------------------------------
+
+to indicate that a commit was before the sought change, or
+
+------------------------------------------------
+git bisect new [<rev>...]
+------------------------------------------------
+
+to indicate that it was after.
+
+To get a reminder of the currently used terms, use
+
+------------------------------------------------
+git bisect terms
+------------------------------------------------
+
+You can get just the old (respectively new) term with `git bisect term
+--term-old` or `git bisect term --term-good`.
+
+If you would like to use your own terms instead of "bad"/"good" or
+"new"/"old", you can choose any names you like (except existing bisect
+subcommands like `reset`, `start`, ...) by starting the
+bisection using
+
+------------------------------------------------
+git bisect start --term-old <term-old> --term-new <term-new>
+------------------------------------------------
+
+For example, if you are looking for a commit that introduced a
+performance regression, you might use
+
+------------------------------------------------
+git bisect start --term-old fast --term-new slow
+------------------------------------------------
+
+Or if you are looking for the commit that fixed a bug, you might use
+
+------------------------------------------------
+git bisect start --term-new fixed --term-old broken
+------------------------------------------------
+
+Then, use `git bisect <term-old>` and `git bisect <term-new>` instead
+of `git bisect good` and `git bisect bad` to mark commits.
 
 Bisect visualize
 ~~~~~~~~~~~~~~~~
@@ -116,8 +205,8 @@
 
 `view` may also be used as a synonym for `visualize`.
 
-If the 'DISPLAY' environment variable is not set, 'git log' is used
-instead.  You can also give command line options such as `-p` and
+If the `DISPLAY` environment variable is not set, 'git log' is used
+instead.  You can also give command-line options such as `-p` and
 `--stat`.
 
 ------------
@@ -147,17 +236,17 @@
 Avoiding testing a commit
 ~~~~~~~~~~~~~~~~~~~~~~~~~
 
-If, in the middle of a bisect session, you know that the next suggested
-revision is not a good one to test (e.g. the change the commit
-introduces is known not to work in your environment and you know it
-does not have anything to do with the bug you are chasing), you may
-want to find a nearby commit and try that instead.
+If, in the middle of a bisect session, you know that the suggested
+revision is not a good one to test (e.g. it fails to build and you
+know that the failure does not have anything to do with the bug you
+are chasing), you can manually select a nearby commit and test that
+one instead.
 
 For example:
 
 ------------
 $ git bisect good/bad			# previous round was good or bad.
-Bisecting: 337 revisions left to test after this
+Bisecting: 337 revisions left to test after this (roughly 9 steps)
 $ git bisect visualize			# oops, that is uninteresting.
 $ git reset --hard HEAD~3		# try 3 revisions before what
 					# was suggested
@@ -167,20 +256,21 @@
 the revision as good or bad in the usual manner.
 
 Bisect skip
-~~~~~~~~~~~~
+~~~~~~~~~~~
 
-Instead of choosing by yourself a nearby commit, you can ask Git
-to do it for you by issuing the command:
+Instead of choosing a nearby commit by yourself, you can ask Git to do
+it for you by issuing the command:
 
 ------------
 $ git bisect skip                 # Current version cannot be tested
 ------------
 
-But Git may eventually be unable to tell the first bad commit among
-a bad commit and one or more skipped commits.
+However, if you skip a commit adjacent to the one you are looking for,
+Git will be unable to tell exactly which of those commits was the
+first bad one.
 
-You can even skip a range of commits, instead of just one commit,
-using the "'<commit1>'..'<commit2>'" notation. For example:
+You can also skip a range of commits, instead of just one commit,
+using range notation. For example:
 
 ------------
 $ git bisect skip v2.5..v2.6
@@ -196,8 +286,8 @@
 $ git bisect skip v2.5 v2.5..v2.6
 ------------
 
-This tells the bisect process that the commits between `v2.5` included
-and `v2.6` included should be skipped.
+This tells the bisect process that the commits between `v2.5` and
+`v2.6` (inclusive) should be skipped.
 
 
 Cutting down bisection by giving more parameters to bisect start
@@ -231,23 +321,23 @@
 $ git bisect run my_script arguments
 ------------
 
-Note that the script (`my_script` in the above example) should
-exit with code 0 if the current source code is good, and exit with a
-code between 1 and 127 (inclusive), except 125, if the current
-source code is bad.
+Note that the script (`my_script` in the above example) should exit
+with code 0 if the current source code is good/old, and exit with a
+code between 1 and 127 (inclusive), except 125, if the current source
+code is bad/new.
 
 Any other exit code will abort the bisect process. It should be noted
-that a program that terminates via "exit(-1)" leaves $? = 255, (see the
-exit(3) manual page), as the value is chopped with "& 0377".
+that a program that terminates via `exit(-1)` leaves $? = 255, (see the
+exit(3) manual page), as the value is chopped with `& 0377`.
 
 The special exit code 125 should be used when the current source code
 cannot be tested. If the script exits with this code, the current
 revision will be skipped (see `git bisect skip` above). 125 was chosen
 as the highest sensible value to use for this purpose, because 126 and 127
 are used by POSIX shells to signal specific error status (127 is for
-command not found, 126 is for command found but not executable---these
+command not found, 126 is for command found but not executable--these
 details do not matter, as they are normal errors in the script, as far as
-"bisect run" is concerned).
+`bisect run` is concerned).
 
 You may often find that during a bisect session you want to have
 temporary modifications (e.g. s/#define DEBUG 0/#define DEBUG 1/ in a
@@ -260,7 +350,7 @@
 before compiling, run the real test, and afterwards decide if the
 revision (possibly with the needed patch) passed the test and then
 rewind the tree to the pristine state.  Finally the script should exit
-with the status of the real test to let the "git bisect run" command loop
+with the status of the real test to let the `git bisect run` command loop
 determine the eventual outcome of the bisect session.
 
 OPTIONS
@@ -268,7 +358,7 @@
 --no-checkout::
 +
 Do not checkout the new working tree at each iteration of the bisection
-process. Instead just update a special reference named 'BISECT_HEAD' to make
+process. Instead just update a special reference named `BISECT_HEAD` to make
 it point to the commit that should be tested.
 +
 This option may be useful when the test you would perform in each step
@@ -307,12 +397,12 @@
 $ git bisect reset                   # quit the bisect session
 ------------
 +
-Here we use a "test.sh" custom script. In this script, if "make"
+Here we use a `test.sh` custom script. In this script, if `make`
 fails, we skip the current commit.
-"check_test_case.sh" should "exit 0" if the test case passes,
-and "exit 1" otherwise.
+`check_test_case.sh` should `exit 0` if the test case passes,
+and `exit 1` otherwise.
 +
-It is safer if both "test.sh" and "check_test_case.sh" are
+It is safer if both `test.sh` and `check_test_case.sh` are
 outside the repository to prevent interactions between the bisect,
 make and test processes and the scripts.
 
@@ -379,6 +469,26 @@
 has at least one parent whose reachable graph is fully traversable in the sense
 required by 'git pack objects'.
 
+* Look for a fix instead of a regression in the code
++
+------------
+$ git bisect start
+$ git bisect new HEAD    # current commit is marked as new
+$ git bisect old HEAD~10 # the tenth commit from now is marked as old
+------------
++
+or:
+------------
+$ git bisect start --term-old broken --term-new fixed
+$ git bisect fixed
+$ git bisect broken HEAD~10
+------------
+
+Getting help
+~~~~~~~~~~~~
+
+Use `git bisect` to get a short usage description, and `git bisect
+help` or `git bisect -h` to get a long usage description.
 
 SEE ALSO
 --------
# install git-bisect.txt /usr/share/doc/git-doc/git-bisect.txt
--- /usr/share/doc/git-doc/git-blame.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-blame.txt	2016-10-03 14:24:18.000000000 -0600
@@ -10,7 +10,8 @@
 [verse]
 'git blame' [-c] [-b] [-l] [--root] [-t] [-f] [-n] [-s] [-e] [-p] [-w] [--incremental]
 	    [-L <range>] [-S <revs-file>] [-M] [-C] [-C] [-C] [--since=<date>]
-	    [--abbrev=<n>] [<rev> | --contents <file> | --reverse <rev>] [--] <file>
+	    [--progress] [--abbrev=<n>] [<rev> | --contents <file> | --reverse <rev>]
+	    [--] <file>
 
 DESCRIPTION
 -----------
@@ -35,7 +36,8 @@
 development history for when a code snippet occurred in a change. This makes it
 possible to track when a code snippet was added to a file, moved or copied
 between files, and eventually deleted or replaced. It works by searching for
-a text string in the diff. A small example:
+a text string in the diff. A small example of the pickaxe interface
+that searches for `blame_usage`:
 
 -----------------------------------------------------------------------------
 $ git log --pretty=oneline -S'blame_usage'
@@ -75,6 +77,8 @@
 -e::
 --show-email::
 	Show the author email instead of author name (Default: off).
+	This can also be controlled via the `blame.showEmail` config
+	option.
 
 -w::
 	Ignore whitespace when comparing the parent's version and
# install git-blame.txt /usr/share/doc/git-doc/git-blame.txt
--- /usr/share/doc/git-doc/git-branch.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-branch.txt	2016-10-03 14:24:18.000000000 -0600
@@ -11,7 +11,8 @@
 'git branch' [--color[=<when>] | --no-color] [-r | -a]
 	[--list] [-v [--abbrev=<length> | --no-abbrev]]
 	[--column[=<options>] | --no-column]
-	[(--merged | --no-merged | --contains) [<commit>]] [<pattern>...]
+	[(--merged | --no-merged | --contains) [<commit>]] [--sort=<key>]
+	[--points-at <object>] [<pattern>...]
 'git branch' [--set-upstream | --track | --no-track] [-l] [-f] <branchname> [<start-point>]
 'git branch' (--set-upstream-to=<upstream> | -u <upstream>) [<branchname>]
 'git branch' --unset-upstream [<branchname>]
@@ -38,10 +39,10 @@
 commit (i.e. the branches whose tip commits are reachable from the named
 commit) will be listed.  With `--no-merged` only branches not merged into
 the named commit will be listed.  If the <commit> argument is missing it
-defaults to 'HEAD' (i.e. the tip of the current branch).
+defaults to `HEAD` (i.e. the tip of the current branch).
 
 The command's second form creates a new branch head named <branchname>
-which points to the current 'HEAD', or <start-point> if given.
+which points to the current `HEAD`, or <start-point> if given.
 
 Note that this will create the new branch, but it will not switch the
 working tree to it; use "git checkout <newbranch>" to switch to the
@@ -51,7 +52,7 @@
 branch (specifically the `branch.<name>.remote` and `branch.<name>.merge`
 configuration entries) so that 'git pull' will appropriately merge from
 the remote-tracking branch. This behavior may be changed via the global
-`branch.autosetupmerge` configuration flag. That setting can be
+`branch.autoSetupMerge` configuration flag. That setting can be
 overridden by using the `--track` and `--no-track` options, and
 changed later using `git branch --set-upstream-to`.
 
@@ -81,7 +82,7 @@
 	`--track` or `--set-upstream`.
 
 -D::
-	Delete a branch irrespective of its merged status.
+	Shortcut for `--delete --force`.
 
 -l::
 --create-reflog::
@@ -95,13 +96,17 @@
 --force::
 	Reset <branchname> to <startpoint> if <branchname> exists
 	already. Without `-f` 'git branch' refuses to change an existing branch.
+	In combination with `-d` (or `--delete`), allow deleting the
+	branch irrespective of its merged status. In combination with
+	`-m` (or `--move`), allow renaming the branch even if the new
+	branch name already exists.
 
 -m::
 --move::
 	Move/rename a branch and the corresponding reflog.
 
 -M::
-	Move/rename a branch even if the new branch name already exists.
+	Shortcut for `--move --force`.
 
 --color[=<when>]::
 	Color branches to highlight current, local, and
@@ -166,14 +171,14 @@
 	upstream when the new branch is checked out.
 +
 This behavior is the default when the start point is a remote-tracking branch.
-Set the branch.autosetupmerge configuration variable to `false` if you
-want `git checkout` and `git branch` to always behave as if '--no-track'
+Set the branch.autoSetupMerge configuration variable to `false` if you
+want `git checkout` and `git branch` to always behave as if `--no-track`
 were given. Set it to `always` if you want this behavior when the
 start-point is either a local or remote-tracking branch.
 
 --no-track::
 	Do not set up "upstream" configuration, even if the
-	branch.autosetupmerge configuration variable is true.
+	branch.autoSetupMerge configuration variable is true.
 
 --set-upstream::
 	If specified branch does not exist yet or if `--force` has been
@@ -193,7 +198,9 @@
 
 --edit-description::
 	Open an editor and edit the text to explain what the branch is
-	for, to be used by various other commands (e.g. `request-pull`).
+	for, to be used by various other commands (e.g. `format-patch`,
+	`request-pull`, and `merge` (if enabled)). Multi-line explanations
+	may be used.
 
 --contains [<commit>]::
 	Only list branches which contain the specified commit (HEAD
@@ -225,6 +232,19 @@
 	The new name for an existing branch. The same restrictions as for
 	<branchname> apply.
 
+--sort=<key>::
+	Sort based on the key given. Prefix `-` to sort in descending
+	order of the value. You may use the --sort=<key> option
+	multiple times, in which case the last key becomes the primary
+	key. The keys supported are the same as those in `git
+	for-each-ref`. Sort order defaults to sorting based on the
+	full refname (including `refs/...` prefix). This lists
+	detached HEAD (if present) first, then local branches and
+	finally remote-tracking branches.
+
+
+--points-at <object>::
+	Only list branches of the given object.
 
 Examples
 --------
# install git-branch.txt /usr/share/doc/git-doc/git-branch.txt
--- /usr/share/doc/git-doc/git-bundle.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-bundle.txt	2016-10-03 14:24:18.000000000 -0600
@@ -20,7 +20,7 @@
 Some workflows require that one or more branches of development on one
 machine be replicated on another machine, but the two machines cannot
 be directly connected, and therefore the interactive Git protocols (git,
-ssh, rsync, http) cannot be used.  This command provides support for
+ssh, http) cannot be used.  This command provides support for
 'git fetch' and 'git pull' to operate by packaging objects and references
 in an archive at the originating machine, then importing those into
 another repository using 'git fetch' and 'git pull'
# install git-bundle.txt /usr/share/doc/git-doc/git-bundle.txt
--- /usr/share/doc/git-doc/git-cat-file.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-cat-file.txt	2016-10-03 14:24:18.000000000 -0600
@@ -9,14 +9,14 @@
 SYNOPSIS
 --------
 [verse]
-'git cat-file' (-t | -s | -e | -p | <type> | --textconv ) <object>
-'git cat-file' (--batch | --batch-check) < <list-of-objects>
+'git cat-file' (-t [--allow-unknown-type]| -s [--allow-unknown-type]| -e | -p | <type> | --textconv ) <object>
+'git cat-file' (--batch | --batch-check) [--follow-symlinks]
 
 DESCRIPTION
 -----------
 In its first form, the command provides the content or the type of an object in
-the repository. The type is required unless '-t' or '-p' is used to find the
-object type, or '-s' is used to find the object size, or '--textconv' is used
+the repository. The type is required unless `-t` or `-p` is used to find the
+object type, or `-s` is used to find the object size, or `--textconv` is used
 (which implies type "blob").
 
 In the second form, a list of objects (separated by linefeeds) is provided on
@@ -69,15 +69,88 @@
 	not be combined with any other options or arguments.  See the
 	section `BATCH OUTPUT` below for details.
 
+--batch-all-objects::
+	Instead of reading a list of objects on stdin, perform the
+	requested batch operation on all objects in the repository and
+	any alternate object stores (not just reachable objects).
+	Requires `--batch` or `--batch-check` be specified. Note that
+	the objects are visited in order sorted by their hashes.
+
+--buffer::
+	Normally batch output is flushed after each object is output, so
+	that a process can interactively read and write from
+	`cat-file`. With this option, the output uses normal stdio
+	buffering; this is much more efficient when invoking
+	`--batch-check` on a large number of objects.
+
+--allow-unknown-type::
+	Allow -s or -t to query broken/corrupt objects of unknown type.
+
+--follow-symlinks::
+	With --batch or --batch-check, follow symlinks inside the
+	repository when requesting objects with extended SHA-1
+	expressions of the form tree-ish:path-in-tree.  Instead of
+	providing output about the link itself, provide output about
+	the linked-to object.  If a symlink points outside the
+	tree-ish (e.g. a link to /foo or a root-level link to ../foo),
+	the portion of the link which is outside the tree will be
+	printed.
++
+This option does not (currently) work correctly when an object in the
+index is specified (e.g. `:link` instead of `HEAD:link`) rather than
+one in the tree.
++
+This option cannot (currently) be used unless `--batch` or
+`--batch-check` is used.
++
+For example, consider a git repository containing:
++
+--
+	f: a file containing "hello\n"
+	link: a symlink to f
+	dir/link: a symlink to ../f
+	plink: a symlink to ../f
+	alink: a symlink to /etc/passwd
+--
++
+For a regular file `f`, `echo HEAD:f | git cat-file --batch` would print
++
+--
+	ce013625030ba8dba906f756967f9e9ca394464a blob 6
+--
++
+And `echo HEAD:link | git cat-file --batch --follow-symlinks` would
+print the same thing, as would `HEAD:dir/link`, as they both point at
+`HEAD:f`.
++
+Without `--follow-symlinks`, these would print data about the symlink
+itself.  In the case of `HEAD:link`, you would see
++
+--
+	4d1ae35ba2c8ec712fa2a379db44ad639ca277bd blob 1
+--
++
+Both `plink` and `alink` point outside the tree, so they would
+respectively print:
++
+--
+	symlink 4
+	../f
+
+	symlink 11
+	/etc/passwd
+--
+
+
 OUTPUT
 ------
-If '-t' is specified, one of the <type>.
+If `-t` is specified, one of the <type>.
 
-If '-s' is specified, the size of the <object> in bytes.
+If `-s` is specified, the size of the <object> in bytes.
 
-If '-e' is specified, no output.
+If `-e` is specified, no output.
 
-If '-p' is specified, the contents of <object> are pretty-printed.
+If `-p` is specified, the contents of <object> are pretty-printed.
 
 If <type> is specified, the raw (though uncompressed) contents of the <object>
 will be returned.
@@ -148,6 +221,47 @@
 <object> SP missing LF
 ------------
 
+If --follow-symlinks is used, and a symlink in the repository points
+outside the repository, then `cat-file` will ignore any custom format
+and print:
+
+------------
+symlink SP <size> LF
+<symlink> LF
+------------
+
+The symlink will either be absolute (beginning with a /), or relative
+to the tree root.  For instance, if dir/link points to ../../foo, then
+<symlink> will be ../foo.  <size> is the size of the symlink in bytes.
+
+If --follow-symlinks is used, the following error messages will be
+displayed:
+
+------------
+<object> SP missing LF
+------------
+is printed when the initial symlink requested does not exist.
+
+------------
+dangling SP <size> LF
+<object> LF
+------------
+is printed when the initial symlink exists, but something that
+it (transitive-of) points to does not.
+
+------------
+loop SP <size> LF
+<object> LF
+------------
+is printed for symlink loops (or any symlinks that
+require more than 40 link resolutions to resolve).
+
+------------
+notdir SP <size> LF
+<object> LF
+------------
+is printed when, during symlink resolution, a file is used as a
+directory name.
 
 CAVEATS
 -------
# install git-cat-file.txt /usr/share/doc/git-doc/git-cat-file.txt
--- /usr/share/doc/git-doc/git-check-attr.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-check-attr.txt	2016-10-03 14:24:18.000000000 -0600
@@ -10,7 +10,7 @@
 --------
 [verse]
 'git check-attr' [-a | --all | attr...] [--] pathname...
-'git check-attr' --stdin [-z] [-a | --all | attr...] < <list-of-paths>
+'git check-attr' --stdin [-z] [-a | --all | attr...]
 
 DESCRIPTION
 -----------
@@ -28,7 +28,8 @@
 	Consider `.gitattributes` in the index only, ignoring the working tree.
 
 --stdin::
-	Read file names from stdin instead of from the command-line.
+	Read pathnames from the standard input, one per line,
+	instead of from the command-line.
 
 -z::
 	The output format is modified to be machine-parseable.
# install git-check-attr.txt /usr/share/doc/git-doc/git-check-attr.txt
--- /usr/share/doc/git-doc/git-check-ignore.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-check-ignore.txt	2016-10-03 14:24:18.000000000 -0600
@@ -10,16 +10,18 @@
 --------
 [verse]
 'git check-ignore' [options] pathname...
-'git check-ignore' [options] --stdin < <list-of-paths>
+'git check-ignore' [options] --stdin
 
 DESCRIPTION
 -----------
 
 For each pathname given via the command-line or from a file via
-`--stdin`, show the pattern from .gitignore (or other input files to
-the exclude mechanism) that decides if the pathname is excluded or
-included.  Later patterns within a file take precedence over earlier
-ones.
+`--stdin`, check whether the file is excluded by .gitignore (or other
+input files to the exclude mechanism) and output the path if it is
+excluded.
+
+By default, tracked files are not shown at all since they are not
+subject to exclude rules; but see `--no-index'.
 
 OPTIONS
 -------
@@ -29,10 +31,12 @@
 
 -v, --verbose::
 	Also output details about the matching pattern (if any)
-	for each given pathname.
+	for each given pathname. For precedence rules within and
+	between exclude sources, see linkgit:gitignore[5].
 
 --stdin::
-	Read file names from stdin instead of from the command-line.
+	Read pathnames from the standard input, one per line,
+	instead of from the command-line.
 
 -z::
 	The output format is modified to be machine-parseable (see
@@ -69,7 +73,7 @@
 is the line number of the pattern within that source.  If the pattern
 contained a `!` prefix or `/` suffix, it will be preserved in the
 output.  <source> will be an absolute path when referring to the file
-configured by `core.excludesfile`, or relative to the repository root
+configured by `core.excludesFile`, or relative to the repository root
 when referring to `.git/info/exclude` or a per-directory exclude file.
 
 If `-z` is specified, the pathnames in the output are delimited by the
@@ -108,7 +112,7 @@
 SEE ALSO
 --------
 linkgit:gitignore[5]
-linkgit:gitconfig[5]
+linkgit:git-config[1]
 linkgit:git-ls-files[1]
 
 GIT
# install git-check-ignore.txt /usr/share/doc/git-doc/git-check-ignore.txt
--- /usr/share/doc/git-doc/git-check-ref-format.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-check-ref-format.txt	2016-10-03 14:24:18.000000000 -0600
@@ -60,7 +60,7 @@
 
 These rules make it easy for shell script based tools to parse
 reference names, pathname expansion by the shell when a reference name is used
-unquoted (by mistake), and also avoids ambiguities in certain
+unquoted (by mistake), and also avoid ambiguities in certain
 reference name expressions (see linkgit:gitrevisions[7]):
 
 . A double-dot `..` is often used as in `ref1..ref2`, and in some
@@ -94,8 +94,8 @@
 	Interpret <refname> as a reference name pattern for a refspec
 	(as used with remote repositories).  If this option is
 	enabled, <refname> is allowed to contain a single `*`
-	in place of a one full pathname component (e.g.,
-	`foo/*/bar` but not `foo/bar*`).
+	in the refspec (e.g., `foo/bar*/baz` or `foo/bar*baz/`
+	but not `foo/bar*/baz*`).
 
 --normalize::
 	Normalize 'refname' by removing any leading slash (`/`)
@@ -118,8 +118,8 @@
 * Determine the reference name to use for a new branch:
 +
 ------------
-$ ref=$(git check-ref-format --normalize "refs/heads/$newbranch") ||
-die "we do not like '$newbranch' as a branch name."
+$ ref=$(git check-ref-format --normalize "refs/heads/$newbranch")||
+{ echo "we do not like '$newbranch' as a branch name." >&2 ; exit 1 ; }
 ------------
 
 GIT
# install git-check-ref-format.txt /usr/share/doc/git-doc/git-check-ref-format.txt
--- /usr/share/doc/git-doc/git-checkout.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-checkout.txt	2016-10-03 14:24:18.000000000 -0600
@@ -3,7 +3,7 @@
 
 NAME
 ----
-git-checkout - Checkout a branch or paths to the working tree
+git-checkout - Switch branches or restore working tree files
 
 SYNOPSIS
 --------
@@ -89,6 +89,10 @@
 	(i.e.  commit, tag or tree) to update the index for the given
 	paths before updating the working tree.
 +
+'git checkout' with <paths> or `--patch` is used to restore modified or
+deleted paths to their original contents from the index or replace paths
+with the contents from a named <tree-ish> (most often a commit-ish).
++
 The index may contain unmerged entries because of a previous failed merge.
 By default, if you try to check out such an entry from the index, the
 checkout operation will fail and nothing will be checked out.
@@ -103,6 +107,12 @@
 --quiet::
 	Quiet, suppress feedback messages.
 
+--[no-]progress::
+	Progress status is reported on the standard error stream
+	by default when it is attached to a terminal, unless `--quiet`
+	is specified. This flag enables progress reporting even if not
+	attached to a terminal, regardless of `--quiet`.
+
 -f::
 --force::
 	When switching branches, proceed even if the index or the
@@ -116,6 +126,21 @@
 --theirs::
 	When checking out paths from the index, check out stage #2
 	('ours') or #3 ('theirs') for unmerged paths.
++
+Note that during `git rebase` and `git pull --rebase`, 'ours' and
+'theirs' may appear swapped; `--ours` gives the version from the
+branch the changes are rebased onto, while `--theirs` gives the
+version from the branch that holds your work that is being rebased.
++
+This is because `rebase` is used in a workflow that treats the
+history at the remote as the shared canonical one, and treats the
+work done on the branch you are rebasing as the third-party work to
+be integrated, and you are temporarily assuming the role of the
+keeper of the canonical history during the rebase.  As the keeper of
+the canonical history, you need to view the history from the remote
+as `ours` (i.e. "our shared canonical history"), while what you did
+on your side branch as `theirs` (i.e. "one contributor's work on top
+of it").
 
 -b <new_branch>::
 	Create a new branch named <new_branch> and start it at
@@ -132,7 +157,7 @@
 	When creating a new branch, set up "upstream" configuration. See
 	"--track" in linkgit:git-branch[1] for details.
 +
-If no '-b' option is given, the name of the new branch will be
+If no `-b` option is given, the name of the new branch will be
 derived from the remote-tracking branch, by looking at the local part of
 the refspec configured for the corresponding remote, and then stripping
 the initial part up to the "*".
@@ -140,11 +165,11 @@
 off of "origin/hack" (or "remotes/origin/hack", or even
 "refs/remotes/origin/hack").  If the given name has no slash, or the above
 guessing results in an empty name, the guessing is aborted.  You can
-explicitly give a name with '-b' in such a case.
+explicitly give a name with `-b` in such a case.
 
 --no-track::
 	Do not set up "upstream" configuration, even if the
-	branch.autosetupmerge configuration variable is true.
+	branch.autoSetupMerge configuration variable is true.
 
 -l::
 	Create the new branch's reflog; see linkgit:git-branch[1] for
@@ -210,7 +235,7 @@
 --conflict=<style>::
 	The same as --merge option above, but changes the way the
 	conflicting hunks are presented, overriding the
-	merge.conflictstyle configuration variable.  Possible values are
+	merge.conflictStyle configuration variable.  Possible values are
 	"merge" (default) and "diff3" (in addition to what is shown by
 	"merge" style, shows the original contents).
 
@@ -225,6 +250,12 @@
 edits from your current working tree. See the ``Interactive Mode''
 section of linkgit:git-add[1] to learn how to operate the `--patch` mode.
 
+--ignore-other-worktrees::
+	`git checkout` refuses when the wanted ref is already checked
+	out by another worktree. This option makes it check the ref
+	out anyway. In other words, the ref can be held by more than one
+	worktree.
+
 <branch>::
 	Branch to checkout; if it refers to a branch (i.e., a name that,
 	when prepended with "refs/heads/", is a valid ref), then that
@@ -388,6 +419,18 @@
 $ git log -g -2 HEAD
 ------------
 
+ARGUMENT DISAMBIGUATION
+-----------------------
+
+When there is only one argument given and it is not `--` (e.g. "git
+checkout abc"), and when the argument is both a valid `<tree-ish>`
+(e.g. a branch "abc" exists) and a valid `<pathspec>` (e.g. a file
+or a directory whose name is "abc" exists), Git would usually ask
+you to disambiguate.  Because checking out a branch is so common an
+operation, however, "git checkout abc" takes "abc" as a `<tree-ish>`
+in such a situation.  Use `git checkout -- <pathspec>` if you want
+to checkout these paths out of the index.
+
 EXAMPLES
 --------
 
# install git-checkout.txt /usr/share/doc/git-doc/git-checkout.txt
--- /usr/share/doc/git-doc/git-cherry-pick.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-cherry-pick.txt	2016-10-03 14:24:18.000000000 -0600
@@ -8,7 +8,8 @@
 SYNOPSIS
 --------
 [verse]
-'git cherry-pick' [--edit] [-n] [-m parent-number] [-s] [-x] [--ff] <commit>...
+'git cherry-pick' [--edit] [-n] [-m parent-number] [-s] [-x] [--ff]
+		  [-S[<keyid>]] <commit>...
 'git cherry-pick' --continue
 'git cherry-pick' --quit
 'git cherry-pick' --abort
@@ -46,7 +47,7 @@
 	For a more complete list of ways to spell commits, see
 	linkgit:gitrevisions[7].
 	Sets of commits can be passed but no traversal is done by
-	default, as if the '--no-walk' option was specified, see
+	default, as if the `--no-walk` option was specified, see
 	linkgit:git-rev-list[1]. Note that specifying a range will
 	feed all <commit>... arguments to a single revision walk
 	(see a later example that uses 'maint master..next').
@@ -99,6 +100,13 @@
 -s::
 --signoff::
 	Add Signed-off-by line at the end of the commit message.
+	See the signoff option in linkgit:git-commit[1] for more information.
+
+-S[<keyid>]::
+--gpg-sign[=<keyid>]::
+	GPG-sign commits. The `keyid` argument is optional and
+	defaults to the committer identity; if specified, it must be
+	stuck to the option without a space.
 
 --ff::
 	If the current HEAD is the same as the parent of the
@@ -120,13 +128,14 @@
 
 --allow-empty-message::
 	By default, cherry-picking a commit with an empty message will fail.
-	This option overrides that behaviour, allowing commits with empty
+	This option overrides that behavior, allowing commits with empty
 	messages to be cherry picked.
 
 --keep-redundant-commits::
 	If a commit being cherry picked duplicates a commit already in the
 	current history, it will become empty.  By default these
-	redundant commits are ignored.  This option overrides that behavior and
+	redundant commits cause `cherry-pick` to stop so the user can
+	examine the commit. This option overrides that behavior and
 	creates an empty commit object.  Implies `--allow-empty`.
 
 --strategy=<strategy>::
# install git-cherry-pick.txt /usr/share/doc/git-doc/git-cherry-pick.txt
--- /usr/share/doc/git-doc/git-clean.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-clean.txt	2016-10-03 14:24:18.000000000 -0600
@@ -16,7 +16,7 @@
 Cleans the working tree by recursively removing files that are not
 under version control, starting from the current directory.
 
-Normally, only files unknown to Git are removed, but if the '-x'
+Normally, only files unknown to Git are removed, but if the `-x`
 option is specified, ignored files are also removed. This can, for
 example, be useful to remove all build products.
 
@@ -34,8 +34,10 @@
 -f::
 --force::
 	If the Git configuration variable clean.requireForce is not set
-	to false, 'git clean' will refuse to run unless given -f, -n or
-	-i.
+	to false, 'git clean' will refuse to delete files or directories
+	unless given -f, -n or -i. Git will refuse to delete directories
+	with .git sub directory or file unless a second -f
+	is given.
 
 -i::
 --interactive::
@@ -98,7 +100,7 @@
 filter by pattern::
 
    This shows the files and directories to be deleted and issues an
-   "Input ignore patterns>>" prompt. You can input space-seperated
+   "Input ignore patterns>>" prompt. You can input space-separated
    patterns to exclude files and directories from deletion.
    E.g. "*.c *.h" will excludes files end with ".c" and ".h" from
    deletion. When you are satisfied with the filtered result, press
# install git-clean.txt /usr/share/doc/git-doc/git-clean.txt
--- /usr/share/doc/git-doc/git-clone.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-clone.txt	2016-10-03 14:24:18.000000000 -0600
@@ -12,10 +12,10 @@
 'git clone' [--template=<template_directory>]
 	  [-l] [-s] [--no-hardlinks] [-q] [-n] [--bare] [--mirror]
 	  [-o <name>] [-b <name>] [-u <upload-pack>] [--reference <repository>]
-	  [--separate-git-dir <git dir>]
+	  [--dissociate] [--separate-git-dir <git dir>]
 	  [--depth <depth>] [--[no-]single-branch]
-	  [--recursive | --recurse-submodules] [--] <repository>
-	  [<directory>]
+	  [--recursive | --recurse-submodules] [--[no-]shallow-submodules]
+	  [--jobs <n>] [--] <repository> [<directory>]
 
 DESCRIPTION
 -----------
@@ -55,15 +55,12 @@
 never use the local optimizations).  Specifying `--no-local` will
 override the default when `/path/to/repo` is given, using the regular
 Git transport instead.
-+
-To force copying instead of hardlinking (which may be desirable if you
-are trying to make a back-up of your repository), but still avoid the
-usual "Git aware" transport mechanism, `--no-hardlinks` can be used.
 
 --no-hardlinks::
-	Optimize the cloning process from a repository on a
-	local filesystem by copying files under `.git/objects`
-	directory.
+	Force the cloning process from a repository on a local
+	filesystem to copy the files under the `.git/objects`
+	directory instead of using hardlinks. This may be desirable
+	if you are trying to make a back-up of your repository.
 
 --shared::
 -s::
@@ -101,13 +98,24 @@
 	require fewer objects to be copied from the repository
 	being cloned, reducing network and local storage costs.
 +
-*NOTE*: see the NOTE for the `--shared` option.
+*NOTE*: see the NOTE for the `--shared` option, and also the
+`--dissociate` option.
+
+--dissociate::
+	Borrow the objects from reference repositories specified
+	with the `--reference` options only to reduce network
+	transfer, and stop borrowing from them after a clone is made
+	by making necessary local copies of borrowed objects.  This
+	option can also be used when cloning locally from a
+	repository that already borrows objects from another
+	repository--the new repository will borrow objects from the
+	same repository, and this option can be used to stop the
+	borrowing.
 
 --quiet::
 -q::
 	Operate quietly.  Progress is not reported to the standard
-	error stream. This flag is also passed to the `rsync'
-	command when given.
+	error stream.
 
 --verbose::
 -v::
@@ -181,15 +189,15 @@
 
 --depth <depth>::
 	Create a 'shallow' clone with a history truncated to the
-	specified number of revisions.
+	specified number of commits. Implies `--single-branch` unless
+	`--no-single-branch` is given to fetch the histories near the
+	tips of all branches. If you want to clone submodules shallowly,
+	also pass `--shallow-submodules`.
 
 --[no-]single-branch::
 	Clone only the history leading to the tip of a single branch,
 	either specified by the `--branch` option or the primary
-	branch remote's `HEAD` points at. When creating a shallow
-	clone with the `--depth` option, this is the default, unless
-	`--no-single-branch` is given to fetch the histories near the
-	tips of all branches.
+	branch remote's `HEAD` points at.
 	Further fetches into the resulting repository will only update the
 	remote-tracking branch for the branch this option was used for the
 	initial cloning.  If the HEAD at the remote did not point at any
@@ -205,6 +213,9 @@
 	repository does not have a worktree/checkout (i.e. if any of
 	`--no-checkout`/`-n`, `--bare`, or `--mirror` is given)
 
+--[no-]shallow-submodules::
+	All submodules which are cloned will be shallow with a depth of 1.
+
 --separate-git-dir=<git dir>::
 	Instead of placing the cloned repository where it is supposed
 	to be, place the cloned repository at the specified directory,
@@ -212,6 +223,10 @@
 	The result is Git repository can be separated from working
 	tree.
 
+-j <n>::
+--jobs <n>::
+	The number of submodules fetched at the same time.
+	Defaults to the `submodule.fetchJobs` option.
 
 <repository>::
 	The (possibly remote) repository to clone from.  See the
# install git-clone.txt /usr/share/doc/git-doc/git-clone.txt
--- /usr/share/doc/git-doc/git-commit-tree.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-commit-tree.txt	2016-10-03 14:24:18.000000000 -0600
@@ -9,7 +9,7 @@
 SYNOPSIS
 --------
 [verse]
-'git commit-tree' <tree> [(-p <parent>)...] < changelog
+'git commit-tree' <tree> [(-p <parent>)...]
 'git commit-tree' [(-p <parent>)...] [-S[<keyid>]] [(-m <message>)...]
 		  [(-F <file>)...] <tree>
 
@@ -44,7 +44,7 @@
 	An existing tree object
 
 -p <parent>::
-	Each '-p' indicates the id of a parent commit object.
+	Each `-p` indicates the id of a parent commit object.
 
 -m <message>::
 	A paragraph in the commit log message. This can be given more than
@@ -55,7 +55,14 @@
 	from the standard input.
 
 -S[<keyid>]::
-	GPG-sign commit.
+--gpg-sign[=<keyid>]::
+	GPG-sign commits. The `keyid` argument is optional and
+	defaults to the committer identity; if specified, it must be
+	stuck to the option without a space.
+
+--no-gpg-sign::
+	Do not GPG-sign commit, to countermand a `--gpg-sign` option
+	given earlier on the command line.
 
 
 Commit Information
# install git-commit-tree.txt /usr/share/doc/git-doc/git-commit-tree.txt
--- /usr/share/doc/git-doc/git-commit.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-commit.txt	2016-10-03 14:24:18.000000000 -0600
@@ -75,7 +75,7 @@
 
 -c <commit>::
 --reedit-message=<commit>::
-	Like '-C', but with '-c' the editor is invoked, so that
+	Like '-C', but with `-c` the editor is invoked, so that
 	the user can further edit the commit message.
 
 --fixup=<commit>::
@@ -94,7 +94,7 @@
 --reset-author::
 	When used with -C/-c/--amend options, or when committing after a
 	a conflicting cherry-pick, declare that the authorship of the
-	resulting commit now belongs of the committer. This also renews
+	resulting commit now belongs to the committer. This also renews
 	the author timestamp.
 
 --short::
@@ -154,7 +154,11 @@
 -s::
 --signoff::
 	Add Signed-off-by line by the committer at the end of the commit
-	log message.
+	log message.  The meaning of a signoff depends on the project,
+	but it typically certifies that committer has
+	the rights to submit this work under the same license and
+	agrees to a Developer Certificate of Origin
+	(see http://developercertificate.org/ for more information).
 
 -n::
 --no-verify::
@@ -176,22 +180,28 @@
 --cleanup=<mode>::
 	This option determines how the supplied commit message should be
 	cleaned up before committing.  The '<mode>' can be `strip`,
-	`whitespace`, `verbatim`, or `default`.
+	`whitespace`, `verbatim`, `scissors` or `default`.
 +
 --
 strip::
-	Strip leading and trailing empty lines, trailing whitespace, and
-	#commentary and collapse consecutive empty lines.
+	Strip leading and trailing empty lines, trailing whitespace,
+	commentary and collapse consecutive empty lines.
 whitespace::
 	Same as `strip` except #commentary is not removed.
 verbatim::
 	Do not change the message at all.
+scissors::
+	Same as `whitespace`, except that everything from (and
+	including) the line
+	"`# ------------------------ >8 ------------------------`"
+	is truncated if the message is to be edited. "`#`" can be
+	customized with core.commentChar.
 default::
 	Same as `strip` if the message is to be edited.
 	Otherwise `whitespace`.
 --
 +
-The default can be changed by the 'commit.cleanup' configuration
+The default can be changed by the `commit.cleanup` configuration
 variable (see linkgit:git-config[1]).
 
 -e::
@@ -244,12 +254,13 @@
 
 -o::
 --only::
-	Make a commit only from the paths specified on the
+	Make a commit by taking the updated working tree contents
+	of the paths specified on the
 	command line, disregarding any contents that have been
-	staged so far. This is the default mode of operation of
+	staged for other paths. This is the default mode of operation of
 	'git commit' if any paths are given on the command line,
 	in which case this option can be omitted.
-	If this option is specified together with '--amend', then
+	If this option is specified together with `--amend`, then
 	no paths need to be specified, which can be used to amend
 	the last commit without committing changes that have
 	already been staged.
@@ -275,8 +286,16 @@
 --verbose::
 	Show unified diff between the HEAD commit and what
 	would be committed at the bottom of the commit message
-	template.  Note that this diff output doesn't have its
-	lines prefixed with '#'.
+	template to help the user describe the commit by reminding
+	what changes the commit has.
+	Note that this diff output doesn't have its
+	lines prefixed with '#'. This diff will not be a part
+	of the commit message. See the `commit.verbose` configuration
+	variable in linkgit:git-config[1].
++
+If specified twice, show in addition the unified diff between
+what would be committed and the worktree files, i.e. the unstaged
+changes to tracked files.
 
 -q::
 --quiet::
@@ -300,7 +319,13 @@
 
 -S[<keyid>]::
 --gpg-sign[=<keyid>]::
-	GPG-sign commit.
+	GPG-sign commits. The `keyid` argument is optional and
+	defaults to the committer identity; if specified, it must be
+	stuck to the option without a space.
+
+--no-gpg-sign::
+	Countermand `commit.gpgSign` configuration variable that is
+	set to force each and every commit to be signed.
 
 \--::
 	Do not interpret any more arguments as options.
@@ -425,8 +450,8 @@
 ENVIRONMENT AND CONFIGURATION VARIABLES
 ---------------------------------------
 The editor used to edit the commit log message will be chosen from the
-GIT_EDITOR environment variable, the core.editor configuration variable, the
-VISUAL environment variable, or the EDITOR environment variable (in that
+`GIT_EDITOR` environment variable, the core.editor configuration variable, the
+`VISUAL` environment variable, or the `EDITOR` environment variable (in that
 order).  See linkgit:git-var[1] for details.
 
 HOOKS
# install git-commit.txt /usr/share/doc/git-doc/git-commit.txt
--- /usr/share/doc/git-doc/git-config.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-config.txt	2016-10-03 14:24:18.000000000 -0600
@@ -9,18 +9,18 @@
 SYNOPSIS
 --------
 [verse]
-'git config' [<file-option>] [type] [-z|--null] name [value [value_regex]]
+'git config' [<file-option>] [type] [--show-origin] [-z|--null] name [value [value_regex]]
 'git config' [<file-option>] [type] --add name value
 'git config' [<file-option>] [type] --replace-all name value [value_regex]
-'git config' [<file-option>] [type] [-z|--null] --get name [value_regex]
-'git config' [<file-option>] [type] [-z|--null] --get-all name [value_regex]
-'git config' [<file-option>] [type] [-z|--null] --get-regexp name_regex [value_regex]
+'git config' [<file-option>] [type] [--show-origin] [-z|--null] --get name [value_regex]
+'git config' [<file-option>] [type] [--show-origin] [-z|--null] --get-all name [value_regex]
+'git config' [<file-option>] [type] [--show-origin] [-z|--null] [--name-only] --get-regexp name_regex [value_regex]
 'git config' [<file-option>] [type] [-z|--null] --get-urlmatch name URL
 'git config' [<file-option>] --unset name [value_regex]
 'git config' [<file-option>] --unset-all name [value_regex]
 'git config' [<file-option>] --rename-section old_name new_name
 'git config' [<file-option>] --remove-section name
-'git config' [<file-option>] [-z|--null] -l | --list
+'git config' [<file-option>] [--show-origin] [-z|--null] [--name-only] -l | --list
 'git config' [<file-option>] --get-color name [default]
 'git config' [<file-option>] --get-colorbool name [stdout-is-tty]
 'git config' [<file-option>] -e | --edit
@@ -31,40 +31,40 @@
 actually the section and the key separated by a dot, and the value will be
 escaped.
 
-Multiple lines can be added to an option by using the '--add' option.
+Multiple lines can be added to an option by using the `--add` option.
 If you want to update or unset an option which can occur on multiple
 lines, a POSIX regexp `value_regex` needs to be given.  Only the
 existing values that match the regexp are updated or unset.  If
 you want to handle the lines that do *not* match the regex, just
 prepend a single exclamation mark in front (see also <<EXAMPLES>>).
 
-The type specifier can be either '--int' or '--bool', to make
+The type specifier can be either `--int` or `--bool`, to make
 'git config' ensure that the variable(s) are of the given type and
 convert the value to the canonical form (simple decimal number for int,
-a "true" or "false" string for bool), or '--path', which does some
-path expansion (see '--path' below).  If no type specifier is passed, no
+a "true" or "false" string for bool), or `--path`, which does some
+path expansion (see `--path` below).  If no type specifier is passed, no
 checks or transformations are performed on the value.
 
 When reading, the values are read from the system, global and
 repository local configuration files by default, and options
-'--system', '--global', '--local' and '--file <filename>' can be
+`--system`, `--global`, `--local` and `--file <filename>` can be
 used to tell the command to read from only that location (see <<FILES>>).
 
 When writing, the new value is written to the repository local
-configuration file by default, and options '--system', '--global',
-'--file <filename>' can be used to tell the command to write to
-that location (you can say '--local' but that is the default).
+configuration file by default, and options `--system`, `--global`,
+`--file <filename>` can be used to tell the command to write to
+that location (you can say `--local` but that is the default).
 
 This command will fail with non-zero status upon error.  Some exit
 codes are:
 
-. The config file is invalid (ret=3),
-. can not write to the config file (ret=4),
-. no section or name was provided (ret=2),
-. the section or key is invalid (ret=1),
-. you try to unset an option which does not exist (ret=5),
-. you try to unset/set an option for which multiple lines match (ret=5), or
-. you try to use an invalid regexp (ret=6).
+- The section or key is invalid (ret=1),
+- no section or name was provided (ret=2),
+- the config file is invalid (ret=3),
+- the config file cannot be written (ret=4),
+- you try to unset an option which does not exist (ret=5),
+- you try to unset/set an option for which multiple lines match (ret=5), or
+- you try to use an invalid regexp (ret=6).
 
 On success, the command returns the exit code 0.
 
@@ -86,8 +86,7 @@
 	found and the last value if multiple key values were found.
 
 --get-all::
-	Like get, but does not fail if the number of values for the key
-	is not exactly one.
+	Like get, but returns all values for a multi-valued key.
 
 --get-regexp::
 	Like --get-all, but interprets the name as a regular expression and
@@ -102,7 +101,7 @@
 	given URL is returned (if no such key exists, the value for
 	section.key is used as a fallback).  When given just the
 	section as name, do so for all the keys in the section and
-	list them.
+	list them.  Returns error code 1 if no value is found.
 
 --global::
 	For writing options: write to global `~/.gitconfig` file
@@ -139,7 +138,7 @@
 	Use the given config file instead of the one specified by GIT_CONFIG.
 
 --blob blob::
-	Similar to '--file' but use the given blob instead of a file. E.g.
+	Similar to `--file` but use the given blob instead of a file. E.g.
 	you can use 'master:.gitmodules' to read values from the file
 	'.gitmodules' in the master branch. See "SPECIFYING REVISIONS"
 	section in linkgit:gitrevisions[7] for a more complete list of
@@ -159,7 +158,7 @@
 
 -l::
 --list::
-	List all variables set in config file.
+	List all variables set in config file, along with their values.
 
 --bool::
 	'git config' will ensure that the output is "true" or "false"
@@ -190,6 +189,16 @@
 	output without getting confused e.g. by values that
 	contain line breaks.
 
+--name-only::
+	Output only the names of config variables for `--list` or
+	`--get-regexp`.
+
+--show-origin::
+	Augment the output of all queried config options with the
+	origin type (file, standard input, blob, command line) and
+	the actual origin (config file path, ref, or blob id if
+	applicable).
+
 --get-colorbool name [stdout-is-tty]::
 
 	Find the color setting for `name` (e.g. `color.diff`) and output
@@ -211,17 +220,19 @@
 -e::
 --edit::
 	Opens an editor to modify the specified config file; either
-	'--system', '--global', or repository (default).
+	`--system`, `--global`, or repository (default).
 
 --[no-]includes::
 	Respect `include.*` directives in config files when looking up
-	values. Defaults to on.
+	values. Defaults to `off` when a specific file is given (e.g.,
+	using `--file`, `--global`, etc) and `on` when searching all
+	config files.
 
 [[FILES]]
 FILES
 -----
 
-If not set explicitly with '--file', there are four files where
+If not set explicitly with `--file`, there are four files where
 'git config' will search for configuration options:
 
 $(prefix)/etc/gitconfig::
@@ -252,13 +263,16 @@
 precedence over values read earlier.  When multiple values are taken then all
 values of a key from all files will be used.
 
+You may override individual configuration parameters when running any git
+command by using the `-c` option. See linkgit:git[1] for details.
+
 All writing options will per default write to the repository specific
-configuration file. Note that this also affects options like '--replace-all'
-and '--unset'. *'git config' will only ever change one file at a time*.
+configuration file. Note that this also affects options like `--replace-all`
+and `--unset`. *'git config' will only ever change one file at a time*.
 
-You can override these rules either by command line options or by environment
-variables. The '--global' and the '--system' options will limit the file used
-to the global or system-wide file respectively. The GIT_CONFIG environment
+You can override these rules either by command-line options or by environment
+variables. The `--global` and the `--system` options will limit the file used
+to the global or system-wide file respectively. The `GIT_CONFIG` environment
 variable has a similar effect, but you can specify any filename you want.
 
 
@@ -405,7 +419,7 @@
 % git config --bool --get-urlmatch http.sslverify https://weak.example.com
 false
 % git config --get-urlmatch http https://weak.example.com
-http.cookiefile /tmp/cookie.txt
+http.cookieFile /tmp/cookie.txt
 http.sslverify false
 ------------
 
# install git-config.txt /usr/share/doc/git-doc/git-config.txt
--- /usr/share/doc/git-doc/git-count-objects.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-count-objects.txt	2016-10-03 14:24:18.000000000 -0600
@@ -33,8 +33,8 @@
 prune-packable: the number of loose objects that are also present in
 the packs. These objects could be pruned using `git prune-packed`.
 +
-garbage: the number of files in object database that are not valid
-loose objects nor valid packs
+garbage: the number of files in object database that are neither valid loose
+objects nor valid packs
 +
 size-garbage: disk space consumed by garbage files, in KiB (unless -H is
 specified)
# install git-count-objects.txt /usr/share/doc/git-doc/git-count-objects.txt
--- /usr/share/doc/git-doc/git-credential-cache--daemon.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-credential-cache--daemon.txt	2016-10-03 14:24:18.000000000 -0600
@@ -8,7 +8,7 @@
 SYNOPSIS
 --------
 [verse]
-git credential-cache--daemon <socket>
+git credential-cache--daemon [--debug] <socket>
 
 DESCRIPTION
 -----------
@@ -21,6 +21,10 @@
 credentials. Each credential is held for a timeout specified by the
 client; once no credentials are held, the daemon exits.
 
+If the `--debug` option is specified, the daemon does not close its
+stderr stream, and may output extra diagnostics to it even after it has
+begun listening for clients.
+
 GIT
 ---
 Part of the linkgit:git[1] suite
# install git-credential-cache--daemon.txt /usr/share/doc/git-doc/git-credential-cache--daemon.txt
--- /usr/share/doc/git-doc/git-credential-cache.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-credential-cache.txt	2016-10-03 14:24:18.000000000 -0600
@@ -36,7 +36,7 @@
 	cache daemon if one is not started). Defaults to
 	`~/.git-credential-cache/socket`. If your home directory is on a
 	network-mounted filesystem, you may need to change this to a
-	local filesystem.
+	local filesystem. You must specify an absolute path.
 
 CONTROLLING THE DAEMON
 ----------------------
# install git-credential-cache.txt /usr/share/doc/git-doc/git-credential-cache.txt
--- /usr/share/doc/git-doc/git-credential-store.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-credential-store.txt	2016-10-03 14:24:18.000000000 -0600
@@ -29,12 +29,43 @@
 OPTIONS
 -------
 
---store=<path>::
+--file=<path>::
 
-	Use `<path>` to store credentials. The file will have its
+	Use `<path>` to lookup and store credentials. The file will have its
 	filesystem permissions set to prevent other users on the system
 	from reading it, but will not be encrypted or otherwise
-	protected. Defaults to `~/.git-credentials`.
+	protected. If not specified, credentials will be searched for from
+	`~/.git-credentials` and `$XDG_CONFIG_HOME/git/credentials`, and
+	credentials will be written to `~/.git-credentials` if it exists, or
+	`$XDG_CONFIG_HOME/git/credentials` if it exists and the former does
+	not. See also <<FILES>>.
+
+[[FILES]]
+FILES
+-----
+
+If not set explicitly with `--file`, there are two files where
+git-credential-store will search for credentials in order of precedence:
+
+~/.git-credentials::
+	User-specific credentials file.
+
+$XDG_CONFIG_HOME/git/credentials::
+	Second user-specific credentials file. If '$XDG_CONFIG_HOME' is not set
+	or empty, `$HOME/.config/git/credentials` will be used. Any credentials
+	stored in this file will not be used if `~/.git-credentials` has a
+	matching credential as well. It is a good idea not to create this file
+	if you sometimes use older versions of Git that do not support it.
+
+For credential lookups, the files are read in the order given above, with the
+first matching credential found taking precedence over credentials found in
+files further down the list.
+
+Credential storage will by default write to the first existing file in the
+list. If none of these files exist, `~/.git-credentials` will be created and
+written to.
+
+When erasing credentials, matching credentials will be erased from all files.
 
 EXAMPLES
 --------
# install git-credential-store.txt /usr/share/doc/git-doc/git-credential-store.txt
--- /usr/share/doc/git-doc/git-cvsimport.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-cvsimport.txt	2016-10-03 14:24:18.000000000 -0600
@@ -21,8 +21,8 @@
 *WARNING:* `git cvsimport` uses cvsps version 2, which is considered
 deprecated; it does not work with cvsps version 3 and later.  If you are
 performing a one-shot import of a CVS repository consider using
-link:http://cvs2svn.tigris.org/cvs2git.html[cvs2git] or
-link:https://github.com/BartMassey/parsecvs[parsecvs].
+http://cvs2svn.tigris.org/cvs2git.html[cvs2git] or
+http://www.catb.org/esr/cvs-fast-export/[cvs-fast-export].
 
 Imports a CVS repository into Git. It will either create a new
 repository, or incrementally import into an existing one.
@@ -74,10 +74,10 @@
 	akin to the way 'git clone' uses 'origin' by default.
 
 -o <branch-for-HEAD>::
-	When no remote is specified (via -r) the 'HEAD' branch
+	When no remote is specified (via -r) the `HEAD` branch
 	from CVS is imported to the 'origin' branch within the Git
-	repository, as 'HEAD' already has a special meaning for Git.
-	When a remote is specified the 'HEAD' branch is named
+	repository, as `HEAD` already has a special meaning for Git.
+	When a remote is specified the `HEAD` branch is named
 	remotes/<remote>/master mirroring 'git clone' behaviour.
 	Use this option if you want to import into a different
 	branch.
@@ -103,7 +103,7 @@
 
 -p <options-for-cvsps>::
 	Additional options for cvsps.
-	The options '-u' and '-A' are implicit and should not be used here.
+	The options `-u` and '-A' are implicit and should not be used here.
 +
 If you need to pass multiple options, separate them with a comma.
 
@@ -122,7 +122,7 @@
 
 -M <regex>::
 	Attempt to detect merges based on the commit message with a custom
-	regex. It can be used with '-m' to enable the default regexes
+	regex. It can be used with `-m` to enable the default regexes
 	as well. You must escape forward slashes.
 +
 The regex must capture the source branch name in $1.
@@ -186,7 +186,7 @@
 
 OUTPUT
 ------
-If '-v' is specified, the script reports what it is doing.
+If `-v` is specified, the script reports what it is doing.
 
 Otherwise, success is indicated the Unix way, i.e. by simply exiting with
 a zero exit status.
@@ -219,7 +219,7 @@
 * Multiple tags on the same revision are not imported.
 
 If you suspect that any of these issues may apply to the repository you
-want to imort, consider using cvs2git:
+want to import, consider using cvs2git:
 
 * cvs2git (part of cvs2svn), `http://subversion.apache.org/`
 
# install git-cvsimport.txt /usr/share/doc/git-doc/git-cvsimport.txt
--- /usr/share/doc/git-doc/git-cvsserver.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-cvsserver.txt	2016-10-03 14:24:18.000000000 -0600
@@ -54,7 +54,7 @@
 You can specify a list of allowed directories. If no directories
 are given, all are allowed. This is an additional restriction, gitcvs
 access still needs to be enabled by the `gitcvs.enabled` config option
-unless '--export-all' was given, too.
+unless `--export-all` was given, too.
 
 
 DESCRIPTION
@@ -110,7 +110,7 @@
 	authdb = /etc/cvsserver/passwd
 
 ------
-The format of these files is username followed by the crypted password,
+The format of these files is username followed by the encrypted password,
 for example:
 
 ------
@@ -154,7 +154,7 @@
    [gitcvs]
         enabled=1
         # optional for debugging
-        logfile=/path/to/logfile
+	logFile=/path/to/logfile
 
 ------
 Note: you need to ensure each user that is going to invoke 'git-cvsserver' has
@@ -254,14 +254,14 @@
 its documentation if changing these variables, especially
 about `DBI->connect()`.
 
-gitcvs.dbname::
+gitcvs.dbName::
 	Database name. The exact meaning depends on the
 	selected database driver, for SQLite this is a filename.
 	Supports variable substitution (see below). May
 	not contain semicolons (`;`).
 	Default: '%Ggitcvs.%m.sqlite'
 
-gitcvs.dbdriver::
+gitcvs.dbDriver::
 	Used DBI driver. You can specify any available driver
 	for this here, but it might not work. cvsserver is tested
 	with 'DBD::SQLite', reported to work with
@@ -271,12 +271,12 @@
 	Default: 'SQLite'
 
 gitcvs.dbuser::
-	Database user. Only useful if setting `dbdriver`, since
+	Database user. Only useful if setting `dbDriver`, since
 	SQLite has no concept of database users. Supports variable
 	substitution (see below).
 
-gitcvs.dbpass::
-	Database password.  Only useful if setting `dbdriver`, since
+gitcvs.dbPass::
+	Database password.  Only useful if setting `dbDriver`, since
 	SQLite has no concept of database passwords.
 
 gitcvs.dbTableNamePrefix::
@@ -288,7 +288,7 @@
 
 Variable substitution
 ^^^^^^^^^^^^^^^^^^^^^
-In `dbdriver` and `dbuser` you can use the following variables:
+In `dbDriver` and `dbUser` you can use the following variables:
 
 %G::
 	Git directory name
@@ -332,7 +332,7 @@
 3. Browse the 'modules' available. It will give you a list of the heads in
    the repository. You will not be able to browse the tree from there. Only
    the heads.
-4. Pick 'HEAD' when it asks what branch/tag to check out. Untick the
+4. Pick `HEAD` when it asks what branch/tag to check out. Untick the
    "launch commit wizard" to avoid committing the .project file.
 
 Protocol notes: If you are using anonymous access via pserver, just select that.
@@ -402,27 +402,27 @@
 CRLF Line Ending Conversions
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
-By default the server leaves the '-k' mode blank for all files,
+By default the server leaves the `-k` mode blank for all files,
 which causes the CVS client to treat them as a text files, subject
 to end-of-line conversion on some platforms.
 
 You can make the server use the end-of-line conversion attributes to
-set the '-k' modes for files by setting the `gitcvs.usecrlfattr`
+set the `-k` modes for files by setting the `gitcvs.usecrlfattr`
 config variable.  See linkgit:gitattributes[5] for more information
 about end-of-line conversion.
 
 Alternatively, if `gitcvs.usecrlfattr` config is not enabled
 or the attributes do not allow automatic detection for a filename, then
-the server uses the `gitcvs.allbinary` config for the default setting.
-If `gitcvs.allbinary` is set, then file not otherwise
-specified will default to '-kb' mode. Otherwise the '-k' mode
-is left blank. But if `gitcvs.allbinary` is set to "guess", then
-the correct '-k' mode will be guessed based on the contents of
+the server uses the `gitcvs.allBinary` config for the default setting.
+If `gitcvs.allBinary` is set, then file not otherwise
+specified will default to '-kb' mode. Otherwise the `-k` mode
+is left blank. But if `gitcvs.allBinary` is set to "guess", then
+the correct `-k` mode will be guessed based on the contents of
 the file.
 
 For best consistency with 'cvs', it is probably best to override the
 defaults by setting `gitcvs.usecrlfattr` to true,
-and `gitcvs.allbinary` to "guess".
+and `gitcvs.allBinary` to "guess".
 
 Dependencies
 ------------
# install git-cvsserver.txt /usr/share/doc/git-doc/git-cvsserver.txt
--- /usr/share/doc/git-doc/git-daemon.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-daemon.txt	2016-10-03 14:24:18.000000000 -0600
@@ -30,7 +30,7 @@
 
 It verifies that the directory has the magic file "git-daemon-export-ok", and
 it will refuse to export any Git directory that hasn't explicitly been marked
-for export this way (unless the '--export-all' parameter is specified). If you
+for export this way (unless the `--export-all` parameter is specified). If you
 pass some directory paths as 'git daemon' arguments, you can further restrict
 the offers to a whitelist comprising of those.
 
@@ -90,10 +90,10 @@
 	is not supported, then --listen=hostname is also not supported and
 	--listen must be given an IPv4 address.
 	Can be given more than once.
-	Incompatible with '--inetd' option.
+	Incompatible with `--inetd` option.
 
 --port=<n>::
-	Listen on an alternative port.  Incompatible with '--inetd' option.
+	Listen on an alternative port.  Incompatible with `--inetd` option.
 
 --init-timeout=<n>::
 	Timeout (in seconds) between the moment the connection is established
@@ -169,7 +169,7 @@
 --forbid-override=<service>::
 	Allow/forbid overriding the site-wide default with per
 	repository configuration.  By default, all the services
-	are overridable.
+	may be overridden.
 
 --[no-]informative-errors::
 	When informative errors are turned on, git-daemon will report
@@ -184,11 +184,11 @@
 	Every time a client connects, first run an external command
 	specified by the <path> with service name (e.g. "upload-pack"),
 	path to the repository, hostname (%H), canonical hostname
-	(%CH), ip address (%IP), and tcp port (%P) as its command line
+	(%CH), IP address (%IP), and TCP port (%P) as its command-line
 	arguments. The external command can decide to decline the
 	service by exiting with a non-zero status (or to allow it by
 	exiting with a zero status).  It can also look at the $REMOTE_ADDR
-	and $REMOTE_PORT environment variables to learn about the
+	and `$REMOTE_PORT` environment variables to learn about the
 	requestor when making this decision.
 +
 The external command can optionally write a single line to its
@@ -204,7 +204,7 @@
 --------
 
 These services can be globally enabled/disabled using the
-command line options of this command.  If a finer-grained
+command-line options of this command.  If finer-grained
 control is desired (e.g. to allow 'git archive' to be run
 against only in a few selected repositories the daemon serves),
 the per-repository configuration file can be used to enable or
@@ -296,7 +296,7 @@
 selectively enable/disable services per repository::
 	To enable 'git archive --remote' and disable 'git fetch' against
 	a repository, have the following in the configuration file in the
-	repository (that is the file 'config' next to 'HEAD', 'refs' and
+	repository (that is the file 'config' next to `HEAD`, 'refs' and
 	'objects').
 +
 ----------------------------------------------------------------
# install git-daemon.txt /usr/share/doc/git-doc/git-daemon.txt
--- /usr/share/doc/git-doc/git-describe.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-describe.txt	2016-10-03 14:24:18.000000000 -0600
@@ -3,13 +3,13 @@
 
 NAME
 ----
-git-describe - Show the most recent tag that is reachable from a commit
+git-describe - Describe a commit using the most recent tag reachable from it
 
 
 SYNOPSIS
 --------
 [verse]
-'git describe' [--all] [--tags] [--contains] [--abbrev=<n>] <commit-ish>...
+'git describe' [--all] [--tags] [--contains] [--abbrev=<n>] [<commit-ish>...]
 'git describe' [--all] [--tags] [--contains] [--abbrev=<n>] --dirty[=<mark>]
 
 DESCRIPTION
@@ -27,7 +27,7 @@
 OPTIONS
 -------
 <commit-ish>...::
-	Commit-ish object names to describe.
+	Commit-ish object names to describe.  Defaults to HEAD if omitted.
 
 --dirty[=<mark>]::
 	Describe the working tree.
@@ -154,7 +154,7 @@
 If an exact match was not found, 'git describe' will walk back
 through the commit history to locate an ancestor commit which
 has been tagged.  The ancestor's tag will be output along with an
-abbreviation of the input commit-ish's SHA-1. If '--first-parent' was
+abbreviation of the input commit-ish's SHA-1. If `--first-parent` was
 specified then the walk will only consider the first parent of each
 commit.
 
# install git-describe.txt /usr/share/doc/git-doc/git-describe.txt
--- /usr/share/doc/git-doc/git-diff-index.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-diff-index.txt	2016-10-03 14:24:18.000000000 -0600
@@ -40,13 +40,13 @@
 Operating Modes
 ---------------
 You can choose whether you want to trust the index file entirely
-(using the '--cached' flag) or ask the diff logic to show any files
+(using the `--cached` flag) or ask the diff logic to show any files
 that don't match the stat state as being "tentatively changed".  Both
 of these operations are very useful indeed.
 
 Cached Mode
 -----------
-If '--cached' is specified, it allows you to ask:
+If `--cached` is specified, it allows you to ask:
 
 	show me the differences between HEAD and the current index
 	contents (the ones I'd write using 'git write-tree')
# install git-diff-index.txt /usr/share/doc/git-doc/git-diff-index.txt
--- /usr/share/doc/git-doc/git-diff-tree.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-diff-tree.txt	2016-10-03 14:24:18.000000000 -0600
@@ -43,11 +43,11 @@
 	show tree entry itself as well as subtrees.  Implies -r.
 
 --root::
-	When '--root' is specified the initial commit will be shown as a big
+	When `--root` is specified the initial commit will be shown as a big
 	creation event. This is equivalent to a diff against the NULL tree.
 
 --stdin::
-	When '--stdin' is specified, the command does not take
+	When `--stdin` is specified, the command does not take
 	<tree-ish> arguments from the command line.  Instead, it
 	reads lines containing either two <tree>, one <commit>, or a
 	list of <commit> from its standard input.  (Use a single space
@@ -70,13 +70,13 @@
 	By default, 'git diff-tree --stdin' does not show
 	differences for merge commits.  With this flag, it shows
 	differences to that commit from all of its parents. See
-	also '-c'.
+	also `-c`.
 
 -s::
 	By default, 'git diff-tree --stdin' shows differences,
-	either in machine-readable form (without '-p') or in patch
-	form (with '-p').  This output can be suppressed.  It is
-	only useful with '-v' flag.
+	either in machine-readable form (without `-p`) or in patch
+	form (with `-p`).  This output can be suppressed.  It is
+	only useful with `-v` flag.
 
 -v::
 	This flag causes 'git diff-tree --stdin' to also show
@@ -91,17 +91,17 @@
 -c::
 	This flag changes the way a merge commit is displayed
 	(which means it is useful only when the command is given
-	one <tree-ish>, or '--stdin').  It shows the differences
+	one <tree-ish>, or `--stdin`).  It shows the differences
 	from each of the parents to the merge result simultaneously
 	instead of showing pairwise diff between a parent and the
-	result one at a time (which is what the '-m' option does).
+	result one at a time (which is what the `-m` option does).
 	Furthermore, it lists only files which were modified
 	from all parents.
 
 --cc::
 	This flag changes the way a merge commit patch is displayed,
-	in a similar way to the '-c' option. It implies the '-c'
-	and '-p' options and further compresses the patch output
+	in a similar way to the `-c` option. It implies the `-c`
+	and `-p` options and further compresses the patch output
 	by omitting uninteresting hunks whose the contents in the parents
 	have only two variants and the merge result picks one of them
 	without modification.  When all hunks are uninteresting, the commit
# install git-diff-tree.txt /usr/share/doc/git-doc/git-diff-tree.txt
--- /usr/share/doc/git-doc/git-diff.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-diff.txt	2016-10-03 14:24:18.000000000 -0600
@@ -158,8 +158,8 @@
 $ git diff arch/i386 include/asm-i386   <3>
 ------------
 +
-<1> Show only modification, rename and copy, but not addition
-nor deletion.
+<1> Show only modification, rename, and copy, but not addition
+or deletion.
 <2> Show only names and the nature of change, but not actual
 diff output.
 <3> Limit diff output to named subtrees.
# install git-diff.txt /usr/share/doc/git-doc/git-diff.txt
--- /usr/share/doc/git-doc/git-difftool.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-difftool.txt	2016-10-03 14:24:18.000000000 -0600
@@ -91,6 +91,15 @@
 	the default diff tool will be read from the configured
 	`diff.guitool` variable instead of `diff.tool`.
 
+--[no-]trust-exit-code::
+	'git-difftool' invokes a diff tool individually on each file.
+	Errors reported by the diff tool are ignored by default.
+	Use `--trust-exit-code` to make 'git-difftool' exit when an
+	invoked diff tool returns a non-zero exit code.
++
+'git-difftool' will forward the exit code of the invoked tool when
+`--trust-exit-code` is used.
+
 See linkgit:git-diff[1] for the full list of supported options.
 
 CONFIG VARIABLES
@@ -116,6 +125,11 @@
 difftool.prompt::
 	Prompt before each invocation of the diff tool.
 
+difftool.trustExitCode::
+	Exit difftool if the invoked diff tool returns a non-zero exit status.
++
+See the `--trust-exit-code` option above for more details.
+
 SEE ALSO
 --------
 linkgit:git-diff[1]::
# install git-difftool.txt /usr/share/doc/git-doc/git-difftool.txt
--- /usr/share/doc/git-doc/git-fast-export.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-fast-export.txt	2016-10-03 14:24:18.000000000 -0600
@@ -67,17 +67,17 @@
 	have been completed, or to save the marks table across
 	incremental runs.  As <file> is only opened and truncated
 	at completion, the same path can also be safely given to
-	\--import-marks.
+	--import-marks.
 	The file will not be written if no new object has been
 	marked/exported.
 
 --import-marks=<file>::
 	Before processing any input, load the marks specified in
 	<file>.  The input file must exist, must be readable, and
-	must use the same format as produced by \--export-marks.
+	must use the same format as produced by --export-marks.
 +
 Any commits that have already been marked will not be exported again.
-If the backend uses a similar \--import-marks file, this allows for
+If the backend uses a similar --import-marks file, this allows for
 incremental bidirectional exporting of the repository by keeping the
 marks the same across runs.
 
@@ -105,6 +105,15 @@
 	in the commit (as opposed to just listing the files which are
 	different from the commit's first parent).
 
+--anonymize::
+	Anonymize the contents of the repository while still retaining
+	the shape of the history and stored tree.  See the section on
+	`ANONYMIZING` below.
+
+--refspec::
+	Apply the specified refspec to each ref exported. Multiple of them can
+	be specified.
+
 [<git-rev-list-args>...]::
 	A list of arguments, acceptable to 'git rev-parse' and
 	'git rev-list', that specifies the specific objects and references
@@ -137,6 +146,62 @@
 'refs/heads/master'.
 
 
+ANONYMIZING
+-----------
+
+If the `--anonymize` option is given, git will attempt to remove all
+identifying information from the repository while still retaining enough
+of the original tree and history patterns to reproduce some bugs. The
+goal is that a git bug which is found on a private repository will
+persist in the anonymized repository, and the latter can be shared with
+git developers to help solve the bug.
+
+With this option, git will replace all refnames, paths, blob contents,
+commit and tag messages, names, and email addresses in the output with
+anonymized data.  Two instances of the same string will be replaced
+equivalently (e.g., two commits with the same author will have the same
+anonymized author in the output, but bear no resemblance to the original
+author string). The relationship between commits, branches, and tags is
+retained, as well as the commit timestamps (but the commit messages and
+refnames bear no resemblance to the originals). The relative makeup of
+the tree is retained (e.g., if you have a root tree with 10 files and 3
+trees, so will the output), but their names and the contents of the
+files will be replaced.
+
+If you think you have found a git bug, you can start by exporting an
+anonymized stream of the whole repository:
+
+---------------------------------------------------
+$ git fast-export --anonymize --all >anon-stream
+---------------------------------------------------
+
+Then confirm that the bug persists in a repository created from that
+stream (many bugs will not, as they really do depend on the exact
+repository contents):
+
+---------------------------------------------------
+$ git init anon-repo
+$ cd anon-repo
+$ git fast-import <../anon-stream
+$ ... test your bug ...
+---------------------------------------------------
+
+If the anonymized repository shows the bug, it may be worth sharing
+`anon-stream` along with a regular bug report. Note that the anonymized
+stream compresses very well, so gzipping it is encouraged. If you want
+to examine the stream to see that it does not contain any private data,
+you can peruse it directly before sending. You may also want to try:
+
+---------------------------------------------------
+$ perl -pe 's/\d+/X/g' <anon-stream | sort -u | less
+---------------------------------------------------
+
+which shows all of the unique lines (with numbers converted to "X", to
+collapse "User 0", "User 1", etc into "User X"). This produces a much
+smaller output, and it is usually easy to quickly confirm that there is
+no private data in the stream.
+
+
 Limitations
 -----------
 
@@ -144,6 +209,10 @@
 able to export the linux.git repository completely, as it contains
 a tag referencing a tree instead of a commit.
 
+SEE ALSO
+--------
+linkgit:git-fast-import[1]
+
 GIT
 ---
 Part of the linkgit:git[1] suite
# install git-fast-export.txt /usr/share/doc/git-doc/git-fast-export.txt
--- /usr/share/doc/git-doc/git-fast-import.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-fast-import.txt	2016-10-03 14:24:18.000000000 -0600
@@ -42,19 +42,19 @@
 --quiet::
 	Disable all non-fatal output, making fast-import silent when it
 	is successful.  This option disables the output shown by
-	\--stats.
+	--stats.
 
 --stats::
 	Display some basic statistics about the objects fast-import has
 	created, the packfiles they were stored into, and the
 	memory used by fast-import during this run.  Showing this output
-	is currently the default, but can be disabled with \--quiet.
+	is currently the default, but can be disabled with --quiet.
 
 Options for Frontends
 ~~~~~~~~~~~~~~~~~~~~~
 
 --cat-blob-fd=<fd>::
-	Write responses to `cat-blob` and `ls` queries to the
+	Write responses to `get-mark`, `cat-blob`, and `ls` queries to the
 	file descriptor <fd> instead of `stdout`.  Allows `progress`
 	output intended for the end-user to be separated from other
 	output.
@@ -81,12 +81,12 @@
 	have been completed, or to save the marks table across
 	incremental runs.  As <file> is only opened and truncated
 	at checkpoint (or completion) the same path can also be
-	safely given to \--import-marks.
+	safely given to --import-marks.
 
 --import-marks=<file>::
 	Before processing any input, load the marks specified in
 	<file>.  The input file must exist, must be readable, and
-	must use the same format as produced by \--export-marks.
+	must use the same format as produced by --export-marks.
 	Multiple options may be supplied to import more than one
 	set of marks.  If a mark is defined to different values,
 	the last file wins.
@@ -136,6 +136,8 @@
 	Maximum size of each output packfile.
 	The default is unlimited.
 
+fastimport.unpackLimit::
+	See linkgit:git-config[1]
 
 Performance
 -----------
@@ -179,8 +181,8 @@
 prints a warning message.  fast-import will always attempt to update all
 branch refs, and does not stop on the first failure.
 
-Branch updates can be forced with \--force, but it's recommended that
-this only be used on an otherwise quiet repository.  Using \--force
+Branch updates can be forced with --force, but it's recommended that
+this only be used on an otherwise quiet repository.  Using --force
 is not necessary for an initial import into an empty repository.
 
 
@@ -231,11 +233,11 @@
 ~~~~~~~~~~~~
 The following date formats are supported.  A frontend should select
 the format it will use for this import by passing the format name
-in the \--date-format=<fmt> command line option.
+in the --date-format=<fmt> command-line option.
 
 `raw`::
 	This is the Git native format and is `<time> SP <offutc>`.
-	It is also fast-import's default format, if \--date-format was
+	It is also fast-import's default format, if --date-format was
 	not specified.
 +
 The time of the event is specified by `<time>` as the number of
@@ -348,7 +350,12 @@
 `done`::
 	Marks the end of the stream. This command is optional
 	unless the `done` feature was requested using the
-	`--done` command line option or `feature done` command.
+	`--done` command-line option or `feature done` command.
+
+`get-mark`::
+	Causes fast-import to print the SHA-1 corresponding to a mark
+	to the file descriptor set with `--cat-blob-fd`, or `stdout` if
+	unspecified.
 
 `cat-blob`::
 	Causes fast-import to print a blob in 'cat-file --batch'
@@ -437,7 +444,7 @@
 of bytes, except `LT`, `GT` and `LF`.  `<name>` is typically UTF-8 encoded.
 
 The time of the change is specified by `<when>` using the date format
-that was selected by the \--date-format=<fmt> command line option.
+that was selected by the --date-format=<fmt> command-line option.
 See ``Date Formats'' above for the set of supported formats, and
 their syntax.
 
@@ -483,6 +490,9 @@
 * Any valid Git SHA-1 expression that resolves to a commit.  See
   ``SPECIFYING REVISIONS'' in linkgit:gitrevisions[7] for details.
 
+* The special null SHA-1 (40 zeros) specifies that the branch is to be
+  removed.
+
 The special case of restarting an incremental import from the
 current branch value should be written as:
 ----
@@ -504,10 +514,6 @@
 the first ancestor of the current commit, and the branch will start
 out with no files.  An unlimited number of `merge` commands per
 commit are permitted by fast-import, thereby establishing an n-way merge.
-However Git's other tools never create commits with more than 15
-additional ancestors (forming a 16-way merge).  For this reason
-it is suggested that frontends do not use more than 15 `merge`
-commands per commit; 16, if starting a new, empty branch.
 
 Here `<commit-ish>` is any of the commit specification expressions
 also accepted by `from` (see above).
@@ -601,7 +607,7 @@
 See `filemodify` above for a detailed description of `<path>`.
 
 `filecopy`
-^^^^^^^^^^^^
+^^^^^^^^^^
 Recursively copies an existing file or subdirectory to a different
 location within the branch.  The existing file or directory must
 exist.  If the destination exists it will be completely replaced
@@ -889,7 +895,7 @@
 ....
 
 Note that fast-import automatically switches packfiles when the current
-packfile reaches \--max-pack-size, or 4 GiB, whichever limit is
+packfile reaches --max-pack-size, or 4 GiB, whichever limit is
 smaller.  During an automatic packfile switch fast-import does not update
 the branch refs, tags or marks.
 
@@ -931,6 +937,25 @@
 inform the reader when the `checkpoint` has been completed and it
 can safely access the refs that fast-import updated.
 
+`get-mark`
+~~~~~~~~~~
+Causes fast-import to print the SHA-1 corresponding to a mark to
+stdout or to the file descriptor previously arranged with the
+`--cat-blob-fd` argument. The command otherwise has no impact on the
+current import; its purpose is to retrieve SHA-1s that later commits
+might want to refer to in their commit messages.
+
+....
+	'get-mark' SP ':' <idnum> LF
+....
+
+This command can be used anywhere in the stream that comments are
+accepted.  In particular, the `get-mark` command can be used in the
+middle of a commit but not in the middle of a `data` command.
+
+See ``Responses To Commands'' below for details about how to read
+this output safely.
+
 `cat-blob`
 ~~~~~~~~~~
 Causes fast-import to print a blob to a file descriptor previously
@@ -1001,7 +1026,8 @@
 ====
 
 The <dataref> represents the blob, tree, or commit object at <path>
-and can be used in later 'cat-blob', 'filemodify', or 'ls' commands.
+and can be used in later 'get-mark', 'cat-blob', 'filemodify', or
+'ls' commands.
 
 If there is no file or subtree at that path, 'git fast-import' will
 instead report
@@ -1030,7 +1056,7 @@
 no-relative-marks::
 force::
 	Act as though the corresponding command-line option with
-	a leading '--' was passed on the command line
+	a leading `--` was passed on the command line
 	(see OPTIONS, above).
 
 import-marks::
@@ -1043,9 +1069,11 @@
 	"feature import-marks-if-exists" like a corresponding
 	command-line option silently skips a nonexistent file.
 
+get-mark::
 cat-blob::
 ls::
-	Require that the backend support the 'cat-blob' or 'ls' command.
+	Require that the backend support the 'get-mark', 'cat-blob',
+	or 'ls' command respectively.
 	Versions of fast-import not supporting the specified command
 	will exit with a message indicating so.
 	This lets the import error out early with a clear message,
@@ -1079,13 +1107,13 @@
 
 The `<option>` part of the command may contain any of the options
 listed in the OPTIONS section that do not change import semantics,
-without the leading '--' and is treated in the same way.
+without the leading `--` and is treated in the same way.
 
 Option commands must be the first commands on the input (not counting
 feature commands), to give an option command after any non-option
 command is an error.
 
-The following commandline options change import semantics and may therefore
+The following command-line options change import semantics and may therefore
 not be passed as option:
 
 * date-format
@@ -1099,7 +1127,7 @@
 If the `done` feature is not in use, treated as if EOF was read.
 This can be used to tell fast-import to finish early.
 
-If the `--done` command line option or `feature done` command is
+If the `--done` command-line option or `feature done` command is
 in use, the `done` command is mandatory and marks the end of the
 stream.
 
@@ -1125,11 +1153,11 @@
 	git fast-import >fast-import-output
 ====
 
-A frontend set up this way can use `progress`, `ls`, and `cat-blob`
-commands to read information from the import in progress.
+A frontend set up this way can use `progress`, `get-mark`, `ls`, and
+`cat-blob` commands to read information from the import in progress.
 
 To avoid deadlock, such frontends must completely consume any
-pending output from `progress`, `ls`, and `cat-blob` before
+pending output from `progress`, `ls`, `get-mark`, and `cat-blob` before
 performing writes to fast-import that might block.
 
 Crash Reports
@@ -1227,7 +1255,7 @@
 Use One Mark Per Commit
 ~~~~~~~~~~~~~~~~~~~~~~~
 When doing a repository conversion, use a unique mark per commit
-(`mark :<n>`) and supply the \--export-marks option on the command
+(`mark :<n>`) and supply the --export-marks option on the command
 line.  fast-import will dump a file which lists every mark and the Git
 object SHA-1 that corresponds to it.  If the frontend can tie
 the marks back to the source repository, it is easy to verify the
@@ -1292,7 +1320,7 @@
 
 However repacking the repository is necessary to improve data
 locality and access performance.  It can also take hours on extremely
-large projects (especially if -f and a large \--window parameter is
+large projects (especially if -f and a large --window parameter is
 used).  Since repacking is safe to run alongside readers and writers,
 run the repack in the background and let it finish when it finishes.
 There is no reason to wait to explore your new Git project!
@@ -1306,7 +1334,7 @@
 ~~~~~~~~~~~~~~~~~~~~~~~~~
 If you are repacking very old imported data (e.g. older than the
 last year), consider expending some extra CPU time and supplying
-\--window=50 (or higher) when you run 'git repack'.
+--window=50 (or higher) when you run 'git repack'.
 This will take longer, but will also produce a smaller packfile.
 You only need to expend the effort once, and everyone using your
 project will benefit from the smaller repository.
@@ -1408,7 +1436,7 @@
 fast-import automatically moves active branches to inactive status based on
 a simple least-recently-used algorithm.  The LRU chain is updated on
 each `commit` command.  The maximum number of active branches can be
-increased or decreased on the command line with \--active-branches=.
+increased or decreased on the command line with --active-branches=.
 
 per active tree
 ~~~~~~~~~~~~~~~
@@ -1438,6 +1466,10 @@
 import in progress, at the cost of some added running time and worse
 compression.
 
+SEE ALSO
+--------
+linkgit:git-fast-export[1]
+
 GIT
 ---
 Part of the linkgit:git[1] suite
# install git-fast-import.txt /usr/share/doc/git-doc/git-fast-import.txt
--- /usr/share/doc/git-doc/git-fetch-pack.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-fetch-pack.txt	2016-10-03 14:24:18.000000000 -0600
@@ -41,13 +41,13 @@
 	option, then the refs from stdin are processed after those
 	on the command line.
 +
-If '--stateless-rpc' is specified together with this option then
+If `--stateless-rpc` is specified together with this option then
 the list of refs must be in packet format (pkt-line). Each ref must
 be in a separate packet, and the list must end with a flush packet.
 
 -q::
 --quiet::
-	Pass '-q' flag to 'git unpack-objects'; this makes the
+	Pass `-q` flag to 'git unpack-objects'; this makes the
 	cloning process less verbose.
 
 -k::
@@ -80,7 +80,7 @@
 	the things up in .bash_profile).
 
 --exec=<git-upload-pack>::
-	Same as \--upload-pack=<git-upload-pack>.
+	Same as --upload-pack=<git-upload-pack>.
 
 --depth=<n>::
 	Limit fetching to ancestor-chains not longer than n.
@@ -104,6 +104,10 @@
 	The remote heads to update from. This is relative to
 	$GIT_DIR (e.g. "HEAD", "refs/heads/master").  When
 	unspecified, update from all heads the remote side has.
++
+If the remote has enabled the options `uploadpack.allowTipSHA1InWant` or
+`uploadpack.allowReachableSHA1InWant`, they may alternatively be 40-hex
+sha1s present on the remote.
 
 SEE ALSO
 --------
# install git-fetch-pack.txt /usr/share/doc/git-doc/git-fetch-pack.txt
--- /usr/share/doc/git-doc/git-fetch.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-fetch.txt	2016-10-03 14:24:18.000000000 -0600
@@ -17,22 +17,20 @@
 
 DESCRIPTION
 -----------
-Fetches named heads or tags from one or more other repositories,
-along with the objects necessary to complete them.
+Fetch branches and/or tags (collectively, "refs") from one or more
+other repositories, along with the objects necessary to complete their
+histories.  Remote-tracking branches are updated (see the description
+of <refspec> below for ways to control this behavior).
 
-The ref names and their object names of fetched refs are stored
-in `.git/FETCH_HEAD`.  This information is left for a later merge
-operation done by 'git merge'.
-
-By default, tags are auto-followed.  This means that when fetching
-from a remote, any tags on the remote that point to objects that exist
-in the local repository are fetched.  The effect is to fetch tags that
+By default, any tag that points into the histories being fetched is
+also fetched; the effect is to fetch tags that
 point at branches that you are interested in.  This default behavior
-can be changed by using the --tags or --no-tags options, by
-configuring remote.<name>.tagopt, or by using a refspec that fetches
-tags explicitly.
+can be changed by using the --tags or --no-tags options or by
+configuring remote.<name>.tagOpt.  By using a refspec that fetches tags
+explicitly, you can fetch tags that do not point into branches you
+are interested in as well.
 
-'git fetch' can fetch from either a single named repository,
+'git fetch' can fetch from either a single named repository or URL,
 or from several repositories at once if <group> is given and
 there is a remotes.<group> entry in the configuration file.
 (See linkgit:git-config[1]).
@@ -40,6 +38,10 @@
 When no remote is specified, by default the `origin` remote will be used,
 unless there's an upstream branch configured for the current branch.
 
+The names of refs that are fetched, together with the object names
+they point at, are written to `.git/FETCH_HEAD`.  This information
+may be used by scripts or other git commands, such as linkgit:git-pull[1].
+
 OPTIONS
 -------
 include::fetch-options.txt[]
@@ -49,6 +51,106 @@
 include::urls-remotes.txt[]
 
 
+CONFIGURED REMOTE-TRACKING BRANCHES[[CRTB]]
+-------------------------------------------
+
+You often interact with the same remote repository by
+regularly and repeatedly fetching from it.  In order to keep track
+of the progress of such a remote repository, `git fetch` allows you
+to configure `remote.<repository>.fetch` configuration variables.
+
+Typically such a variable may look like this:
+
+------------------------------------------------
+[remote "origin"]
+	fetch = +refs/heads/*:refs/remotes/origin/*
+------------------------------------------------
+
+This configuration is used in two ways:
+
+* When `git fetch` is run without specifying what branches
+  and/or tags to fetch on the command line, e.g. `git fetch origin`
+  or `git fetch`, `remote.<repository>.fetch` values are used as
+  the refspecs--they specify which refs to fetch and which local refs
+  to update.  The example above will fetch
+  all branches that exist in the `origin` (i.e. any ref that matches
+  the left-hand side of the value, `refs/heads/*`) and update the
+  corresponding remote-tracking branches in the `refs/remotes/origin/*`
+  hierarchy.
+
+* When `git fetch` is run with explicit branches and/or tags
+  to fetch on the command line, e.g. `git fetch origin master`, the
+  <refspec>s given on the command line determine what are to be
+  fetched (e.g. `master` in the example,
+  which is a short-hand for `master:`, which in turn means
+  "fetch the 'master' branch but I do not explicitly say what
+  remote-tracking branch to update with it from the command line"),
+  and the example command will
+  fetch _only_ the 'master' branch.  The `remote.<repository>.fetch`
+  values determine which
+  remote-tracking branch, if any, is updated.  When used in this
+  way, the `remote.<repository>.fetch` values do not have any
+  effect in deciding _what_ gets fetched (i.e. the values are not
+  used as refspecs when the command-line lists refspecs); they are
+  only used to decide _where_ the refs that are fetched are stored
+  by acting as a mapping.
+
+The latter use of the `remote.<repository>.fetch` values can be
+overridden by giving the `--refmap=<refspec>` parameter(s) on the
+command line.
+
+OUTPUT
+------
+
+The output of "git fetch" depends on the transport method used; this
+section describes the output when fetching over the Git protocol
+(either locally or via ssh) and Smart HTTP protocol.
+
+The status of the fetch is output in tabular form, with each line
+representing the status of a single ref. Each line is of the form:
+
+-------------------------------
+ <flag> <summary> <from> -> <to> [<reason>]
+-------------------------------
+
+The status of up-to-date refs is shown only if the --verbose option is
+used.
+
+In compact output mode, specified with configuration variable
+fetch.output, if either entire `<from>` or `<to>` is found in the
+other string, it will be substituted with `*` in the other string. For
+example, `master -> origin/master` becomes `master -> origin/*`.
+
+flag::
+	A single character indicating the status of the ref:
+(space);; for a successfully fetched fast-forward;
+`+`;; for a successful forced update;
+`-`;; for a successfully pruned ref;
+`t`;; for a successful tag update;
+`*`;; for a successfully fetched new ref;
+`!`;; for a ref that was rejected or failed to update; and
+`=`;; for a ref that was up to date and did not need fetching.
+
+summary::
+	For a successfully fetched ref, the summary shows the old and new
+	values of the ref in a form suitable for using as an argument to
+	`git log` (this is `<old>..<new>` in most cases, and
+	`<old>...<new>` for forced non-fast-forward updates).
+
+from::
+	The name of the remote ref being fetched from, minus its
+	`refs/<type>/` prefix. In the case of deletion, the name of
+	the remote ref is "(none)".
+
+to::
+	The name of the local ref being updated, minus its
+	`refs/<type>/` prefix.
+
+reason::
+	A human-readable explanation. In the case of successfully fetched
+	refs, no explanation is needed. For a failed ref, the reason for
+	failure is described.
+
 EXAMPLES
 --------
 
@@ -76,6 +178,19 @@
 The `pu` branch will be updated even if it is does not fast-forward,
 because it is prefixed with a plus sign; `tmp` will not be.
 
+* Peek at a remote's branch, without configuring the remote in your local
+repository:
++
+------------------------------------------------
+$ git fetch git://git.kernel.org/pub/scm/git/git.git maint
+$ git log FETCH_HEAD
+------------------------------------------------
++
+The first command fetches the `maint` branch from the repository at
+`git://git.kernel.org/pub/scm/git/git.git` and the second command uses
+`FETCH_HEAD` to examine the branch with linkgit:git-log[1].  The fetched
+objects will eventually be removed by git's built-in housekeeping (see
+linkgit:git-gc[1]).
 
 BUGS
 ----
# install git-fetch.txt /usr/share/doc/git-doc/git-fetch.txt
--- /usr/share/doc/git-doc/git-filter-branch.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-filter-branch.txt	2016-10-03 14:24:18.000000000 -0600
@@ -52,7 +52,7 @@
 
 Note that since this operation is very I/O expensive, it might
 be a good idea to redirect the temporary directory off-disk with the
-'-d' option, e.g. on tmpfs.  Reportedly the speedup is very noticeable.
+`-d` option, e.g. on tmpfs.  Reportedly the speedup is very noticeable.
 
 
 Filters
@@ -61,7 +61,7 @@
 The filters are applied in the order as listed below.  The <command>
 argument is always evaluated in the shell context using the 'eval' command
 (with the notable exception of the commit filter, for technical reasons).
-Prior to that, the $GIT_COMMIT environment variable will be set to contain
+Prior to that, the `$GIT_COMMIT` environment variable will be set to contain
 the id of the commit being rewritten.  Also, GIT_AUTHOR_NAME,
 GIT_AUTHOR_EMAIL, GIT_AUTHOR_DATE, GIT_COMMITTER_NAME, GIT_COMMITTER_EMAIL,
 and GIT_COMMITTER_DATE are taken from the current commit and exported to
@@ -171,7 +171,7 @@
 	untouched.  This switch allow git-filter-branch to ignore such
 	commits.  Though, this switch only applies for commits that have one
 	and only one parent, it will hence keep merges points. Also, this
-	option is not compatible with the use of '--commit-filter'. Though you
+	option is not compatible with the use of `--commit-filter`. Though you
 	just need to use the function 'git_commit_non_empty_tree "$@"' instead
 	of the `git commit-tree "$@"` idiom in your commit filter to make that
 	happen.
@@ -197,7 +197,7 @@
 <rev-list options>...::
 	Arguments for 'git rev-list'.  All positive refs included by
 	these options are rewritten.  You may also specify options
-	such as '--all', but you must use '--' to separate them from
+	such as `--all`, but you must use `--` to separate them from
 	the 'git filter-branch' options. Implies <<Remap_to_ancestor>>.
 
 
@@ -205,7 +205,7 @@
 Remap to ancestor
 ~~~~~~~~~~~~~~~~~
 
-By using linkgit:rev-list[1] arguments, e.g., path limiters, you can limit the
+By using linkgit:git-rev-list[1] arguments, e.g., path limiters, you can limit the
 set of revisions which get rewritten. However, positive refs on the command
 line are distinguished: we don't let them be excluded by such limiters. For
 this purpose, they are instead rewritten to point at the nearest ancestor that
@@ -436,7 +436,7 @@
 of your Git history, but you probably don't need this flexibility if
 you're simply _removing unwanted data_ like large files or passwords.
 For those operations you may want to consider
-link:http://rtyley.github.io/bfg-repo-cleaner/[The BFG Repo-Cleaner],
+http://rtyley.github.io/bfg-repo-cleaner/[The BFG Repo-Cleaner],
 a JVM-based alternative to git-filter-branch, typically at least
 10-50x faster for those use-cases, and with quite different
 characteristics:
@@ -451,11 +451,11 @@
 
 * By default The BFG takes full advantage of multi-core machines,
   cleansing commit file-trees in parallel. git-filter-branch cleans
-  commits sequentially (ie in a single-threaded manner), though it
-  _is_ possible to write filters that include their own parallellism,
+  commits sequentially (i.e. in a single-threaded manner), though it
+  _is_ possible to write filters that include their own parallelism,
   in the scripts executed against each commit.
 
-* The link:http://rtyley.github.io/bfg-repo-cleaner/#examples[command options]
+* The http://rtyley.github.io/bfg-repo-cleaner/#examples[command options]
   are much more restrictive than git-filter branch, and dedicated just
   to the tasks of removing unwanted data- e.g:
   `--strip-blobs-bigger-than 1M`.
# install git-filter-branch.txt /usr/share/doc/git-doc/git-filter-branch.txt
--- /usr/share/doc/git-doc/git-fmt-merge-msg.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-fmt-merge-msg.txt	2016-10-03 14:24:18.000000000 -0600
@@ -9,7 +9,7 @@
 SYNOPSIS
 --------
 [verse]
-'git fmt-merge-msg' [-m <message>] [--log[=<n>] | --no-log] <$GIT_DIR/FETCH_HEAD
+'git fmt-merge-msg' [-m <message>] [--log[=<n>] | --no-log]
 'git fmt-merge-msg' [-m <message>] [--log[=<n>] | --no-log] -F <file>
 
 DESCRIPTION
@@ -51,22 +51,24 @@
 
 CONFIGURATION
 -------------
-
-merge.branchdesc::
-	In addition to branch names, populate the log message with
-	the branch description text associated with them.  Defaults
-	to false.
-
-merge.log::
-	In addition to branch names, populate the log message with at
-	most the specified number of one-line descriptions from the
-	actual commits that are being merged.  Defaults to false, and
-	true is a synonym for 20.
+include::fmt-merge-msg-config.txt[]
 
 merge.summary::
 	Synonym to `merge.log`; this is deprecated and will be removed in
 	the future.
 
+EXAMPLE
+-------
+
+--
+$ git fetch origin master
+$ git fmt-merge-msg --log <$GIT_DIR/FETCH_HEAD
+--
+
+Print a log message describing a merge of the "master" branch from
+the "origin" remote.
+
+
 SEE ALSO
 --------
 linkgit:git-merge[1]
# install git-fmt-merge-msg.txt /usr/share/doc/git-doc/git-fmt-merge-msg.txt
--- /usr/share/doc/git-doc/git-for-each-ref.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-for-each-ref.txt	2016-10-03 14:24:18.000000000 -0600
@@ -10,6 +10,8 @@
 [verse]
 'git for-each-ref' [--count=<count>] [--shell|--perl|--python|--tcl]
 		   [(--sort=<key>)...] [--format=<format>] [<pattern>...]
+		   [--points-at <object>] [(--merged | --no-merged) [<object>]]
+		   [--contains [<object>]]
 
 DESCRIPTION
 -----------
@@ -62,6 +64,20 @@
 	the specified host language.  This is meant to produce
 	a scriptlet that can directly be `eval`ed.
 
+--points-at <object>::
+	Only list refs which points at the given object.
+
+--merged [<object>]::
+	Only list refs whose tips are reachable from the
+	specified commit (HEAD if not specified).
+
+--no-merged [<object>]::
+	Only list refs whose tips are not reachable from the
+	specified commit (HEAD if not specified).
+
+--contains [<object>]::
+	Only list refs which contain the specified commit (HEAD if not
+	specified).
 
 FIELD NAMES
 -----------
@@ -76,7 +92,11 @@
 	The name of the ref (the part after $GIT_DIR/).
 	For a non-ambiguous short name of the ref append `:short`.
 	The option core.warnAmbiguousRefs is used to select the strict
-	abbreviation mode.
+	abbreviation mode. If `strip=<N>` is appended, strips `<N>`
+	slash-separated path components from the front of the refname
+	(e.g., `%(refname:strip=2)` turns `refs/tags/foo` into `foo`.
+	`<N>` must be a positive integer.  If a displayed ref has fewer
+	components than `<N>`, the command aborts with an error.
 
 objecttype::
 	The type of the object (`blob`, `tree`, `commit`, `tag`).
@@ -97,6 +117,12 @@
 	or "=" (in sync).  Has no effect if the ref does not have
 	tracking information associated with it.
 
+push::
+	The name of a local ref which represents the `@{push}` location
+	for the displayed ref. Respects `:short`, `:track`, and
+	`:trackshort` options as `upstream` does. Produces an empty
+	string if no `@{push}` ref is configured.
+
 HEAD::
 	'*' if HEAD matches current ref (the checked out branch), ' '
 	otherwise.
@@ -105,10 +131,30 @@
 	Change output color.  Followed by `:<colorname>`, where names
 	are described in `color.branch.*`.
 
+align::
+	Left-, middle-, or right-align the content between
+	%(align:...) and %(end). The "align:" is followed by
+	`width=<width>` and `position=<position>` in any order
+	separated by a comma, where the `<position>` is either left,
+	right or middle, default being left and `<width>` is the total
+	length of the content with alignment. For brevity, the
+	"width=" and/or "position=" prefixes may be omitted, and bare
+	<width> and <position> used instead.  For instance,
+	`%(align:<width>,<position>)`. If the contents length is more
+	than the width then no alignment is performed. If used with
+	`--quote` everything in between %(align:...) and %(end) is
+	quoted, but if nested then only the topmost level performs
+	quoting.
+
 In addition to the above, for commit and tag objects, the header
 field names (`tree`, `parent`, `object`, `type`, and `tag`) can
 be used to specify the value in the header field.
 
+For commit and tag objects, the special `creatordate` and `creator`
+fields will correspond to the appropriate date or name-email-date tuple
+from the `committer` or `tagger` fields depending on the object type.
+These are intended for working on a mix of annotated and lightweight tags.
+
 Fields that have name-email-date tuple as its value (`author`,
 `committer`, and `tagger`) can be suffixed with `name`, `email`,
 and `date` to extract the named component.
@@ -117,20 +163,23 @@
 Its first line is `contents:subject`, where subject is the concatenation
 of all lines of the commit message up to the first blank line.  The next
 line is 'contents:body', where body is all of the lines after the first
-blank line.  Finally, the optional GPG signature is `contents:signature`.
+blank line.  The optional GPG signature is `contents:signature`.  The
+first `N` lines of the message is obtained using `contents:lines=N`.
 
-For sorting purposes, fields with numeric values sort in numeric
-order (`objectsize`, `authordate`, `committerdate`, `taggerdate`).
+For sorting purposes, fields with numeric values sort in numeric order
+(`objectsize`, `authordate`, `committerdate`, `creatordate`, `taggerdate`).
 All other fields are used to sort in their byte-value order.
 
+There is also an option to sort by versions, this can be done by using
+the fieldname `version:refname` or its alias `v:refname`.
+
 In any case, a field name that refers to a field inapplicable to
 the object referred by the ref does not cause an error.  It
 returns an empty string instead.
 
 As a special case for the date-type fields, you may specify a format for
-the date by adding one of `:default`, `:relative`, `:short`, `:local`,
-`:iso8601`, `:rfc2822` or `:raw` to the end of the fieldname; e.g.
-`%(taggerdate:relative)`.
+the date by adding `:` followed by date format name (see the
+values the `--date` option to linkgit:git-rev-list[1] takes).
 
 
 EXAMPLES
# install git-for-each-ref.txt /usr/share/doc/git-doc/git-for-each-ref.txt
--- /usr/share/doc/git-doc/git-format-patch.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-format-patch.txt	2016-10-03 14:24:18.000000000 -0600
@@ -14,6 +14,7 @@
 		   [(--attach|--inline)[=<boundary>] | --no-attach]
 		   [-s | --signoff]
 		   [--signature=<signature> | --no-signature]
+		   [--signature-file=<file>]
 		   [-n | --numbered | -N | --no-numbered]
 		   [--start-number <n>] [--numbered-files]
 		   [--in-reply-to=Message-Id] [--suffix=.<sfx>]
@@ -56,7 +57,11 @@
 output, unless the `--stdout` option is specified.
 
 If `-o` is specified, output files are created in <dir>.  Otherwise
-they are created in the current working directory.
+they are created in the current working directory. The default path
+can be set with the `format.outputDirectory` configuration option.
+The `-o` option takes precedence over `format.outputDirectory`.
+To store patches in the current working directory even when
+`format.outputDirectory` points elsewhere, use `-o .`.
 
 By default, the subject of a single patch is "[PATCH] " followed by
 the concatenation of lines from the commit message up to the first blank
@@ -108,6 +113,7 @@
 --signoff::
 	Add `Signed-off-by:` line to the commit message, using
 	the committer identity of yourself.
+	See the signoff option in linkgit:git-commit[1] for more information.
 
 --stdout::
 	Print all commits to the standard output in mbox format,
@@ -140,9 +146,9 @@
 `--in-reply-to`, and the first patch mail, in this order.  'deep'
 threading makes every mail a reply to the previous one.
 +
-The default is `--no-thread`, unless the 'format.thread' configuration
+The default is `--no-thread`, unless the `format.thread` configuration
 is set.  If `--thread` is specified without a style, it defaults to the
-style specified by 'format.thread' if any, or else `shallow`.
+style specified by `format.thread` if any, or else `shallow`.
 +
 Beware that the default for 'git send-email' is to thread emails
 itself.  If you want `git format-patch` to take care of threading, you
@@ -169,7 +175,7 @@
 -v <n>::
 --reroll-count=<n>::
 	Mark the series as the <n>-th iteration of the topic. The
-	output filenames have `v<n>` pretended to them, and the
+	output filenames have `v<n>` prepended to them, and the
 	subject prefix ("PATCH" by default, but configurable via the
 	`--subject-prefix` option) has ` v<n>` appended to it.  E.g.
 	`--reroll-count=4` may produce `v4-0001-add-makefile.patch`
@@ -212,7 +218,7 @@
 
 --[no-]cover-letter::
 	In addition to the patches, generate a cover letter file
-	containing the shortlog and the overall diffstat.  You can
+	containing the branch description, shortlog and the overall diffstat.  You can
 	fill in a description in the file before sending it out.
 
 --notes[=<ref>]::
@@ -233,6 +239,9 @@
 	signature option is omitted the signature defaults to the Git version
 	number.
 
+--signature-file=<file>::
+	Works just like --signature except the signature is read from a file.
+
 --suffix=.<sfx>::
 	Instead of using `.patch` as the suffix for generated
 	filenames, use specified suffix.  A common alternative is
@@ -252,6 +261,15 @@
 	using this option cannot be applied properly, but they are
 	still useful for code review.
 
+--zero-commit::
+  Output an all-zero hash in each patch's From header instead
+  of the hash of the commit.
+
+--base=<commit>::
+	Record the base tree information to identify the state the
+	patch series applies to.  See the BASE TREE INFORMATION section
+	below for details.
+
 --root::
 	Treat the revision argument as a <revision range>, even if it
 	is just a single commit (that would normally be treated as a
@@ -269,13 +287,13 @@
 ------------
 [format]
 	headers = "Organization: git-foo\n"
-	subjectprefix = CHANGE
+	subjectPrefix = CHANGE
 	suffix = .txt
 	numbered = auto
 	to = <email>
 	cc = <email>
 	attach [ = mime-boundary-string ]
-	signoff = true
+	signOff = true
 	coverletter = auto
 ------------
 
@@ -507,6 +525,61 @@
 5. Back in the compose window: add whatever other text you wish to the
    message, complete the addressing and subject fields, and press send.
 
+BASE TREE INFORMATION
+---------------------
+
+The base tree information block is used for maintainers or third party
+testers to know the exact state the patch series applies to. It consists
+of the 'base commit', which is a well-known commit that is part of the
+stable part of the project history everybody else works off of, and zero
+or more 'prerequisite patches', which are well-known patches in flight
+that is not yet part of the 'base commit' that need to be applied on top
+of 'base commit' in topological order before the patches can be applied.
+
+The 'base commit' is shown as "base-commit: " followed by the 40-hex of
+the commit object name.  A 'prerequisite patch' is shown as
+"prerequisite-patch-id: " followed by the 40-hex 'patch id', which can
+be obtained by passing the patch through the `git patch-id --stable`
+command.
+
+Imagine that on top of the public commit P, you applied well-known
+patches X, Y and Z from somebody else, and then built your three-patch
+series A, B, C, the history would be like:
+
+................................................
+---P---X---Y---Z---A---B---C
+................................................
+
+With `git format-patch --base=P -3 C` (or variants thereof, e.g. with
+`--cover-letter` of using `Z..C` instead of `-3 C` to specify the
+range), the base tree information block is shown at the end of the
+first message the command outputs (either the first patch, or the
+cover letter), like this:
+
+------------
+base-commit: P
+prerequisite-patch-id: X
+prerequisite-patch-id: Y
+prerequisite-patch-id: Z
+------------
+
+For non-linear topology, such as
+
+................................................
+---P---X---A---M---C
+    \         /
+     Y---Z---B
+................................................
+
+You can also use `git format-patch --base=P -3 C` to generate patches
+for A, B and C, and the identifiers for P, X, Y, Z are appended at the
+end of the first message.
+
+If set `--base=auto` in cmdline, it will track base commit automatically,
+the base commit will be the merge base of tip commit of the remote-tracking
+branch and revision-range specified in cmdline.
+For a local branch, you need to track a remote branch by `git branch
+--set-upstream-to` before using this option.
 
 EXAMPLES
 --------
# install git-format-patch.txt /usr/share/doc/git-doc/git-format-patch.txt
--- /usr/share/doc/git-doc/git-fsck.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-fsck.txt	2016-10-03 14:24:18.000000000 -0600
@@ -11,7 +11,8 @@
 [verse]
 'git fsck' [--tags] [--root] [--unreachable] [--cache] [--no-reflogs]
 	 [--[no-]full] [--strict] [--verbose] [--lost-found]
-	 [--[no-]dangling] [--[no-]progress] [<object>*]
+	 [--[no-]dangling] [--[no-]progress] [--connectivity-only]
+	 [--[no-]name-objects] [<object>*]
 
 DESCRIPTION
 -----------
@@ -60,6 +61,11 @@
 	object pools.  This is now default; you can turn it off
 	with --no-full.
 
+--connectivity-only::
+	Check only the connectivity of tags, commits and tree objects. By
+	avoiding to unpack blobs, this speeds up the operation, at the
+	expense of missing corrupt objects or other problematic issues.
+
 --strict::
 	Enable more strict checking, namely to catch a file mode
 	recorded with g+w bit set, which was created by older
@@ -77,6 +83,12 @@
 	a blob, the contents are written into the file, rather than
 	its object name.
 
+--name-objects::
+	When displaying names of reachable objects, in addition to the
+	SHA-1 also display a name that describes *how* they are reachable,
+	compatible with linkgit:git-rev-parse[1], e.g.
+	`HEAD@{1234567890}~25^2:src/`.
+
 --[no-]progress::
 	Progress status is reported on the standard error stream by
 	default when it is attached to a terminal, unless
@@ -90,7 +102,7 @@
 git-fsck tests SHA-1 and general object sanity, and it does full tracking
 of the resulting reachability and everything else. It prints out any
 corruption it finds (missing or bad objects), and if you use the
-'--unreachable' flag it will also print out objects that exist but that
+`--unreachable` flag it will also print out objects that exist but that
 aren't reachable from any of the specified head nodes (or the default
 set, as mentioned above).
 
# install git-fsck.txt /usr/share/doc/git-doc/git-fsck.txt
--- /usr/share/doc/git-doc/git-gc.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-gc.txt	2016-10-03 14:24:18.000000000 -0600
@@ -54,17 +54,20 @@
 `git repack -d -l`.  Setting the value of `gc.auto` to 0
 disables automatic packing of loose objects.
 +
-If the number of packs exceeds the value of `gc.autopacklimit`,
+If the number of packs exceeds the value of `gc.autoPackLimit`,
 then existing packs (except those marked with a `.keep` file)
 are consolidated into a single pack by using the `-A` option of
-'git repack'. Setting `gc.autopacklimit` to 0 disables
+'git repack'. Setting `gc.autoPackLimit` to 0 disables
 automatic consolidation of packs.
 
 --prune=<date>::
 	Prune loose objects older than date (default is 2 weeks ago,
 	overridable by the config variable `gc.pruneExpire`).
-	--prune=all prunes loose objects regardless of their age.
-	--prune is on by default.
+	--prune=all prunes loose objects regardless of their age (do
+	not use --prune=all unless you know exactly what you are doing.
+	Unless the repository is quiescent, you will lose newly created
+	objects that haven't been anchored with the refs and end up
+	corrupting your repository).  --prune is on by default.
 
 --no-prune::
 	Do not prune any loose objects.
@@ -79,13 +82,13 @@
 Configuration
 -------------
 
-The optional configuration variable 'gc.reflogExpire' can be
+The optional configuration variable `gc.reflogExpire` can be
 set to indicate how long historical entries within each branch's
 reflog should remain available in this repository.  The setting is
 expressed as a length of time, for example '90 days' or '3 months'.
 It defaults to '90 days'.
 
-The optional configuration variable 'gc.reflogExpireUnreachable'
+The optional configuration variable `gc.reflogExpireUnreachable`
 can be set to indicate how long historical reflog entries which
 are not part of the current branch should remain available in
 this repository.  These types of entries are generally created as
@@ -101,30 +104,33 @@
 ------------
 [gc "refs/remotes/*"]
 	reflogExpire = never
-	reflogexpireUnreachable = 3 days
+	reflogExpireUnreachable = 3 days
 ------------
 
-The optional configuration variable 'gc.rerereresolved' indicates
+The optional configuration variable `gc.rerereResolved` indicates
 how long records of conflicted merge you resolved earlier are
 kept.  This defaults to 60 days.
 
-The optional configuration variable 'gc.rerereunresolved' indicates
+The optional configuration variable `gc.rerereUnresolved` indicates
 how long records of conflicted merge you have not resolved are
 kept.  This defaults to 15 days.
 
-The optional configuration variable 'gc.packrefs' determines if
+The optional configuration variable `gc.packRefs` determines if
 'git gc' runs 'git pack-refs'. This can be set to "notbare" to enable
 it within all non-bare repos or it can be set to a boolean value.
 This defaults to true.
 
-The optional configuration variable 'gc.aggressiveWindow' controls how
+The optional configuration variable `gc.aggressiveWindow` controls how
 much time is spent optimizing the delta compression of the objects in
 the repository when the --aggressive option is specified.  The larger
 the value, the more time is spent optimizing the delta compression.  See
 the documentation for the --window' option in linkgit:git-repack[1] for
 more details.  This defaults to 250.
 
-The optional configuration variable 'gc.pruneExpire' controls how old
+Similarly, the optional configuration variable `gc.aggressiveDepth`
+controls --depth option in linkgit:git-repack[1]. This defaults to 250.
+
+The optional configuration variable `gc.pruneExpire` controls how old
 the unreferenced loose objects have to be before they are pruned.  The
 default is "2 weeks ago".
 
# install git-gc.txt /usr/share/doc/git-doc/git-gc.txt
--- /usr/share/doc/git-doc/git-get-tar-commit-id.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-get-tar-commit-id.txt	2016-10-03 14:24:18.000000000 -0600
@@ -9,17 +9,19 @@
 SYNOPSIS
 --------
 [verse]
-'git get-tar-commit-id' < <tarfile>
+'git get-tar-commit-id'
 
 
 DESCRIPTION
 -----------
-Acts as a filter, extracting the commit ID stored in archives created by
-'git archive'.  It reads only the first 1024 bytes of input, thus its
-runtime is not influenced by the size of <tarfile> very much.
+
+Read a tar archive created by 'git archive' from the standard input
+and extract the commit ID stored in it.  It reads only the first
+1024 bytes of input, thus its runtime is not influenced by the size
+of the tar archive very much.
 
 If no commit ID is found, 'git get-tar-commit-id' quietly exists with a
-return code of 1.  This can happen if <tarfile> had not been created
+return code of 1.  This can happen if the archive had not been created
 using 'git archive' or if the first parameter of 'git archive' had been
 a tree ID instead of a commit ID or tag.
 
# install git-get-tar-commit-id.txt /usr/share/doc/git-doc/git-get-tar-commit-id.txt
--- /usr/share/doc/git-doc/git-grep.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-grep.txt	2016-10-03 14:24:18.000000000 -0600
@@ -23,6 +23,7 @@
 	   [--break] [--heading] [-p | --show-function]
 	   [-A <post-context>] [-B <pre-context>] [-C <context>]
 	   [-W | --function-context]
+	   [--threads <num>]
 	   [-f <file>] [-e] <pattern>
 	   [--and|--or|--not|(|)|-e <pattern>...]
 	   [ [--[no-]exclude-standard] [--cached | --no-index | --untracked] | <tree>...]
@@ -40,19 +41,30 @@
 -------------
 
 grep.lineNumber::
-	If set to true, enable '-n' option by default.
+	If set to true, enable `-n` option by default.
 
 grep.patternType::
 	Set the default matching behavior. Using a value of 'basic', 'extended',
-	'fixed', or 'perl' will enable the '--basic-regexp', '--extended-regexp',
-	'--fixed-strings', or '--perl-regexp' option accordingly, while the
+	'fixed', or 'perl' will enable the `--basic-regexp`, `--extended-regexp`,
+	`--fixed-strings`, or `--perl-regexp` option accordingly, while the
 	value 'default' will return to the default matching behavior.
 
 grep.extendedRegexp::
-	If set to true, enable '--extended-regexp' option by default. This
-	option is ignored when the 'grep.patternType' option is set to a value
+	If set to true, enable `--extended-regexp` option by default. This
+	option is ignored when the `grep.patternType` option is set to a value
 	other than 'default'.
 
+grep.threads::
+	Number of grep worker threads to use.  If unset (or set to 0),
+	8 threads are used by default (for now).
+
+grep.fullName::
+	If set to true, enable `--full-name` option by default.
+
+grep.fallbackToNoIndex::
+	If set to true, fall back to git grep --no-index if git grep
+	is executed outside of a git repository.  Defaults to false.
+
 
 OPTIONS
 -------
@@ -157,12 +169,15 @@
 	For better compatibility with 'git diff', `--name-only` is a
 	synonym for `--files-with-matches`.
 
--O [<pager>]::
---open-files-in-pager [<pager>]::
+-O[<pager>]::
+--open-files-in-pager[=<pager>]::
 	Open the matching files in the pager (not the output of 'grep').
 	If the pager happens to be "less" or "vi", and the user
 	specified only one pattern, the first file is positioned at
-	the first match automatically.
+	the first match automatically. The `pager` argument is
+	optional; if specified, it must be stuck to the option
+	without a space. If `pager` is unspecified, the default pager
+	will be used (see `core.pager` in linkgit:git-config[1]).
 
 -z::
 --null::
@@ -221,6 +236,10 @@
 	effectively showing the whole function in which the match was
 	found.
 
+--threads <num>::
+	Number of grep worker threads to use.
+	See `grep.threads` in 'CONFIGURATION' for more information.
+
 -f <file>::
 	Read patterns from <file>, one per line.
 
# install git-grep.txt /usr/share/doc/git-doc/git-grep.txt
--- /usr/share/doc/git-doc/git-gui.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-gui.txt	2016-10-03 14:24:18.000000000 -0600
@@ -35,7 +35,7 @@
 
 browser::
 	Start a tree browser showing all files in the specified
-	commit (or 'HEAD' by default).  Files selected through the
+	commit (or `HEAD` by default).  Files selected through the
 	browser are opened in the blame viewer.
 
 citool::
# install git-gui.txt /usr/share/doc/git-doc/git-gui.txt
--- /usr/share/doc/git-doc/git-hash-object.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-hash-object.txt	2016-10-03 14:24:18.000000000 -0600
@@ -9,8 +9,8 @@
 SYNOPSIS
 --------
 [verse]
-'git hash-object' [-t <type>] [-w] [--path=<file>|--no-filters] [--stdin] [--] <file>...
-'git hash-object' [-t <type>] [-w] --stdin-paths [--no-filters] < <list-of-paths>
+'git hash-object' [-t <type>] [-w] [--path=<file>|--no-filters] [--stdin [--literally]] [--] <file>...
+'git hash-object' [-t <type>] [-w] --stdin-paths [--no-filters]
 
 DESCRIPTION
 -----------
@@ -35,7 +35,8 @@
 	Read the object from standard input instead of from a file.
 
 --stdin-paths::
-	Read file names from stdin instead of from the command-line.
+	Read file names from the standard input, one per line, instead
+	of from the command-line.
 
 --path::
 	Hash object as it were located at the given path. The location of
@@ -51,7 +52,13 @@
 	Hash the contents as is, ignoring any input filter that would
 	have been chosen by the attributes mechanism, including the end-of-line
 	conversion. If the file is read from standard input then this
-	is always implied, unless the --path option is given.
+	is always implied, unless the `--path` option is given.
+
+--literally::
+	Allow `--stdin` to hash any garbage into a loose object which might not
+	otherwise pass standard object parsing or git-fsck checks. Useful for
+	stress-testing Git itself or reproducing characteristics of corrupt or
+	bogus objects encountered in the wild.
 
 GIT
 ---
# install git-hash-object.txt /usr/share/doc/git-doc/git-hash-object.txt
--- /usr/share/doc/git-doc/git-help.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-help.txt	2016-10-03 14:24:18.000000000 -0600
@@ -18,10 +18,10 @@
 command and a list of the most commonly used Git commands are printed
 on the standard output.
 
-If the option '--all' or '-a' is given, all available commands are
+If the option `--all` or `-a` is given, all available commands are
 printed on the standard output.
 
-If the option '--guide' or '-g' is given, a list of the useful
+If the option `--guide` or `-g` is given, a list of the useful
 Git guides is also printed on the standard output.
 
 If a command, or a guide, is given, a manual page for that command or
@@ -57,10 +57,10 @@
 --man::
 	Display manual page for the command in the 'man' format. This
 	option may be used to override a value set in the
-	'help.format' configuration variable.
+	`help.format` configuration variable.
 +
 By default the 'man' program will be used to display the manual page,
-but the 'man.viewer' configuration variable may be used to choose
+but the `man.viewer` configuration variable may be used to choose
 other display programs (see below).
 
 -w::
@@ -69,7 +69,7 @@
 	format. A web browser will be used for that purpose.
 +
 The web browser can be specified using the configuration variable
-'help.browser', or 'web.browser' if the former is not set. If none of
+`help.browser`, or `web.browser` if the former is not set. If none of
 these config variables is set, the 'git web{litdd}browse' helper script
 (called by 'git help') will pick a suitable default. See
 linkgit:git-web{litdd}browse[1] for more information about this.
@@ -80,9 +80,9 @@
 help.format
 ~~~~~~~~~~~
 
-If no command line option is passed, the 'help.format' configuration
+If no command-line option is passed, the `help.format` configuration
 variable will be checked. The following values are supported for this
-variable; they make 'git help' behave as their corresponding command
+variable; they make 'git help' behave as their corresponding command-
 line option:
 
 * "man" corresponds to '-m|--man',
@@ -92,16 +92,16 @@
 help.browser, web.browser and browser.<tool>.path
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
-The 'help.browser', 'web.browser' and 'browser.<tool>.path' will also
-be checked if the 'web' format is chosen (either by command line
+The `help.browser`, `web.browser` and `browser.<tool>.path` will also
+be checked if the 'web' format is chosen (either by command-line
 option or configuration variable). See '-w|--web' in the OPTIONS
 section above and linkgit:git-web{litdd}browse[1].
 
 man.viewer
 ~~~~~~~~~~
 
-The 'man.viewer' config variable will be checked if the 'man' format
-is chosen. The following values are currently supported:
+The `man.viewer` configuration variable will be checked if the 'man'
+format is chosen. The following values are currently supported:
 
 * "man": use the 'man' program as usual,
 * "woman": use 'emacsclient' to launch the "woman" mode in emacs
@@ -110,9 +110,9 @@
 tab (see 'Note about konqueror' below).
 
 Values for other tools can be used if there is a corresponding
-'man.<tool>.cmd' configuration entry (see below).
+`man.<tool>.cmd` configuration entry (see below).
 
-Multiple values may be given to the 'man.viewer' configuration
+Multiple values may be given to the `man.viewer` configuration
 variable. Their corresponding programs will be tried in the order
 listed in the configuration file.
 
@@ -124,18 +124,18 @@
 		viewer = woman
 ------------------------------------------------
 
-will try to use konqueror first. But this may fail (for example if
+will try to use konqueror first. But this may fail (for example, if
 DISPLAY is not set) and in that case emacs' woman mode will be tried.
 
 If everything fails, or if no viewer is configured, the viewer specified
-in the GIT_MAN_VIEWER environment variable will be tried.  If that
+in the `GIT_MAN_VIEWER` environment variable will be tried.  If that
 fails too, the 'man' program will be tried anyway.
 
 man.<tool>.path
 ~~~~~~~~~~~~~~~
 
 You can explicitly provide a full path to your preferred man viewer by
-setting the configuration variable 'man.<tool>.path'. For example, you
+setting the configuration variable `man.<tool>.path`. For example, you
 can configure the absolute path to konqueror by setting
 'man.konqueror.path'. Otherwise, 'git help' assumes the tool is
 available in PATH.
@@ -143,9 +143,9 @@
 man.<tool>.cmd
 ~~~~~~~~~~~~~~
 
-When the man viewer, specified by the 'man.viewer' configuration
+When the man viewer, specified by the `man.viewer` configuration
 variables, is not among the supported ones, then the corresponding
-'man.<tool>.cmd' configuration variable will be looked up. If this
+`man.<tool>.cmd` configuration variable will be looked up. If this
 variable exists then the specified tool will be treated as a custom
 command and a shell eval will be used to run the command with the man
 page passed as arguments.
@@ -153,7 +153,7 @@
 Note about konqueror
 ~~~~~~~~~~~~~~~~~~~~
 
-When 'konqueror' is specified in the 'man.viewer' configuration
+When 'konqueror' is specified in the `man.viewer` configuration
 variable, we launch 'kfmclient' to try to open the man page on an
 already opened konqueror in a new tab if possible.
 
@@ -176,7 +176,7 @@
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 Note that all these configuration variables should probably be set
-using the '--global' flag, for example like this:
+using the `--global` flag, for example like this:
 
 ------------------------------------------------
 $ git config --global help.format web
# install git-help.txt /usr/share/doc/git-doc/git-help.txt
--- /usr/share/doc/git-doc/git-http-backend.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-http-backend.txt	2016-10-03 14:24:18.000000000 -0600
@@ -21,7 +21,7 @@
 It verifies that the directory has the magic file
 "git-daemon-export-ok", and it will refuse to export any Git directory
 that hasn't explicitly been marked for export this way (unless the
-GIT_HTTP_EXPORT_ALL environmental variable is set).
+`GIT_HTTP_EXPORT_ALL` environmental variable is set).
 
 By default, only the `upload-pack` service is enabled, which serves
 'git fetch-pack' and 'git ls-remote' clients, which are invoked from
@@ -65,8 +65,8 @@
 
 EXAMPLES
 --------
-All of the following examples map 'http://$hostname/git/foo/bar.git'
-to '/var/www/git/foo/bar.git'.
+All of the following examples map `http://$hostname/git/foo/bar.git`
+to `/var/www/git/foo/bar.git`.
 
 Apache 2.x::
 	Ensure mod_cgi, mod_alias, and mod_env are enabled, set
@@ -191,7 +191,7 @@
 ----------------------------------------------------------------
 
 Lighttpd::
-	Ensure that `mod_cgi`, `mod_alias, `mod_auth`, `mod_setenv` are
+	Ensure that `mod_cgi`, `mod_alias`, `mod_auth`, `mod_setenv` are
 	loaded, then set `GIT_PROJECT_ROOT` appropriately and redirect
 	all requests to the CGI:
 +
@@ -241,7 +241,7 @@
 
 ENVIRONMENT
 -----------
-'git http-backend' relies upon the CGI environment variables set
+'git http-backend' relies upon the `CGI` environment variables set
 by the invoking web server, including:
 
 * PATH_INFO (if GIT_PROJECT_ROOT is set, otherwise PATH_TRANSLATED)
@@ -251,16 +251,25 @@
 * QUERY_STRING
 * REQUEST_METHOD
 
-The GIT_HTTP_EXPORT_ALL environmental variable may be passed to
+The `GIT_HTTP_EXPORT_ALL` environmental variable may be passed to
 'git-http-backend' to bypass the check for the "git-daemon-export-ok"
 file in each repository before allowing export of that repository.
 
+The `GIT_HTTP_MAX_REQUEST_BUFFER` environment variable (or the
+`http.maxRequestBuffer` config variable) may be set to change the
+largest ref negotiation request that git will handle during a fetch; any
+fetch requiring a larger buffer will not succeed.  This value should not
+normally need to be changed, but may be helpful if you are fetching from
+a repository with an extremely large number of refs.  The value can be
+specified with a unit (e.g., `100M` for 100 megabytes). The default is
+10 megabytes.
+
 The backend process sets GIT_COMMITTER_NAME to '$REMOTE_USER' and
 GIT_COMMITTER_EMAIL to '$\{REMOTE_USER}@http.$\{REMOTE_ADDR\}',
 ensuring that any reflogs created by 'git-receive-pack' contain some
 identifying information of the remote user who performed the push.
 
-All CGI environment variables are available to each of the hooks
+All `CGI` environment variables are available to each of the hooks
 invoked by the 'git-receive-pack'.
 
 GIT
# install git-http-backend.txt /usr/share/doc/git-doc/git-http-backend.txt
--- /usr/share/doc/git-doc/git-http-push.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-http-push.txt	2016-10-03 14:24:18.000000000 -0600
@@ -81,13 +81,13 @@
      exist in the set of remote refs; the ref matched <src>
      locally is used as the name of the destination.
 
-Without '--force', the <src> ref is stored at the remote only if
+Without `--force`, the <src> ref is stored at the remote only if
 <dst> does not exist, or <dst> is a proper subset (i.e. an
 ancestor) of <src>.  This check, known as "fast-forward check",
 is performed in order to avoid accidentally overwriting the
 remote ref and lose other peoples' commits from there.
 
-With '--force', the fast-forward check is disabled for all refs.
+With `--force`, the fast-forward check is disabled for all refs.
 
 Optionally, a <ref> parameter can be prefixed with a plus '+' sign
 to disable the fast-forward check only on that ref.
# install git-http-push.txt /usr/share/doc/git-doc/git-http-push.txt
--- /usr/share/doc/git-doc/git-imap-send.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-imap-send.txt	2016-10-03 14:24:18.000000000 -0600
@@ -9,7 +9,7 @@
 SYNOPSIS
 --------
 [verse]
-'git imap-send'
+'git imap-send' [-v] [-q] [--[no-]curl]
 
 
 DESCRIPTION
@@ -26,6 +26,28 @@
 git format-patch --signoff --stdout --attach origin | git imap-send
 
 
+OPTIONS
+-------
+
+-v::
+--verbose::
+	Be verbose.
+
+-q::
+--quiet::
+	Be quiet.
+
+--curl::
+	Use libcurl to communicate with the IMAP server, unless tunneling
+	into it.  Ignored if Git was built without the USE_CURL_FOR_IMAP_SEND
+	option set.
+
+--no-curl::
+	Talk to the IMAP server using git's own IMAP routines instead of
+	using libcurl.  Ignored if Git was built with the NO_OPENSSL option
+	set.
+
+
 CONFIGURATION
 -------------
 
@@ -38,18 +60,17 @@
 imap.folder::
 	The folder to drop the mails into, which is typically the Drafts
 	folder. For example: "INBOX.Drafts", "INBOX/Drafts" or
-	"[Gmail]/Drafts". Required to use imap-send.
+	"[Gmail]/Drafts". Required.
 
 imap.tunnel::
 	Command used to setup a tunnel to the IMAP server through which
 	commands will be piped instead of using a direct network connection
-	to the server. Required when imap.host is not set to use imap-send.
+	to the server. Required when imap.host is not set.
 
 imap.host::
 	A URL identifying the server. Use a `imap://` prefix for non-secure
 	connections and a `imaps://` prefix for secure connections.
-	Ignored when imap.tunnel is set, but required to use imap-send
-	otherwise.
+	Ignored when imap.tunnel is set, but required otherwise.
 
 imap.user::
 	The username to use when logging in to the server.
@@ -76,7 +97,10 @@
 
 imap.authMethod::
 	Specify authenticate method for authentication with IMAP server.
-	Current supported method is 'CRAM-MD5' only.
+	If Git was built with the NO_CURL option, or if your curl version is older
+	than 7.34.0, or if you're running git-imap-send with the `--no-curl`
+	option, the only supported method is 'CRAM-MD5'. If this is not set
+	then 'git imap-send' uses the basic IMAP plaintext LOGIN command.
 
 Examples
 ~~~~~~~~
@@ -97,7 +121,7 @@
     host = imap://imap.example.com
     user = bob
     pass = p4ssw0rd
-..........................
+.........................
 
 Using direct mode with SSL:
 
@@ -109,7 +133,7 @@
     pass = p4ssw0rd
     port = 123
     sslverify = false
-..........................
+.........................
 
 
 EXAMPLE
# install git-imap-send.txt /usr/share/doc/git-doc/git-imap-send.txt
--- /usr/share/doc/git-doc/git-init.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-init.txt	2016-10-03 14:24:18.000000000 -0600
@@ -43,11 +43,11 @@
 -q::
 --quiet::
 
-Only print error and warning messages, all other output will be suppressed.
+Only print error and warning messages; all other output will be suppressed.
 
 --bare::
 
-Create a bare repository. If GIT_DIR environment is not set, it is set to the
+Create a bare repository. If `GIT_DIR` environment is not set, it is set to the
 current working directory.
 
 --template=<template_directory>::
@@ -57,12 +57,12 @@
 
 --separate-git-dir=<git dir>::
 
-Instead of initializing the repository where it is supposed to be,
-place a filesytem-agnostic Git symbolic link there, pointing to the
-specified path, and initialize a Git repository at the path. The
-result is Git repository can be separated from working tree. If this
-is reinitialization, the repository will be moved to the specified
-path.
+Instead of initializing the repository as a directory to either `$GIT_DIR` or
+`./.git/`, create a text file there containing the path to the actual
+repository.  This file acts as filesystem-agnostic Git symbolic link to the
+repository.
++
+If this is reinitialization, the repository will be moved to the specified path.
 
 --shared[=(false|true|umask|group|all|world|everybody|0xxx)]::
 
@@ -72,60 +72,70 @@
 set so that files and directories under `$GIT_DIR` are created with the
 requested permissions.  When not specified, Git will use permissions reported
 by umask(2).
-
++
 The option can have the following values, defaulting to 'group' if no value
 is given:
++
+--
+'umask' (or 'false')::
+
+Use permissions reported by umask(2). The default, when `--shared` is not
+specified.
+
+'group' (or 'true')::
 
- - 'umask' (or 'false'): Use permissions reported by umask(2). The default,
-   when `--shared` is not specified.
+Make the repository group-writable, (and g+sx, since the git group may be not
+the primary group of all users). This is used to loosen the permissions of an
+otherwise safe umask(2) value. Note that the umask still applies to the other
+permission bits (e.g. if umask is '0022', using 'group' will not remove read
+privileges from other (non-group) users). See '0xxx' for how to exactly specify
+the repository permissions.
 
- - 'group' (or 'true'): Make the repository group-writable, (and g+sx, since
-   the git group may be not the primary group of all users).
-   This is used to loosen the permissions of an otherwise safe umask(2) value.
-   Note that the umask still applies to the other permission bits (e.g. if
-   umask is '0022', using 'group' will not remove read privileges from other
-   (non-group) users). See '0xxx' for how to exactly specify the repository
-   permissions.
-
- - 'all' (or 'world' or 'everybody'): Same as 'group', but make the repository
-   readable by all users.
-
- - '0xxx': '0xxx' is an octal number and each file will have mode '0xxx'.
-   '0xxx' will override users' umask(2) value (and not only loosen permissions
-   as 'group' and 'all' does). '0640' will create a repository which is
-   group-readable, but not group-writable or accessible to others. '0660' will
-   create a repo that is readable and writable to the current user and group,
-   but inaccessible to others.
+'all' (or 'world' or 'everybody')::
 
-By default, the configuration flag receive.denyNonFastForwards is enabled
+Same as 'group', but make the repository readable by all users.
+
+'0xxx'::
+
+'0xxx' is an octal number and each file will have mode '0xxx'. '0xxx' will
+override users' umask(2) value (and not only loosen permissions as 'group' and
+'all' does). '0640' will create a repository which is group-readable, but not
+group-writable or accessible to others. '0660' will create a repo that is
+readable and writable to the current user and group, but inaccessible to others.
+--
+
+By default, the configuration flag `receive.denyNonFastForwards` is enabled
 in shared repositories, so that you cannot force a non fast-forwarding push
 into it.
 
-If you name a (possibly non-existent) directory at the end of the command
-line, the command is run inside the directory (possibly after creating it).
+If you provide a 'directory', the command is run inside it. If this directory
+does not exist, it will be created.
 
 --
 
-
 TEMPLATE DIRECTORY
 ------------------
 
 The template directory contains files and directories that will be copied to
 the `$GIT_DIR` after it is created.
 
-The template directory used will (in order):
+The template directory will be one of the following (in order):
+
+ - the argument given with the `--template` option;
+
+ - the contents of the `$GIT_TEMPLATE_DIR` environment variable;
 
- - The argument given with the `--template` option.
+ - the `init.templateDir` configuration variable; or
 
- - The contents of the `$GIT_TEMPLATE_DIR` environment variable.
+ - the default template directory: `/usr/share/git-core/templates`.
 
- - The `init.templatedir` configuration variable.
+The default template directory includes some directory structure, suggested
+"exclude patterns" (see linkgit:gitignore[5]), and sample hook files.
 
- - The default template directory: `/usr/share/git-core/templates`.
+The sample hooks are all disabled by default, To enable one of the
+sample hooks rename it by removing its `.sample` suffix.
 
-The default template directory includes some directory structure, some
-suggested "exclude patterns", and copies of sample "hook" files.
-The suggested patterns and hook files are all modifiable and extensible.
+See linkgit:githooks[5] for more general info on hook execution.
 
 EXAMPLES
 --------
@@ -136,10 +146,12 @@
 $ cd /path/to/my/codebase
 $ git init      <1>
 $ git add .     <2>
+$ git commit    <3>
 ----------------
 +
-<1> prepare /path/to/my/codebase/.git directory
-<2> add all existing file to the index
+<1> Create a /path/to/my/codebase/.git directory.
+<2> Add all existing files to the index.
+<3> Record the pristine state as the first commit in the history.
 
 GIT
 ---
# install git-init.txt /usr/share/doc/git-doc/git-init.txt
--- /usr/share/doc/git-doc/git-instaweb.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-instaweb.txt	2016-10-03 14:24:18.000000000 -0600
@@ -76,12 +76,12 @@
 	httpd = apache2 -f
 	port = 4321
 	browser = konqueror
-	modulepath = /usr/lib/apache2/modules
+	modulePath = /usr/lib/apache2/modules
 
 -----------------------------------------------------------------------
 
-If the configuration variable 'instaweb.browser' is not set,
-'web.browser' will be used instead if it is defined. See
+If the configuration variable `instaweb.browser` is not set,
+`web.browser` will be used instead if it is defined. See
 linkgit:git-web{litdd}browse[1] for more information about this.
 
 SEE ALSO
# install git-instaweb.txt /usr/share/doc/git-doc/git-instaweb.txt
# install git-interpret-trailers.txt /usr/share/doc/git-doc/git-interpret-trailers.txt
--- /usr/share/doc/git-doc/git-log.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-log.txt	2016-10-03 14:24:18.000000000 -0600
@@ -29,12 +29,14 @@
 	(works only for a single file).
 
 --no-decorate::
---decorate[=short|full|no]::
+--decorate[=short|full|auto|no]::
 	Print out the ref names of any commits that are shown. If 'short' is
 	specified, the ref name prefixes 'refs/heads/', 'refs/tags/' and
 	'refs/remotes/' will not be printed. If 'full' is specified, the
-	full ref name (including prefix) will be printed. The default option
-	is 'short'.
+	full ref name (including prefix) will be printed. If 'auto' is
+	specified, then if the output is going to a terminal, the ref names
+	are shown as if 'short' were given, otherwise no ref names are
+	shown. The default option is 'short'.
 
 --source::
 	Print out the ref name given on the command line by which each
@@ -62,9 +64,9 @@
 	output by allowing them to allocate space in advance.
 
 -L <start>,<end>:<file>::
--L :<regex>:<file>::
+-L :<funcname>:<file>::
 	Trace the evolution of the line range given by "<start>,<end>"
-	(or the funcname regex <regex>) within the <file>.  You may
+	(or the function name regex <funcname>) within the <file>.  You may
 	not give any pathspec limiters.  This is currently limited to
 	a walk starting from a single revision, i.e., you may only
 	give zero or one positive revision arguments.
@@ -184,18 +186,28 @@
 	`--date` option.)  Defaults to "default", which means to write
 	dates like `Sat May 8 19:35:34 2010 -0500`.
 
-log.showroot::
+log.follow::
+	If `true`, `git log` will act as if the `--follow` option was used when
+	a single <path> is given.  This has the same limitations as `--follow`,
+	i.e. it cannot be used to follow multiple files and does not work well
+	on non-linear history.
+
+log.showRoot::
 	If `false`, `git log` and related commands will not treat the
 	initial commit as a big creation event.  Any root commits in
 	`git log -p` output would be shown without a diff attached.
 	The default is `true`.
 
+log.showSignature::
+	If `true`, `git log` and related commands will act as if the
+	`--show-signature` option was passed to them.
+
 mailmap.*::
 	See linkgit:git-shortlog[1].
 
 notes.displayRef::
 	Which refs, in addition to the default set by `core.notesRef`
-	or 'GIT_NOTES_REF', to read notes from when showing commit
+	or `GIT_NOTES_REF`, to read notes from when showing commit
 	messages with the `log` family of commands.  See
 	linkgit:git-notes[1].
 +
@@ -204,7 +216,7 @@
 but a glob that does not match any refs is silently ignored.
 +
 This setting can be disabled by the `--no-notes` option,
-overridden by the 'GIT_NOTES_DISPLAY_REF' environment variable,
+overridden by the `GIT_NOTES_DISPLAY_REF` environment variable,
 and overridden by the `--notes=<ref>` option.
 
 GIT
# install git-log.txt /usr/share/doc/git-doc/git-log.txt
--- /usr/share/doc/git-doc/git-ls-files.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-ls-files.txt	2016-10-03 14:24:18.000000000 -0600
@@ -12,6 +12,7 @@
 'git ls-files' [-z] [-t] [-v]
 		(--[cached|deleted|others|ignored|stage|unmerged|killed|modified])*
 		(-[c|d|o|i|s|u|k|m])*
+		[--eol]
 		[-x <pattern>|--exclude=<pattern>]
 		[-X <file>|--exclude-from=<file>]
 		[--exclude-per-directory=<file>]
@@ -147,6 +148,23 @@
 	possible for manual inspection; the exact format may change at
 	any time.
 
+--eol::
+	Show <eolinfo> and <eolattr> of files.
+	<eolinfo> is the file content identification used by Git when
+	the "text" attribute is "auto" (or not set and core.autocrlf is not false).
+	<eolinfo> is either "-text", "none", "lf", "crlf", "mixed" or "".
++
+"" means the file is not a regular file, it is not in the index or
+not accessible in the working tree.
++
+<eolattr> is the attribute that is used when checking out or committing,
+it is either "", "-text", "text", "text=auto", "text eol=lf", "text eol=crlf".
+Since Git 2.10 "text=auto eol=lf" and "text=auto eol=crlf" are supported.
++
+Both the <eolinfo> in the index ("i/<eolinfo>")
+and in the working tree ("w/<eolinfo>") are shown for regular files,
+followed by the  ("attr/<eolattr>").
+
 \--::
 	Do not interpret any more arguments as options.
 
@@ -156,11 +174,14 @@
 
 Output
 ------
-'git ls-files' just outputs the filenames unless '--stage' is specified in
+'git ls-files' just outputs the filenames unless `--stage` is specified in
 which case it outputs:
 
         [<tag> ]<mode> <object> <stage> <file>
 
+'git ls-files --eol' will show
+	i/<eolinfo><SPACES>w/<eolinfo><SPACES>attr/<eolattr><SPACE*><TAB><file>
+
 'git ls-files --unmerged' and 'git ls-files --stage' can be used to examine
 detailed information on unmerged paths.
 
@@ -185,15 +206,15 @@
 
 These exclude patterns come from these places, in order:
 
-  1. The command line flag --exclude=<pattern> specifies a
+  1. The command-line flag --exclude=<pattern> specifies a
      single pattern.  Patterns are ordered in the same order
      they appear in the command line.
 
-  2. The command line flag --exclude-from=<file> specifies a
+  2. The command-line flag --exclude-from=<file> specifies a
      file containing a list of patterns.  Patterns are ordered
      in the same order they appear in the file.
 
-  3. The command line flag --exclude-per-directory=<name> specifies
+  3. The command-line flag --exclude-per-directory=<name> specifies
      a name of the file in each directory 'git ls-files'
      examines, normally `.gitignore`.  Files in deeper
      directories take precedence.  Patterns are ordered in the
# install git-ls-files.txt /usr/share/doc/git-doc/git-ls-files.txt
--- /usr/share/doc/git-doc/git-ls-remote.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-ls-remote.txt	2016-10-03 14:24:18.000000000 -0600
@@ -9,8 +9,9 @@
 SYNOPSIS
 --------
 [verse]
-'git ls-remote' [--heads] [--tags]  [-u <exec> | --upload-pack <exec>]
-	      [--exit-code] <repository> [<refs>...]
+'git ls-remote' [--heads] [--tags] [--refs] [--upload-pack=<exec>]
+	      [-q | --quiet] [--exit-code] [--get-url]
+	      [--symref] [<repository> [<refs>...]]
 
 DESCRIPTION
 -----------
@@ -29,7 +30,13 @@
 	both, references stored in refs/heads and refs/tags are
 	displayed.
 
--u <exec>::
+--refs::
+	Do not show peeled tags or pseudorefs like HEAD	in the output.
+
+-q::
+--quiet::
+	Do not print remote URL to stderr.
+
 --upload-pack=<exec>::
 	Specify the full path of 'git-upload-pack' on the remote
 	host. This allows listing references from repositories accessed via
@@ -47,6 +54,12 @@
 	"url.<base>.insteadOf" config setting (See linkgit:git-config[1]) and
 	exit without talking to the remote.
 
+--symref::
+	In addition to the object pointed by it, show the underlying
+	ref pointed by it when showing a symbolic ref.  Currently,
+	upload-pack only shows the symref HEAD, so it will be the only
+	one shown by ls-remote.
+
 <repository>::
 	The "remote" repository to query.  This parameter can be
 	either a URL or the name of a remote (see the GIT URLS and
# install git-ls-remote.txt /usr/share/doc/git-doc/git-ls-remote.txt
--- /usr/share/doc/git-doc/git-ls-tree.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-ls-tree.txt	2016-10-03 14:24:18.000000000 -0600
@@ -20,16 +20,16 @@
 
  - the behaviour is slightly different from that of "/bin/ls" in that the
    '<path>' denotes just a list of patterns to match, e.g. so specifying
-   directory name (without '-r') will behave differently, and order of the
+   directory name (without `-r`) will behave differently, and order of the
    arguments does not matter.
 
  - the behaviour is similar to that of "/bin/ls" in that the '<path>' is
    taken as relative to the current working directory.  E.g. when you are
    in a directory 'sub' that has a directory 'dir', you can run 'git
    ls-tree -r HEAD dir' to list the contents of the tree (that is
-   'sub/dir' in 'HEAD').  You don't want to give a tree that is not at the
+   'sub/dir' in `HEAD`).  You don't want to give a tree that is not at the
    root level (e.g. `git ls-tree -r HEAD:sub dir`) in this case, as that
-   would result in asking for 'sub/sub/dir' in the 'HEAD' commit.
+   would result in asking for 'sub/sub/dir' in the `HEAD` commit.
    However, the current working directory can be ignored by passing
    --full-tree option.
 
@@ -46,7 +46,7 @@
 
 -t::
 	Show tree entries even when going to recurse them. Has no effect
-	if '-r' was not passed. '-d' implies '-t'.
+	if `-r` was not passed. `-d` implies `-t`.
 
 -l::
 --long::
# install git-ls-tree.txt /usr/share/doc/git-doc/git-ls-tree.txt
--- /usr/share/doc/git-doc/git-mailinfo.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-mailinfo.txt	2016-10-03 14:24:18.000000000 -0600
@@ -66,6 +66,11 @@
 -n::
 	Disable all charset re-coding of the metadata.
 
+-m::
+--message-id::
+	Copy the Message-ID header at the end of the commit message.  This
+	is useful in order to associate commits with mailing list discussions.
+
 --scissors::
 	Remove everything in body before a scissors line.  A line that
 	mainly consists of scissors (either ">8" or "8<") and perforation
@@ -80,7 +85,7 @@
 conclude it with a patch submission, separating the discussion and the
 beginning of the proposed commit log message with a scissors line.
 +
-This can enabled by default with the configuration option mailinfo.scissors.
+This can be enabled by default with the configuration option mailinfo.scissors.
 
 --no-scissors::
 	Ignore scissors lines. Useful for overriding mailinfo.scissors settings.
# install git-mailinfo.txt /usr/share/doc/git-doc/git-mailinfo.txt
--- /usr/share/doc/git-doc/git-mailsplit.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-mailsplit.txt	2016-10-03 14:24:18.000000000 -0600
@@ -8,7 +8,8 @@
 SYNOPSIS
 --------
 [verse]
-'git mailsplit' [-b] [-f<nn>] [-d<prec>] [--keep-cr] -o<directory> [--] [(<mbox>|<Maildir>)...]
+'git mailsplit' [-b] [-f<nn>] [-d<prec>] [--keep-cr] [--mboxrd]
+		-o<directory> [--] [(<mbox>|<Maildir>)...]
 
 DESCRIPTION
 -----------
@@ -47,6 +48,10 @@
 --keep-cr::
 	Do not remove `\r` from lines ending with `\r\n`.
 
+--mboxrd::
+	Input is of the "mboxrd" format and "^>+From " line escaping is
+	reversed.
+
 GIT
 ---
 Part of the linkgit:git[1] suite
# install git-mailsplit.txt /usr/share/doc/git-doc/git-mailsplit.txt
--- /usr/share/doc/git-doc/git-merge-file.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-merge-file.txt	2016-10-03 14:24:18.000000000 -0600
@@ -41,7 +41,8 @@
 conflict markers can be given with the `--marker-size` option.
 
 The exit value of this program is negative on error, and the number of
-conflicts otherwise. If the merge was clean, the exit value is 0.
+conflicts otherwise (truncated to 127 if there are more than that many
+conflicts). If the merge was clean, the exit value is 0.
 
 'git merge-file' is designed to be a minimal clone of RCS 'merge'; that is, it
 implements all of RCS 'merge''s functionality which is needed by
# install git-merge-file.txt /usr/share/doc/git-doc/git-merge-file.txt
--- /usr/share/doc/git-doc/git-merge.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-merge.txt	2016-10-03 14:24:18.000000000 -0600
@@ -11,6 +11,7 @@
 [verse]
 'git merge' [-n] [--stat] [--no-commit] [--squash] [--[no-]edit]
 	[-s <strategy>] [-X <strategy-option>] [-S[<keyid>]]
+	[--[no-]allow-unrelated-histories]
 	[--[no-]rerere-autoupdate] [-m <msg>] [<commit>...]
 'git merge' <msg> HEAD <commit>...
 'git merge' --abort
@@ -67,7 +68,9 @@
 
 -S[<keyid>]::
 --gpg-sign[=<keyid>]::
-	GPG-sign the resulting merge commit.
+	GPG-sign the resulting merge commit. The `keyid` argument is
+	optional and defaults to the committer identity; if specified,
+	it must be stuck to the option without a space.
 
 -m <msg>::
 	Set the commit message to be used for the merge commit (in
@@ -78,7 +81,7 @@
 +
 The 'git fmt-merge-msg' command can be
 used to give a good default for automated 'git merge'
-invocations.
+invocations. The automated message can include the branch description.
 
 --[no-]rerere-autoupdate::
 	Allow the rerere mechanism to update the index with the
@@ -101,10 +104,13 @@
 	Specifying more than one commit will create a merge with
 	more than two parents (affectionately called an Octopus merge).
 +
-If no commit is given from the command line, and if `merge.defaultToUpstream`
-configuration variable is set, merge the remote-tracking branches
-that the current branch is configured to use as its upstream.
+If no commit is given from the command line, merge the remote-tracking
+branches that the current branch is configured to use as its upstream.
 See also the configuration section of this manual page.
++
+When `FETCH_HEAD` (and no other commit) is specified, the branches
+recorded in the `.git/FETCH_HEAD` file by the previous invocation
+of `git fetch` for merging are merged to the current branch.
 
 
 PRE-MERGE CHECKS
@@ -233,7 +239,7 @@
 side wants to say it is hard and you'd prefer to go shopping, while the
 other side wants to claim it is easy.
 
-An alternative style can be used by setting the "merge.conflictstyle"
+An alternative style can be used by setting the "merge.conflictStyle"
 configuration variable to "diff3".  In "diff3" style, the above conflict
 may look like this:
 
@@ -330,7 +336,7 @@
 -------------
 include::merge-config.txt[]
 
-branch.<name>.mergeoptions::
+branch.<name>.mergeOptions::
 	Sets default options for merging into branch <name>. The syntax and
 	supported options are the same as those of 'git merge', but option
 	values containing whitespace characters are currently not supported.
# install git-merge.txt /usr/share/doc/git-doc/git-merge.txt
--- /usr/share/doc/git-doc/git-mergetool.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-mergetool.txt	2016-10-03 14:24:18.000000000 -0600
@@ -71,11 +71,13 @@
 --no-prompt::
 	Don't prompt before each invocation of the merge resolution
 	program.
+	This is the default if the merge resolution program is
+	explicitly specified with the `--tool` option or with the
+	`merge.tool` configuration variable.
 
 --prompt::
-	Prompt before each invocation of the merge resolution program.
-	This is the default behaviour; the option is provided to
-	override any configuration settings.
+	Prompt before each invocation of the merge resolution program
+	to give the user a chance to skip the path.
 
 TEMPORARY FILES
 ---------------
# install git-mergetool.txt /usr/share/doc/git-doc/git-mergetool.txt
--- /usr/share/doc/git-doc/git-mktag.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-mktag.txt	2016-10-03 14:24:18.000000000 -0600
@@ -9,7 +9,7 @@
 SYNOPSIS
 --------
 [verse]
-'git mktag' < signature_file
+'git mktag'
 
 DESCRIPTION
 -----------
@@ -20,7 +20,8 @@
 
 Tag Format
 ----------
-A tag signature file has a very simple fixed format: four lines of
+A tag signature file, to be fed to this command's standard input,
+has a very simple fixed format: four lines of
 
   object <sha1>
   type <typename>
# install git-mktag.txt /usr/share/doc/git-doc/git-mktag.txt
--- /usr/share/doc/git-doc/git-mktree.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-mktree.txt	2016-10-03 14:24:18.000000000 -0600
@@ -32,7 +32,7 @@
 --batch::
 	Allow building of more than one tree object before exiting.  Each
 	tree is separated by as single blank line. The final new-line is
-	optional.  Note - if the '-z' option is used, lines are terminated
+	optional.  Note - if the `-z` option is used, lines are terminated
 	with NUL.
 
 GIT
# install git-mktree.txt /usr/share/doc/git-doc/git-mktree.txt
--- /usr/share/doc/git-doc/git-mv.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-mv.txt	2016-10-03 14:24:18.000000000 -0600
@@ -32,10 +32,10 @@
 --force::
 	Force renaming or moving of a file even if the target exists
 -k::
-        Skip move or rename actions which would lead to an error
+	Skip move or rename actions which would lead to an error
 	condition. An error happens when a source is neither existing nor
 	controlled by Git, or when it would overwrite an existing
-        file unless '-f' is given.
+	file unless `-f` is given.
 -n::
 --dry-run::
 	Do nothing; only show what would happen
# install git-mv.txt /usr/share/doc/git-doc/git-mv.txt
--- /usr/share/doc/git-doc/git-notes.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-notes.txt	2016-10-03 14:24:18.000000000 -0600
@@ -9,12 +9,12 @@
 --------
 [verse]
 'git notes' [list [<object>]]
-'git notes' add [-f] [-F <file> | -m <msg> | (-c | -C) <object>] [<object>]
+'git notes' add [-f] [--allow-empty] [-F <file> | -m <msg> | (-c | -C) <object>] [<object>]
 'git notes' copy [-f] ( --stdin | <from-object> <to-object> )
-'git notes' append [-F <file> | -m <msg> | (-c | -C) <object>] [<object>]
-'git notes' edit [<object>]
+'git notes' append [--allow-empty] [-F <file> | -m <msg> | (-c | -C) <object>] [<object>]
+'git notes' edit [--allow-empty] [<object>]
 'git notes' show [<object>]
-'git notes' merge [-v | -q] [-s <strategy> ] <notes_ref>
+'git notes' merge [-v | -q] [-s <strategy> ] <notes-ref>
 'git notes' merge --commit [-v | -q]
 'git notes' merge --abort [-v | -q]
 'git notes' remove [--ignore-missing] [--stdin] [<object>...]
@@ -101,7 +101,7 @@
 	any) into the current notes ref (called "local").
 +
 If conflicts arise and a strategy for automatically resolving
-conflicting notes (see the -s/--strategy option) is not given,
+conflicting notes (see the "NOTES MERGE STRATEGIES" section) is not given,
 the "manual" resolver is used. This resolver checks out the
 conflicting notes in a special worktree (`.git/NOTES_MERGE_WORKTREE`),
 and instructs the user to manually resolve the conflicts there.
@@ -152,13 +152,19 @@
 
 -c <object>::
 --reedit-message=<object>::
-	Like '-C', but with '-c' the editor is invoked, so that
+	Like '-C', but with `-c` the editor is invoked, so that
 	the user can further edit the note message.
 
+--allow-empty::
+	Allow an empty note object to be stored. The default behavior is
+	to automatically remove empty notes.
+
 --ref <ref>::
 	Manipulate the notes tree in <ref>.  This overrides
-	'GIT_NOTES_REF' and the "core.notesRef" configuration.  The ref
-	is taken to be in `refs/notes/` if it is not qualified.
+	`GIT_NOTES_REF` and the "core.notesRef" configuration.  The ref
+	specifies the full refname when it begins with `refs/notes/`; when it
+	begins with `notes/`, `refs/` and otherwise `refs/notes/` is prefixed
+	to form a full name of the ref.
 
 --ignore-missing::
 	Do not consider it an error to request removing notes from an
@@ -179,6 +185,7 @@
 	When merging notes, resolve notes conflicts using the given
 	strategy. The following strategies are recognized: "manual"
 	(default), "ours", "theirs", "union" and "cat_sort_uniq".
+	This option overrides the "notes.mergeStrategy" configuration setting.
 	See the "NOTES MERGE STRATEGIES" section below for more
 	information on each notes merge strategy.
 
@@ -243,6 +250,9 @@
 'git notes merge --commit', or abort the merge with
 'git notes merge --abort'.
 
+Users may select an automated merge strategy from among the following using
+either -s/--strategy option or configuring notes.mergeStrategy accordingly:
+
 "ours" automatically resolves conflicting notes in favor of the local
 version (i.e. the current notes ref).
 
@@ -287,7 +297,7 @@
 ------------
 $ cc *.c
 $ blob=$(git hash-object -w a.out)
-$ git notes --ref=built add -C "$blob" HEAD
+$ git notes --ref=built add --allow-empty -C "$blob" HEAD
 ------------
 
 (You cannot simply use `git notes --ref=built add -F a.out HEAD`
@@ -306,13 +316,27 @@
 	This setting can be overridden through the environment and
 	command line.
 
+notes.mergeStrategy::
+	Which merge strategy to choose by default when resolving notes
+	conflicts.  Must be one of `manual`, `ours`, `theirs`, `union`, or
+	`cat_sort_uniq`.  Defaults to `manual`.  See "NOTES MERGE STRATEGIES"
+	section above for more information on each strategy.
++
+This setting can be overridden by passing the `--strategy` option.
+
+notes.<name>.mergeStrategy::
+	Which merge strategy to choose when doing a notes merge into
+	refs/notes/<name>.  This overrides the more general
+	"notes.mergeStrategy".  See the "NOTES MERGE STRATEGIES" section above
+	for more information on each available strategy.
+
 notes.displayRef::
 	Which ref (or refs, if a glob or specified more than once), in
 	addition to the default set by `core.notesRef` or
-	'GIT_NOTES_REF', to read notes from when showing commit
+	`GIT_NOTES_REF`, to read notes from when showing commit
 	messages with the 'git log' family of commands.
 	This setting can be overridden on the command line or by the
-	'GIT_NOTES_DISPLAY_REF' environment variable.
+	`GIT_NOTES_DISPLAY_REF` environment variable.
 	See linkgit:git-log[1].
 
 notes.rewrite.<command>::
@@ -321,13 +345,14 @@
 	notes from the original to the rewritten commit.  Defaults to
 	`true`.  See also "`notes.rewriteRef`" below.
 +
-This setting can be overridden by the 'GIT_NOTES_REWRITE_REF'
+This setting can be overridden by the `GIT_NOTES_REWRITE_REF`
 environment variable.
 
 notes.rewriteMode::
 	When copying notes during a rewrite, what to do if the target
 	commit already has a note.  Must be one of `overwrite`,
-	`concatenate`, and `ignore`.  Defaults to `concatenate`.
+	`concatenate`, `cat_sort_uniq`, or `ignore`.  Defaults to
+	`concatenate`.
 +
 This setting can be overridden with the `GIT_NOTES_REWRITE_MODE`
 environment variable.
@@ -341,33 +366,33 @@
 Does not have a default value; you must configure this variable to
 enable note rewriting.
 +
-Can be overridden with the 'GIT_NOTES_REWRITE_REF' environment variable.
+Can be overridden with the `GIT_NOTES_REWRITE_REF` environment variable.
 
 
 ENVIRONMENT
 -----------
 
-'GIT_NOTES_REF'::
+`GIT_NOTES_REF`::
 	Which ref to manipulate notes from, instead of `refs/notes/commits`.
 	This overrides the `core.notesRef` setting.
 
-'GIT_NOTES_DISPLAY_REF'::
+`GIT_NOTES_DISPLAY_REF`::
 	Colon-delimited list of refs or globs indicating which refs,
 	in addition to the default from `core.notesRef` or
-	'GIT_NOTES_REF', to read notes from when showing commit
+	`GIT_NOTES_REF`, to read notes from when showing commit
 	messages.
 	This overrides the `notes.displayRef` setting.
 +
 A warning will be issued for refs that do not exist, but a glob that
 does not match any refs is silently ignored.
 
-'GIT_NOTES_REWRITE_MODE'::
+`GIT_NOTES_REWRITE_MODE`::
 	When copying notes during a rewrite, what to do if the target
 	commit already has a note.
-	Must be one of `overwrite`, `concatenate`, and `ignore`.
+	Must be one of `overwrite`, `concatenate`, `cat_sort_uniq`, or `ignore`.
 	This overrides the `core.rewriteMode` setting.
 
-'GIT_NOTES_REWRITE_REF'::
+`GIT_NOTES_REWRITE_REF`::
 	When rewriting commits, which notes to copy from the original
 	to the rewritten commit.  Must be a colon-delimited list of
 	refs or globs.
@@ -377,4 +402,4 @@
 
 GIT
 ---
-Part of the linkgit:git[7] suite
+Part of the linkgit:git[1] suite
# install git-notes.txt /usr/share/doc/git-doc/git-notes.txt
--- /usr/share/doc/git-doc/git-p4.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-p4.txt	2016-10-03 14:24:18.000000000 -0600
@@ -104,7 +104,7 @@
 ------------
 This imports the specified depot into
 'refs/remotes/p4/master' in an existing Git repository.  The
-'--branch' option can be used to specify a different branch to
+`--branch` option can be used to specify a different branch to
 be used for the p4 content.
 
 If a Git repository includes branches 'refs/remotes/origin/p4', these
@@ -114,7 +114,7 @@
 
 If there are multiple branches, doing 'git p4 sync' will automatically
 use the "BRANCH DETECTION" algorithm to try to partition new changes
-into the right branch.  This can be overridden with the '--branch'
+into the right branch.  This can be overridden with the `--branch`
 option to specify just a single branch to update.
 
 
@@ -134,7 +134,7 @@
 ~~~~~~
 Submitting changes from a Git repository back to the p4 repository
 requires a separate p4 client workspace.  This should be specified
-using the 'P4CLIENT' environment variable or the Git configuration
+using the `P4CLIENT` environment variable or the Git configuration
 variable 'git-p4.client'.  The p4 client must exist, but the client root
 will be created and populated if it does not already exist.
 
@@ -150,10 +150,10 @@
 ------------
 
 The upstream reference is generally 'refs/remotes/p4/master', but can
-be overridden using the '--origin=' command-line option.
+be overridden using the `--origin=` command-line option.
 
 The p4 changes will be created as the user invoking 'git p4 submit'. The
-'--preserve-user' option will cause ownership to be modified
+`--preserve-user` option will cause ownership to be modified
 according to the author of the Git commit.  This option requires admin
 privileges in p4, which can be granted using 'p4 protect'.
 
@@ -166,7 +166,7 @@
 All commands except clone accept these options.
 
 --git-dir <dir>::
-	Set the 'GIT_DIR' environment variable.  See linkgit:git[1].
+	Set the `GIT_DIR` environment variable.  See linkgit:git[1].
 
 -v::
 --verbose::
@@ -221,26 +221,40 @@
 	where they will be treated as remote-tracking branches by
 	linkgit:git-branch[1] and other commands.  This option instead
 	puts p4 branches in 'refs/heads/p4/'.  Note that future
-	sync operations must specify '--import-local' as well so that
+	sync operations must specify `--import-local` as well so that
 	they can find the p4 branches in refs/heads.
 
 --max-changes <n>::
-	Limit the number of imported changes to 'n'.  Useful to
-	limit the amount of history when using the '@all' p4 revision
-	specifier.
+	Import at most 'n' changes, rather than the entire range of
+	changes included in the given revision specifier. A typical
+	usage would be use '@all' as the revision specifier, but then
+	to use '--max-changes 1000' to import only the last 1000
+	revisions rather than the entire revision history.
+
+--changes-block-size <n>::
+	The internal block size to use when converting a revision
+	specifier such as '@all' into a list of specific change
+	numbers. Instead of using a single call to 'p4 changes' to
+	find the full list of changes for the conversion, there are a
+	sequence of calls to 'p4 changes -m', each of which requests
+	one block of changes of the given size. The default block size
+	is 500, which should usually be suitable.
 
 --keep-path::
 	The mapping of file names from the p4 depot path to Git, by
 	default, involves removing the entire depot path.  With this
 	option, the full p4 depot path is retained in Git.  For example,
 	path '//depot/main/foo/bar.c', when imported from
-	'//depot/main/', becomes 'foo/bar.c'.  With '--keep-path', the
+	'//depot/main/', becomes 'foo/bar.c'.  With `--keep-path`, the
 	Git path is instead 'depot/main/foo/bar.c'.
 
 --use-client-spec::
 	Use a client spec to find the list of interesting files in p4.
 	See the "CLIENT SPEC" section below.
 
+-/ <path>::
+	Exclude selected depot paths when cloning or syncing.
+
 Clone options
 ~~~~~~~~~~~~~
 These options can be used in an initial 'clone', along with the 'sync'
@@ -254,9 +268,6 @@
 --bare::
 	Perform a bare clone.  See linkgit:git-clone[1].
 
--/ <path>::
-	Exclude selected depot paths when cloning.
-
 Submit options
 ~~~~~~~~~~~~~~
 These options can be used to modify 'git p4 submit' behavior.
@@ -264,7 +275,7 @@
 --origin <commit>::
 	Upstream location from which commits are identified to submit to
 	p4.  By default, this is the most recent p4 commit reachable
-	from 'HEAD'.
+	from `HEAD`.
 
 -M::
 	Detect renames.  See linkgit:git-diff[1].  Renames will be
@@ -330,7 +341,7 @@
     Import all changes from both named depot paths into a single
     repository.  Only files below these directories are included.
     There is not a subdirectory in Git for each "proj1" and "proj2".
-    You must use the '--destination' option when specifying more
+    You must use the `--destination` option when specifying more
     than one depot path.  The revision specifier must be specified
     identically on each depot path.  If there are files in the
     depot paths with the same name, the path with the most recently
@@ -344,7 +355,7 @@
 The p4 client specification is maintained with the 'p4 client' command
 and contains among other fields, a View that specifies how the depot
 is mapped into the client repository.  The 'clone' and 'sync' commands
-can consult the client spec when given the '--use-client-spec' option or
+can consult the client spec when given the `--use-client-spec` option or
 when the useClientSpec variable is true.  After 'git p4 clone', the
 useClientSpec variable is automatically set in the repository
 configuration file.  This allows future 'git p4 submit' commands to
@@ -379,7 +390,7 @@
 can use these mappings to determine branch relationships.
 
 If you have a repository where all the branches of interest exist as
-subdirectories of a single depot path, you can use '--detect-branches'
+subdirectories of a single depot path, you can use `--detect-branches`
 when cloning or syncing to have 'git p4' automatically find
 subdirectories in p4, and to generate these as branches in Git.
 
@@ -496,9 +507,61 @@
 git-p4.useClientSpec::
 	Specify that the p4 client spec should be used to identify p4
 	depot paths of interest.  This is equivalent to specifying the
-	option '--use-client-spec'.  See the "CLIENT SPEC" section above.
+	option `--use-client-spec`.  See the "CLIENT SPEC" section above.
 	This variable is a boolean, not the name of a p4 client.
 
+git-p4.pathEncoding::
+	Perforce keeps the encoding of a path as given by the originating OS.
+	Git expects paths encoded as UTF-8. Use this config to tell git-p4
+	what encoding Perforce had used for the paths. This encoding is used
+	to transcode the paths to UTF-8. As an example, Perforce on Windows
+	often uses "cp1252" to encode path names.
+
+git-p4.largeFileSystem::
+	Specify the system that is used for large (binary) files. Please note
+	that large file systems do not support the 'git p4 submit' command.
+	Only Git LFS is implemented right now (see https://git-lfs.github.com/
+	for more information). Download and install the Git LFS command line
+	extension to use this option and configure it like this:
++
+-------------
+git config       git-p4.largeFileSystem GitLFS
+-------------
+
+git-p4.largeFileExtensions::
+	All files matching a file extension in the list will be processed
+	by the large file system. Do not prefix the extensions with '.'.
+
+git-p4.largeFileThreshold::
+	All files with an uncompressed size exceeding the threshold will be
+	processed by the large file system. By default the threshold is
+	defined in bytes. Add the suffix k, m, or g to change the unit.
+
+git-p4.largeFileCompressedThreshold::
+	All files with a compressed size exceeding the threshold will be
+	processed by the large file system. This option might slow down
+	your clone/sync process. By default the threshold is defined in
+	bytes. Add the suffix k, m, or g to change the unit.
+
+git-p4.largeFilePush::
+	Boolean variable which defines if large files are automatically
+	pushed to a server.
+
+git-p4.keepEmptyCommits::
+	A changelist that contains only excluded files will be imported
+	as an empty commit if this boolean option is set to true.
+
+git-p4.mapUser::
+	Map a P4 user to a name and email address in Git. Use a string
+	with the following format to create a mapping:
++
+-------------
+git config --add git-p4.mapUser "p4user = First Last <mail@address.com>"
+-------------
++
+A mapping will override any user information from P4. Mappings for
+multiple P4 user can be defined.
+
 Submit variables
 ~~~~~~~~~~~~~~~~
 git-p4.detectRenames::
# install git-p4.txt /usr/share/doc/git-doc/git-p4.txt
--- /usr/share/doc/git-doc/git-pack-objects.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-pack-objects.txt	2016-10-03 14:24:18.000000000 -0600
@@ -13,7 +13,7 @@
 	[--no-reuse-delta] [--delta-base-offset] [--non-empty]
 	[--local] [--incremental] [--window=<n>] [--depth=<n>]
 	[--revs [--unpacked | --all]] [--stdout | base-name]
-	[--keep-true-parents] < object-list
+	[--shallow] [--keep-true-parents] < object-list
 
 
 DESCRIPTION
@@ -64,6 +64,8 @@
 	the same way as 'git rev-list' with the `--objects` flag
 	uses its `commit` arguments to build the list of objects it
 	outputs.  The objects on the resulting list are packed.
+	Besides revisions, `--not` or `--shallow <SHA-1>` lines are
+	also accepted.
 
 --unpacked::
 	This implies `--revs`.  When processing the list of
@@ -102,13 +104,14 @@
 	out of memory with a large window, but still be able to take
 	advantage of the large window for the smaller objects.  The
 	size can be suffixed with "k", "m", or "g".
-	`--window-memory=0` makes memory usage unlimited, which is the
-	default.
+	`--window-memory=0` makes memory usage unlimited.  The default
+	is taken from the `pack.windowMemory` configuration variable.
 
 --max-pack-size=<n>::
 	Maximum size of each output pack file. The size can be suffixed with
 	"k", "m", or "g". The minimum size allowed is limited to 1 MiB.
-	If specified,  multiple packfiles may be created.
+	If specified, multiple packfiles may be created, which also
+	prevents the creation of a bitmap index.
 	The default is unlimited, unless the config variable
 	`pack.packSizeLimit` is set.
 
@@ -188,6 +191,11 @@
 self-contained. Use `git index-pack --fix-thin`
 (see linkgit:git-index-pack[1]) to restore the self-contained property.
 
+--shallow::
+	Optimize a pack that will be provided to a client with a shallow
+	repository.  This option, combined with --thin, can result in a
+	smaller pack at the cost of speed.
+
 --delta-base-offset::
 	A packed archive can express the base object of a delta as
 	either a 20-byte object name or as an offset in the
# install git-pack-objects.txt /usr/share/doc/git-doc/git-pack-objects.txt
--- /usr/share/doc/git-doc/git-patch-id.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-patch-id.txt	2016-10-03 14:24:18.000000000 -0600
@@ -8,14 +8,16 @@
 SYNOPSIS
 --------
 [verse]
-'git patch-id' < <patch>
+'git patch-id' [--stable | --unstable]
 
 DESCRIPTION
 -----------
-A "patch ID" is nothing but a SHA-1 of the diff associated with a patch, with
-whitespace and line numbers ignored.  As such, it's "reasonably stable", but at
-the same time also reasonably unique, i.e., two patches that have the same "patch
-ID" are almost guaranteed to be the same thing.
+Read a patch from the standard input and compute the patch ID for it.
+
+A "patch ID" is nothing but a sum of SHA-1 of the file diffs associated with a
+patch, with whitespace and line numbers ignored.  As such, it's "reasonably
+stable", but at the same time also reasonably unique, i.e., two patches that
+have the same "patch ID" are almost guaranteed to be the same thing.
 
 IOW, you can use this thing to look for likely duplicate commits.
 
@@ -27,6 +29,33 @@
 
 OPTIONS
 -------
+
+--stable::
+	Use a "stable" sum of hashes as the patch ID. With this option:
+	 - Reordering file diffs that make up a patch does not affect the ID.
+	   In particular, two patches produced by comparing the same two trees
+	   with two different settings for "-O<orderfile>" result in the same
+	   patch ID signature, thereby allowing the computed result to be used
+	   as a key to index some meta-information about the change between
+	   the two trees;
+
+	 - Result is different from the value produced by git 1.9 and older
+	   or produced when an "unstable" hash (see --unstable below) is
+	   configured - even when used on a diff output taken without any use
+	   of "-O<orderfile>", thereby making existing databases storing such
+	   "unstable" or historical patch-ids unusable.
+
+	This is the default if patchid.stable is set to true.
+
+--unstable::
+	Use an "unstable" hash as the patch ID. With this option,
+	the result produced is compatible with the patch-id value produced
+	by git 1.9 and older.  Users with pre-existing databases storing
+	patch-ids produced by git 1.9 and older (who do not deal with reordered
+	patches) may want to use this option.
+
+	This is the default.
+
 <patch>::
 	The diff to create the ID of.
 
# install git-patch-id.txt /usr/share/doc/git-doc/git-patch-id.txt
--- /usr/share/doc/git-doc/git-prune-packed.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-prune-packed.txt	2016-10-03 14:24:18.000000000 -0600
@@ -1,5 +1,5 @@
 git-prune-packed(1)
-=====================
+===================
 
 NAME
 ----
# install git-prune-packed.txt /usr/share/doc/git-doc/git-prune-packed.txt
--- /usr/share/doc/git-doc/git-prune.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-prune.txt	2016-10-03 14:24:18.000000000 -0600
@@ -56,7 +56,7 @@
 EXAMPLE
 -------
 
-To prune objects not used by your repository nor another that
+To prune objects not used by your repository or another that
 borrows from your repository via its
 `.git/objects/info/alternates`:
 
# install git-prune.txt /usr/share/doc/git-doc/git-prune.txt
--- /usr/share/doc/git-doc/git-pull.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-pull.txt	2016-10-03 14:24:18.000000000 -0600
@@ -74,9 +74,6 @@
 OPTIONS
 -------
 
-Options meant for 'git pull' itself and the underlying 'git merge'
-must be given before the options meant for 'git fetch'.
-
 -q::
 --quiet::
 	This is passed to both underlying git-fetch to squelch reporting of
@@ -104,20 +101,21 @@
 include::merge-options.txt[]
 
 -r::
---rebase[=false|true|preserve]::
+--rebase[=false|true|preserve|interactive]::
 	When true, rebase the current branch on top of the upstream
 	branch after fetching. If there is a remote-tracking branch
 	corresponding to the upstream branch and the upstream branch
 	was rebased since last fetched, the rebase uses that information
 	to avoid rebasing non-local changes.
 +
-When preserve, also rebase the current branch on top of the upstream
-branch, but pass `--preserve-merges` along to `git rebase` so that
-locally created merge commits will not be flattened.
+When set to preserve, rebase with the `--preserve-merges` option passed
+to `git rebase` so that locally created merge commits will not be flattened.
 +
 When false, merge the current branch into the upstream branch.
 +
-See `pull.rebase`, `branch.<name>.rebase` and `branch.autosetuprebase` in
+When `interactive`, enable the interactive mode of rebase.
++
+See `pull.rebase`, `branch.<name>.rebase` and `branch.autoSetupRebase` in
 linkgit:git-config[1] if you want to make `git pull` always use
 `--rebase` instead of merging.
 +
@@ -130,6 +128,15 @@
 --no-rebase::
 	Override earlier --rebase.
 
+--autostash::
+--no-autostash::
+	Before starting rebase, stash local modifications away (see
+	linkgit:git-stash[1]) if needed, and apply the stash when
+	done. `--no-autostash` is useful to override the `rebase.autoStash`
+	configuration variable (see linkgit:git-config[1]).
++
+This option is only valid when "--rebase" is used.
+
 Options related to fetching
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
# install git-pull.txt /usr/share/doc/git-doc/git-pull.txt
--- /usr/share/doc/git-doc/git-push.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-push.txt	2016-10-03 14:24:18.000000000 -0600
@@ -9,8 +9,10 @@
 SYNOPSIS
 --------
 [verse]
-'git push' [--all | --mirror | --tags] [--follow-tags] [-n | --dry-run] [--receive-pack=<git-receive-pack>]
-	   [--repo=<repository>] [-f | --force] [--prune] [-v | --verbose] [-u | --set-upstream]
+'git push' [--all | --mirror | --tags] [--follow-tags] [--atomic] [-n | --dry-run] [--receive-pack=<git-receive-pack>]
+	   [--repo=<repository>] [-f | --force] [-d | --delete] [--prune] [-v | --verbose]
+	   [-u | --set-upstream] [--push-option=<string>]
+	   [--[no-]signed|--sign=(true|false|if-asked)]
 	   [--force-with-lease[=<refname>[:<expect>]]]
 	   [--no-verify] [<repository> [<refspec>...]]
 
@@ -33,7 +35,14 @@
 arguments or `--all`, `--mirror`, `--tags` options, the command finds
 the default `<refspec>` by consulting `remote.*.push` configuration,
 and if it is not found, honors `push.default` configuration to decide
-what to push (See gitlink:git-config[1] for the meaning of `push.default`).
+what to push (See linkgit:git-config[1] for the meaning of `push.default`).
+
+When neither the command-line nor the configuration specify what to
+push, the default behavior is used, which corresponds to the `simple`
+value for `push.default`: the current branch is pushed to the
+corresponding upstream branch, but as a safety measure, the push is
+aborted if the upstream branch does not have the same name as the
+local one.
 
 
 OPTIONS[[OPTIONS]]
@@ -60,7 +69,7 @@
 If `git push [<repository>]` without any `<refspec>` argument is set to
 update some ref at the destination with `<src>` with
 `remote.<repository>.push` configuration variable, `:<dst>` part can
-be omitted---such a push will update a ref that `<src>` normally updates
+be omitted--such a push will update a ref that `<src>` normally updates
 without any `<refspec>` on the command line.  Otherwise, missing
 `:<dst>` means to update the same ref as the `<src>`.
 +
@@ -83,8 +92,8 @@
 already exists on the remote side.
 
 --all::
-	Instead of naming each ref to push, specifies that all
-	refs under `refs/heads/` be pushed.
+	Push all branches (i.e. refs under `refs/heads/`); cannot be
+	used with other <refspec>.
 
 --prune::
 	Remove remote branches that don't have a local counterpart. For example
@@ -127,7 +136,31 @@
 	Push all the refs that would be pushed without this option,
 	and also push annotated tags in `refs/tags` that are missing
 	from the remote but are pointing at commit-ish that are
-	reachable from the refs being pushed.
+	reachable from the refs being pushed.  This can also be specified
+	with configuration variable `push.followTags`.  For more
+	information, see `push.followTags` in linkgit:git-config[1].
+
+--[no-]signed::
+--sign=(true|false|if-asked)::
+	GPG-sign the push request to update refs on the receiving
+	side, to allow it to be checked by the hooks and/or be
+	logged.  If `false` or `--no-signed`, no signing will be
+	attempted.  If `true` or `--signed`, the push will fail if the
+	server does not support signed pushes.  If set to `if-asked`,
+	sign if and only if the server supports signed pushes.  The push
+	will also fail if the actual call to `gpg --sign` fails.  See
+	linkgit:git-receive-pack[1] for the details on the receiving end.
+
+--[no-]atomic::
+	Use an atomic transaction on the remote side if available.
+	Either all refs are updated, or on error, no refs are updated.
+	If the server does not support atomic pushes the push will fail.
+
+-o::
+--push-option::
+	Transmit the given string to the server, which passes them to
+	the pre-receive as well as the post-receive hook. The given string
+	must not contain a NUL or LF character.
 
 --receive-pack=<git-receive-pack>::
 --exec=<git-receive-pack>::
@@ -142,9 +175,8 @@
 	Usually, "git push" refuses to update a remote ref that is
 	not an ancestor of the local ref used to overwrite it.
 +
-This option bypasses the check, but instead requires that the
-current value of the ref to be the expected value.  "git push"
-fails otherwise.
+This option overrides this restriction if the current value of the
+remote ref is the expected value.  "git push" fails otherwise.
 +
 Imagine that you have to rebase what you have already published.
 You will have to bypass the "must fast-forward" rule in order to
@@ -156,15 +188,14 @@
 This option allows you to say that you expect the history you are
 updating is what you rebased and want to replace. If the remote ref
 still points at the commit you specified, you can be sure that no
-other people did anything to the ref (it is like taking a "lease" on
-the ref without explicitly locking it, and you update the ref while
-making sure that your earlier "lease" is still valid).
+other people did anything to the ref. It is like taking a "lease" on
+the ref without explicitly locking it, and the remote ref is updated
+only if the "lease" is still valid.
 +
 `--force-with-lease` alone, without specifying the details, will protect
 all remote refs that are going to be updated by requiring their
 current value to be the same as the remote-tracking branch we have
-for them, unless specified with a `--force-with-lease=<refname>:<expect>`
-option that explicitly states what the expected value is.
+for them.
 +
 `--force-with-lease=<refname>`, without specifying the expected value, will
 protect the named ref (alone), if it is going to be updated, by
@@ -173,10 +204,11 @@
 +
 `--force-with-lease=<refname>:<expect>` will protect the named ref (alone),
 if it is going to be updated, by requiring its current value to be
-the same as the specified value <expect> (which is allowed to be
+the same as the specified value `<expect>` (which is allowed to be
 different from the remote-tracking branch we have for the refname,
 or we do not even have to have such a remote-tracking branch when
-this form is used).
+this form is used).  If `<expect>` is the empty string, then the named ref
+must not already exist.
 +
 Note that all forms other than `--force-with-lease=<refname>:<expect>`
 that specifies the expected current value of the ref explicitly are
@@ -207,29 +239,15 @@
 `<refspec>...` section above for details.
 
 --repo=<repository>::
-	This option is only relevant if no <repository> argument is
-	passed in the invocation. In this case, 'git push' derives the
-	remote name from the current branch: If it tracks a remote
-	branch, then that remote repository is pushed to. Otherwise,
-	the name "origin" is used. For this latter case, this option
-	can be used to override the name "origin". In other words,
-	the difference between these two commands
-+
---------------------------
-git push public         #1
-git push --repo=public  #2
---------------------------
-+
-is that #1 always pushes to "public" whereas #2 pushes to "public"
-only if the current branch does not track a remote branch. This is
-useful if you write an alias or script around 'git push'.
+	This option is equivalent to the <repository> argument. If both
+	are specified, the command-line argument takes precedence.
 
 -u::
 --set-upstream::
 	For every branch that is up to date or successfully pushed, add
 	upstream (tracking) reference, used by argument-less
 	linkgit:git-pull[1] and other commands. For more information,
-	see 'branch.<name>.merge' in linkgit:git-config[1].
+	see `branch.<name>.merge` in linkgit:git-config[1].
 
 --[no-]thin::
 	These options are passed to linkgit:git-send-pack[1]. A thin transfer
@@ -253,22 +271,33 @@
 	is specified. This flag forces progress status even if the
 	standard error stream is not directed to a terminal.
 
---recurse-submodules=check|on-demand::
-	Make sure all submodule commits used by the revisions to be
-	pushed are available on a remote-tracking branch. If 'check' is
-	used Git will verify that all submodule commits that changed in
-	the revisions to be pushed are available on at least one remote
-	of the submodule. If any commits are missing the push will be
-	aborted and exit with non-zero status. If 'on-demand' is used
-	all submodules that changed in the revisions to be pushed will
-	be pushed. If on-demand was not able to push all necessary
-	revisions it will also be aborted and exit with non-zero status.
+--no-recurse-submodules::
+--recurse-submodules=check|on-demand|no::
+	May be used to make sure all submodule commits used by the
+	revisions to be pushed are available on a remote-tracking branch.
+	If 'check' is used Git will verify that all submodule commits that
+	changed in the revisions to be pushed are available on at least one
+	remote of the submodule. If any commits are missing the push will
+	be aborted and exit with non-zero status. If 'on-demand' is used
+	all submodules that changed in the revisions to be pushed will be
+	pushed. If on-demand was not able to push all necessary revisions
+	it will also be aborted and exit with non-zero status. A value of
+	'no' or using `--no-recurse-submodules` can be used to override the
+	push.recurseSubmodules configuration variable when no submodule
+	recursion is required.
 
 --[no-]verify::
 	Toggle the pre-push hook (see linkgit:githooks[5]).  The
-	default is \--verify, giving the hook a chance to prevent the
-	push.  With \--no-verify, the hook is bypassed completely.
+	default is --verify, giving the hook a chance to prevent the
+	push.  With --no-verify, the hook is bypassed completely.
 
+-4::
+--ipv4::
+	Use IPv4 addresses only, ignoring IPv6 addresses.
+
+-6::
+--ipv6::
+	Use IPv6 addresses only, ignoring IPv4 addresses.
 
 include::urls-remotes.txt[]
 
@@ -385,7 +414,7 @@
 The command by default does not allow an update that is not a fast-forward
 to prevent such loss of history.
 
-If you do not want to lose your work (history from X to B) nor the work by
+If you do not want to lose your work (history from X to B) or the work by
 the other person (history from X to A), you would need to first fetch the
 history from the repository, create a history that contains changes done
 by both parties, and push the result back.
@@ -442,8 +471,10 @@
 	configured for the current branch).
 
 `git push origin`::
-	Without additional configuration, works like
-	`git push origin :`.
+	Without additional configuration, pushes the current branch to
+	the configured upstream (`remote.origin.merge` configuration
+	variable) if it has the same name as the current branch, and
+	errors out without pushing otherwise.
 +
 The default behavior of this command when no <refspec> is given can be
 configured by setting the `push` option of the remote, or the `push.default`
# install git-push.txt /usr/share/doc/git-doc/git-push.txt
--- /usr/share/doc/git-doc/git-quiltimport.txt	2016-03-21 09:24:28.000000000 -0600
+++ git-quiltimport.txt	2016-10-03 14:24:18.000000000 -0600
@@ -1,5 +1,5 @@
 git-quiltimport(1)
-================
+==================
 
 NAME
 ----
@@ -10,6 +10,7 @@
 --------
 [verse]
 'git quiltimport' [--dry-run | -n] [--author <author>] [--patches <dir>]
+		[--series <file>]
 
 
 DESCRIPTION
@@ -42,11 +43,17 @@
 	information can be found in the patch description.
 
 --patches <dir>::
-	The directory to find the quilt patches and the
-	quilt series file.
+	The directory to find the quilt patches.
 +
 The default for the patch directory is patches
-or the value of the $QUILT_PATCHES environment
+or the value of the `$QUILT_PATCHES` environment
+variable.
+
+--series <file>::
+	The quilt series file.
++
+The default for the series file is <patches>/series
+or the value of the `$QUILT_SERIES` environment
 variable.
 
 GIT
# install git-quiltimport.txt /usr/share/doc/git-doc/git-quiltimport.txt
--- /usr/share/doc/git-doc/git-read-tree.txt	2016-03-21 09:24:29.000000000 -0600
+++ git-read-tree.txt	2016-10-03 14:24:18.000000000 -0600
@@ -57,7 +57,7 @@
 -n::
 --dry-run::
 	Check if the command would error out, without updating the index
-	nor the files in the working tree for real.
+	or the files in the working tree for real.
 
 -v::
 	Show the progress of checking files out.
@@ -283,7 +283,7 @@
 you are trying to merge (stage 2 and 3 respectively).
 
 The order of stages 1, 2 and 3 (hence the order of three
-<tree-ish> command line arguments) are significant when you
+<tree-ish> command-line arguments) are significant when you
 start a 3-way merge with an index file that is already
 populated.  Here is an outline of how the algorithm works:
 
# install git-read-tree.txt /usr/share/doc/git-doc/git-read-tree.txt
--- /usr/share/doc/git-doc/git-rebase.txt	2016-03-21 09:24:29.000000000 -0600
+++ git-rebase.txt	2016-10-03 14:24:18.000000000 -0600
@@ -3,13 +3,13 @@
 
 NAME
 ----
-git-rebase - Forward-port local commits to the updated upstream head
+git-rebase - Reapply commits on top of another base tip
 
 SYNOPSIS
 --------
 [verse]
 'git rebase' [-i | --interactive] [options] [--exec <cmd>] [--onto <newbase>]
-	[<upstream>] [<branch>]
+	[<upstream> [<branch>]]
 'git rebase' [-i | --interactive] [options] [--exec <cmd>] [--onto <newbase>]
 	--root [<branch>]
 'git rebase' --continue | --skip | --abort | --edit-todo
@@ -21,15 +21,17 @@
 it remains on the current branch.
 
 If <upstream> is not specified, the upstream configured in
-branch.<name>.remote and branch.<name>.merge options will be used; see
-linkgit:git-config[1] for details.  If you are currently not on any
-branch or if the current branch does not have a configured upstream,
-the rebase will abort.
+branch.<name>.remote and branch.<name>.merge options will be used (see
+linkgit:git-config[1] for details) and the `--fork-point` option is
+assumed.  If you are currently not on any branch or if the current
+branch does not have a configured upstream, the rebase will abort.
 
 All changes made by commits in the current branch but that are not
 in <upstream> are saved to a temporary area.  This is the same set
-of commits that would be shown by `git log <upstream>..HEAD` (or
-`git log HEAD`, if --root is specified).
+of commits that would be shown by `git log <upstream>..HEAD`; or by
+`git log 'fork_point'..HEAD`, if `--fork-point` is active (see the
+description on `--fork-point` below); or by `git log HEAD`, if the
+`--root` option is specified.
 
 The current branch is reset to <upstream>, or <newbase> if the
 --onto option was supplied.  This has the exact same effect as
@@ -78,7 +80,7 @@
 If the upstream branch already contains a change you have made (e.g.,
 because you mailed a patch which was applied upstream), then that commit
 will be skipped. For example, running `git rebase master` on the
-following history (in which A' and A introduce the same set of changes,
+following history (in which `A'` and `A` introduce the same set of changes,
 but have different committer information):
 
 ------------
@@ -205,11 +207,20 @@
 	Whether to show a diffstat of what changed upstream since the last
 	rebase. False by default.
 
-rebase.autosquash::
-	If set to true enable '--autosquash' option by default.
+rebase.autoSquash::
+	If set to true enable `--autosquash` option by default.
 
-rebase.autostash::
-	If set to true enable '--autostash' option by default.
+rebase.autoStash::
+	If set to true enable `--autostash` option by default.
+
+rebase.missingCommitsCheck::
+	If set to "warn", print warnings about removed commits in
+	interactive mode. If set to "error", print the warnings and
+	stop the rebase. If set to "ignore", no checking is
+	done. "ignore" by default.
+
+rebase.instructionFormat::
+	Custom commit list format to use during an `--interactive` rebase.
 
 OPTIONS
 -------
@@ -281,6 +292,12 @@
 	specified, `-s recursive`.  Note the reversal of 'ours' and
 	'theirs' as noted above for the `-m` option.
 
+-S[<keyid>]::
+--gpg-sign[=<keyid>]::
+	GPG-sign commits. The `keyid` argument is optional and
+	defaults to the committer identity; if specified, it must be
+	stuck to the option without a space.
+
 -q::
 --quiet::
 	Be quiet. Implies --no-stat.
@@ -312,11 +329,8 @@
 
 -f::
 --force-rebase::
-	Force the rebase even if the current branch is a descendant
-	of the commit you are rebasing onto.  Normally non-interactive rebase will
-	exit with the message "Current branch is up to date" in such a
-	situation.
-	Incompatible with the --interactive option.
+	Force a rebase even if the current branch is up-to-date and
+	the command without `--force` would return without doing anything.
 +
 You may find this (or --no-ff with an interactive rebase) helpful after
 reverting a topic branch merge, as this option recreates the topic branch with
@@ -326,13 +340,18 @@
 
 --fork-point::
 --no-fork-point::
-	Use 'git merge-base --fork-point' to find a better common ancestor
-	between `upstream` and `branch` when calculating which commits have
-	have been introduced by `branch` (see linkgit:git-merge-base[1]).
-+
-If no non-option arguments are given on the command line, then the default is
-`--fork-point @{u}` otherwise the `upstream` argument is interpreted literally
-unless the `--fork-point` option is specified.
+	Use reflog to find a better common ancestor between <upstream>
+	and <branch> when calculating which commits have been
+	introduced by <branch>.
++
+When --fork-point is active, 'fork_point' will be used instead of
+<upstream> to calculate the set of commits to rebase, where
+'fork_point' is the result of `git merge-base --fork-point <upstream>
+<branch>` command (see linkgit:git-merge-base[1]).  If 'fork_point'
+ends up being empty, the <upstream> will be used as a fallback.
++
+If either <upstream> or --root is given on the command line, then the
+default is `--no-fork-point`, otherwise the default is `--fork-point`.
 
 --ignore-whitespace::
 --whitespace=<option>::
@@ -351,10 +370,16 @@
 	Make a list of the commits which are about to be rebased.  Let the
 	user edit that list before rebasing.  This mode can also be used to
 	split commits (see SPLITTING COMMITS below).
++
+The commit list format can be changed by setting the configuration option
+rebase.instructionFormat.  A customized instruction format will automatically
+have the long commit hash prepended to the format.
 
 -p::
 --preserve-merges::
-	Instead of ignoring merges, try to recreate them.
+	Recreate merge commits instead of flattening the history by replaying
+	commits a merge commit introduces. Merge conflict resolutions or manual
+	amendments to merge commits are not preserved.
 +
 This uses the `--interactive` machinery internally, but combining it
 with the `--interactive` option explicitly is generally not a good
@@ -366,9 +391,6 @@
 	final history. <cmd> will be interpreted as one or more shell
 	commands.
 +
-This option can only be used with the `--interactive` option
-(see INTERACTIVE MODE below).
-+
 You may execute several commands by either using one instance of `--exec`
 with several commands:
 +
@@ -381,6 +403,9 @@
 If `--autosquash` is used, "exec" lines will not be appended for
 the intermediate commits, and will only appear at the end of each
 squash/fixup series.
++
+This uses the `--interactive` machinery internally, but it can be run
+without an explicit `--interactive`.
 
 --root::
 	Rebase all commits reachable from <branch>, instead of
@@ -403,13 +428,14 @@
 	"fixup! " or "squash! " after the first, in case you referred to an
 	earlier fixup/squash with `git commit --fixup/--squash`.
 +
-This option is only valid when the '--interactive' option is used.
+This option is only valid when the `--interactive` option is used.
 +
-If the '--autosquash' option is enabled by default using the
-configuration variable `rebase.autosquash`, this option can be
+If the `--autosquash` option is enabled by default using the
+configuration variable `rebase.autoSquash`, this option can be
 used to override and disable this setting.
 
---[no-]autostash::
+--autostash::
+--no-autostash::
 	Automatically create a temporary stash before the operation
 	begins, and apply it after the operation ends.  This means
 	that you can run rebase on a dirty worktree.  However, use
@@ -504,6 +530,9 @@
 If you just want to edit the commit message for a commit, replace the
 command "pick" with the command "reword".
 
+To drop a commit, replace the command "pick" with "drop", or just
+delete the matching line.
+
 If you want to fold two or more commits into one, replace the command
 "pick" for the second and subsequent commits with "squash" or "fixup".
 If the commits had different authors, the folded commit will be
# install git-rebase.txt /usr/share/doc/git-doc/git-rebase.txt
--- /usr/share/doc/git-doc/git-receive-pack.txt	2016-03-21 09:24:29.000000000 -0600
+++ git-receive-pack.txt	2016-10-03 14:24:18.000000000 -0600
@@ -53,6 +53,56 @@
 while refs to be deleted will have sha1-new equal to 0\{40}, otherwise
 sha1-old and sha1-new should be valid objects in the repository.
 
+When accepting a signed push (see linkgit:git-push[1]), the signed
+push certificate is stored in a blob and an environment variable
+`GIT_PUSH_CERT` can be consulted for its object name.  See the
+description of `post-receive` hook for an example.  In addition, the
+certificate is verified using GPG and the result is exported with
+the following environment variables:
+
+`GIT_PUSH_CERT_SIGNER`::
+	The name and the e-mail address of the owner of the key that
+	signed the push certificate.
+
+`GIT_PUSH_CERT_KEY`::
+	The GPG key ID of the key that signed the push certificate.
+
+`GIT_PUSH_CERT_STATUS`::
+	The status of GPG verification of the push certificate,
+	using the same mnemonic as used in `%G?` format of `git log`
+	family of commands (see linkgit:git-log[1]).
+
+`GIT_PUSH_CERT_NONCE`::
+	The nonce string the process asked the signer to include
+	in the push certificate.  If this does not match the value
+	recorded on the "nonce" header in the push certificate, it
+	may indicate that the certificate is a valid one that is
+	being replayed from a separate "git push" session.
+
+`GIT_PUSH_CERT_NONCE_STATUS`::
+`UNSOLICITED`;;
+	"git push --signed" sent a nonce when we did not ask it to
+	send one.
+`MISSING`;;
+	"git push --signed" did not send any nonce header.
+`BAD`;;
+	"git push --signed" sent a bogus nonce.
+`OK`;;
+	"git push --signed" sent the nonce we asked it to send.
+`SLOP`;;
+	"git push --signed" sent a nonce different from what we
+	asked it to send now, but in a previous session.  See
+	`GIT_PUSH_CERT_NONCE_SLOP` environment variable.
+
+`GIT_PUSH_CERT_NONCE_SLOP`::
+	"git push --signed" sent a nonce different from what we
+	asked it to send now, but in a different session whose
+	starting time is different by this many seconds from the
+	current session.  Only meaningful when
+	`GIT_PUSH_CERT_NONCE_STATUS` says `SLOP`.
+	Also read about `receive.certNonceSlop` variable in
+	linkgit:git-config[1].
+
 This hook is called before any refname is updated and before any
 fast-forward checks are performed.
 
@@ -101,9 +151,14 @@
 0\{40}, otherwise sha1-old and sha1-new should be valid objects in
 the repository.
 
+The `GIT_PUSH_CERT*` environment variables can be inspected, just as
+in `pre-receive` hook, after accepting a signed push.
+
 Using this hook, it is easy to generate mails describing the updates
 to the repository.  This example script sends one mail message per
-ref listing the commits pushed to the repository:
+ref listing the commits pushed to the repository, and logs the push
+certificates of signed pushes with good signatures to a logger
+service:
 
 	#!/bin/sh
 	# mail out commit update information.
@@ -119,6 +174,14 @@
 		fi |
 		mail -s "Changes to ref $ref" commit-list@mydomain
 	done
+	# log signed push certificate, if any
+	if test -n "${GIT_PUSH_CERT-}" && test ${GIT_PUSH_CERT_STATUS} = G
+	then
+		(
+			echo expected nonce is ${GIT_PUSH_NONCE}
+			git cat-file blob ${GIT_PUSH_CERT}
+		) | mail -s "push certificate from $GIT_PUSH_CERT_SIGNER" push-log@mydomain
+	fi
 	exit 0
 
 The exit code from this hook invocation is ignored, however a
# install git-receive-pack.txt /usr/share/doc/git-doc/git-receive-pack.txt
--- /usr/share/doc/git-doc/git-reflog.txt	2016-03-21 09:24:29.000000000 -0600
+++ git-reflog.txt	2016-10-03 14:24:18.000000000 -0600
@@ -17,85 +17,117 @@
 depending on the subcommand:
 
 [verse]
-'git reflog expire' [--dry-run] [--stale-fix] [--verbose]
-	[--expire=<time>] [--expire-unreachable=<time>] [--all] <refs>...
-'git reflog delete' ref@\{specifier\}...
 'git reflog' ['show'] [log-options] [<ref>]
+'git reflog expire' [--expire=<time>] [--expire-unreachable=<time>]
+	[--rewrite] [--updateref] [--stale-fix]
+	[--dry-run] [--verbose] [--all | <refs>...]
+'git reflog delete' [--rewrite] [--updateref]
+	[--dry-run] [--verbose] ref@\{specifier\}...
+'git reflog exists' <ref>
+
+Reference logs, or "reflogs", record when the tips of branches and
+other references were updated in the local repository. Reflogs are
+useful in various Git commands, to specify the old value of a
+reference. For example, `HEAD@{2}` means "where HEAD used to be two
+moves ago", `master@{one.week.ago}` means "where master used to point
+to one week ago in this local repository", and so on. See
+linkgit:gitrevisions[7] for more details.
+
+This command manages the information recorded in the reflogs.
+
+The "show" subcommand (which is also the default, in the absence of
+any subcommands) shows the log of the reference provided in the
+command-line (or `HEAD`, by default). The reflog covers all recent
+actions, and in addition the `HEAD` reflog records branch switching.
+`git reflog show` is an alias for `git log -g --abbrev-commit
+--pretty=oneline`; see linkgit:git-log[1] for more information.
+
+The "expire" subcommand prunes older reflog entries. Entries older
+than `expire` time, or entries older than `expire-unreachable` time
+and not reachable from the current tip, are removed from the reflog.
+This is typically not used directly by end users -- instead, see
+linkgit:git-gc[1].
+
+The "delete" subcommand deletes single entries from the reflog. Its
+argument must be an _exact_ entry (e.g. "`git reflog delete
+master@{2}`"). This subcommand is also typically not used directly by
+end users.
+
+The "exists" subcommand checks whether a ref has a reflog.  It exits
+with zero status if the reflog exists, and non-zero status if it does
+not.
 
-Reflog is a mechanism to record when the tip of branches are
-updated.  This command is to manage the information recorded in it.
+OPTIONS
+-------
 
-The subcommand "expire" is used to prune older reflog entries.
-Entries older than `expire` time, or entries older than
-`expire-unreachable` time and not reachable from the current
-tip, are removed from the reflog.  This is typically not used
-directly by the end users -- instead, see linkgit:git-gc[1].
-
-The subcommand "show" (which is also the default, in the absence of any
-subcommands) will take all the normal log options, and show the log of
-the reference provided in the command-line (or `HEAD`, by default).
-The reflog will cover all recent actions (HEAD reflog records branch switching
-as well).  It is an alias for `git log -g --abbrev-commit --pretty=oneline`;
-see linkgit:git-log[1].
-
-The reflog is useful in various Git commands, to specify the old value
-of a reference. For example, `HEAD@{2}` means "where HEAD used to be
-two moves ago", `master@{one.week.ago}` means "where master used to
-point to one week ago", and so on. See linkgit:gitrevisions[7] for
-more details.
+Options for `show`
+~~~~~~~~~~~~~~~~~~
 
-To delete single entries from the reflog, use the subcommand "delete"
-and specify the _exact_ entry (e.g. "`git reflog delete master@{2}`").
+`git reflog show` accepts any of the options accepted by `git log`.
 
 
-OPTIONS
--------
+Options for `expire`
+~~~~~~~~~~~~~~~~~~~~
 
---stale-fix::
-	This revamps the logic -- the definition of "broken commit"
-	becomes: a commit that is not reachable from any of the refs and
-	there is a missing object among the commit, tree, or blob
-	objects reachable from it that is not reachable from any of the
-	refs.
-+
-This computation involves traversing all the reachable objects, i.e. it
-has the same cost as 'git prune'.  Fortunately, once this is run, we
-should not have to ever worry about missing objects, because the current
-prune and pack-objects know about reflogs and protect objects referred by
-them.
+--all::
+	Process the reflogs of all references.
 
 --expire=<time>::
-	Entries older than this time are pruned.  Without the
-	option it is taken from configuration `gc.reflogExpire`,
-	which in turn defaults to 90 days.  --expire=all prunes
-	entries regardless of their age; --expire=never turns off
-	pruning of reachable entries (but see --expire-unreachable).
+	Prune entries older than the specified time. If this option is
+	not specified, the expiration time is taken from the
+	configuration setting `gc.reflogExpire`, which in turn
+	defaults to 90 days. `--expire=all` prunes entries regardless
+	of their age; `--expire=never` turns off pruning of reachable
+	entries (but see `--expire-unreachable`).
 
 --expire-unreachable=<time>::
-	Entries older than this time and not reachable from
-	the current tip of the branch are pruned.  Without the
-	option it is taken from configuration
-	`gc.reflogExpireUnreachable`, which in turn defaults to
-	30 days.  --expire-unreachable=all prunes unreachable
-	entries regardless of their age; --expire-unreachable=never
+	Prune entries older than `<time>` that are not reachable from
+	the current tip of the branch. If this option is not
+	specified, the expiration time is taken from the configuration
+	setting `gc.reflogExpireUnreachable`, which in turn defaults
+	to 30 days. `--expire-unreachable=all` prunes unreachable
+	entries regardless of their age; `--expire-unreachable=never`
 	turns off early pruning of unreachable entries (but see
-	--expire).
-
---all::
-	Instead of listing <refs> explicitly, prune all refs.
+	`--expire`).
 
 --updateref::
-	Update the ref with the sha1 of the top reflog entry (i.e.
-	<ref>@\{0\}) after expiring or deleting.
+	Update the reference to the value of the top reflog entry (i.e.
+	<ref>@\{0\}) if the previous top entry was pruned.  (This
+	option is ignored for symbolic references.)
 
 --rewrite::
-	While expiring or deleting, adjust each reflog entry to ensure
-	that the `old` sha1 field points to the `new` sha1 field of the
-	previous entry.
+	If a reflog entry's predecessor is pruned, adjust its "old"
+	SHA-1 to be equal to the "new" SHA-1 field of the entry that
+	now precedes it.
+
+--stale-fix::
+	Prune any reflog entries that point to "broken commits". A
+	broken commit is a commit that is not reachable from any of
+	the reference tips and that refers, directly or indirectly, to
+	a missing commit, tree, or blob object.
++
+This computation involves traversing all the reachable objects, i.e. it
+has the same cost as 'git prune'.  It is primarily intended to fix
+corruption caused by garbage collecting using older versions of Git,
+which didn't protect objects referred to by reflogs.
+
+-n::
+--dry-run::
+	Do not actually prune any entries; just show what would have
+	been pruned.
 
 --verbose::
 	Print extra information on screen.
 
+
+Options for `delete`
+~~~~~~~~~~~~~~~~~~~~
+
+`git reflog delete` accepts options `--updateref`, `--rewrite`, `-n`,
+`--dry-run`, and `--verbose`, with the same meanings as when they are
+used with `expire`.
+
+
 GIT
 ---
 Part of the linkgit:git[1] suite
# install git-reflog.txt /usr/share/doc/git-doc/git-reflog.txt
--- /usr/share/doc/git-doc/git-remote-ext.txt	2016-03-21 09:24:29.000000000 -0600
+++ git-remote-ext.txt	2016-10-03 14:24:18.000000000 -0600
@@ -116,6 +116,10 @@
 	determined by the helper using environment variables (see
 	above).
 
+SEE ALSO
+--------
+linkgit:gitremote-helpers[1]
+
 GIT
 ---
 Part of the linkgit:git[1] suite
# install git-remote-ext.txt /usr/share/doc/git-doc/git-remote-ext.txt
--- /usr/share/doc/git-doc/git-remote-fd.txt	2016-03-21 09:24:29.000000000 -0600
+++ git-remote-fd.txt	2016-10-03 14:24:18.000000000 -0600
@@ -17,7 +17,7 @@
 
 If only <infd> is given, it is assumed to be a bidirectional socket connected
 to remote Git server (git-upload-pack, git-receive-pack or
-git-upload-achive). If both <infd> and <outfd> are given, they are assumed
+git-upload-archive). If both <infd> and <outfd> are given, they are assumed
 to be pipes connected to a remote Git server (<infd> being the inbound pipe
 and <outfd> being the outbound pipe.
 
@@ -50,6 +50,10 @@
 `git push fd::7,8/bar master`::
 	Same as above.
 
+SEE ALSO
+--------
+linkgit:gitremote-helpers[1]
+
 GIT
 ---
 Part of the linkgit:git[1] suite
# install git-remote-fd.txt /usr/share/doc/git-doc/git-remote-fd.txt
--- /usr/share/doc/git-doc/git-remote.txt	2016-03-21 09:24:29.000000000 -0600
+++ git-remote.txt	2016-10-03 14:24:18.000000000 -0600
@@ -1,9 +1,9 @@
 git-remote(1)
-============
+=============
 
 NAME
 ----
-git-remote - manage set of tracked repositories
+git-remote - Manage set of tracked repositories
 
 
 SYNOPSIS
@@ -15,6 +15,7 @@
 'git remote remove' <name>
 'git remote set-head' <name> (-a | --auto | -d | --delete | <branch>)
 'git remote set-branches' [--add] <name> <branch>...
+'git remote get-url' [--push] [--all] <name>
 'git remote set-url' [--push] <name> <newurl> [<oldurl>]
 'git remote set-url --add' [--push] <name> <newurl>
 'git remote set-url --delete' [--push] <name> <url>
@@ -58,6 +59,9 @@
 With `--no-tags` option, `git fetch <name>` does not import tags from
 the remote repository.
 +
+By default, only tags on fetched branches are imported
+(see linkgit:git-fetch[1]).
++
 With `-t <branch>` option, instead of the default glob
 refspec for the remote to track all branches under
 the `refs/remotes/<name>/` namespace, a refspec to track only `<branch>`
@@ -128,19 +132,36 @@
 With `--add`, instead of replacing the list of currently tracked
 branches, adds to that list.
 
+'get-url'::
+
+Retrieves the URLs for a remote. Configurations for `insteadOf` and
+`pushInsteadOf` are expanded here. By default, only the first URL is listed.
++
+With `--push`, push URLs are queried rather than fetch URLs.
++
+With `--all`, all URLs for the remote will be listed.
+
 'set-url'::
 
-Changes URL remote points to. Sets first URL remote points to matching
+Changes URLs for the remote. Sets first URL for remote <name> that matches
 regex <oldurl> (first URL if no <oldurl> is given) to <newurl>. If
-<oldurl> doesn't match any URL, error occurs and nothing is changed.
+<oldurl> doesn't match any URL, an error occurs and nothing is changed.
 +
-With '--push', push URLs are manipulated instead of fetch URLs.
+With `--push`, push URLs are manipulated instead of fetch URLs.
 +
-With '--add', instead of changing some URL, new URL is added.
+With `--add`, instead of changing existing URLs, new URL is added.
 +
-With '--delete', instead of changing some URL, all URLs matching
-regex <url> are deleted. Trying to delete all non-push URLs is an
-error.
+With `--delete`, instead of changing existing URLs, all URLs matching
+regex <url> are deleted for remote <name>.  Trying to delete all
+non-push URLs is an error.
++
+Note that the push URL and the fetch URL, even though they can
+be set differently, must still refer to the same place.  What you
+pushed to the push URL should be what you would see if you
+immediately fetched from the fetch URL.  If you are trying to
+fetch from one place (e.g. your upstream) and push to another (e.g.
+your publishing repository), use two separate remotes.
+
 
 'show'::
 
# install git-remote.txt /usr/share/doc/git-doc/git-remote.txt
--- /usr/share/doc/git-doc/git-repack.txt	2016-03-21 09:24:29.000000000 -0600
+++ git-repack.txt	2016-10-03 14:24:18.000000000 -0600
@@ -9,7 +9,7 @@
 SYNOPSIS
 --------
 [verse]
-'git repack' [-a] [-A] [-d] [-f] [-F] [-l] [-n] [-q] [--window=<n>] [--depth=<n>]
+'git repack' [-a] [-A] [-d] [-f] [-F] [-l] [-n] [-q] [-b] [--window=<n>] [--depth=<n>]
 
 DESCRIPTION
 -----------
@@ -33,7 +33,7 @@
 	pack everything referenced into a single pack.
 	Especially useful when packing a repository that is used
 	for private development. Use
-	with '-d'.  This will clean up the objects that `git prune`
+	with `-d`.  This will clean up the objects that `git prune`
 	leaves behind, but `git fsck --full --dangling` shows as
 	dangling.
 +
@@ -42,7 +42,7 @@
 other objects in that pack they already have locally.
 
 -A::
-	Same as `-a`, unless '-d' is used.  Then any unreachable
+	Same as `-a`, unless `-d` is used.  Then any unreachable
 	objects in a previous pack become loose, unpacked objects,
 	instead of being left in the old pack.  Unreachable objects
 	are never intentionally added to a pack, even when repacking.
@@ -100,16 +100,48 @@
 	out of memory with a large window, but still be able to take
 	advantage of the large window for the smaller objects.  The
 	size can be suffixed with "k", "m", or "g".
-	`--window-memory=0` makes memory usage unlimited, which is the
-	default.
+	`--window-memory=0` makes memory usage unlimited.  The default
+	is taken from the `pack.windowMemory` configuration variable.
+	Note that the actual memory usage will be the limit multiplied
+	by the number of threads used by linkgit:git-pack-objects[1].
 
 --max-pack-size=<n>::
 	Maximum size of each output pack file. The size can be suffixed with
 	"k", "m", or "g". The minimum size allowed is limited to 1 MiB.
-	If specified,  multiple packfiles may be created.
+	If specified, multiple packfiles may be created, which also
+	prevents the creation of a bitmap index.
 	The default is unlimited, unless the config variable
 	`pack.packSizeLimit` is set.
 
+-b::
+--write-bitmap-index::
+	Write a reachability bitmap index as part of the repack. This
+	only makes sense when used with `-a` or `-A`, as the bitmaps
+	must be able to refer to all reachable objects. This option
+	overrides the setting of `repack.writeBitmaps`.  This option
+	has no effect if multiple packfiles are created.
+
+--pack-kept-objects::
+	Include objects in `.keep` files when repacking.  Note that we
+	still do not delete `.keep` packs after `pack-objects` finishes.
+	This means that we may duplicate objects, but this makes the
+	option safe to use when there are concurrent pushes or fetches.
+	This option is generally only useful if you are writing bitmaps
+	with `-b` or `repack.writeBitmaps`, as it ensures that the
+	bitmapped packfile has the necessary objects.
+
+--unpack-unreachable=<when>::
+	When loosening unreachable objects, do not bother loosening any
+	objects older than `<when>`. This can be used to optimize out
+	the write of any objects that would be immediately pruned by
+	a follow-up `git prune`.
+
+-k::
+--keep-unreachable::
+	When used with `-ad`, any unreachable objects from existing
+	packs will be appended to the end of the packfile instead of
+	being removed. In addition, any unreachable loose objects will
+	be packed (and their loose counterparts removed).
 
 Configuration
 -------------
@@ -118,7 +150,7 @@
 'git pack-objects'; this typically results in slightly smaller packs,
 but the generated packs are incompatible with versions of Git older than
 version 1.4.4. If you need to share your repository with such ancient Git
-versions, either directly or via the dumb http or rsync protocol, then you
+versions, either directly or via the dumb http protocol, then you
 need to set the configuration variable `repack.UseDeltaBaseOffset` to
 "false" and repack. Access from old Git versions over the native protocol
 is unaffected by this option as the conversion is performed on the fly
# install git-repack.txt /usr/share/doc/git-doc/git-repack.txt
--- /usr/share/doc/git-doc/git-replace.txt	2016-03-21 09:24:29.000000000 -0600
+++ git-replace.txt	2016-10-03 14:24:18.000000000 -0600
@@ -9,6 +9,8 @@
 --------
 [verse]
 'git replace' [-f] <object> <replacement>
+'git replace' [-f] --edit <object>
+'git replace' [-f] --graft <commit> [<parent>...]
 'git replace' -d <object>...
 'git replace' [--format=<format>] [-l [<pattern>]]
 
@@ -49,7 +51,7 @@
 
 shows information about commit 'bar'.
 
-The 'GIT_NO_REPLACE_OBJECTS' environment variable can be set to
+The `GIT_NO_REPLACE_OBJECTS` environment variable can be set to
 achieve the same effect as the `--no-replace-objects` option.
 
 OPTIONS
@@ -63,6 +65,32 @@
 --delete::
 	Delete existing replace refs for the given objects.
 
+--edit <object>::
+	Edit an object's content interactively. The existing content
+	for <object> is pretty-printed into a temporary file, an
+	editor is launched on the file, and the result is parsed to
+	create a new object of the same type as <object>. A
+	replacement ref is then created to replace <object> with the
+	newly created object. See linkgit:git-var[1] for details about
+	how the editor will be chosen.
+
+--raw::
+	When editing, provide the raw object contents rather than
+	pretty-printed ones. Currently this only affects trees, which
+	will be shown in their binary form. This is harder to work with,
+	but can help when repairing a tree that is so corrupted it
+	cannot be pretty-printed. Note that you may need to configure
+	your editor to cleanly read and write binary data.
+
+--graft <commit> [<parent>...]::
+	Create a graft commit. A new commit is created with the same
+	content as <commit> except that its parents will be
+	[<parent>...] instead of <commit>'s parents. A replacement ref
+	is then created to replace <commit> with the newly created
+	commit. See contrib/convert-grafts-to-replace-refs.sh for an
+	example script based on this option that can convert grafts to
+	replace refs.
+
 -l <pattern>::
 --list <pattern>::
 	List replace refs for objects that match the given pattern (or
@@ -92,7 +120,9 @@
 
 linkgit:git-filter-branch[1], linkgit:git-hash-object[1] and
 linkgit:git-rebase[1], among other git commands, can be used to create
-replacement objects from existing objects.
+replacement objects from existing objects. The `--edit` option can
+also be used with 'git replace' to create a replacement object by
+editing an existing object.
 
 If you want to replace many blobs, trees or commits that are part of a
 string of commits, you may just want to create a replacement string of
@@ -117,6 +147,8 @@
 linkgit:git-rebase[1]
 linkgit:git-tag[1]
 linkgit:git-branch[1]
+linkgit:git-commit[1]
+linkgit:git-var[1]
 linkgit:git[1]
 
 GIT
# install git-replace.txt /usr/share/doc/git-doc/git-replace.txt
--- /usr/share/doc/git-doc/git-request-pull.txt	2016-03-21 09:24:29.000000000 -0600
+++ git-request-pull.txt	2016-10-03 14:24:18.000000000 -0600
@@ -13,22 +13,66 @@
 DESCRIPTION
 -----------
 
-Summarizes the changes between two commits to the standard output, and includes
-the given URL in the generated summary.
+Generate a request asking your upstream project to pull changes into
+their tree.  The request, printed to the standard output,
+begins with the branch description, summarizes
+the changes and indicates from where they can be pulled.
+
+The upstream project is expected to have the commit named by
+`<start>` and the output asks it to integrate the changes you made
+since that commit, up to the commit named by `<end>`, by visiting
+the repository named by `<url>`.
+
 
 OPTIONS
 -------
 -p::
-	Show patch text
+	Include patch text in the output.
 
 <start>::
-	Commit to start at.
+	Commit to start at.  This names a commit that is already in
+	the upstream history.
 
 <url>::
-	URL to include in the summary.
+	The repository URL to be pulled from.
 
 <end>::
-	Commit to end at; defaults to HEAD.
+	Commit to end at (defaults to HEAD).  This names the commit
+	at the tip of the history you are asking to be pulled.
++
+When the repository named by `<url>` has the commit at a tip of a
+ref that is different from the ref you have locally, you can use the
+`<local>:<remote>` syntax, to have its local name, a colon `:`, and
+its remote name.
+
+
+EXAMPLE
+-------
+
+Imagine that you built your work on your `master` branch on top of
+the `v1.0` release, and want it to be integrated to the project.
+First you push that change to your public repository for others to
+see:
+
+	git push https://git.ko.xz/project master
+
+Then, you run this command:
+
+	git request-pull v1.0 https://git.ko.xz/project master
+
+which will produce a request to the upstream, summarizing the
+changes between the `v1.0` release and your `master`, to pull it
+from your public repository.
+
+If you pushed your change to a branch whose name is different from
+the one you have locally, e.g.
+
+	git push https://git.ko.xz/project master:for-linus
+
+then you can ask that to be pulled with
+
+	git request-pull v1.0 https://git.ko.xz/project master:for-linus
+
 
 GIT
 ---
# install git-request-pull.txt /usr/share/doc/git-doc/git-request-pull.txt
--- /usr/share/doc/git-doc/git-rerere.txt	2016-03-21 09:24:29.000000000 -0600
+++ git-rerere.txt	2016-10-03 14:24:18.000000000 -0600
@@ -69,7 +69,7 @@
 occurred a long time ago.  By default, unresolved conflicts older
 than 15 days and resolved conflicts older than 60
 days are pruned.  These defaults are controlled via the
-`gc.rerereunresolved` and `gc.rerereresolved` configuration
+`gc.rerereUnresolved` and `gc.rerereResolved` configuration
 variables respectively.
 
 
# install git-rerere.txt /usr/share/doc/git-doc/git-rerere.txt
--- /usr/share/doc/git-doc/git-reset.txt	2016-03-21 09:24:29.000000000 -0600
+++ git-reset.txt	2016-10-03 14:24:18.000000000 -0600
@@ -10,7 +10,7 @@
 [verse]
 'git reset' [-q] [<tree-ish>] [--] <paths>...
 'git reset' (--patch | -p) [<tree-ish>] [--] [<paths>...]
-'git reset' [--soft | --mixed | --hard | --merge | --keep] [-q] [<commit>]
+'git reset' [--soft | --mixed [-N] | --hard | --merge | --keep] [-q] [<commit>]
 
 DESCRIPTION
 -----------
@@ -21,7 +21,7 @@
 
 'git reset' [-q] [<tree-ish>] [--] <paths>...::
 	This form resets the index entries for all <paths> to their
-	state at <tree-ish>.  (It does not affect the working tree, nor
+	state at <tree-ish>.  (It does not affect the working tree or
 	the current branch.)
 +
 This means that `git reset <paths>` is the opposite of `git add
@@ -51,7 +51,7 @@
 +
 --
 --soft::
-	Does not touch the index file nor the working tree at all (but
+	Does not touch the index file or the working tree at all (but
 	resets the head to <commit>, just like all modes do). This leaves
 	all your changed files "Changes to be committed", as 'git status'
 	would put it.
@@ -60,6 +60,9 @@
 	Resets the index but not the working tree (i.e., the changed files
 	are preserved but not marked for commit) and reports what has not
 	been updated. This is the default action.
++
+If `-N` is specified, removed paths are marked as intent-to-add (see
+linkgit:git-add[1]).
 
 --hard::
 	Resets the index and working tree. Any changes to tracked files in the
@@ -115,7 +118,7 @@
 <2> Somebody asks you to pull, and the changes sounds worthy of merging.
 <3> However, you already dirtied the index (i.e. your index does
 not match the HEAD commit).  But you know the pull you are going
-to make does not affect frotz.c nor filfre.c, so you revert the
+to make does not affect frotz.c or filfre.c, so you revert the
 index changes for these two files.  Your changes in working tree
 remain there.
 <4> Then you can pull and merge, leaving frotz.c and filfre.c
# install git-reset.txt /usr/share/doc/git-doc/git-reset.txt
--- /usr/share/doc/git-doc/git-rev-list.txt	2016-03-21 09:24:29.000000000 -0600
+++ git-rev-list.txt	2016-10-03 14:24:18.000000000 -0600
@@ -9,52 +9,55 @@
 SYNOPSIS
 --------
 [verse]
-'git rev-list' [ \--max-count=<number> ]
-	     [ \--skip=<number> ]
-	     [ \--max-age=<timestamp> ]
-	     [ \--min-age=<timestamp> ]
-	     [ \--sparse ]
-	     [ \--merges ]
-	     [ \--no-merges ]
-	     [ \--min-parents=<number> ]
-	     [ \--no-min-parents ]
-	     [ \--max-parents=<number> ]
-	     [ \--no-max-parents ]
-	     [ \--first-parent ]
-	     [ \--remove-empty ]
-	     [ \--full-history ]
-	     [ \--not ]
-	     [ \--all ]
-	     [ \--branches[=<pattern>] ]
-	     [ \--tags[=<pattern>] ]
-	     [ \--remotes[=<pattern>] ]
-	     [ \--glob=<glob-pattern> ]
-	     [ \--ignore-missing ]
-	     [ \--stdin ]
-	     [ \--quiet ]
-	     [ \--topo-order ]
-	     [ \--parents ]
-	     [ \--timestamp ]
-	     [ \--left-right ]
-	     [ \--left-only ]
-	     [ \--right-only ]
-	     [ \--cherry-mark ]
-	     [ \--cherry-pick ]
-	     [ \--encoding=<encoding> ]
-	     [ \--(author|committer|grep)=<pattern> ]
-	     [ \--regexp-ignore-case | -i ]
-	     [ \--extended-regexp | -E ]
-	     [ \--fixed-strings | -F ]
-	     [ \--date=(local|relative|default|iso|rfc|short) ]
-	     [ [\--objects | \--objects-edge] [ \--unpacked ] ]
-	     [ \--pretty | \--header ]
-	     [ \--bisect ]
-	     [ \--bisect-vars ]
-	     [ \--bisect-all ]
-	     [ \--merge ]
-	     [ \--reverse ]
-	     [ \--walk-reflogs ]
-	     [ \--no-walk ] [ \--do-walk ]
+'git rev-list' [ --max-count=<number> ]
+	     [ --skip=<number> ]
+	     [ --max-age=<timestamp> ]
+	     [ --min-age=<timestamp> ]
+	     [ --sparse ]
+	     [ --merges ]
+	     [ --no-merges ]
+	     [ --min-parents=<number> ]
+	     [ --no-min-parents ]
+	     [ --max-parents=<number> ]
+	     [ --no-max-parents ]
+	     [ --first-parent ]
+	     [ --remove-empty ]
+	     [ --full-history ]
+	     [ --not ]
+	     [ --all ]
+	     [ --branches[=<pattern>] ]
+	     [ --tags[=<pattern>] ]
+	     [ --remotes[=<pattern>] ]
+	     [ --glob=<glob-pattern> ]
+	     [ --ignore-missing ]
+	     [ --stdin ]
+	     [ --quiet ]
+	     [ --topo-order ]
+	     [ --parents ]
+	     [ --timestamp ]
+	     [ --left-right ]
+	     [ --left-only ]
+	     [ --right-only ]
+	     [ --cherry-mark ]
+	     [ --cherry-pick ]
+	     [ --encoding=<encoding> ]
+	     [ --(author|committer|grep)=<pattern> ]
+	     [ --regexp-ignore-case | -i ]
+	     [ --extended-regexp | -E ]
+	     [ --fixed-strings | -F ]
+	     [ --date=<format>]
+	     [ [ --objects | --objects-edge | --objects-edge-aggressive ]
+	       [ --unpacked ] ]
+	     [ --pretty | --header ]
+	     [ --bisect ]
+	     [ --bisect-vars ]
+	     [ --bisect-all ]
+	     [ --merge ]
+	     [ --reverse ]
+	     [ --walk-reflogs ]
+	     [ --no-walk ] [ --do-walk ]
+	     [ --count ]
+	     [ --use-bitmap-index ]
 	     <commit>... [ \-- <paths>... ]
 
 DESCRIPTION
# install git-rev-list.txt /usr/share/doc/git-doc/git-rev-list.txt
--- /usr/share/doc/git-doc/git-rev-parse.txt	2016-03-21 09:24:29.000000000 -0600
+++ git-rev-parse.txt	2016-10-03 14:24:18.000000000 -0600
@@ -102,7 +102,7 @@
 +
 If you want to make sure that the output actually names an object in
 your object database and/or can be used as a specific type of object
-you require, you can add "^{type}" peeling operator to the parameter.
+you require, you can add the `^{type}` peeling operator to the parameter.
 For example, `git rev-parse "$VAR^{commit}"` will make sure `$VAR`
 names an existing object that is a commit-ish (i.e. a commit, or an
 annotated tag that points at a commit).  To make sure that `$VAR`
@@ -114,6 +114,7 @@
 	Only meaningful in `--verify` mode. Do not output an error
 	message if the first argument is not a valid object name;
 	instead exit with non-zero status silently.
+	SHA-1s for valid object names are printed to stdout on success.
 
 --sq::
 	Usually the output is made one line per flag and
@@ -146,7 +147,7 @@
 	form as close to the original input as possible.
 
 --symbolic-full-name::
-	This is similar to \--symbolic, but it omits input that
+	This is similar to --symbolic, but it omits input that
 	are not refs (i.e. branch or tag names; or more
 	explicitly disambiguating "heads/master" form, when you
 	want to name the "master" branch when there is an
@@ -183,7 +184,7 @@
 	consider. Repetitions of this option accumulate exclusion patterns
 	up to the next `--all`, `--branches`, `--tags`, `--remotes`, or
 	`--glob` option (other options or arguments do not clear
-	accumlated patterns).
+	accumulated patterns).
 +
 The patterns given should not begin with `refs/heads`, `refs/tags`, or
 `refs/remotes` when applied to `--branches`, `--tags`, or `--remotes`,
@@ -215,6 +216,9 @@
 is not detected to lie in a Git repository or work tree
 print a message to stderr and exit with nonzero status.
 
+--git-common-dir::
+	Show `$GIT_COMMON_DIR` if defined, else `$GIT_DIR`.
+
 --is-inside-git-dir::
 	When the current working directory is below the repository
 	directory print "true", otherwise "false".
@@ -232,6 +236,13 @@
 	repository.  If <path> is a gitfile then the resolved path
 	to the real repository is printed.
 
+--git-path <path>::
+	Resolve "$GIT_DIR/<path>" and takes other path relocation
+	variables such as $GIT_OBJECT_DIRECTORY,
+	$GIT_INDEX_FILE... into account. For example, if
+	$GIT_OBJECT_DIRECTORY is set to /foo/bar then "git rev-parse
+	--git-path objects/abc" returns /foo/bar/abc.
+
 --show-cdup::
 	When the command is invoked from a subdirectory, show the
 	path of the top-level directory relative to the current
@@ -245,6 +256,10 @@
 --show-toplevel::
 	Show the absolute path of the top-level directory.
 
+--shared-index-path::
+	Show the path to the shared index file in split index mode, or
+	empty if not in split-index mode.
+
 Other Options
 ~~~~~~~~~~~~~
 
@@ -284,20 +299,20 @@
 
 'git rev-parse --parseopt' input format is fully text based. It has two parts,
 separated by a line that contains only `--`. The lines before the separator
-(should be more than one) are used for the usage.
+(should be one or more) are used for the usage.
 The lines after the separator describe the options.
 
 Each line of options has this format:
 
 ------------
-<opt_spec><flags>* SP+ help LF
+<opt-spec><flags>*<arg-hint>? SP+ help LF
 ------------
 
-`<opt_spec>`::
+`<opt-spec>`::
 	its format is the short option character, then the long option name
 	separated by a comma. Both parts are not required, though at least one
-	is necessary. `h,help`, `dry-run` and `f` are all three correct
-	`<opt_spec>`.
+	is necessary. May not contain any of the `<flags>` characters.
+	`h,help`, `dry-run` and `f` are examples of correct `<opt-spec>`.
 
 `<flags>`::
 	`<flags>` are of `*`, `=`, `?` or `!`.
@@ -313,6 +328,12 @@
 
 	* Use `!` to not make the corresponding negated long option available.
 
+`<arg-hint>`::
+	`<arg-hint>`, if specified, is used as a name of the argument in the
+	help output, for options that take arguments. `<arg-hint>` is
+	terminated by the first whitespace.  It is customary to use a
+	dash to separate words in a multi-word argument hint.
+
 The remainder of the line, after stripping the spaces, is used
 as the help associated to the option.
 
@@ -333,6 +354,8 @@
 
 foo       some nifty option --foo
 bar=      some cool option --bar with an argument
+baz=arg   another cool option --baz with a named argument
+qux?path  qux may take a path argument but has meaning by itself
 
   An option group Header
 C?        option C with an optional argument"
@@ -340,6 +363,28 @@
 eval "$(echo "$OPTS_SPEC" | git rev-parse --parseopt -- "$@" || echo exit $?)"
 ------------
 
+
+Usage text
+~~~~~~~~~~
+
+When `"$@"` is `-h` or `--help` in the above example, the following
+usage text would be shown:
+
+------------
+usage: some-command [options] <args>...
+
+    some-command does foo and bar!
+
+    -h, --help            show the help
+    --foo                 some nifty option --foo
+    --bar ...             some cool option --bar with an argument
+    --baz <arg>           another cool option --baz with a named argument
+    --qux[=<path>]        qux may take a path argument but has meaning by itself
+
+An option group Header
+    -C[...]               option C with an optional argument
+------------
+
 SQ-QUOTE
 --------
 
# install git-rev-parse.txt /usr/share/doc/git-doc/git-rev-parse.txt
--- /usr/share/doc/git-doc/git-revert.txt	2016-03-21 09:24:29.000000000 -0600
+++ git-revert.txt	2016-10-03 14:24:18.000000000 -0600
@@ -8,7 +8,7 @@
 SYNOPSIS
 --------
 [verse]
-'git revert' [--[no-]edit] [-n] [-m parent-number] [-s] <commit>...
+'git revert' [--[no-]edit] [-n] [-m parent-number] [-s] [-S[<keyid>]] <commit>...
 'git revert' --continue
 'git revert' --quit
 'git revert' --abort
@@ -24,7 +24,7 @@
 Note: 'git revert' is used to record some new commits to reverse the
 effect of some earlier commits (often only a faulty one).  If you want to
 throw away all uncommitted changes in your working directory, you
-should see linkgit:git-reset[1], particularly the '--hard' option.  If
+should see linkgit:git-reset[1], particularly the `--hard` option.  If
 you want to extract specific files as they were in another commit, you
 should see linkgit:git-checkout[1], specifically the `git checkout
 <commit> -- <filename>` syntax.  Take care with these alternatives as
@@ -37,7 +37,7 @@
 	For a more complete list of ways to spell commit names, see
 	linkgit:gitrevisions[7].
 	Sets of commits can also be given but no traversal is done by
-	default, see linkgit:git-rev-list[1] and its '--no-walk'
+	default, see linkgit:git-rev-list[1] and its `--no-walk`
 	option.
 
 -e::
@@ -80,9 +80,16 @@
 This is useful when reverting more than one commits'
 effect to your index in a row.
 
+-S[<keyid>]::
+--gpg-sign[=<keyid>]::
+	GPG-sign commits. The `keyid` argument is optional and
+	defaults to the committer identity; if specified, it must be
+	stuck to the option without a space.
+
 -s::
 --signoff::
 	Add Signed-off-by line at the end of the commit message.
+	See the signoff option in linkgit:git-commit[1] for more information.
 
 --strategy=<strategy>::
 	Use the given merge strategy.  Should only be used once.
# install git-revert.txt /usr/share/doc/git-doc/git-revert.txt
--- /usr/share/doc/git-doc/git-send-email.txt	2016-03-21 09:24:29.000000000 -0600
+++ git-send-email.txt	2016-10-03 14:24:18.000000000 -0600
@@ -10,6 +10,7 @@
 --------
 [verse]
 'git send-email' [options] <file|directory|rev-list options>...
+'git send-email' --dump-aliases
 
 
 DESCRIPTION
@@ -20,7 +21,7 @@
 last case, any format accepted by linkgit:git-format-patch[1] can
 be passed to git send-email.
 
-The header of the email is configurable by command line options.  If not
+The header of the email is configurable via command-line options.  If not
 specified on the command line, the user will be prompted with a ReadLine
 enabled interface to provide the necessary information.
 
@@ -46,39 +47,39 @@
 
 --annotate::
 	Review and edit each patch you're about to send. Default is the value
-	of 'sendemail.annotate'. See the CONFIGURATION section for
-	'sendemail.multiedit'.
+	of `sendemail.annotate`. See the CONFIGURATION section for
+	`sendemail.multiEdit`.
 
---bcc=<address>::
+--bcc=<address>,...::
 	Specify a "Bcc:" value for each email. Default is the value of
-	'sendemail.bcc'.
+	`sendemail.bcc`.
 +
-The --bcc option must be repeated for each user you want on the bcc list.
+This option may be specified multiple times.
 
---cc=<address>::
+--cc=<address>,...::
 	Specify a starting "Cc:" value for each email.
-	Default is the value of 'sendemail.cc'.
+	Default is the value of `sendemail.cc`.
 +
-The --cc option must be repeated for each user you want on the cc list.
+This option may be specified multiple times.
 
 --compose::
 	Invoke a text editor (see GIT_EDITOR in linkgit:git-var[1])
 	to edit an introductory message for the patch series.
 +
-When '--compose' is used, git send-email will use the From, Subject, and
+When `--compose` is used, git send-email will use the From, Subject, and
 In-Reply-To headers specified in the message. If the body of the message
 (what you type after the headers and a blank line) only contains blank
-(or Git: prefixed) lines the summary won't be sent, but From, Subject,
+(or Git: prefixed) lines, the summary won't be sent, but From, Subject,
 and In-Reply-To headers will be used unless they are removed.
 +
 Missing From or In-Reply-To headers will be prompted for.
 +
-See the CONFIGURATION section for 'sendemail.multiedit'.
+See the CONFIGURATION section for `sendemail.multiEdit`.
 
 --from=<address>::
 	Specify the sender of the emails.  If not specified on the command line,
-	the value of the 'sendemail.from' configuration option is used.  If
-	neither the command line option nor 'sendemail.from' are set, then the
+	the value of the `sendemail.from` configuration option is used.  If
+	neither the command-line option nor `sendemail.from` are set, then the
 	user will be prompted for the value.  The default for the prompt will be
 	the value of GIT_AUTHOR_IDENT, or GIT_COMMITTER_IDENT if that is not
 	set, as returned by "git var -l".
@@ -110,13 +111,13 @@
 	Only necessary if --compose is also set.  If --compose
 	is not set, this will be prompted for.
 
---to=<address>::
+--to=<address>,...::
 	Specify the primary recipient of the emails generated. Generally, this
 	will be the upstream maintainer of the project involved. Default is the
-	value of the 'sendemail.to' configuration value; if that is unspecified,
+	value of the `sendemail.to` configuration value; if that is unspecified,
 	and --to-cmd is not specified, this will be prompted for.
 +
-The --to option must be repeated for each user you want on the to list.
+This option may be specified multiple times.
 
 --8bit-encoding=<encoding>::
 	When encountering a non-ASCII message or subject that does not
@@ -131,6 +132,21 @@
 	Specify encoding of compose message. Default is the value of the
 	'sendemail.composeencoding'; if that is unspecified, UTF-8 is assumed.
 
+--transfer-encoding=(7bit|8bit|quoted-printable|base64)::
+	Specify the transfer encoding to be used to send the message over SMTP.
+	7bit will fail upon encountering a non-ASCII message.  quoted-printable
+	can be useful when the repository contains files that contain carriage
+	returns, but makes the raw patch email file (as saved from a MUA) much
+	harder to inspect manually.  base64 is even more fool proof, but also
+	even more opaque.  Default is the value of the `sendemail.transferEncoding`
+	configuration value; if that is unspecified, git will use 8bit and not
+	add a Content-Transfer-Encoding header.
+
+--xmailer::
+--no-xmailer::
+	Add (or prevent adding) the "X-Mailer:" header.  By default,
+	the header is added, but it can be turned off by setting the
+	`sendemail.xmailer` configuration variable to `false`.
 
 Sending
 ~~~~~~~
@@ -141,31 +157,44 @@
 	subscribed to a list. In order to use the 'From' address, set the
 	value to "auto". If you use the sendmail binary, you must have
 	suitable privileges for the -f parameter.  Default is the value of the
-	'sendemail.envelopesender' configuration variable; if that is
+	`sendemail.envelopeSender` configuration variable; if that is
 	unspecified, choosing the envelope sender is left to your MTA.
 
 --smtp-encryption=<encryption>::
 	Specify the encryption to use, either 'ssl' or 'tls'.  Any other
 	value reverts to plain SMTP.  Default is the value of
-	'sendemail.smtpencryption'.
+	`sendemail.smtpEncryption`.
 
 --smtp-domain=<FQDN>::
 	Specifies the Fully Qualified Domain Name (FQDN) used in the
 	HELO/EHLO command to the SMTP server.  Some servers require the
 	FQDN to match your IP address.  If not set, git send-email attempts
 	to determine your FQDN automatically.  Default is the value of
-	'sendemail.smtpdomain'.
+	`sendemail.smtpDomain`.
+
+--smtp-auth=<mechanisms>::
+	Whitespace-separated list of allowed SMTP-AUTH mechanisms. This setting
+	forces using only the listed mechanisms. Example:
++
+------
+$ git send-email --smtp-auth="PLAIN LOGIN GSSAPI" ...
+------
++
+If at least one of the specified mechanisms matches the ones advertised by the
+SMTP server and if it is supported by the utilized SASL library, the mechanism
+is used for authentication. If neither 'sendemail.smtpAuth' nor `--smtp-auth`
+is specified, all mechanisms supported by the SASL library can be used.
 
 --smtp-pass[=<password>]::
 	Password for SMTP-AUTH. The argument is optional: If no
 	argument is specified, then the empty string is used as
-	the password. Default is the value of 'sendemail.smtppass',
-	however '--smtp-pass' always overrides this value.
+	the password. Default is the value of `sendemail.smtpPass`,
+	however `--smtp-pass` always overrides this value.
 +
 Furthermore, passwords need not be specified in configuration files
 or on the command line. If a username has been specified (with
-'--smtp-user' or a 'sendemail.smtpuser'), but no password has been
-specified (with '--smtp-pass' or 'sendemail.smtppass'), then
+`--smtp-user` or a `sendemail.smtpUser`), but no password has been
+specified (with `--smtp-pass` or `sendemail.smtpPass`), then
 a password is obtained using 'git-credential'.
 
 --smtp-server=<host>::
@@ -173,7 +202,7 @@
 	`smtp.example.com` or a raw IP address).  Alternatively it can
 	specify a full pathname of a sendmail-like program instead;
 	the program must support the `-i` option.  Default value can
-	be specified by the 'sendemail.smtpserver' configuration
+	be specified by the `sendemail.smtpServer` configuration
 	option; the built-in default is `/usr/sbin/sendmail` or
 	`/usr/lib/sendmail` if such program is available, or
 	`localhost` otherwise.
@@ -184,11 +213,11 @@
 	submission port 587, or the common SSL smtp port 465);
 	symbolic port names (e.g. "submission" instead of 587)
 	are also accepted. The port can also be set with the
-	'sendemail.smtpserverport' configuration variable.
+	`sendemail.smtpServerPort` configuration variable.
 
 --smtp-server-option=<option>::
 	If set, specifies the outgoing SMTP server option to use.
-	Default value can be specified by the 'sendemail.smtpserveroption'
+	Default value can be specified by the `sendemail.smtpServerOption`
 	configuration option.
 +
 The --smtp-server-option option must be repeated for each option you want
@@ -199,14 +228,19 @@
 	Legacy alias for '--smtp-encryption ssl'.
 
 --smtp-ssl-cert-path::
-	Path to ca-certificates (either a directory or a single file).
-	Set it to an empty string to disable certificate verification.
-	Defaults to the value set to the 'sendemail.smtpsslcertpath'
-	configuration variable, if set, or `/etc/ssl/certs` otherwise.
+	Path to a store of trusted CA certificates for SMTP SSL/TLS
+	certificate validation (either a directory that has been processed
+	by 'c_rehash', or a single file containing one or more PEM format
+	certificates concatenated together: see verify(1) -CAfile and
+	-CApath for more information on these). Set it to an empty string
+	to disable certificate verification. Defaults to the value of the
+	`sendemail.smtpsslcertpath` configuration variable, if set, or the
+	backing SSL library's compiled-in default otherwise (which should
+	be the best choice on most platforms).
 
 --smtp-user=<user>::
-	Username for SMTP-AUTH. Default is the value of 'sendemail.smtpuser';
-	if a username is not specified (with '--smtp-user' or 'sendemail.smtpuser'),
+	Username for SMTP-AUTH. Default is the value of `sendemail.smtpUser`;
+	if a username is not specified (with `--smtp-user` or `sendemail.smtpUser`),
 	then authentication is not attempted.
 
 --smtp-debug=0|1::
@@ -227,27 +261,39 @@
 	Specify a command to execute once per patch file which
 	should generate patch file specific "Cc:" entries.
 	Output of this command must be single email address per line.
-	Default is the value of 'sendemail.cccmd' configuration value.
+	Default is the value of `sendemail.ccCmd` configuration value.
 
 --[no-]chain-reply-to::
 	If this is set, each email will be sent as a reply to the previous
 	email sent.  If disabled with "--no-chain-reply-to", all emails after
 	the first will be sent as replies to the first email sent.  When using
 	this, it is recommended that the first file given be an overview of the
-	entire patch series. Disabled by default, but the 'sendemail.chainreplyto'
+	entire patch series. Disabled by default, but the `sendemail.chainReplyTo`
 	configuration variable can be used to enable it.
 
 --identity=<identity>::
 	A configuration identity. When given, causes values in the
 	'sendemail.<identity>' subsection to take precedence over
 	values in the 'sendemail' section. The default identity is
-	the value of 'sendemail.identity'.
+	the value of `sendemail.identity`.
 
 --[no-]signed-off-by-cc::
 	If this is set, add emails found in Signed-off-by: or Cc: lines to the
-	cc list. Default is the value of 'sendemail.signedoffbycc' configuration
+	cc list. Default is the value of `sendemail.signedoffbycc` configuration
 	value; if that is unspecified, default to --signed-off-by-cc.
 
+--[no-]cc-cover::
+	If this is set, emails found in Cc: headers in the first patch of
+	the series (typically the cover letter) are added to the cc list
+	for each email set. Default is the value of 'sendemail.cccover'
+	configuration value; if that is unspecified, default to --no-cc-cover.
+
+--[no-]to-cover::
+	If this is set, emails found in To: headers in the first patch of
+	the series (typically the cover letter) are added to the to list
+	for each email set. Default is the value of 'sendemail.tocover'
+	configuration value; if that is unspecified, default to --no-to-cover.
+
 --suppress-cc=<category>::
 	Specify an additional category of recipients to suppress the
 	auto-cc of:
@@ -266,13 +312,13 @@
 - 'all' will suppress all auto cc values.
 --
 +
-Default is the value of 'sendemail.suppresscc' configuration value; if
+Default is the value of `sendemail.suppresscc` configuration value; if
 that is unspecified, default to 'self' if --suppress-from is
 specified, as well as 'body' if --no-signed-off-cc is specified.
 
 --[no-]suppress-from::
 	If this is set, do not add the From: address to the cc: list.
-	Default is the value of 'sendemail.suppressfrom' configuration
+	Default is the value of `sendemail.suppressFrom` configuration
 	value; if that is unspecified, default to --no-suppress-from.
 
 --[no-]thread::
@@ -284,7 +330,7 @@
 +
 If disabled with "--no-thread", those headers will not be added
 (unless specified with --in-reply-to).  Default is the value of the
-'sendemail.thread' configuration value; if that is unspecified,
+`sendemail.thread` configuration value; if that is unspecified,
 default to --thread.
 +
 It is up to the user to ensure that no In-Reply-To header already
@@ -309,7 +355,7 @@
 - 'auto' is equivalent to 'cc' + 'compose'
 --
 +
-Default is the value of 'sendemail.confirm' configuration value; if that
+Default is the value of `sendemail.confirm` configuration value; if that
 is unspecified, default to 'auto' unless any of the suppress options
 have been specified, in which case default to 'compose'.
 
@@ -318,8 +364,8 @@
 
 --[no-]format-patch::
 	When an argument may be understood either as a reference or as a file name,
-	choose to understand it as a format-patch argument ('--format-patch')
-	or as a file name ('--no-format-patch'). By default, when such a conflict
+	choose to understand it as a format-patch argument (`--format-patch`)
+	or as a file name (`--no-format-patch`). By default, when such a conflict
 	occurs, git send-email will fail.
 
 --quiet::
@@ -335,33 +381,60 @@
 			is due to SMTP limits as described by http://www.ietf.org/rfc/rfc2821.txt.
 --
 +
-Default is the value of 'sendemail.validate'; if this is not set,
-default to '--validate'.
+Default is the value of `sendemail.validate`; if this is not set,
+default to `--validate`.
 
 --force::
 	Send emails even if safety checks would prevent it.
 
 
+Information
+~~~~~~~~~~~
+
+--dump-aliases::
+	Instead of the normal operation, dump the shorthand alias names from
+	the configured alias file(s), one per line in alphabetical order. Note,
+	this only includes the alias name and not its expanded email addresses.
+	See 'sendemail.aliasesfile' for more information about aliases.
+
+
 CONFIGURATION
 -------------
 
-sendemail.aliasesfile::
+sendemail.aliasesFile::
 	To avoid typing long email addresses, point this to one or more
-	email aliases files.  You must also supply 'sendemail.aliasfiletype'.
+	email aliases files.  You must also supply `sendemail.aliasFileType`.
 
-sendemail.aliasfiletype::
-	Format of the file(s) specified in sendemail.aliasesfile. Must be
-	one of 'mutt', 'mailrc', 'pine', 'elm', or 'gnus'.
+sendemail.aliasFileType::
+	Format of the file(s) specified in sendemail.aliasesFile. Must be
+	one of 'mutt', 'mailrc', 'pine', 'elm', or 'gnus', or 'sendmail'.
++
+What an alias file in each format looks like can be found in
+the documentation of the email program of the same name. The
+differences and limitations from the standard formats are
+described below:
++
+--
+sendmail;;
+*	Quoted aliases and quoted addresses are not supported: lines that
+	contain a `"` symbol are ignored.
+*	Redirection to a file (`/path/name`) or pipe (`|command`) is not
+	supported.
+*	File inclusion (`:include: /path/name`) is not supported.
+*	Warnings are printed on the standard error output for any
+	explicitly unsupported constructs, and any other lines that are not
+	recognized by the parser.
+--
 
-sendemail.multiedit::
+sendemail.multiEdit::
 	If true (default), a single editor instance will be spawned to edit
-	files you have to edit (patches when '--annotate' is used, and the
-	summary when '--compose' is used). If false, files will be edited one
+	files you have to edit (patches when `--annotate` is used, and the
+	summary when `--compose` is used). If false, files will be edited one
 	after the other, spawning a new editor each time.
 
 sendemail.confirm::
 	Sets the default for whether to confirm before sending. Must be
-	one of 'always', 'never', 'cc', 'compose', or 'auto'. See '--confirm'
+	one of 'always', 'never', 'cc', 'compose', or 'auto'. See `--confirm`
 	in the previous section for the meaning of these values.
 
 EXAMPLE
@@ -372,10 +445,23 @@
 edit ~/.gitconfig to specify your account settings:
 
 	[sendemail]
-		smtpencryption = tls
-		smtpserver = smtp.gmail.com
-		smtpuser = yourname@gmail.com
-		smtpserverport = 587
+		smtpEncryption = tls
+		smtpServer = smtp.gmail.com
+		smtpUser = yourname@gmail.com
+		smtpServerPort = 587
+
+If you have multifactor authentication setup on your gmail account, you will
+need to generate an app-specific password for use with 'git send-email'. Visit
+https://security.google.com/settings/security/apppasswords to setup an
+app-specific password.  Once setup, you can store it with the credentials
+helper:
+
+	$ git credential fill
+	protocol=smtp
+	host=smtp.gmail.com
+	username=youname@gmail.com
+	password=app-password
+
 
 Once your commits are ready to be sent to the mailing list, run the
 following commands:
# install git-send-email.txt /usr/share/doc/git-doc/git-send-email.txt
--- /usr/share/doc/git-doc/git-send-pack.txt	2016-03-21 09:24:29.000000000 -0600
+++ git-send-pack.txt	2016-10-03 14:24:18.000000000 -0600
@@ -9,7 +9,10 @@
 SYNOPSIS
 --------
 [verse]
-'git send-pack' [--all] [--dry-run] [--force] [--receive-pack=<git-receive-pack>] [--verbose] [--thin] [<host>:]<directory> [<ref>...]
+'git send-pack' [--all] [--dry-run] [--force] [--receive-pack=<git-receive-pack>]
+		[--verbose] [--thin] [--atomic]
+		[--[no-]signed|--sign=(true|false|if-asked)]
+		[<host>:]<directory> [<ref>...]
 
 DESCRIPTION
 -----------
@@ -29,12 +32,22 @@
 	a directory on the default $PATH.
 
 --exec=<git-receive-pack>::
-	Same as \--receive-pack=<git-receive-pack>.
+	Same as --receive-pack=<git-receive-pack>.
 
 --all::
 	Instead of explicitly specifying which refs to update,
 	update all heads that locally exist.
 
+--stdin::
+	Take the list of refs from stdin, one per line. If there
+	are refs specified on the command line in addition to this
+	option, then the refs from stdin are processed after those
+	on the command line.
++
+If `--stateless-rpc` is specified together with this option then
+the list of refs must be in packet format (pkt-line). Each ref must
+be in a separate packet, and the list must end with a flush packet.
+
 --dry-run::
 	Do everything except actually send the updates.
 
@@ -52,6 +65,22 @@
 	Send a "thin" pack, which records objects in deltified form based
 	on objects not included in the pack to reduce network traffic.
 
+--atomic::
+	Use an atomic transaction for updating the refs. If any of the refs
+	fails to update then the entire push will fail without changing any
+	refs.
+
+--[no-]signed::
+--sign=(true|false|if-asked)::
+	GPG-sign the push request to update refs on the receiving
+	side, to allow it to be checked by the hooks and/or be
+	logged.  If `false` or `--no-signed`, no signing will be
+	attempted.  If `true` or `--signed`, the push will fail if the
+	server does not support signed pushes.  If set to `if-asked`,
+	sign if and only if the server supports signed pushes.  The push
+	will also fail if the actual call to `gpg --sign` fails.  See
+	linkgit:git-receive-pack[1] for the details on the receiving end.
+
 <host>::
 	A remote host to house the repository.  When this
 	part is specified, 'git-receive-pack' is invoked via
@@ -70,14 +99,15 @@
 There are three ways to specify which refs to update on the
 remote end.
 
-With '--all' flag, all refs that exist locally are transferred to
+With `--all` flag, all refs that exist locally are transferred to
 the remote side.  You cannot specify any '<ref>' if you use
 this flag.
 
-Without '--all' and without any '<ref>', the heads that exist
+Without `--all` and without any '<ref>', the heads that exist
 both on the local side and on the remote side are updated.
 
-When one or more '<ref>' are specified explicitly, it can be either a
+When one or more '<ref>' are specified explicitly (whether on the
+command line or via `--stdin`), it can be either a
 single pattern, or a pair of such pattern separated by a colon
 ":" (this means that a ref name cannot have a colon in it).  A
 single pattern '<name>' is just a shorthand for '<name>:<name>'.
@@ -104,13 +134,13 @@
      exist in the set of remote refs; the ref matched <src>
      locally is used as the name of the destination.
 
-Without '--force', the <src> ref is stored at the remote only if
+Without `--force`, the <src> ref is stored at the remote only if
 <dst> does not exist, or <dst> is a proper subset (i.e. an
 ancestor) of <src>.  This check, known as "fast-forward check",
 is performed in order to avoid accidentally overwriting the
 remote ref and lose other peoples' commits from there.
 
-With '--force', the fast-forward check is disabled for all refs.
+With `--force`, the fast-forward check is disabled for all refs.
 
 Optionally, a <ref> parameter can be prefixed with a plus '+' sign
 to disable the fast-forward check only on that ref.
# install git-send-pack.txt /usr/share/doc/git-doc/git-send-pack.txt
--- /usr/share/doc/git-doc/git-sh-setup.txt	2016-03-21 09:24:29.000000000 -0600
+++ git-sh-setup.txt	2016-10-03 14:24:18.000000000 -0600
@@ -41,7 +41,7 @@
 	die with the usage message.
 
 set_reflog_action::
-	Set GIT_REFLOG_ACTION environment to a given string (typically
+	Set `GIT_REFLOG_ACTION` environment to a given string (typically
 	the name of the program) unless it is already set.  Whenever
 	the script runs a `git` command that updates refs, a reflog
 	entry is created using the value of this string to leave the
# install git-sh-setup.txt /usr/share/doc/git-doc/git-sh-setup.txt
--- /usr/share/doc/git-doc/git-shell.txt	2016-03-21 09:24:29.000000000 -0600
+++ git-shell.txt	2016-10-03 14:24:18.000000000 -0600
@@ -24,7 +24,7 @@
 COMMANDS
 --------
 
-'git shell' accepts the following commands after the '-c' option:
+'git shell' accepts the following commands after the `-c` option:
 
 'git receive-pack <argument>'::
 'git upload-pack <argument>'::
@@ -43,7 +43,7 @@
 INTERACTIVE USE
 ---------------
 
-By default, the commands above can be executed only with the '-c'
+By default, the commands above can be executed only with the `-c`
 option; the shell is not interactive.
 
 If a `~/git-shell-commands` directory is present, 'git shell'
@@ -66,7 +66,7 @@
 -------
 
 To disable interactive logins, displaying a greeting instead:
-+
+
 ----------------
 $ chsh -s /usr/bin/git-shell
 $ mkdir $HOME/git-shell-commands
# install git-shell.txt /usr/share/doc/git-doc/git-shell.txt
--- /usr/share/doc/git-doc/git-show-branch.txt	2016-03-21 09:24:29.000000000 -0600
+++ git-show-branch.txt	2016-10-03 14:24:18.000000000 -0600
@@ -25,7 +25,7 @@
 It cannot show more than 29 branches and commits at a time.
 
 It uses `showbranch.default` multi-valued configuration items if
-no <rev> nor <glob> is given on the command line.
+no <rev> or <glob> is given on the command line.
 
 
 OPTIONS
@@ -60,7 +60,7 @@
         are shown before their parents).
 
 --date-order::
-	This option is similar to '--topo-order' in the sense that no
+	This option is similar to `--topo-order` in the sense that no
 	parent comes before all of its children, but otherwise commits
 	are ordered according to their commit date.
 
# install git-show-branch.txt /usr/share/doc/git-doc/git-show-branch.txt
--- /usr/share/doc/git-doc/git-show-index.txt	2016-03-21 09:24:29.000000000 -0600
+++ git-show-index.txt	2016-10-03 14:24:18.000000000 -0600
@@ -9,13 +9,14 @@
 SYNOPSIS
 --------
 [verse]
-'git show-index' < idx-file
+'git show-index'
 
 
 DESCRIPTION
 -----------
-Reads given idx file for packed Git archive created with
-'git pack-objects' command, and dumps its contents.
+Read the idx file for a Git packfile created with
+'git pack-objects' command from the standard input, and
+dump its contents.
 
 The information it outputs is subset of what you can get from
 'git verify-pack -v'; this command only shows the packfile
# install git-show-index.txt /usr/share/doc/git-doc/git-show-index.txt
--- /usr/share/doc/git-doc/git-show-ref.txt	2016-03-21 09:24:29.000000000 -0600
+++ git-show-ref.txt	2016-10-03 14:24:18.000000000 -0600
@@ -11,7 +11,7 @@
 'git show-ref' [-q|--quiet] [--verify] [--head] [-d|--dereference]
 	     [-s|--hash[=<n>]] [--abbrev[=<n>]] [--tags]
 	     [--heads] [--] [<pattern>...]
-'git show-ref' --exclude-existing[=<pattern>] < ref-list
+'git show-ref' --exclude-existing[=<pattern>]
 
 DESCRIPTION
 -----------
@@ -23,8 +23,9 @@
 
 By default, shows the tags, heads, and remote refs.
 
-The --exclude-existing form is a filter that does the inverse, it shows the
-refs from stdin that don't exist in the local repository.
+The --exclude-existing form is a filter that does the inverse. It reads
+refs from stdin, one ref per line, and shows those that don't exist in
+the local repository.
 
 Use of this utility is encouraged in favor of directly accessing files under
 the `.git` directory.
@@ -59,7 +60,7 @@
 
 	Enable stricter reference checking by requiring an exact ref path.
 	Aside from returning an error code of 1, it will also print an error
-	message if '--quiet' was not specified.
+	message if `--quiet` was not specified.
 
 --abbrev[=<n>]::
 
@@ -69,7 +70,7 @@
 -q::
 --quiet::
 
-	Do not print any results to stdout. When combined with '--verify' this
+	Do not print any results to stdout. When combined with `--verify` this
 	can be used to silently check if a reference exists.
 
 --exclude-existing[=<pattern>]::
@@ -89,7 +90,7 @@
 	Show references matching one or more patterns. Patterns are matched from
 	the end of the full name, and only complete parts are matched, e.g.
 	'master' matches 'refs/heads/master', 'refs/remotes/origin/master',
-	'refs/tags/jedi/master' but not 'refs/heads/mymaster' nor
+	'refs/tags/jedi/master' but not 'refs/heads/mymaster' or
 	'refs/remotes/master/jedi'.
 
 OUTPUT
@@ -133,7 +134,7 @@
 This will show "refs/heads/master" but also "refs/remote/other-repo/master",
 if such references exists.
 
-When using the '--verify' flag, the command requires an exact path:
+When using the `--verify` flag, the command requires an exact path:
 
 -----------------------------------------------------------------------------
 	git show-ref --verify refs/heads/master
# install git-show-ref.txt /usr/share/doc/git-doc/git-show-ref.txt
--- /usr/share/doc/git-doc/git-show.txt	2016-03-21 09:24:29.000000000 -0600
+++ git-show.txt	2016-10-03 14:24:18.000000000 -0600
@@ -22,7 +22,7 @@
 For tags, it shows the tag message and the referenced objects.
 
 For trees, it shows the names (equivalent to 'git ls-tree'
-with \--name-only).
+with --name-only).
 
 For plain blobs, it shows the plain contents.
 
# install git-show.txt /usr/share/doc/git-doc/git-show.txt
--- /usr/share/doc/git-doc/git-stage.txt	2016-03-21 09:24:29.000000000 -0600
+++ git-stage.txt	2016-10-03 14:24:18.000000000 -0600
@@ -1,5 +1,5 @@
 git-stage(1)
-==============
+============
 
 NAME
 ----
# install git-stage.txt /usr/share/doc/git-doc/git-stage.txt
--- /usr/share/doc/git-doc/git-stash.txt	2016-03-21 09:24:29.000000000 -0600
+++ git-stash.txt	2016-10-03 14:24:18.000000000 -0600
@@ -44,7 +44,7 @@
 OPTIONS
 -------
 
-save [-p|--patch] [--[no-]keep-index] [-u|--include-untracked] [-a|--all] [-q|--quiet] [<message>]::
+save [-p|--patch] [-k|--[no-]keep-index] [-u|--include-untracked] [-a|--all] [-q|--quiet] [<message>]::
 
 	Save your local modifications to a new 'stash', and run `git reset
 	--hard` to revert them.  The <message> part is optional and gives
@@ -95,6 +95,8 @@
 	shows the latest one. By default, the command shows the diffstat, but
 	it will accept any format known to 'git diff' (e.g., `git stash show
 	-p stash@{1}` to view the second most recent stash in patch form).
+	You can use stash.showStat and/or stash.showPatch config variables
+	to change the default behavior.
 
 pop [--index] [-q|--quiet] [<stash>]::
 
# install git-stash.txt /usr/share/doc/git-doc/git-stash.txt
--- /usr/share/doc/git-doc/git-status.txt	2016-03-21 09:24:29.000000000 -0600
+++ git-status.txt	2016-10-03 14:24:18.000000000 -0600
@@ -41,12 +41,21 @@
 --long::
 	Give the output in the long-format. This is the default.
 
+-v::
+--verbose::
+	In addition to the names of files that have been changed, also
+	show the textual changes that are staged to be committed
+	(i.e., like the output of `git diff --cached`). If `-v` is specified
+	twice, then also show the changes in the working tree that
+	have not yet been staged (i.e., like the output of `git diff`).
+
 -u[<mode>]::
 --untracked-files[=<mode>]::
 	Show untracked files.
 +
-The mode parameter is optional (defaults to 'all'), and is used to
-specify the handling of untracked files.
+The mode parameter is used to specify the handling of untracked files.
+It is optional: it defaults to 'all', and if specified, it must be
+stuck to the option (e.g. `-uno`, but not `-u no`).
 +
 The possible options are:
 +
@@ -58,7 +67,10 @@
 shown (i.e. the same as specifying `normal`), to help you avoid
 forgetting to add newly created files.  Because it takes extra work
 to find untracked files in the filesystem, this mode may take some
-time in a large working tree.  You can use `no` to have `git status`
+time in a large working tree.
+Consider enabling untracked cache and split index if supported (see
+`git update-index --untracked-cache` and `git update-index
+--split-index`), Otherwise you can use `no` to have `git status`
 return more quickly without showing untracked files.
 +
 The default can be changed using the status.showUntrackedFiles
@@ -77,7 +89,7 @@
 	only changes to the commits stored in the superproject are shown (this was
 	the behavior before 1.7.0). Using "all" hides all changes to submodules
 	(and suppresses the output of submodule summaries when the config option
-	`status.submodulesummary` is set).
+	`status.submoduleSummary` is set).
 
 --ignored::
 	Show ignored files as well.
@@ -97,7 +109,7 @@
 OUTPUT
 ------
 The output from this command is designed to be used as a commit
-template comment, and all the output lines are prefixed with '#'.
+template comment.
 The default, long format, is designed to be human readable,
 verbose and descriptive.  Its contents and format are subject to change
 at any time.
@@ -116,7 +128,7 @@
 
 where `PATH1` is the path in the `HEAD`, and the " `-> PATH2`" part is
 shown only when `PATH1` corresponds to a different path in the
-index/worktree (i.e. the file is renamed). The 'XY' is a two-letter
+index/worktree (i.e. the file is renamed). The `XY` is a two-letter
 status code.
 
 The fields (including the `->`) are separated from each other by a
@@ -125,7 +137,7 @@
 literal: surrounded by ASCII double quote (34) characters, and with
 interior special characters backslash-escaped.
 
-For paths with merge conflicts, `X` and 'Y' show the modification
+For paths with merge conflicts, `X` and `Y` show the modification
 states of each side of the merge. For paths that do not have merge
 conflicts, `X` shows the status of the index, and `Y` shows the status
 of the work tree.  For untracked paths, `XY` are `??`.  Other status
@@ -207,7 +219,7 @@
 paths shown are relative to the repository root, not to the current
 directory.
 
-If `status.submodulesummary` is set to a non zero number or true (identical
+If `status.submoduleSummary` is set to a non zero number or true (identical
 to -1 or an unlimited number), the submodule summary will be enabled for
 the long format and a summary of commits for modified submodules will be
 shown (see --summary-limit option of linkgit:git-submodule[1]). Please note
# install git-status.txt /usr/share/doc/git-doc/git-status.txt
--- /usr/share/doc/git-doc/git-stripspace.txt	2016-03-21 09:24:29.000000000 -0600
+++ git-stripspace.txt	2016-10-03 14:24:18.000000000 -0600
@@ -9,13 +9,15 @@
 SYNOPSIS
 --------
 [verse]
-'git stripspace' [-s | --strip-comments] < input
+'git stripspace' [-s | --strip-comments]
+'git stripspace' [-c | --comment-lines]
 
 DESCRIPTION
 -----------
 
-Clean the input in the manner used by Git for text such as commit
-messages, notes, tags and branch descriptions.
+Read text, such as commit messages, notes, tags and branch
+descriptions, from the standard input and clean it in the manner
+used by Git.
 
 With no arguments, this will:
 
@@ -48,7 +50,7 @@
 
 Given the following noisy input with '$' indicating the end of a line:
 
---------
+---------
 |A brief introduction   $
 |   $
 |$
@@ -64,7 +66,7 @@
 
 Use 'git stripspace' with no arguments to obtain:
 
---------
+---------
 |A brief introduction$
 |$
 |A new paragraph$
@@ -78,7 +80,7 @@
 
 Use 'git stripspace --strip-comments' to obtain:
 
---------
+---------
 |A brief introduction$
 |$
 |A new paragraph$
# install git-stripspace.txt /usr/share/doc/git-doc/git-stripspace.txt
--- /usr/share/doc/git-doc/git-submodule.txt	2016-03-21 09:24:29.000000000 -0600
+++ git-submodule.txt	2016-10-03 14:24:18.000000000 -0600
@@ -13,34 +13,30 @@
 	      [--reference <repository>] [--depth <depth>] [--] <repository> [<path>]
 'git submodule' [--quiet] status [--cached] [--recursive] [--] [<path>...]
 'git submodule' [--quiet] init [--] [<path>...]
-'git submodule' [--quiet] deinit [-f|--force] [--] <path>...
+'git submodule' [--quiet] deinit [-f|--force] (--all|[--] <path>...)
 'git submodule' [--quiet] update [--init] [--remote] [-N|--no-fetch]
-	      [-f|--force] [--rebase] [--reference <repository>] [--depth <depth>]
-	      [--merge] [--recursive] [--] [<path>...]
+	      [--[no-]recommend-shallow] [-f|--force] [--rebase|--merge]
+	      [--reference <repository>] [--depth <depth>] [--recursive]
+	      [--jobs <n>] [--] [<path>...]
 'git submodule' [--quiet] summary [--cached|--files] [(-n|--summary-limit) <n>]
 	      [commit] [--] [<path>...]
 'git submodule' [--quiet] foreach [--recursive] <command>
-'git submodule' [--quiet] sync [--] [<path>...]
+'git submodule' [--quiet] sync [--recursive] [--] [<path>...]
 
 
 DESCRIPTION
 -----------
-Submodules allow foreign repositories to be embedded within
-a dedicated subdirectory of the source tree, always pointed
-at a particular commit.
+Inspects, updates and manages submodules.
 
-They are not to be confused with remotes, which are meant mainly
-for branches of the same project; submodules are meant for
-different projects you would like to make part of your source tree,
-while the history of the two projects still stays completely
-independent and you cannot modify the contents of the submodule
-from within the main project.
-If you want to merge the project histories and want to treat the
-aggregated whole as a single project from then on, you may want to
-add a remote for the other project and use the 'subtree' merge strategy,
-instead of treating the other project as a submodule. Directories
-that come from both projects can be cloned and checked out as a whole
-if you choose to go that route.
+A submodule allows you to keep another Git repository in a subdirectory
+of your repository. The other repository has its own history, which does not
+interfere with the history of the current repository. This can be used to
+have external dependencies such as third party libraries for example.
+
+When cloning or pulling a repository containing submodules however,
+these will not be checked out by default; the 'init' and 'update'
+subcommands will maintain submodules checked out and at
+appropriate revision in your working tree.
 
 Submodules are composed from a so-called `gitlink` tree entry
 in the main repository that refers to a particular commit object
@@ -51,19 +47,18 @@
 The logical name can be used for overriding this URL within your
 local repository configuration (see 'submodule init').
 
-This command will manage the tree entries and contents of the
-gitmodules file for you, as well as inspect the status of your
-submodules and update them.
-When adding a new submodule to the tree, the 'add' subcommand
-is to be used.  However, when pulling a tree containing submodules,
-these will not be checked out by default;
-the 'init' and 'update' subcommands will maintain submodules
-checked out and at appropriate revision in your working tree.
-You can briefly inspect the up-to-date status of your submodules
-using the 'status' subcommand and get a detailed overview of the
-difference between the index and checkouts using the 'summary'
-subcommand.
-
+Submodules are not to be confused with remotes, which are other
+repositories of the same project; submodules are meant for
+different projects you would like to make part of your source tree,
+while the history of the two projects still stays completely
+independent and you cannot modify the contents of the submodule
+from within the main project.
+If you want to merge the project histories and want to treat the
+aggregated whole as a single project from then on, you may want to
+add a remote for the other project and use the 'subtree' merge strategy,
+instead of treating the other project as a submodule. Directories
+that come from both projects can be cloned and checked out as a whole
+if you choose to go that route.
 
 COMMANDS
 --------
@@ -146,35 +141,62 @@
 	tree. Further calls to `git submodule update`, `git submodule foreach`
 	and `git submodule sync` will skip any unregistered submodules until
 	they are initialized again, so use this command if you don't want to
-	have a local checkout of the submodule in your work tree anymore. If
+	have a local checkout of the submodule in your working tree anymore. If
 	you really want to remove a submodule from the repository and commit
 	that use linkgit:git-rm[1] instead.
 +
-If `--force` is specified, the submodule's work tree will be removed even if
-it contains local modifications.
+When the command is run without pathspec, it errors out,
+instead of deinit-ing everything, to prevent mistakes.
++
+If `--force` is specified, the submodule's working tree will
+be removed even if it contains local modifications.
 
 update::
-	Update the registered submodules, i.e. clone missing submodules and
-	checkout the commit specified in the index of the containing repository.
-	This will make the submodules HEAD be detached unless `--rebase` or
-	`--merge` is specified or the key `submodule.$name.update` is set to
-	`rebase`, `merge` or `none`. `none` can be overridden by specifying
-	`--checkout`. Setting the key `submodule.$name.update` to `!command`
-	will cause `command` to be run. `command` can be any arbitrary shell
-	command that takes a single argument, namely the sha1 to update to.
 +
+--
+Update the registered submodules to match what the superproject
+expects by cloning missing submodules and updating the working tree of
+the submodules. The "updating" can be done in several ways depending
+on command line options and the value of `submodule.<name>.update`
+configuration variable. Supported update procedures are:
+
+	checkout;; the commit recorded in the superproject will be
+	    checked out in the submodule on a detached HEAD. This is
+	    done when `--checkout` option is given, or no option is
+	    given, and `submodule.<name>.update` is unset, or if it is
+	    set to 'checkout'.
++
+If `--force` is specified, the submodule will be checked out (using
+`git checkout --force` if appropriate), even if the commit specified
+in the index of the containing repository already matches the commit
+checked out in the submodule.
+
+	rebase;; the current branch of the submodule will be rebased
+	    onto the commit recorded in the superproject. This is done
+	    when `--rebase` option is given, or no option is given, and
+	    `submodule.<name>.update` is set to 'rebase'.
+
+	merge;; the commit recorded in the superproject will be merged
+	    into the current branch in the submodule. This is done
+	    when `--merge` option is given, or no option is given, and
+	    `submodule.<name>.update` is set to 'merge'.
+
+	custom command;; arbitrary shell command that takes a single
+	    argument (the sha1 of the commit recorded in the
+	    superproject) is executed. This is done when no option is
+	    given, and `submodule.<name>.update` has the form of
+	    '!command'.
+
+When no option is given and `submodule.<name>.update` is set to 'none',
+the submodule is not updated.
+
 If the submodule is not yet initialized, and you just want to use the
 setting as stored in .gitmodules, you can automatically initialize the
 submodule with the `--init` option.
-+
+
 If `--recursive` is specified, this command will recurse into the
 registered submodules, and update any nested submodules within.
-+
-If `--force` is specified, the submodule will be checked out (using
-`git checkout --force` if appropriate), even if the commit specified in the
-index of the containing repository already matches the commit checked out in
-the submodule.
-
+--
 summary::
 	Show commit summary between the given commit (defaults to HEAD) and
 	working tree/index. For a submodule in question, a series of commits
@@ -219,6 +241,9 @@
 +
 "git submodule sync" synchronizes all submodules while
 "git submodule sync \-- A" synchronizes submodule "A" only.
++
+If `--recursive` is specified, this command will recurse into the
+registered submodules, and sync any nested submodules within.
 
 OPTIONS
 -------
@@ -226,22 +251,28 @@
 --quiet::
 	Only print error messages.
 
+--all::
+	This option is only valid for the deinit command. Unregister all
+	submodules in the working tree.
+
 -b::
 --branch::
 	Branch of repository to add as submodule.
-	The name of the branch is recorded as `submodule.<path>.branch` in
+	The name of the branch is recorded as `submodule.<name>.branch` in
 	`.gitmodules` for `update --remote`.
 
 -f::
 --force::
 	This option is only valid for add, deinit and update commands.
 	When running add, allow adding an otherwise ignored submodule path.
-	When running deinit the submodule work trees will be removed even if
-	they contain local changes.
-	When running update, throw away local changes in submodules when
-	switching to a different commit; and always run a checkout operation
-	in the submodule, even if the commit listed in the index of the
-	containing repository matches the commit checked out in the submodule.
+	When running deinit the submodule working trees will be removed even
+	if they contain local changes.
+	When running update (only effective with the checkout procedure),
+	throw away local changes in submodules when switching to a
+	different commit; and always run a checkout operation in the
+	submodule, even if the commit listed in the index of the
+	containing repository matches the commit checked out in the
+	submodule.
 
 --cached::
 	This option is only valid for status and summary commands.  These
@@ -281,12 +312,31 @@
 fetches the submodule's remote repository before calculating the
 SHA-1.  If you don't want to fetch, you should use `submodule update
 --remote --no-fetch`.
++
+Use this option to integrate changes from the upstream subproject with
+your submodule's current HEAD.  Alternatively, you can run `git pull`
+from the submodule, which is equivalent except for the remote branch
+name: `update --remote` uses the default upstream repository and
+`submodule.<name>.branch`, while `git pull` uses the submodule's
+`branch.<name>.merge`.  Prefer `submodule.<name>.branch` if you want
+to distribute the default upstream branch with the superproject and
+`branch.<name>.merge` if you want a more native feel while working in
+the submodule itself.
 
 -N::
 --no-fetch::
 	This option is only valid for the update command.
 	Don't fetch new objects from the remote site.
 
+--checkout::
+	This option is only valid for the update command.
+	Checkout the commit recorded in the superproject on a detached HEAD
+	in the submodule. This is the default behavior, the main use of
+	this option is to override `submodule.$name.update` when set to
+	a value other than `checkout`.
+	If the key `submodule.$name.update` is either not explicitly set or
+	set to `checkout`, this option is implicit.
+
 --merge::
 	This option is only valid for the update command.
 	Merge the commit recorded in the superproject into the current branch
@@ -325,7 +375,7 @@
 for linkgit:git-clone[1]'s `--reference` and `--shared` options carefully.
 
 --recursive::
-	This option is only valid for foreach, update and status commands.
+	This option is only valid for foreach, update, status and sync commands.
 	Traverse submodules recursively. The operation is performed not
 	only in the submodules of the current repo, but also
 	in any nested submodules inside those submodules (and so on).
@@ -335,6 +385,17 @@
 	clone with a history truncated to the specified number of revisions.
 	See linkgit:git-clone[1]
 
+--[no-]recommend-shallow::
+	This option is only valid for the update command.
+	The initial clone of a submodule will use the recommended
+	`submodule.<name>.shallow` as provided by the .gitmodules file
+	by default. To ignore the suggestions use `--no-recommend-shallow`.
+
+-j <n>::
+--jobs <n>::
+	This option is only valid for the update command.
+	Clone new submodules in parallel with as many jobs.
+	Defaults to the `submodule.fetchJobs` option.
 
 <path>...::
 	Paths to submodule(s). When specified this will restrict the command
# install git-submodule.txt /usr/share/doc/git-doc/git-submodule.txt
--- /usr/share/doc/git-doc/git-svn.txt	2016-03-21 09:24:29.000000000 -0600
+++ git-svn.txt	2016-10-03 14:24:18.000000000 -0600
@@ -70,8 +70,8 @@
 --username=<user>;;
 	For transports that SVN handles authentication for (http,
 	https, and plain svn), specify the username.  For other
-	transports (eg svn+ssh://), you must include the username in
-	the URL, eg svn+ssh://foo@svn.bar.com/project
+	transports (e.g. `svn+ssh://`), you must include the username in
+	the URL, e.g. `svn+ssh://foo@svn.bar.com/project`
 --prefix=<prefix>;;
 	This allows one to specify a prefix which is prepended
 	to the names of remotes if trunk/branches/tags are
@@ -86,22 +86,23 @@
 	(refs/remotes/$remote/*). Setting a prefix is also useful
 	if you wish to track multiple projects that share a common
 	repository.
+	By default, the prefix is set to 'origin/'.
 +
-NOTE: In Git v2.0, the default prefix will CHANGE from "" (no prefix)
-to "origin/". This is done to put SVN-tracking refs at
-"refs/remotes/origin/*" instead of "refs/remotes/*", and make them
-more compatible with how Git's own remote-tracking refs are organized
-(i.e. refs/remotes/$remote/*). You can enjoy the same benefits today,
-by using the --prefix option.
+NOTE: Before Git v2.0, the default prefix was "" (no prefix). This
+meant that SVN-tracking refs were put at "refs/remotes/*", which is
+incompatible with how Git's own remote-tracking refs are organized.
+If you still want the old default, you can get it by passing
+`--prefix ""` on the command line (`--prefix=""` may not work if
+your Perl's Getopt::Long is < v2.37).
 
 --ignore-paths=<regex>;;
 	When passed to 'init' or 'clone' this regular expression will
 	be preserved as a config key.  See 'fetch' for a description
-	of '--ignore-paths'.
+	of `--ignore-paths`.
 --include-paths=<regex>;;
 	When passed to 'init' or 'clone' this regular expression will
 	be preserved as a config key.  See 'fetch' for a description
-	of '--include-paths'.
+	of `--include-paths`.
 --no-minimize-url;;
 	When tracking multiple directories (using --stdlayout,
 	--branches, or --tags options), git svn will attempt to connect
@@ -109,7 +110,7 @@
 	repository.  This default allows better tracking of history if
 	entire projects are moved within a repository, but may cause
 	issues on repositories where read access restrictions are in
-	place.  Passing '--no-minimize-url' will allow git svn to
+	place.  Passing `--no-minimize-url` will allow git svn to
 	accept URLs as-is without attempting to connect to a higher
 	level directory.  This option is off by default when only
 	one URL/branch is tracked (it would do little good).
@@ -140,15 +141,15 @@
 --ignore-paths=<regex>;;
 	This allows one to specify a Perl regular expression that will
 	cause skipping of all matching paths from checkout from SVN.
-	The '--ignore-paths' option should match for every 'fetch'
+	The `--ignore-paths` option should match for every 'fetch'
 	(including automatic fetches due to 'clone', 'dcommit',
 	'rebase', etc) on a given repository.
 +
 [verse]
 config key: svn-remote.<name>.ignore-paths
 +
-If the ignore-paths config key is set and the command line option is
-also given, both regular expressions will be used.
+If the ignore-paths configuration key is set, and the command-line
+option is also given, both regular expressions will be used.
 +
 Examples:
 +
@@ -169,10 +170,13 @@
 --include-paths=<regex>;;
 	This allows one to specify a Perl regular expression that will
 	cause the inclusion of only matching paths from checkout from SVN.
-	The '--include-paths' option should match for every 'fetch'
+	The `--include-paths` option should match for every 'fetch'
 	(including automatic fetches due to 'clone', 'dcommit',
-	'rebase', etc) on a given repository. '--ignore-paths' takes
-	precedence over '--include-paths'.
+	'rebase', etc) on a given repository. `--ignore-paths` takes
+	precedence over `--include-paths`.
++
+[verse]
+config key: svn-remote.<name>.include-paths
 
 --log-window-size=<n>;;
 	Fetch <n> log entries per request when scanning Subversion history.
@@ -187,7 +191,7 @@
 	or if a second argument is passed; it will create a directory
 	and work within that.  It accepts all arguments that the
 	'init' and 'fetch' commands accept; with the exception of
-	'--fetch-all' and '--parent'.  After a repository is cloned,
+	`--fetch-all` and `--parent`.  After a repository is cloned,
 	the 'fetch' command will be able to update revisions without
 	affecting the working tree; and the 'rebase' command will be
 	able to update the working tree with the latest changes.
@@ -212,7 +216,7 @@
 'git merge' for ease of dcommitting with 'git svn'.
 +
 This accepts all options that 'git svn fetch' and 'git rebase'
-accept.  However, '--fetch-all' only fetches from the current
+accept.  However, `--fetch-all` only fetches from the current
 [svn-remote], and not all [svn-remote] definitions.
 +
 Like 'git rebase'; this requires that the working tree be clean
@@ -251,6 +255,10 @@
 config key: svn-remote.<name>.commiturl
 config key: svn.commiturl (overwrites all svn-remote.<name>.commiturl options)
 +
+Note that the SVN URL of the commiturl config key includes the SVN branch.
+If you rather want to set the commit URL for an entire SVN repository use
+svn-remote.<name>.pushurl instead.
++
 Using this option for any other purpose (don't ask) is very strongly
 discouraged.
 
@@ -274,9 +282,9 @@
 	Ask the user to confirm that a patch set should actually be sent to SVN.
 	For each patch, one may answer "yes" (accept this patch), "no" (discard this
 	patch), "all" (accept all patches), or "quit".
-	+
-	'git svn dcommit' returns immediately if answer is "no" or "quit", without
-	committing anything to SVN.
++
+'git svn dcommit' returns immediately if answer is "no" or "quit", without
+committing anything to SVN.
 
 'branch'::
 	Create a branch in the SVN repository.
@@ -385,11 +393,13 @@
 	tree-ish to specify which branch should be searched).  When given a
 	tree-ish, returns the corresponding SVN revision number.
 +
+-B;;
 --before;;
 	Don't require an exact match if given an SVN revision, instead find
 	the commit corresponding to the state of the SVN repository (on the
 	current branch) at the specified revision.
 +
+-A;;
 --after;;
 	Don't require an exact match if given an SVN revision; if there is
 	not an exact match return the closest match searching forward in the
@@ -449,6 +459,20 @@
 	Gets the Subversion property given as the first argument, for a
 	file.  A specific revision can be specified with -r/--revision.
 
+'propset'::
+	Sets the Subversion property given as the first argument, to the
+	value given as the second argument for the file given as the
+	third argument.
++
+Example:
++
+------------------------------------------------------------------------
+git svn propset svn:keywords "FreeBSD=%H" devel/py-tipper/Makefile
+------------------------------------------------------------------------
++
+This will set the property 'svn:keywords' to 'FreeBSD=%H' for the file
+'devel/py-tipper/Makefile'.
+
 'show-externals'::
 	Shows the Subversion externals.  Use -r/--revision to specify a
 	specific revision.
@@ -601,27 +625,15 @@
 	with the committer name as the first argument.  The program is
 	expected to return a single line of the form "Name <email>",
 	which will be treated as if included in the authors file.
++
+[verse]
+config key: svn.authorsProg
 
 -q::
 --quiet::
 	Make 'git svn' less verbose. Specify a second time to make it
 	even less verbose.
 
---repack[=<n>]::
---repack-flags=<flags>::
-	These should help keep disk usage sane for large fetches with
-	many revisions.
-+
---repack takes an optional argument for the number of revisions
-to fetch before repacking.  This defaults to repacking every
-1000 commits fetched if no argument is specified.
-+
---repack-flags are passed directly to 'git repack'.
-+
-[verse]
-config key: svn.repack
-config key: svn.repackflags
-
 -m::
 --merge::
 -s<strategy>::
@@ -753,7 +765,7 @@
 
 svn-remote.<name>.pushurl::
 
-	Similar to Git's 'remote.<name>.pushurl', this key is designed
+	Similar to Git's `remote.<name>.pushurl`, this key is designed
 	to be used in cases where 'url' points to an SVN repository
 	via a read-only transport, to provide an alternate read/write
 	transport. It is assumed that both keys point to the same
@@ -910,7 +922,7 @@
 Git commit to serve as parent.  This will happen, among other reasons,
 if the SVN branch is a copy of a revision that was not fetched by 'git
 svn' (e.g. because it is an old revision that was skipped with
-'--revision'), or if in SVN a directory was copied that is not tracked
+`--revision`), or if in SVN a directory was copied that is not tracked
 by 'git svn' (such as a branch that is not tracked at all, or a
 subdirectory of a tracked branch). In these cases, 'git svn' will still
 create a Git branch, but instead of using an existing Git commit as the
@@ -987,22 +999,12 @@
 copy of a complete repository, for projects with many branches it will
 lead to a working copy many times larger than just the trunk. Thus for
 projects using the standard directory structure (trunk/branches/tags),
-it is recommended to clone with option '--stdlayout'. If the project
+it is recommended to clone with option `--stdlayout`. If the project
 uses a non-standard structure, and/or if branches and tags are not
 required, it is easiest to only clone one directory (typically trunk),
 without giving any repository layout options.  If the full history with
-branches and tags is required, the options '--trunk' / '--branches' /
-'--tags' must be used.
-
-When using the options for describing the repository layout (--trunk,
---tags, --branches, --stdlayout), please also specify the --prefix
-option (e.g. '--prefix=origin/') to cause your SVN-tracking refs to be
-placed at refs/remotes/origin/* rather than the default refs/remotes/*.
-The former is more compatible with the layout of Git's "regular"
-remote-tracking refs (refs/remotes/$remote/*), and may potentially
-prevent similarly named SVN branches and Git remotes from clobbering
-each other. In Git v2.0 the default prefix used (i.e. when no --prefix
-is given) will change from "" (no prefix) to "origin/".
+branches and tags is required, the options `--trunk` / `--branches` /
+`--tags` must be used.
 
 When using multiple --branches or --tags, 'git svn' does not automatically
 handle name collisions (for example, if two branches from different paths have
@@ -1049,6 +1051,8 @@
 	url = http://server.org/svn
 	fetch = trunk/project-a:refs/remotes/project-a/trunk
 	branches = branches/*/project-a:refs/remotes/project-a/branches/*
+	branches = branches/release_*:refs/remotes/project-a/branches/release_*
+	branches = branches/re*se:refs/remotes/project-a/branches/*
 	tags = tags/*/project-a:refs/remotes/project-a/tags/*
 ------------------------------------------------------------------------
 
@@ -1059,6 +1063,16 @@
 type of configuration is not automatically created by 'init' and
 should be manually entered with a text-editor or using 'git config'.
 
+Also note that only one asterisk is allowed per word. For example:
+
+	branches = branches/re*se:refs/remotes/project-a/branches/*
+
+will match branches 'release', 'rese', 're123se', however
+
+	branches = branches/re*s*e:refs/remotes/project-a/branches/*
+
+will produce an error.
+
 It is also possible to fetch a subset of branches or tags by using a
 comma-separated list of names within braces. For example:
 
# install git-svn.txt /usr/share/doc/git-doc/git-svn.txt
--- /usr/share/doc/git-doc/git-tag.txt	2016-03-21 09:24:29.000000000 -0600
+++ git-tag.txt	2016-10-03 14:24:18.000000000 -0600
@@ -9,12 +9,12 @@
 SYNOPSIS
 --------
 [verse]
-'git tag' [-a | -s | -u <key-id>] [-f] [-m <msg> | -F <file>]
+'git tag' [-a | -s | -u <keyid>] [-f] [-m <msg> | -F <file>]
 	<tagname> [<commit> | <object>]
 'git tag' -d <tagname>...
 'git tag' [-n[<num>]] -l [--contains <commit>] [--points-at <object>]
-	[--column[=<options>] | --no-column] [<pattern>...]
-	[<pattern>...]
+	[--column[=<options>] | --no-column] [--create-reflog] [--sort=<key>]
+	[--format=<format>] [--[no-]merged [<commit>]] [<pattern>...]
 'git tag' -v <tagname>...
 
 DESCRIPTION
@@ -25,24 +25,24 @@
 
 Unless `-f` is given, the named tag must not yet exist.
 
-If one of `-a`, `-s`, or `-u <key-id>` is passed, the command
+If one of `-a`, `-s`, or `-u <keyid>` is passed, the command
 creates a 'tag' object, and requires a tag message.  Unless
 `-m <msg>` or `-F <file>` is given, an editor is started for the user to type
 in the tag message.
 
-If `-m <msg>` or `-F <file>` is given and `-a`, `-s`, and `-u <key-id>`
+If `-m <msg>` or `-F <file>` is given and `-a`, `-s`, and `-u <keyid>`
 are absent, `-a` is implied.
 
 Otherwise just a tag reference for the SHA-1 object name of the commit object is
 created (i.e. a lightweight tag).
 
 A GnuPG signed tag object will be created when `-s` or `-u
-<key-id>` is used.  When `-u <key-id>` is not used, the
+<keyid>` is used.  When `-u <keyid>` is not used, the
 committer identity for the current user is used to find the
 GnuPG key for signing. 	The configuration variable `gpg.program`
 is used to specify custom GnuPG binary.
 
-Tag objects (created with `-a`, `s`, or `-u`) are called "annotated"
+Tag objects (created with `-a`, `-s`, or `-u`) are called "annotated"
 tags; they contain a creation date, the tagger name and e-mail, a
 tagging message, and an optional GnuPG signature. Whereas a
 "lightweight" tag is simply a name for an object (usually a commit
@@ -64,8 +64,8 @@
 --sign::
 	Make a GPG-signed tag, using the default e-mail address's key.
 
--u <key-id>::
---local-user=<key-id>::
+-u <keyid>::
+--local-user=<keyid>::
 	Make a GPG-signed tag, using the given key.
 
 -f::
@@ -78,7 +78,7 @@
 
 -v::
 --verify::
-	Verify the gpg signature of the given tag names.
+	Verify the GPG signature of the given tag names.
 
 -n<num>::
 	<num> specifies how many lines from the annotation, if any,
@@ -95,6 +95,19 @@
 	using fnmatch(3)).  Multiple patterns may be given; if any of
 	them matches, the tag is shown.
 
+--sort=<key>::
+	Sort based on the key given.  Prefix `-` to sort in
+	descending order of the value. You may use the --sort=<key> option
+	multiple times, in which case the last key becomes the primary
+	key. Also supports "version:refname" or "v:refname" (tag
+	names are treated as versions). The "version:refname" sort
+	order can also be affected by the
+	"versionsort.prereleaseSuffix" configuration variable.
+	The keys supported are the same as those in `git for-each-ref`.
+	Sort order defaults to the value configured for the `tag.sort`
+	variable if it exists, or lexicographic order otherwise. See
+	linkgit:git-config[1].
+
 --column[=<options>]::
 --no-column::
 	Display tag listing in columns. See configuration variable
@@ -115,14 +128,14 @@
 	Use the given tag message (instead of prompting).
 	If multiple `-m` options are given, their values are
 	concatenated as separate paragraphs.
-	Implies `-a` if none of `-a`, `-s`, or `-u <key-id>`
+	Implies `-a` if none of `-a`, `-s`, or `-u <keyid>`
 	is given.
 
 -F <file>::
 --file=<file>::
 	Take the tag message from the given file.  Use '-' to
 	read the message from the standard input.
-	Implies `-a` if none of `-a`, `-s`, or `-u <key-id>`
+	Implies `-a` if none of `-a`, `-s`, or `-u <keyid>`
 	is given.
 
 --cleanup=<mode>::
@@ -132,6 +145,9 @@
 	all, 'whitespace' removes just leading/trailing whitespace lines and
 	'strip' removes both whitespace and commentary.
 
+--create-reflog::
+	Create a reflog for the tag.
+
 <tagname>::
 	The name of the tag to create, delete, or describe.
 	The new tag name must pass all checks defined by
@@ -143,17 +159,27 @@
 	The object that the new tag will refer to, usually a commit.
 	Defaults to HEAD.
 
+<format>::
+	A string that interpolates `%(fieldname)` from the object
+	pointed at by a ref being shown.  The format is the same as
+	that of linkgit:git-for-each-ref[1].  When unspecified,
+	defaults to `%(refname:strip=2)`.
+
+--[no-]merged [<commit>]::
+	Only list tags whose tips are reachable, or not reachable
+	if `--no-merged` is used, from the specified commit (`HEAD`
+	if not specified).
 
 CONFIGURATION
 -------------
 By default, 'git tag' in sign-with-default mode (-s) will use your
-committer identity (of the form "Your Name <\your@email.address>") to
+committer identity (of the form `Your Name <your@email.address>`) to
 find a key.  If you want to use a different default key, you can specify
 it in the repository configuration as follows:
 
 -------------------------------------
 [user]
-    signingkey = <gpg-key-id>
+    signingKey = <gpg-keyid>
 -------------------------------------
 
 
@@ -311,6 +337,7 @@
 SEE ALSO
 --------
 linkgit:git-check-ref-format[1].
+linkgit:git-config[1].
 
 GIT
 ---
# install git-tag.txt /usr/share/doc/git-doc/git-tag.txt
--- /usr/share/doc/git-doc/git-tools.txt	2016-03-21 09:24:29.000000000 -0600
+++ git-tools.txt	2016-10-03 14:24:18.000000000 -0600
@@ -1,118 +1,10 @@
-A short Git tools survey
-========================
+Git Tools
+=========
 
+When Git was young, people looking for third-party Git-related tools came
+to the Git project itself to find them, thus a list of such tools was
+maintained here. These days, however, search engines fill that role much
+more efficiently, so this manually-maintained list has been retired.
 
-Introduction
-------------
-
-Apart from Git contrib/ area there are some others third-party tools
-you may want to look.
-
-This document presents a brief summary of each tool and the corresponding
-link.
-
-
-Alternative/Augmentative Porcelains
------------------------------------
-
-   - *Cogito* (http://www.kernel.org/pub/software/scm/cogito/)
-
-   Cogito is a version control system layered on top of the Git tree history
-   storage system. It aims at seamless user interface and ease of use,
-   providing generally smoother user experience than the "raw" Core Git
-   itself and indeed many other version control systems.
-
-   Cogito is no longer maintained as most of its functionality
-   is now in core Git.
-
-
-   - *pg* (http://www.spearce.org/category/projects/scm/pg/)
-
-   pg is a shell script wrapper around Git to help the user manage a set of
-   patches to files. pg is somewhat like quilt or StGit, but it does have a
-   slightly different feature set.
-
-
-   - *StGit* (http://www.procode.org/stgit/)
-
-   Stacked Git provides a quilt-like patch management functionality in the
-   Git environment. You can easily manage your patches in the scope of Git
-   until they get merged upstream.
-
-
-History Viewers
----------------
-
-   - *gitk* (shipped with git-core)
-
-   gitk is a simple Tk GUI for browsing history of Git repositories easily.
-
-
-   - *gitview*  (contrib/)
-
-   gitview is a GTK based repository browser for Git
-
-
-   - *gitweb* (shipped with git-core)
-
-   Gitweb provides full-fledged web interface for Git repositories.
-
-
-   - *qgit* (http://digilander.libero.it/mcostalba/)
-
-   QGit is a git/StGit GUI viewer built on Qt/C++. QGit could be used
-   to browse history and directory tree, view annotated files, commit
-   changes cherry picking single files or applying patches.
-   Currently it is the fastest and most feature rich among the Git
-   viewers and commit tools.
-
-   - *tig* (http://jonas.nitro.dk/tig/)
-
-   tig by Jonas Fonseca is a simple Git repository browser
-   written using ncurses. Basically, it just acts as a front-end
-   for git-log and git-show/git-diff. Additionally, you can also
-   use it as a pager for Git commands.
-
-
-Foreign SCM interface
----------------------
-
-   - *git-svn* (shipped with git-core)
-
-   git-svn is a simple conduit for changesets between a single Subversion
-   branch and Git.
-
-
-   - *quilt2git / git2quilt* (http://home-tj.org/wiki/index.php/Misc)
-
-   These utilities convert patch series in a quilt repository and commit
-   series in Git back and forth.
-
-
-   - *hg-to-git* (contrib/)
-
-   hg-to-git converts a Mercurial repository into a Git one, and
-   preserves the full branch history in the process. hg-to-git can
-   also be used in an incremental way to keep the Git repository
-   in sync with the master Mercurial repository.
-
-
-Others
-------
-
-   - *(h)gct* (http://www.cyd.liu.se/users/~freku045/gct/)
-
-   Commit Tool or (h)gct is a GUI enabled commit tool for Git and
-   Mercurial (hg). It allows the user to view diffs, select which files
-   to committed (or ignored / reverted) write commit messages and
-   perform the commit itself.
-
-   - *git.el* (contrib/)
-
-   This is an Emacs interface for Git. The user interface is modelled on
-   pcl-cvs. It has been developed on Emacs 21 and will probably need some
-   tweaking to work on XEmacs.
-
-
-http://git.or.cz/gitwiki/InterfacesFrontendsAndTools has more
-comprehensive list.
+See also the `contrib/` area, and the Git wiki:
+http://git.or.cz/gitwiki/InterfacesFrontendsAndTools
# install git-tools.txt /usr/share/doc/git-doc/git-tools.txt
--- /usr/share/doc/git-doc/git-unpack-objects.txt	2016-03-21 09:24:29.000000000 -0600
+++ git-unpack-objects.txt	2016-10-03 14:24:18.000000000 -0600
@@ -9,7 +9,7 @@
 SYNOPSIS
 --------
 [verse]
-'git unpack-objects' [-n] [-q] [-r] [--strict] < <pack-file>
+'git unpack-objects' [-n] [-q] [-r] [--strict]
 
 
 DESCRIPTION
@@ -19,8 +19,8 @@
 "loose" (one object per file) format.
 
 Objects that already exist in the repository will *not* be unpacked
-from the pack-file.  Therefore, nothing will be unpacked if you use
-this command on a pack-file that exists within the target repository.
+from the packfile.  Therefore, nothing will be unpacked if you use
+this command on a packfile that exists within the target repository.
 
 See linkgit:git-repack[1] for options to generate
 new packs and replace existing ones.
# install git-unpack-objects.txt /usr/share/doc/git-doc/git-unpack-objects.txt
--- /usr/share/doc/git-doc/git-update-index.txt	2016-03-21 09:24:29.000000000 -0600
+++ git-update-index.txt	2016-10-03 14:24:18.000000000 -0600
@@ -12,11 +12,13 @@
 'git update-index'
 	     [--add] [--remove | --force-remove] [--replace]
 	     [--refresh] [-q] [--unmerged] [--ignore-missing]
-	     [(--cacheinfo <mode> <object> <file>)...]
+	     [(--cacheinfo <mode>,<object>,<file>)...]
 	     [--chmod=(+|-)x]
 	     [--[no-]assume-unchanged]
 	     [--[no-]skip-worktree]
 	     [--ignore-submodules]
+	     [--[no-]split-index]
+	     [--[no-|test-|force-]untracked-cache]
 	     [--really-refresh] [--unresolve] [--again | -g]
 	     [--info-only] [--index-info]
 	     [-z] [--stdin] [--index-version <n>]
@@ -68,8 +70,12 @@
 --ignore-missing::
 	Ignores missing files during a --refresh
 
+--cacheinfo <mode>,<object>,<path>::
 --cacheinfo <mode> <object> <path>::
-	Directly insert the specified info into the index.
+	Directly insert the specified info into the index.  For
+	backward compatibility, you can also give these three
+	arguments as three separate parameters, but new users are
+	encouraged to use a single-parameter form.
 
 --index-info::
         Read index information from stdin.
@@ -78,27 +84,25 @@
         Set the execute permissions on the updated files.
 
 --[no-]assume-unchanged::
-	When these flags are specified, the object names recorded
-	for the paths are not updated.  Instead, these options
-	set and unset the "assume unchanged" bit for the
-	paths.  When the "assume unchanged" bit is on, Git stops
-	checking the working tree files for possible
-	modifications, so you need to manually unset the bit to
-	tell Git when you change the working tree file. This is
+	When this flag is specified, the object names recorded
+	for the paths are not updated.  Instead, this option
+	sets/unsets the "assume unchanged" bit for the
+	paths.  When the "assume unchanged" bit is on, the user
+	promises not to change the file and allows Git to assume
+	that the working tree file matches what is recorded in
+	the index.  If you want to change the working tree file,
+	you need to unset the bit to tell Git.  This is
 	sometimes helpful when working with a big project on a
 	filesystem that has very slow lstat(2) system call
 	(e.g. cifs).
 +
-This option can be also used as a coarse file-level mechanism
-to ignore uncommitted changes in tracked files (akin to what
-`.gitignore` does for untracked files).
 Git will fail (gracefully) in case it needs to modify this file
 in the index e.g. when merging in a commit;
 thus, in case the assumed-untracked file is changed upstream,
 you will need to handle the situation manually.
 
 --really-refresh::
-	Like '--refresh', but checks stat information unconditionally,
+	Like `--refresh`, but checks stat information unconditionally,
 	without regard to the "assume unchanged" setting.
 
 --[no-]skip-worktree::
@@ -157,6 +161,44 @@
 	Only meaningful with `--stdin` or `--index-info`; paths are
 	separated with NUL character instead of LF.
 
+--split-index::
+--no-split-index::
+	Enable or disable split index mode. If enabled, the index is
+	split into two files, $GIT_DIR/index and $GIT_DIR/sharedindex.<SHA-1>.
+	Changes are accumulated in $GIT_DIR/index while the shared
+	index file contains all index entries stays unchanged. If
+	split-index mode is already enabled and `--split-index` is
+	given again, all changes in $GIT_DIR/index are pushed back to
+	the shared index file. This mode is designed for very large
+	indexes that take a significant amount of time to read or write.
+
+--untracked-cache::
+--no-untracked-cache::
+	Enable or disable untracked cache feature. Please use
+	`--test-untracked-cache` before enabling it.
++
+These options take effect whatever the value of the `core.untrackedCache`
+configuration variable (see linkgit:git-config[1]). But a warning is
+emitted when the change goes against the configured value, as the
+configured value will take effect next time the index is read and this
+will remove the intended effect of the option.
+
+--test-untracked-cache::
+	Only perform tests on the working directory to make sure
+	untracked cache can be used. You have to manually enable
+	untracked cache using `--untracked-cache` or
+	`--force-untracked-cache` or the `core.untrackedCache`
+	configuration variable afterwards if you really want to use
+	it. If a test fails the exit code is 1 and a message
+	explains what is not working as needed, otherwise the exit
+	code is 0 and OK is printed.
+
+--force-untracked-cache::
+	Same as `--untracked-cache`. Provided for backwards
+	compatibility with older versions of Git where
+	`--untracked-cache` used to imply `--test-untracked-cache` but
+	this option would enable the extension unconditionally.
+
 \--::
 	Do not interpret any more arguments as options.
 
@@ -169,7 +211,7 @@
 
 Using --refresh
 ---------------
-'--refresh' does not calculate a new sha1 file or bring the index
+`--refresh` does not calculate a new sha1 file or bring the index
 up-to-date for mode/content changes. But what it *does* do is to
 "re-match" the stat information of a file with the index, so that you
 can refresh the index for a file that hasn't been changed but where
@@ -180,22 +222,22 @@
 
 Using --cacheinfo or --info-only
 --------------------------------
-'--cacheinfo' is used to register a file that is not in the
+`--cacheinfo` is used to register a file that is not in the
 current working directory.  This is useful for minimum-checkout
 merging.
 
 To pretend you have a file with mode and sha1 at path, say:
 
 ----------------
-$ git update-index --cacheinfo mode sha1 path
+$ git update-index --cacheinfo <mode>,<sha1>,<path>
 ----------------
 
-'--info-only' is used to register files without placing them in the object
+`--info-only` is used to register files without placing them in the object
 database.  This is useful for status-only repositories.
 
-Both '--cacheinfo' and '--info-only' behave similarly: the index is updated
-but the object database isn't.  '--cacheinfo' is useful when the object is
-in the database but the file isn't available locally.  '--info-only' is
+Both `--cacheinfo` and `--info-only` behave similarly: the index is updated
+but the object database isn't.  `--cacheinfo` is useful when the object is
+in the database but the file isn't available locally.  `--info-only` is
 useful when the file is available, but you do not wish to update the
 object database.
 
@@ -346,6 +388,37 @@
 different from assume-unchanged bit's. Skip-worktree also takes
 precedence over assume-unchanged bit when both are set.
 
+Untracked cache
+---------------
+
+This cache is meant to speed up commands that involve determining
+untracked files such as `git status`.
+
+This feature works by recording the mtime of the working tree
+directories and then omitting reading directories and stat calls
+against files in those directories whose mtime hasn't changed. For
+this to work the underlying operating system and file system must
+change the `st_mtime` field of directories if files in the directory
+are added, modified or deleted.
+
+You can test whether the filesystem supports that with the
+`--test-untracked-cache` option. The `--untracked-cache` option used
+to implicitly perform that test in older versions of Git, but that's
+no longer the case.
+
+If you want to enable (or disable) this feature, it is easier to use
+the `core.untrackedCache` configuration variable (see
+linkgit:git-config[1]) than using the `--untracked-cache` option to
+`git update-index` in each repository, especially if you want to do so
+across all repositories you use, because you can set the configuration
+variable to `true` (or `false`) in your `$HOME/.gitconfig` just once
+and have it affect all repositories you touch.
+
+When the `core.untrackedCache` configuration variable is changed, the
+untracked cache is added to or removed from the index the next time a
+command reads the index; while when `--[no-|force-]untracked-cache`
+are used, the untracked cache is immediately added to or removed from
+the index.
 
 Configuration
 -------------
@@ -371,6 +444,9 @@
 something outside Git (file system crawlers and backup systems use
 ctime for marking files processed) (see linkgit:git-config[1]).
 
+The untracked cache extension can be enabled by the
+`core.untrackedCache` configuration variable (see
+linkgit:git-config[1]).
 
 SEE ALSO
 --------
# install git-update-index.txt /usr/share/doc/git-doc/git-update-index.txt
--- /usr/share/doc/git-doc/git-update-ref.txt	2016-03-21 09:24:29.000000000 -0600
+++ git-update-ref.txt	2016-10-03 14:24:18.000000000 -0600
@@ -8,7 +8,7 @@
 SYNOPSIS
 --------
 [verse]
-'git update-ref' [-m <reason>] (-d <ref> [<oldvalue>] | [--no-deref] <ref> <newvalue> [<oldvalue>] | --stdin [-z])
+'git update-ref' [-m <reason>] (-d <ref> [<oldvalue>] | [--no-deref] [--create-reflog] <ref> <newvalue> [<oldvalue>] | --stdin [-z])
 
 DESCRIPTION
 -----------
@@ -67,8 +67,16 @@
 	verify SP <ref> [SP <oldvalue>] LF
 	option SP <opt> LF
 
+With `--create-reflog`, update-ref will create a reflog for each ref
+even if one would not ordinarily be created.
+
 Quote fields containing whitespace as if they were strings in C source
-code.  Alternatively, use `-z` to specify commands without quoting:
+code; i.e., surrounded by double-quotes and with backslash escapes.
+Use 40 "0" characters or the empty string to specify a zero value.  To
+specify a missing value, omit the value and its preceding SP entirely.
+
+Alternatively, use `-z` to specify in NUL-terminated format, without
+quoting:
 
 	update SP <ref> NUL <newvalue> NUL [<oldvalue>] NUL
 	create SP <ref> NUL <newvalue> NUL
@@ -76,8 +84,12 @@
 	verify SP <ref> NUL [<oldvalue>] NUL
 	option SP <opt> NUL
 
-Lines of any other format or a repeated <ref> produce an error.
-Command meanings are:
+In this format, use 40 "0" to specify a zero value, and use the empty
+string to specify a missing value.
+
+In either format, values can be specified in any form that Git
+recognizes as an object name.  Commands in any other format or a
+repeated <ref> produce an error.  Command meanings are:
 
 update::
 	Set <ref> to <newvalue> after verifying <oldvalue>, if given.
@@ -102,9 +114,6 @@
 	The only valid option is `no-deref` to avoid dereferencing
 	a symbolic ref.
 
-Use 40 "0" or the empty string to specify a zero value, except that
-with `-z` an empty <oldvalue> is considered missing.
-
 If all <ref>s can be locked with matching <oldvalue>s
 simultaneously, all modifications are performed.  Otherwise, no
 modifications are performed.  Note that while each individual
# install git-update-ref.txt /usr/share/doc/git-doc/git-update-ref.txt
--- /usr/share/doc/git-doc/git-upload-archive.txt	2016-03-21 09:24:29.000000000 -0600
+++ git-upload-archive.txt	2016-10-03 14:24:18.000000000 -0600
@@ -1,5 +1,5 @@
 git-upload-archive(1)
-====================
+=====================
 
 NAME
 ----
@@ -20,6 +20,38 @@
 for the protocol is on the 'git archive' side, and the program pair
 is meant to be used to get an archive from a remote repository.
 
+SECURITY
+--------
+
+In order to protect the privacy of objects that have been removed from
+history but may not yet have been pruned, `git-upload-archive` avoids
+serving archives for commits and trees that are not reachable from the
+repository's refs.  However, because calculating object reachability is
+computationally expensive, `git-upload-archive` implements a stricter
+but easier-to-check set of rules:
+
+  1. Clients may request a commit or tree that is pointed to directly by
+     a ref. E.g., `git archive --remote=origin v1.0`.
+
+  2. Clients may request a sub-tree within a commit or tree using the
+     `ref:path` syntax. E.g., `git archive --remote=origin v1.0:Documentation`.
+
+  3. Clients may _not_ use other sha1 expressions, even if the end
+     result is reachable. E.g., neither a relative commit like `master^`
+     nor a literal sha1 like `abcd1234` is allowed, even if the result
+     is reachable from the refs.
+
+Note that rule 3 disallows many cases that do not have any privacy
+implications. These rules are subject to change in future versions of
+git, and the server accessed by `git archive --remote` may or may not
+follow these exact rules.
+
+If the config option `uploadArchive.allowUnreachable` is true, these
+rules are ignored, and clients may use arbitrary sha1 expressions.
+This is useful if you do not care about the privacy of unreachable
+objects, or if your object database is already publicly available for
+access via non-smart-http.
+
 OPTIONS
 -------
 <directory>::
# install git-upload-archive.txt /usr/share/doc/git-doc/git-upload-archive.txt
--- /usr/share/doc/git-doc/git-upload-pack.txt	2016-03-21 09:24:29.000000000 -0600
+++ git-upload-pack.txt	2016-10-03 14:24:18.000000000 -0600
@@ -9,8 +9,8 @@
 SYNOPSIS
 --------
 [verse]
-'git-upload-pack' [--strict] [--timeout=<n>] <directory>
-
+'git-upload-pack' [--[no-]strict] [--timeout=<n>] [--stateless-rpc]
+		  [--advertise-refs] <directory>
 DESCRIPTION
 -----------
 Invoked by 'git fetch-pack', learns what
@@ -25,12 +25,22 @@
 OPTIONS
 -------
 
---strict::
+--[no-]strict::
 	Do not try <directory>/.git/ if <directory> is no Git directory.
 
 --timeout=<n>::
 	Interrupt transfer after <n> seconds of inactivity.
 
+--stateless-rpc::
+	Perform only a single read-write cycle with stdin and stdout.
+	This fits with the HTTP POST request processing model where
+	a program may read the request, write a response, and must exit.
+
+--advertise-refs::
+	Only the initial ref advertisement is output, and the program exits
+	immediately. This fits with the HTTP GET request model, where
+	no request content is received but a response must be produced.
+
 <directory>::
 	The repository to sync from.
 
# install git-upload-pack.txt /usr/share/doc/git-doc/git-upload-pack.txt
# install git-verify-commit.txt /usr/share/doc/git-doc/git-verify-commit.txt
--- /usr/share/doc/git-doc/git-verify-pack.txt	2016-03-21 09:24:29.000000000 -0600
+++ git-verify-pack.txt	2016-10-03 14:24:18.000000000 -0600
@@ -40,7 +40,7 @@
 -------------
 When specifying the -v option the format used is:
 
-	SHA-1 type size size-in-pack-file offset-in-packfile
+	SHA-1 type size size-in-packfile offset-in-packfile
 
 for objects that are not deltified in the pack, and
 
# install git-verify-pack.txt /usr/share/doc/git-doc/git-verify-pack.txt
--- /usr/share/doc/git-doc/git-verify-tag.txt	2016-03-21 09:24:29.000000000 -0600
+++ git-verify-tag.txt	2016-10-03 14:24:18.000000000 -0600
@@ -16,6 +16,10 @@
 
 OPTIONS
 -------
+--raw::
+	Print the raw gpg status output to standard error instead of the normal
+	human-readable output.
+
 -v::
 --verbose::
 	Print the contents of the tag object before validating it.
# install git-verify-tag.txt /usr/share/doc/git-doc/git-verify-tag.txt
--- /usr/share/doc/git-doc/git-web--browse.txt	2016-03-21 09:24:29.000000000 -0600
+++ git-web--browse.txt	2016-10-03 14:24:18.000000000 -0600
@@ -62,14 +62,14 @@
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 The web browser can be specified using a configuration variable passed
-with the -c (or --config) command line option, or the 'web.browser'
+with the -c (or --config) command-line option, or the `web.browser`
 configuration variable if the former is not used.
 
 browser.<tool>.path
 ~~~~~~~~~~~~~~~~~~~
 
 You can explicitly provide a full path to your preferred browser by
-setting the configuration variable 'browser.<tool>.path'. For example,
+setting the configuration variable `browser.<tool>.path`. For example,
 you can configure the absolute path to firefox by setting
 'browser.firefox.path'. Otherwise, 'git web{litdd}browse' assumes the tool
 is available in PATH.
@@ -79,7 +79,7 @@
 
 When the browser, specified by options or configuration variables, is
 not among the supported ones, then the corresponding
-'browser.<tool>.cmd' configuration variable will be looked up. If this
+`browser.<tool>.cmd` configuration variable will be looked up. If this
 variable exists then 'git web{litdd}browse' will treat the specified tool
 as a custom command and will use a shell eval to run the command with
 the URLs passed as arguments.
@@ -87,7 +87,7 @@
 Note about konqueror
 --------------------
 
-When 'konqueror' is specified by a command line option or a
+When 'konqueror' is specified by a command-line option or a
 configuration variable, we launch 'kfmclient' to try to open the HTML
 man page on an already opened konqueror in a new tab if possible.
 
@@ -110,7 +110,7 @@
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 Note that these configuration variables should probably be set using
-the '--global' flag, for example like this:
+the `--global` flag, for example like this:
 
 ------------------------------------------------
 $ git config --global web.browser firefox
# install git-web--browse.txt /usr/share/doc/git-doc/git-web--browse.txt
# install git-worktree.txt /usr/share/doc/git-doc/git-worktree.txt
--- /usr/share/doc/git-doc/git.txt	2016-03-21 09:24:29.000000000 -0600
+++ git.txt	2016-10-03 14:24:18.000000000 -0600
@@ -22,36 +22,151 @@
 and full access to internals.
 
 See linkgit:gittutorial[7] to get started, then see
-link:everyday.html[Everyday Git] for a useful minimum set of
+linkgit:giteveryday[7] for a useful minimum set of
 commands.  The link:user-manual.html[Git User's Manual] has a more
 in-depth introduction.
 
 After you mastered the basic concepts, you can come back to this
 page to learn what commands Git offers.  You can learn more about
 individual Git commands with "git help command".  linkgit:gitcli[7]
-manual page gives you an overview of the command line command syntax.
+manual page gives you an overview of the command-line command syntax.
 
-Formatted and hyperlinked version of the latest Git documentation
-can be viewed at `http://git-htmldocs.googlecode.com/git/git.html`.
+A formatted and hyperlinked copy of the latest Git documentation
+can be viewed at `https://git.github.io/htmldocs/git.html`.
 
 ifdef::stalenotes[]
 [NOTE]
 ============
 
 You are reading the documentation for the latest (possibly
-unreleased) version of Git, that is available from 'master'
+unreleased) version of Git, that is available from the 'master'
 branch of the `git.git` repository.
 Documentation for older releases are available here:
 
-* link:v1.9.1/git.html[documentation for release 1.9.1]
+* link:v2.10.1/git.html[documentation for release 2.10.1]
 
 * release notes for
+  link:RelNotes/2.10.1.txt[2.10.1],
+  link:RelNotes/2.10.0.txt[2.10].
+
+* link:v2.9.3/git.html[documentation for release 2.9.3]
+
+* release notes for
+  link:RelNotes/2.9.3.txt[2.9.3],
+  link:RelNotes/2.9.2.txt[2.9.2],
+  link:RelNotes/2.9.1.txt[2.9.1],
+  link:RelNotes/2.9.0.txt[2.9].
+
+* link:v2.8.4/git.html[documentation for release 2.8.4]
+
+* release notes for
+  link:RelNotes/2.8.4.txt[2.8.4],
+  link:RelNotes/2.8.3.txt[2.8.3],
+  link:RelNotes/2.8.2.txt[2.8.2],
+  link:RelNotes/2.8.1.txt[2.8.1],
+  link:RelNotes/2.8.0.txt[2.8].
+
+* link:v2.7.3/git.html[documentation for release 2.7.3]
+
+* release notes for
+  link:RelNotes/2.7.3.txt[2.7.3],
+  link:RelNotes/2.7.2.txt[2.7.2],
+  link:RelNotes/2.7.1.txt[2.7.1],
+  link:RelNotes/2.7.0.txt[2.7].
+
+* link:v2.6.6/git.html[documentation for release 2.6.6]
+
+* release notes for
+  link:RelNotes/2.6.6.txt[2.6.6],
+  link:RelNotes/2.6.5.txt[2.6.5],
+  link:RelNotes/2.6.4.txt[2.6.4],
+  link:RelNotes/2.6.3.txt[2.6.3],
+  link:RelNotes/2.6.2.txt[2.6.2],
+  link:RelNotes/2.6.1.txt[2.6.1],
+  link:RelNotes/2.6.0.txt[2.6].
+
+* link:v2.5.5/git.html[documentation for release 2.5.5]
+
+* release notes for
+  link:RelNotes/2.5.5.txt[2.5.5],
+  link:RelNotes/2.5.4.txt[2.5.4],
+  link:RelNotes/2.5.3.txt[2.5.3],
+  link:RelNotes/2.5.2.txt[2.5.2],
+  link:RelNotes/2.5.1.txt[2.5.1],
+  link:RelNotes/2.5.0.txt[2.5].
+
+* link:v2.4.11/git.html[documentation for release 2.4.11]
+
+* release notes for
+  link:RelNotes/2.4.11.txt[2.4.11],
+  link:RelNotes/2.4.10.txt[2.4.10],
+  link:RelNotes/2.4.9.txt[2.4.9],
+  link:RelNotes/2.4.8.txt[2.4.8],
+  link:RelNotes/2.4.7.txt[2.4.7],
+  link:RelNotes/2.4.6.txt[2.4.6],
+  link:RelNotes/2.4.5.txt[2.4.5],
+  link:RelNotes/2.4.4.txt[2.4.4],
+  link:RelNotes/2.4.3.txt[2.4.3],
+  link:RelNotes/2.4.2.txt[2.4.2],
+  link:RelNotes/2.4.1.txt[2.4.1],
+  link:RelNotes/2.4.0.txt[2.4].
+
+* link:v2.3.10/git.html[documentation for release 2.3.10]
+
+* release notes for
+  link:RelNotes/2.3.10.txt[2.3.10],
+  link:RelNotes/2.3.9.txt[2.3.9],
+  link:RelNotes/2.3.8.txt[2.3.8],
+  link:RelNotes/2.3.7.txt[2.3.7],
+  link:RelNotes/2.3.6.txt[2.3.6],
+  link:RelNotes/2.3.5.txt[2.3.5],
+  link:RelNotes/2.3.4.txt[2.3.4],
+  link:RelNotes/2.3.3.txt[2.3.3],
+  link:RelNotes/2.3.2.txt[2.3.2],
+  link:RelNotes/2.3.1.txt[2.3.1],
+  link:RelNotes/2.3.0.txt[2.3].
+
+* link:v2.2.3/git.html[documentation for release 2.2.3]
+
+* release notes for
+  link:RelNotes/2.2.3.txt[2.2.3],
+  link:RelNotes/2.2.2.txt[2.2.2],
+  link:RelNotes/2.2.1.txt[2.2.1],
+  link:RelNotes/2.2.0.txt[2.2].
+
+* link:v2.1.4/git.html[documentation for release 2.1.4]
+
+* release notes for
+  link:RelNotes/2.1.4.txt[2.1.4],
+  link:RelNotes/2.1.3.txt[2.1.3],
+  link:RelNotes/2.1.2.txt[2.1.2],
+  link:RelNotes/2.1.1.txt[2.1.1],
+  link:RelNotes/2.1.0.txt[2.1].
+
+* link:v2.0.5/git.html[documentation for release 2.0.5]
+
+* release notes for
+  link:RelNotes/2.0.5.txt[2.0.5],
+  link:RelNotes/2.0.4.txt[2.0.4],
+  link:RelNotes/2.0.3.txt[2.0.3],
+  link:RelNotes/2.0.2.txt[2.0.2],
+  link:RelNotes/2.0.1.txt[2.0.1],
+  link:RelNotes/2.0.0.txt[2.0.0].
+
+* link:v1.9.5/git.html[documentation for release 1.9.5]
+
+* release notes for
+  link:RelNotes/1.9.5.txt[1.9.5],
+  link:RelNotes/1.9.4.txt[1.9.4],
+  link:RelNotes/1.9.3.txt[1.9.3],
+  link:RelNotes/1.9.2.txt[1.9.2],
   link:RelNotes/1.9.1.txt[1.9.1],
   link:RelNotes/1.9.0.txt[1.9.0].
 
-* link:v1.8.5.5/git.html[documentation for release 1.8.5.5]
+* link:v1.8.5.6/git.html[documentation for release 1.8.5.6]
 
 * release notes for
+  link:RelNotes/1.8.5.6.txt[1.8.5.6],
   link:RelNotes/1.8.5.5.txt[1.8.5.5],
   link:RelNotes/1.8.5.4.txt[1.8.5.4],
   link:RelNotes/1.8.5.3.txt[1.8.5.3],
@@ -407,7 +522,7 @@
 
 --help::
 	Prints the synopsis and a list of the most commonly used
-	commands. If the option '--all' or '-a' is given then all
+	commands. If the option `--all` or `-a` is given then all
 	available commands are printed. If a Git command is named this
 	option will bring up the manual page for that command.
 +
@@ -435,6 +550,11 @@
 	given will override values from configuration files.
 	The <name> is expected in the same format as listed by
 	'git config' (subkeys separated by dots).
++
+Note that omitting the `=` in `git -c foo.bar ...` is allowed and sets
+`foo.bar` to the boolean true value (just like `[foo]bar` would in a
+config file). Including the equals but with an empty value (like `git -c
+foo.bar= ...`) sets `foo.bar` to the empty string.
 
 --exec-path[=<path>]::
 	Path to wherever your core Git programs are installed.
@@ -466,7 +586,7 @@
 
 --git-dir=<path>::
 	Set the path to the repository. This can also be controlled by
-	setting the GIT_DIR environment variable. It can be an absolute
+	setting the `GIT_DIR` environment variable. It can be an absolute
 	path or relative path to current working directory.
 
 --work-tree=<path>::
@@ -714,42 +834,48 @@
 ~~~~~~~~~~~~~~~~~~
 These environment variables apply to 'all' core Git commands. Nb: it
 is worth noting that they may be used/overridden by SCMS sitting above
-Git so take care if using Cogito etc.
+Git so take care if using a foreign front-end.
 
-'GIT_INDEX_FILE'::
+`GIT_INDEX_FILE`::
 	This environment allows the specification of an alternate
 	index file. If not specified, the default of `$GIT_DIR/index`
 	is used.
 
-'GIT_OBJECT_DIRECTORY'::
+`GIT_INDEX_VERSION`::
+	This environment variable allows the specification of an index
+	version for new repositories.  It won't affect existing index
+	files.  By default index file version 2 or 3 is used. See
+	linkgit:git-update-index[1] for more information.
+
+`GIT_OBJECT_DIRECTORY`::
 	If the object storage directory is specified via this
 	environment variable then the sha1 directories are created
 	underneath - otherwise the default `$GIT_DIR/objects`
 	directory is used.
 
-'GIT_ALTERNATE_OBJECT_DIRECTORIES'::
+`GIT_ALTERNATE_OBJECT_DIRECTORIES`::
 	Due to the immutable nature of Git objects, old objects can be
 	archived into shared, read-only directories. This variable
 	specifies a ":" separated (on Windows ";" separated) list
 	of Git object directories which can be used to search for Git
 	objects. New objects will not be written to these directories.
 
-'GIT_DIR'::
-	If the 'GIT_DIR' environment variable is set then it
+`GIT_DIR`::
+	If the `GIT_DIR` environment variable is set then it
 	specifies a path to use instead of the default `.git`
 	for the base of the repository.
-	The '--git-dir' command-line option also sets this value.
+	The `--git-dir` command-line option also sets this value.
 
-'GIT_WORK_TREE'::
+`GIT_WORK_TREE`::
 	Set the path to the root of the working tree.
-	This can also be controlled by the '--work-tree' command line
+	This can also be controlled by the `--work-tree` command-line
 	option and the core.worktree configuration variable.
 
-'GIT_NAMESPACE'::
+`GIT_NAMESPACE`::
 	Set the Git namespace; see linkgit:gitnamespaces[7] for details.
-	The '--namespace' command-line option also sets this value.
+	The `--namespace` command-line option also sets this value.
 
-'GIT_CEILING_DIRECTORIES'::
+`GIT_CEILING_DIRECTORIES`::
 	This should be a colon-separated list of absolute paths.  If
 	set, it is a list of directories that Git should not chdir up
 	into while looking for a repository directory (useful for
@@ -762,42 +888,51 @@
 	can add an empty entry to the list to tell Git that the
 	subsequent entries are not symlinks and needn't be resolved;
 	e.g.,
-	'GIT_CEILING_DIRECTORIES=/maybe/symlink::/very/slow/non/symlink'.
+	`GIT_CEILING_DIRECTORIES=/maybe/symlink::/very/slow/non/symlink`.
 
-'GIT_DISCOVERY_ACROSS_FILESYSTEM'::
+`GIT_DISCOVERY_ACROSS_FILESYSTEM`::
 	When run in a directory that does not have ".git" repository
 	directory, Git tries to find such a directory in the parent
 	directories to find the top of the working tree, but by default it
 	does not cross filesystem boundaries.  This environment variable
 	can be set to true to tell Git not to stop at filesystem
-	boundaries.  Like 'GIT_CEILING_DIRECTORIES', this will not affect
-	an explicit repository directory set via 'GIT_DIR' or on the
+	boundaries.  Like `GIT_CEILING_DIRECTORIES`, this will not affect
+	an explicit repository directory set via `GIT_DIR` or on the
 	command line.
 
+`GIT_COMMON_DIR`::
+	If this variable is set to a path, non-worktree files that are
+	normally in $GIT_DIR will be taken from this path
+	instead. Worktree-specific files such as HEAD or index are
+	taken from $GIT_DIR. See linkgit:gitrepository-layout[5] and
+	linkgit:git-worktree[1] for
+	details. This variable has lower precedence than other path
+	variables such as GIT_INDEX_FILE, GIT_OBJECT_DIRECTORY...
+
 Git Commits
 ~~~~~~~~~~~
-'GIT_AUTHOR_NAME'::
-'GIT_AUTHOR_EMAIL'::
-'GIT_AUTHOR_DATE'::
-'GIT_COMMITTER_NAME'::
-'GIT_COMMITTER_EMAIL'::
-'GIT_COMMITTER_DATE'::
+`GIT_AUTHOR_NAME`::
+`GIT_AUTHOR_EMAIL`::
+`GIT_AUTHOR_DATE`::
+`GIT_COMMITTER_NAME`::
+`GIT_COMMITTER_EMAIL`::
+`GIT_COMMITTER_DATE`::
 'EMAIL'::
 	see linkgit:git-commit-tree[1]
 
 Git Diffs
 ~~~~~~~~~
-'GIT_DIFF_OPTS'::
+`GIT_DIFF_OPTS`::
 	Only valid setting is "--unified=??" or "-u??" to set the
 	number of context lines shown when a unified diff is created.
 	This takes precedence over any "-U" or "--unified" option
 	value passed on the Git diff command line.
 
-'GIT_EXTERNAL_DIFF'::
-	When the environment variable 'GIT_EXTERNAL_DIFF' is set, the
+`GIT_EXTERNAL_DIFF`::
+	When the environment variable `GIT_EXTERNAL_DIFF` is set, the
 	program named by it is called, instead of the diff invocation
 	described above.  For a path that is added, removed, or modified,
-        'GIT_EXTERNAL_DIFF' is called with 7 parameters:
+	`GIT_EXTERNAL_DIFF` is called with 7 parameters:
 
 	path old-file old-hex old-mode new-file new-hex new-mode
 +
@@ -811,67 +946,73 @@
 The file parameters can point at the user's working file
 (e.g. `new-file` in "git-diff-files"), `/dev/null` (e.g. `old-file`
 when a new file is added), or a temporary file (e.g. `old-file` in the
-index).  'GIT_EXTERNAL_DIFF' should not worry about unlinking the
-temporary file --- it is removed when 'GIT_EXTERNAL_DIFF' exits.
+index).  `GIT_EXTERNAL_DIFF` should not worry about unlinking the
+temporary file --- it is removed when `GIT_EXTERNAL_DIFF` exits.
 +
-For a path that is unmerged, 'GIT_EXTERNAL_DIFF' is called with 1
+For a path that is unmerged, `GIT_EXTERNAL_DIFF` is called with 1
 parameter, <path>.
 +
-For each path 'GIT_EXTERNAL_DIFF' is called, two environment variables,
-'GIT_DIFF_PATH_COUNTER' and 'GIT_DIFF_PATH_TOTAL' are set.
+For each path `GIT_EXTERNAL_DIFF` is called, two environment variables,
+`GIT_DIFF_PATH_COUNTER` and `GIT_DIFF_PATH_TOTAL` are set.
 
-'GIT_DIFF_PATH_COUNTER'::
+`GIT_DIFF_PATH_COUNTER`::
 	A 1-based counter incremented by one for every path.
 
-'GIT_DIFF_PATH_TOTAL'::
+`GIT_DIFF_PATH_TOTAL`::
 	The total number of paths.
 
 other
 ~~~~~
-'GIT_MERGE_VERBOSITY'::
+`GIT_MERGE_VERBOSITY`::
 	A number controlling the amount of output shown by
 	the recursive merge strategy.  Overrides merge.verbosity.
 	See linkgit:git-merge[1]
 
-'GIT_PAGER'::
+`GIT_PAGER`::
 	This environment variable overrides `$PAGER`. If it is set
 	to an empty string or to the value "cat", Git will not launch
 	a pager.  See also the `core.pager` option in
 	linkgit:git-config[1].
 
-'GIT_EDITOR'::
+`GIT_EDITOR`::
 	This environment variable overrides `$EDITOR` and `$VISUAL`.
 	It is used by several Git commands when, on interactive mode,
 	an editor is to be launched. See also linkgit:git-var[1]
 	and the `core.editor` option in linkgit:git-config[1].
 
-'GIT_SSH'::
-	If this environment variable is set then 'git fetch'
-	and 'git push' will use this command instead
-	of 'ssh' when they need to connect to a remote system.
-	The '$GIT_SSH' command will be given exactly two or
-	four arguments: the 'username@host' (or just 'host')
-	from the URL and the shell command to execute on that
-	remote system, optionally preceded by '-p' (literally) and
-	the 'port' from the URL when it specifies something other
-	than the default SSH port.
+`GIT_SSH`::
+`GIT_SSH_COMMAND`::
+	If either of these environment variables is set then 'git fetch'
+	and 'git push' will use the specified command instead of 'ssh'
+	when they need to connect to a remote system.
+	The command will be given exactly two or four arguments: the
+	'username@host' (or just 'host') from the URL and the shell
+	command to execute on that remote system, optionally preceded by
+	`-p` (literally) and the 'port' from the URL when it specifies
+	something other than the default SSH port.
 +
-To pass options to the program that you want to list in GIT_SSH
-you will need to wrap the program and options into a shell script,
-then set GIT_SSH to refer to the shell script.
+`$GIT_SSH_COMMAND` takes precedence over `$GIT_SSH`, and is interpreted
+by the shell, which allows additional arguments to be included.
+`$GIT_SSH` on the other hand must be just the path to a program
+(which can be a wrapper shell script, if additional arguments are
+needed).
 +
 Usually it is easier to configure any desired options through your
 personal `.ssh/config` file.  Please consult your ssh documentation
 for further details.
 
-'GIT_ASKPASS'::
+`GIT_ASKPASS`::
 	If this environment variable is set, then Git commands which need to
 	acquire passwords or passphrases (e.g. for HTTP or IMAP authentication)
-	will call this program with a suitable prompt as command line argument
-	and read the password from its STDOUT. See also the 'core.askpass'
+	will call this program with a suitable prompt as command-line argument
+	and read the password from its STDOUT. See also the `core.askPass`
 	option in linkgit:git-config[1].
 
-'GIT_CONFIG_NOSYSTEM'::
+`GIT_TERMINAL_PROMPT`::
+	If this environment variable is set to `0`, git will not prompt
+	on the terminal (e.g., when asking for HTTP authentication).
+
+`GIT_CONFIG_NOSYSTEM`::
 	Whether to skip reading settings from the system-wide
 	`$(prefix)/etc/gitconfig` file.  This environment variable can
 	be used along with `$HOME` and `$XDG_CONFIG_HOME` to create a
@@ -879,7 +1020,7 @@
 	temporarily to avoid using a buggy `/etc/gitconfig` file while
 	waiting for someone with sufficient permissions to fix it.
 
-'GIT_FLUSH'::
+`GIT_FLUSH`::
 	If this environment variable is set to "1", then commands such
 	as 'git blame' (in incremental mode), 'git rev-list', 'git log',
 	'git check-attr' and 'git check-ignore' will
@@ -890,34 +1031,76 @@
 	not set, Git will choose buffered or record-oriented flushing
 	based on whether stdout appears to be redirected to a file or not.
 
-'GIT_TRACE'::
-	If this variable is set to "1", "2" or "true" (comparison
-	is case insensitive), Git will print `trace:` messages on
-	stderr telling about alias expansion, built-in command
-	execution and external command execution.
-	If this variable is set to an integer value greater than 1
-	and lower than 10 (strictly) then Git will interpret this
-	value as an open file descriptor and will try to write the
-	trace messages into this file descriptor.
-	Alternatively, if this variable is set to an absolute path
-	(starting with a '/' character), Git will interpret this
-	as a file path and will try to write the trace messages
-	into it.
-
-'GIT_TRACE_PACK_ACCESS'::
-	If this variable is set to a path, a file will be created at
-	the given path logging all accesses to any packs. For each
+`GIT_TRACE`::
+	Enables general trace messages, e.g. alias expansion, built-in
+	command execution and external command execution.
++
+If this variable is set to "1", "2" or "true" (comparison
+is case insensitive), trace messages will be printed to
+stderr.
++
+If the variable is set to an integer value greater than 2
+and lower than 10 (strictly) then Git will interpret this
+value as an open file descriptor and will try to write the
+trace messages into this file descriptor.
++
+Alternatively, if the variable is set to an absolute path
+(starting with a '/' character), Git will interpret this
+as a file path and will try to write the trace messages
+into it.
++
+Unsetting the variable, or setting it to empty, "0" or
+"false" (case insensitive) disables trace messages.
+
+`GIT_TRACE_PACK_ACCESS`::
+	Enables trace messages for all accesses to any packs. For each
 	access, the pack file name and an offset in the pack is
 	recorded. This may be helpful for troubleshooting some
 	pack-related performance problems.
+	See `GIT_TRACE` for available trace output options.
 
-'GIT_TRACE_PACKET'::
-	If this variable is set, it shows a trace of all packets
-	coming in or out of a given program. This can help with
-	debugging object negotiation or other protocol issues. Tracing
-	is turned off at a packet starting with "PACK".
+`GIT_TRACE_PACKET`::
+	Enables trace messages for all packets coming in or out of a
+	given program. This can help with debugging object negotiation
+	or other protocol issues. Tracing is turned off at a packet
+	starting with "PACK" (but see `GIT_TRACE_PACKFILE` below).
+	See `GIT_TRACE` for available trace output options.
+
+`GIT_TRACE_PACKFILE`::
+	Enables tracing of packfiles sent or received by a
+	given program. Unlike other trace output, this trace is
+	verbatim: no headers, and no quoting of binary data. You almost
+	certainly want to direct into a file (e.g.,
+	`GIT_TRACE_PACKFILE=/tmp/my.pack`) rather than displaying it on
+	the terminal or mixing it with other trace output.
++
+Note that this is currently only implemented for the client side
+of clones and fetches.
+
+`GIT_TRACE_PERFORMANCE`::
+	Enables performance related trace messages, e.g. total execution
+	time of each Git command.
+	See `GIT_TRACE` for available trace output options.
+
+`GIT_TRACE_SETUP`::
+	Enables trace messages printing the .git, working tree and current
+	working directory after Git has completed its setup phase.
+	See `GIT_TRACE` for available trace output options.
+
+`GIT_TRACE_SHALLOW`::
+	Enables trace messages that can help debugging fetching /
+	cloning of shallow repositories.
+	See `GIT_TRACE` for available trace output options.
+
+`GIT_TRACE_CURL`::
+	Enables a curl full trace dump of all incoming and outgoing data,
+	including descriptive information, of the git transport protocol.
+	This is similar to doing curl `--trace-ascii` on the command line.
+	This option overrides setting the `GIT_CURL_VERBOSE` environment
+	variable.
+	See `GIT_TRACE` for available trace output options.
 
-GIT_LITERAL_PATHSPECS::
+`GIT_LITERAL_PATHSPECS`::
 	Setting this variable to `1` will cause Git to treat all
 	pathspecs literally, rather than as glob patterns. For example,
 	running `GIT_LITERAL_PATHSPECS=1 git log -- '*.c'` will search
@@ -926,19 +1109,19 @@
 	literal paths to Git (e.g., paths previously given to you by
 	`git ls-tree`, `--raw` diff output, etc).
 
-GIT_GLOB_PATHSPECS::
+`GIT_GLOB_PATHSPECS`::
 	Setting this variable to `1` will cause Git to treat all
 	pathspecs as glob patterns (aka "glob" magic).
 
-GIT_NOGLOB_PATHSPECS::
+`GIT_NOGLOB_PATHSPECS`::
 	Setting this variable to `1` will cause Git to treat all
 	pathspecs as literal (aka "literal" magic).
 
-GIT_ICASE_PATHSPECS::
+`GIT_ICASE_PATHSPECS`::
 	Setting this variable to `1` will cause Git to treat all
 	pathspecs as case-insensitive.
 
-'GIT_REFLOG_ACTION'::
+`GIT_REFLOG_ACTION`::
 	When a ref is updated, reflog entries are created to keep
 	track of the reason why the ref was updated (which is
 	typically the name of the high-level command that updated
@@ -948,6 +1131,42 @@
 	variable when it is invoked as the top level command by the
 	end user, to be recorded in the body of the reflog.
 
+`GIT_REF_PARANOIA`::
+	If set to `1`, include broken or badly named refs when iterating
+	over lists of refs. In a normal, non-corrupted repository, this
+	does nothing. However, enabling it may help git to detect and
+	abort some operations in the presence of broken refs. Git sets
+	this variable automatically when performing destructive
+	operations like linkgit:git-prune[1]. You should not need to set
+	it yourself unless you want to be paranoid about making sure
+	an operation has touched every ref (e.g., because you are
+	cloning a repository to make a backup).
+
+`GIT_ALLOW_PROTOCOL`::
+	If set, provide a colon-separated list of protocols which are
+	allowed to be used with fetch/push/clone. This is useful to
+	restrict recursive submodule initialization from an untrusted
+	repository. Any protocol not mentioned will be disallowed (i.e.,
+	this is a whitelist, not a blacklist). If the variable is not
+	set at all, all protocols are enabled.  The protocol names
+	currently used by git are:
+
+	  - `file`: any local file-based path (including `file://` URLs,
+	    or local paths)
+
+	  - `git`: the anonymous git protocol over a direct TCP
+	    connection (or proxy, if configured)
+
+	  - `ssh`: git over ssh (including `host:path` syntax,
+	    `ssh://`, etc).
+
+	  - `http`: git over http, both "smart http" and "dumb http".
+	    Note that this does _not_ include `https`; if you want both,
+	    you should specify both as `http:https`.
+
+	  - any external helpers are named by their protocol (e.g., use
+	    `hg` to allow the `git-remote-hg` helper)
+
 
 Discussion[[Discussion]]
 ------------------------
@@ -1024,39 +1243,12 @@
 Users migrating from CVS may also want to
 read linkgit:gitcvs-migration[7].
 
-`GIT_ALLOW_PROTOCOL`::
-	If set, provide a colon-separated list of protocols which are
-	allowed to be used with fetch/push/clone. This is useful to
-	restrict recursive submodule initialization from an untrusted
-	repository. Any protocol not mentioned will be disallowed (i.e.,
-	this is a whitelist, not a blacklist). If the variable is not
-	set at all, all protocols are enabled.  The protocol names
-	currently used by git are:
-
-	  - `file`: any local file-based path (including `file://` URLs,
-	    or local paths)
-
-	  - `git`: the anonymous git protocol over a direct TCP
-	    connection (or proxy, if configured)
-
-	  - `ssh`: git over ssh (including `host:path` syntax,
-	    `git+ssh://`, etc).
-
-	  - `rsync`: git over rsync
-
-	  - `http`: git over http, both "smart http" and "dumb http".
-	    Note that this does _not_ include `https`; if you want both,
-	    you should specify both as `http:https`.
-
-	  - any external helpers are named by their protocol (e.g., use
-	    `hg` to allow the `git-remote-hg` helper)
-
 
 Authors
 -------
 Git was started by Linus Torvalds, and is currently maintained by Junio
 C Hamano. Numerous contributions have come from the Git mailing list
-<git@vger.kernel.org>.  http://www.ohloh.net/p/git/contributors/summary
+<git@vger.kernel.org>.  http://www.openhub.net/p/git/contributors/summary
 gives you a more complete list of contributors.
 
 If you have a clone of git.git itself, the
@@ -1073,7 +1265,7 @@
 SEE ALSO
 --------
 linkgit:gittutorial[7], linkgit:gittutorial-2[7],
-link:everyday.html[Everyday Git], linkgit:gitcvs-migration[7],
+linkgit:giteveryday[7], linkgit:gitcvs-migration[7],
 linkgit:gitglossary[7], linkgit:gitcore-tutorial[7],
 linkgit:gitcli[7], link:user-manual.html[The Git User's Manual],
 linkgit:gitworkflows[7]
# install git.txt /usr/share/doc/git-doc/git.txt
--- /usr/share/doc/git-doc/gitattributes.txt	2016-03-21 09:24:29.000000000 -0600
+++ gitattributes.txt	2016-10-03 14:24:18.000000000 -0600
@@ -80,7 +80,7 @@
 repositories (i.e., attributes of interest to all users) should go into
 `.gitattributes` files. Attributes that should affect all repositories
 for a single user should be placed in a file specified by the
-`core.attributesfile` configuration option (see linkgit:git-config[1]).
+`core.attributesFile` configuration option (see linkgit:git-config[1]).
 Its default value is $XDG_CONFIG_HOME/git/attributes. If $XDG_CONFIG_HOME
 is either not set or empty, $HOME/.config/git/attributes is used instead.
 Attributes for all users on a system should be placed in the
@@ -115,6 +115,7 @@
 repository.  To control what line ending style is used in the working
 directory, use the `eol` attribute for a single file and the
 `core.eol` configuration variable for all text files.
+Note that `core.autocrlf` overrides `core.eol`
 
 Set::
 
@@ -130,8 +131,9 @@
 Set to string value "auto"::
 
 	When `text` is set to "auto", the path is marked for automatic
-	end-of-line normalization.  If Git decides that the content is
-	text, its line endings are normalized to LF on checkin.
+	end-of-line conversion.  If Git decides that the content is
+	text, its line endings are converted to LF on checkin.
+	When the file has been committed with CRLF, no conversion is done.
 
 Unspecified::
 
@@ -146,7 +148,7 @@
 ^^^^^
 
 This attribute sets a specific line-ending style to be used in the
-working directory.  It enables end-of-line normalization without any
+working directory.  It enables end-of-line conversion without any
 content checks, effectively setting the `text` attribute.
 
 Set to string value "crlf"::
@@ -180,60 +182,51 @@
 normalize line endings to LF in the repository and, optionally, to
 convert them to CRLF when files are checked out.
 
-Here is an example that will make Git normalize .txt, .vcproj and .sh
-files, ensure that .vcproj files have CRLF and .sh files have LF in
-the working directory, and prevent .jpg files from being normalized
-regardless of their content.
-
-------------------------
-*.txt		text
-*.vcproj	eol=crlf
-*.sh		eol=lf
-*.jpg		-text
-------------------------
-
-Other source code management systems normalize all text files in their
-repositories, and there are two ways to enable similar automatic
-normalization in Git.
-
 If you simply want to have CRLF line endings in your working directory
 regardless of the repository you are working with, you can set the
-config variable "core.autocrlf" without changing any attributes.
+config variable "core.autocrlf" without using any attributes.
 
 ------------------------
 [core]
 	autocrlf = true
 ------------------------
 
-This does not force normalization of all text files, but does ensure
+This does not force normalization of text files, but does ensure
 that text files that you introduce to the repository have their line
 endings normalized to LF when they are added, and that files that are
 already normalized in the repository stay normalized.
 
-If you want to interoperate with a source code management system that
-enforces end-of-line normalization, or you simply want all text files
-in your repository to be normalized, you should instead set the `text`
-attribute to "auto" for _all_ files.
+If you want to ensure that text files that any contributor introduces to
+the repository have their line endings normalized, you can set the
+`text` attribute to "auto" for _all_ files.
 
 ------------------------
 *	text=auto
 ------------------------
 
-This ensures that all files that Git considers to be text will have
-normalized (LF) line endings in the repository.  The `core.eol`
-configuration variable controls which line endings Git will use for
-normalized files in your working directory; the default is to use the
-native line ending for your platform, or CRLF if `core.autocrlf` is
-set.
-
-NOTE: When `text=auto` normalization is enabled in an existing
-repository, any text files containing CRLFs should be normalized.  If
-they are not they will be normalized the next time someone tries to
-change them, causing unfortunate misattribution.  From a clean working
-directory:
+The attributes allow a fine-grained control, how the line endings
+are converted.
+Here is an example that will make Git normalize .txt, .vcproj and .sh
+files, ensure that .vcproj files have CRLF and .sh files have LF in
+the working directory, and prevent .jpg files from being normalized
+regardless of their content.
+
+------------------------
+*               text=auto
+*.txt		text
+*.vcproj	text eol=crlf
+*.sh		text eol=lf
+*.jpg		-text
+------------------------
+
+NOTE: When `text=auto` conversion is enabled in a cross-platform
+project using push and pull to a central repository the text files
+containing CRLFs should be normalized.
+
+From a clean working directory:
 
 -------------------------------------------------
-$ echo "* text=auto" >>.gitattributes
+$ echo "* text=auto" >.gitattributes
 $ rm .git/index     # Remove the index to force Git to
 $ git reset         # re-scan the working directory
 $ git status        # Show files that will be normalized
@@ -374,6 +367,11 @@
 	smudge = git-p4-filter --smudge %f
 ------------------------
 
+Note that "%f" is the name of the path that is being worked on. Depending
+on the version that is being filtered, the corresponding file on disk may
+not exist, or may have different contents. So, smudge and clean commands
+should not try to access the file on disk, but only act as filters on the
+content provided to them on standard input.
 
 Interaction between checkin/checkout attributes
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
@@ -440,8 +438,8 @@
 
 	A path to which the `diff` attribute is unspecified
 	first gets its contents inspected, and if it looks like
-	text, it is treated as text.  Otherwise it would
-	generate `Binary files differ`.
+	text and is smaller than core.bigFileThreshold, it is treated
+	as text. Otherwise it would generate `Binary files differ`.
 
 String::
 
@@ -525,8 +523,12 @@
 
 - `csharp` suitable for source code in the C# language.
 
+- `css` suitable for cascading style sheets.
+
 - `fortran` suitable for source code in the Fortran language.
 
+- `fountain` suitable for Fountain documents.
+
 - `html` suitable for HTML/XHTML documents.
 
 - `java` suitable for source code in the Java language.
@@ -665,7 +667,7 @@
 may want to override its decision, either because a blob contains binary
 data later in the file, or because the content, while technically
 composed of text characters, is opaque to a human reader. For example,
-many postscript files contain only ascii characters, but produce noisy
+many postscript files contain only ASCII characters, but produce noisy
 and meaningless diffs.
 
 The simplest way to mark a file as binary is to unset the diff
@@ -680,7 +682,7 @@
 
 However, one may also want to specify other diff driver attributes. For
 example, you might want to use `textconv` to convert postscript files to
-an ascii representation for human viewing, but otherwise treat them as
+an ASCII representation for human viewing, but otherwise treat them as
 binary files. You cannot specify both `-diff` and `diff=ps` attributes.
 The solution is to use the `diff.*.binary` config option:
 
@@ -774,7 +776,7 @@
 ----------------------------------------------------------------
 [merge "filfre"]
 	name = feel-free merge driver
-	driver = filfre %O %A %B
+	driver = filfre %O %A %B %L %P
 	recursive = binary
 ----------------------------------------------------------------
 
@@ -800,6 +802,9 @@
 When left unspecified, the driver itself is used for both
 internal merge and the final merge.
 
+The merge driver can learn the pathname in which the merged result
+will be stored via placeholder `%P`.
+
 
 `conflict-marker-size`
 ^^^^^^^^^^^^^^^^^^^^^^
# install gitattributes.txt /usr/share/doc/git-doc/gitattributes.txt
--- /usr/share/doc/git-doc/gitcli.txt	2016-03-21 09:24:29.000000000 -0600
+++ gitcli.txt	2016-10-03 14:24:18.000000000 -0600
@@ -3,7 +3,7 @@
 
 NAME
 ----
-gitcli - Git command line interface and conventions
+gitcli - Git command-line interface and conventions
 
 SYNOPSIS
 --------
@@ -66,13 +66,13 @@
 Here are the rules regarding the "flags" that you should follow when you are
 scripting Git:
 
- * it's preferred to use the non dashed form of Git commands, which means that
+ * it's preferred to use the non-dashed form of Git commands, which means that
    you should prefer `git foo` to `git-foo`.
 
  * splitting short options to separate words (prefer `git foo -a -b`
    to `git foo -ab`, the latter may not even work).
 
- * when a command line option takes an argument, use the 'stuck' form.  In
+ * when a command-line option takes an argument, use the 'stuck' form.  In
    other words, write `git foo -oArg` instead of `git foo -o Arg` for short
    options, and `git foo --long-opt=Arg` instead of `git foo --long-opt Arg`
    for long options.  An option that takes optional option-argument must be
@@ -103,7 +103,7 @@
 Magic Options
 ~~~~~~~~~~~~~
 Commands which have the enhanced option parser activated all understand a
-couple of magic command line options:
+couple of magic command-line options:
 
 -h::
 	gives a pretty printed usage of the command.
# install gitcli.txt /usr/share/doc/git-doc/gitcli.txt
--- /usr/share/doc/git-doc/gitcore-tutorial.txt	2016-03-21 09:24:29.000000000 -0600
+++ gitcore-tutorial.txt	2016-10-03 14:24:18.000000000 -0600
@@ -259,7 +259,7 @@
 @@ -1 +1,2 @@
  Hello World
 +It's a new day for git
-----
+------------
 
 i.e. the diff of the change we caused by adding another line to `hello`.
 
@@ -710,7 +710,7 @@
 Again, this can all be simplified with
 
 ----------------
-$ git clone rsync://rsync.kernel.org/pub/scm/git/git.git/ my-git
+$ git clone git://git.kernel.org/pub/scm/git/git.git/ my-git
 $ cd my-git
 $ git checkout
 ----------------
@@ -949,7 +949,7 @@
 [NOTE]
 If there were more commits on the 'master' branch after the merge, the
 merge commit itself would not be shown by 'git show-branch' by
-default.  You would need to provide '--sparse' option to make the
+default.  You would need to provide `--sparse` option to make the
 merge commit visible in this case.
 
 Now, let's pretend you are the one who did all the work in
@@ -1011,20 +1011,6 @@
 One of the following transports can be used to name the
 repository to download from:
 
-Rsync::
-	`rsync://remote.machine/path/to/repo.git/`
-+
-Rsync transport is usable for both uploading and downloading,
-but is completely unaware of what git does, and can produce
-unexpected results when you download from the public repository
-while the repository owner is uploading into it via `rsync`
-transport.  Most notably, it could update the files under
-`refs/` which holds the object name of the topmost commits
-before uploading the files in `objects/` -- the downloader would
-obtain head commit object name while that object itself is still
-not available in the repository.  For this reason, it is
-considered deprecated.
-
 SSH::
 	`remote.machine:/path/to/repo.git/` or
 +
@@ -1430,7 +1416,7 @@
 
 When a repository is synchronized via `git push` and `git pull`
 objects packed in the source repository are usually stored
-unpacked in the destination, unless rsync transport is used.
+unpacked in the destination.
 While this allows you to use different packing strategies on
 both ends, it also means you may need to repack both
 repositories every once in a while.
@@ -1443,7 +1429,7 @@
 convenient to organize your project with an informal hierarchy
 of developers. Linux kernel development is run this way. There
 is a nice illustration (page 17, "Merges to Mainline") in
-link:http://www.xenotime.net/linux/mentor/linux-mentoring-2006.pdf[Randy Dunlap's presentation].
+http://www.xenotime.net/linux/mentor/linux-mentoring-2006.pdf[Randy Dunlap's presentation].
 
 It should be stressed that this hierarchy is purely *informal*.
 There is nothing fundamental in Git that enforces the "chain of
@@ -1667,7 +1653,7 @@
 linkgit:gittutorial-2[7],
 linkgit:gitcvs-migration[7],
 linkgit:git-help[1],
-link:everyday.html[Everyday git],
+linkgit:giteveryday[7],
 link:user-manual.html[The Git User's Manual]
 
 GIT
# install gitcore-tutorial.txt /usr/share/doc/git-doc/gitcore-tutorial.txt
--- /usr/share/doc/git-doc/gitcredentials.txt	2016-03-21 09:24:29.000000000 -0600
+++ gitcredentials.txt	2016-10-03 14:24:18.000000000 -0600
@@ -32,7 +32,7 @@
    to the program on the command line, and the user's input is read
    from its standard output.
 
-2. Otherwise, if the `core.askpass` configuration variable is set, its
+2. Otherwise, if the `core.askPass` configuration variable is set, its
    value is used as above.
 
 3. Otherwise, if the `SSH_ASKPASS` environment variable is set, its
@@ -106,6 +106,11 @@
 password, or nothing. Once Git has acquired both a username and a
 password, no more helpers will be tried.
 
+If `credential.helper` is configured to the empty string, this resets
+the helper list to empty (so you may override a helper set by a
+lower-priority config file by configuring the empty-string helper,
+followed by whatever set of helpers you would like).
+
 
 CREDENTIAL CONTEXTS
 -------------------
# install gitcredentials.txt /usr/share/doc/git-doc/gitcredentials.txt
--- /usr/share/doc/git-doc/gitcvs-migration.txt	2016-03-21 09:24:29.000000000 -0600
+++ gitcvs-migration.txt	2016-10-03 14:24:18.000000000 -0600
@@ -116,8 +116,12 @@
 Importing a CVS archive
 -----------------------
 
+NOTE: These instructions use the `git-cvsimport` script which ships with
+git, but other importers may provide better results. See the note in
+linkgit:git-cvsimport[1] for other options.
+
 First, install version 2.1 or higher of cvsps from
-link:http://www.cobite.com/cvsps/[http://www.cobite.com/cvsps/] and make
+https://github.com/andreyvit/cvsps[https://github.com/andreyvit/cvsps] and make
 sure it is in your path.  Then cd to a checked out CVS working directory
 of the project you are interested in and run linkgit:git-cvsimport[1]:
 
@@ -194,7 +198,7 @@
 linkgit:gittutorial-2[7],
 linkgit:gitcore-tutorial[7],
 linkgit:gitglossary[7],
-link:everyday.html[Everyday Git],
+linkgit:giteveryday[7],
 link:user-manual.html[The Git User's Manual]
 
 GIT
# install gitcvs-migration.txt /usr/share/doc/git-doc/gitcvs-migration.txt
--- /usr/share/doc/git-doc/gitdiffcore.txt	2016-03-21 09:24:29.000000000 -0600
+++ gitdiffcore.txt	2016-10-03 14:24:18.000000000 -0600
@@ -28,8 +28,8 @@
 files:
 
  - 'git diff-index' compares contents of a "tree" object and the
-   working directory (when '\--cached' flag is not used) or a
-   "tree" object and the index file (when '\--cached' flag is
+   working directory (when `--cached` flag is not used) or a
+   "tree" object and the index file (when `--cached` flag is
    used);
 
  - 'git diff-files' compares contents of the index file and the
@@ -142,7 +142,7 @@
 
 When the "-C" option is used, the original contents of modified files,
 and deleted files (and also unmodified files, if the
-"\--find-copies-harder" option is used) are considered as candidates
+"--find-copies-harder" option is used) are considered as candidates
 of the source files in rename/copy operation.  If the input were like
 these filepairs, that talk about a modified file fileY and a newly
 created file file0:
# install gitdiffcore.txt /usr/share/doc/git-doc/gitdiffcore.txt
# install giteveryday.txt /usr/share/doc/git-doc/giteveryday.txt
--- /usr/share/doc/git-doc/gitglossary.txt	2016-03-21 09:24:29.000000000 -0600
+++ gitglossary.txt	2016-10-03 14:24:18.000000000 -0600
@@ -19,7 +19,7 @@
 linkgit:gittutorial[7],
 linkgit:gittutorial-2[7],
 linkgit:gitcvs-migration[7],
-link:everyday.html[Everyday Git],
+linkgit:giteveryday[7],
 link:user-manual.html[The Git User's Manual]
 
 GIT
# install gitglossary.txt /usr/share/doc/git-doc/gitglossary.txt
--- /usr/share/doc/git-doc/githooks.txt	2016-03-21 09:24:29.000000000 -0600
+++ githooks.txt	2016-10-03 14:24:18.000000000 -0600
@@ -7,24 +7,35 @@
 
 SYNOPSIS
 --------
-$GIT_DIR/hooks/*
+$GIT_DIR/hooks/* (or \`git config core.hooksPath`/*)
 
 
 DESCRIPTION
 -----------
 
-Hooks are little scripts you can place in `$GIT_DIR/hooks`
-directory to trigger action at certain points.  When
-'git init' is run, a handful of example hooks are copied into the
-`hooks` directory of the new repository, but by default they are
-all disabled.  To enable a hook, rename it by removing its `.sample`
-suffix.
-
-NOTE: It is also a requirement for a given hook to be executable.
-However - in a freshly initialized repository - the `.sample` files are
-executable by default.
+Hooks are programs you can place in a hooks directory to trigger
+actions at certain points in git's execution. Hooks that don't have
+the executable bit set are ignored.
+
+By default the hooks directory is `$GIT_DIR/hooks`, but that can be
+changed via the `core.hooksPath` configuration variable (see
+linkgit:git-config[1]).
+
+Before Git invokes a hook, it changes its working directory to either
+the root of the working tree in a non-bare repository, or to the
+$GIT_DIR in a bare repository.
+
+Hooks can get their arguments via the environment, command-line
+arguments, and stdin. See the documentation for each hook below for
+details.
+
+'git init' may copy hooks to the new repository, depending on its
+configuration. See the "TEMPLATE DIRECTORY" section in
+linkgit:git-init[1] for details. When the rest of this document refers
+to "default hooks" it's talking about the default template shipped
+with Git.
 
-This document describes the currently defined hooks.
+The currently supported hooks are described below.
 
 HOOKS
 -----
@@ -32,15 +43,15 @@
 applypatch-msg
 ~~~~~~~~~~~~~~
 
-This hook is invoked by 'git am' script.  It takes a single
+This hook is invoked by 'git am'.  It takes a single
 parameter, the name of the file that holds the proposed commit
-log message.  Exiting with non-zero status causes
-'git am' to abort before applying the patch.
+log message.  Exiting with a non-zero status causes 'git am' to abort
+before applying the patch.
 
 The hook is allowed to edit the message file in place, and can
 be used to normalize the message into some project standard
-format (if the project has one). It can also be used to refuse
-the commit after inspecting the message file.
+format. It can also be used to refuse the commit after inspecting
+the message file.
 
 The default 'applypatch-msg' hook, when enabled, runs the
 'commit-msg' hook, if the latter is enabled.
@@ -73,10 +84,10 @@
 ~~~~~~~~~~
 
 This hook is invoked by 'git commit', and can be bypassed
-with `--no-verify` option.  It takes no parameter, and is
+with the `--no-verify` option.  It takes no parameters, and is
 invoked before obtaining the proposed commit log message and
-making a commit.  Exiting with non-zero status from this script
-causes the 'git commit' to abort.
+making a commit.  Exiting with a non-zero status from this script
+causes the 'git commit' command to abort before creating a commit.
 
 The default 'pre-commit' hook, when enabled, catches introduction
 of lines with trailing whitespaces and aborts the commit when
@@ -115,15 +126,15 @@
 ~~~~~~~~~~
 
 This hook is invoked by 'git commit', and can be bypassed
-with `--no-verify` option.  It takes a single parameter, the
+with the `--no-verify` option.  It takes a single parameter, the
 name of the file that holds the proposed commit log message.
-Exiting with non-zero status causes the 'git commit' to
+Exiting with a non-zero status causes the 'git commit' to
 abort.
 
-The hook is allowed to edit the message file in place, and can
-be used to normalize the message into some project standard
-format (if the project has one). It can also be used to refuse
-the commit after inspecting the message file.
+The hook is allowed to edit the message file in place, and can be used
+to normalize the message into some project standard format. It
+can also be used to refuse the commit after inspecting the message
+file.
 
 The default 'commit-msg' hook, when enabled, detects duplicate
 "Signed-off-by" lines, and aborts the commit if one is found.
@@ -131,8 +142,8 @@
 post-commit
 ~~~~~~~~~~~
 
-This hook is invoked by 'git commit'.  It takes no
-parameter, and is invoked after a commit is made.
+This hook is invoked by 'git commit'. It takes no parameters, and is
+invoked after a commit is made.
 
 This hook is meant primarily for notification, and cannot affect
 the outcome of 'git commit'.
@@ -175,7 +186,7 @@
 
 This hook can be used in conjunction with a corresponding pre-commit hook to
 save and restore any form of metadata associated with the working tree
-(eg: permissions/ownership, ACLS, etc).  See contrib/hooks/setgitperms.perl
+(e.g.: permissions/ownership, ACLS, etc).  See contrib/hooks/setgitperms.perl
 for an example of how to do this.
 
 pre-push
@@ -236,6 +247,15 @@
 'git send-pack' on the other end, so you can simply `echo` messages
 for the user.
 
+The number of push options given on the command line of
+`git push --push-option=...` can be read from the environment
+variable `GIT_PUSH_OPTION_COUNT`, and the options themselves are
+found in `GIT_PUSH_OPTION_0`, `GIT_PUSH_OPTION_1`,...
+If it is negotiated to not use the push options phase, the
+environment variables will not be set. If the client selects
+to use push options, but doesn't transmit any, the count variable
+will be set to zero, `GIT_PUSH_OPTION_COUNT=0`.
+
 [[update]]
 update
 ~~~~~~
@@ -267,9 +287,11 @@
 firing one e-mail per ref when used naively, though.  The
 <<post-receive,'post-receive'>> hook is more suited to that.
 
-Another use suggested on the mailing list is to use this hook to
-implement access control which is finer grained than the one
-based on filesystem group.
+In an environment that restricts the users' access only to git
+commands over the wire, this hook can be used to implement access
+control without relying on filesystem ownership and group
+membership. See linkgit:git-shell[1] for how you might use the login
+shell to restrict the user's access to only git commands.
 
 Both standard output and standard error output are forwarded to
 'git send-pack' on the other end, so you can simply `echo` messages
@@ -309,6 +331,15 @@
 directory in Git distribution, which implements sending commit
 emails.
 
+The number of push options given on the command line of
+`git push --push-option=...` can be read from the environment
+variable `GIT_PUSH_OPTION_COUNT`, and the options themselves are
+found in `GIT_PUSH_OPTION_0`, `GIT_PUSH_OPTION_1`,...
+If it is negotiated to not use the push options phase, the
+environment variables will not be set. If the client selects
+to use push options, but doesn't transmit any, the count variable
+will be set to zero, `GIT_PUSH_OPTION_COUNT=0`.
+
 [[post-update]]
 post-update
 ~~~~~~~~~~~
@@ -341,6 +372,36 @@
 'git send-pack' on the other end, so you can simply `echo` messages
 for the user.
 
+push-to-checkout
+~~~~~~~~~~~~~~~~
+
+This hook is invoked by 'git-receive-pack' on the remote repository,
+which happens when a 'git push' is done on a local repository, when
+the push tries to update the branch that is currently checked out
+and the `receive.denyCurrentBranch` configuration variable is set to
+`updateInstead`.  Such a push by default is refused if the working
+tree and the index of the remote repository has any difference from
+the currently checked out commit; when both the working tree and the
+index match the current commit, they are updated to match the newly
+pushed tip of the branch.  This hook is to be used to override the
+default behaviour.
+
+The hook receives the commit with which the tip of the current
+branch is going to be updated.  It can exit with a non-zero status
+to refuse the push (when it does so, it must not modify the index or
+the working tree).  Or it can make any necessary changes to the
+working tree and to the index to bring them to the desired state
+when the tip of the current branch is updated to the new commit, and
+exit with a zero status.
+
+For example, the hook can simply run `git read-tree -u -m HEAD "$1"`
+in order to emulate 'git fetch' that is run in the reverse direction
+with `git push`, as the two-tree form of `read-tree -u -m` is
+essentially the same as `git checkout` that switches branches while
+keeping the local changes in the working tree that do not interfere
+with the difference between the branches.
+
+
 pre-auto-gc
 ~~~~~~~~~~~
 
@@ -367,7 +428,7 @@
 'extra-info'.
 
 The hook always runs after the automatic note copying (see
-"notes.rewrite.<command>" in linkgit:git-config.txt[1]) has happened, and
+"notes.rewrite.<command>" in linkgit:git-config[1]) has happened, and
 thus has access to these notes.
 
 The following command-specific comments apply:
# install githooks.txt /usr/share/doc/git-doc/githooks.txt
--- /usr/share/doc/git-doc/gitignore.txt	2016-03-21 09:24:29.000000000 -0600
+++ gitignore.txt	2016-10-03 14:24:18.000000000 -0600
@@ -38,7 +38,7 @@
  * Patterns read from `$GIT_DIR/info/exclude`.
 
  * Patterns read from the file specified by the configuration
-   variable 'core.excludesfile'.
+   variable `core.excludesFile`.
 
 Which file to place a pattern in depends on how the pattern is meant to
 be used.
@@ -56,7 +56,7 @@
  * Patterns which a user wants Git to
    ignore in all situations (e.g., backup or temporary files generated by
    the user's editor of choice) generally go into a file specified by
-   `core.excludesfile` in the user's `~/.gitconfig`. Its default value is
+   `core.excludesFile` in the user's `~/.gitconfig`. Its default value is
    $XDG_CONFIG_HOME/git/ignore. If $XDG_CONFIG_HOME is either not set or
    empty, $HOME/.config/git/ignore is used instead.
 
@@ -77,6 +77,9 @@
    Put a backslash ("`\`") in front of the first hash for patterns
    that begin with a hash.
 
+ - Trailing spaces are ignored unless they are quoted with backslash
+   ("`\`").
+
  - An optional prefix "`!`" which negates the pattern; any
    matching file excluded by a previous pattern will become
    included again. It is not possible to re-include a file if a parent
@@ -135,9 +138,6 @@
 The purpose of gitignore files is to ensure that certain files
 not tracked by Git remain untracked.
 
-To ignore uncommitted changes in a file that is already tracked,
-use 'git update-index {litdd}assume-unchanged'.
-
 To stop tracking a file that is currently tracked, use
 'git rm --cached'.
 
@@ -200,7 +200,6 @@
 SEE ALSO
 --------
 linkgit:git-rm[1],
-linkgit:git-update-index[1],
 linkgit:gitrepository-layout[5],
 linkgit:git-check-ignore[1]
 
# install gitignore.txt /usr/share/doc/git-doc/gitignore.txt
--- /usr/share/doc/git-doc/gitk.txt	2016-03-21 09:24:29.000000000 -0600
+++ gitk.txt	2016-10-03 14:24:18.000000000 -0600
@@ -27,7 +27,7 @@
 
 gitk generally only understands options with arguments in the
 'sticked' form (see linkgit:gitcli[7]) due to limitations in the
-command line parser.
+command-line parser.
 
 rev-list options and arguments
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -70,7 +70,7 @@
 
 --left-right::
 
-	Mark which side of a symmetric diff a commit is reachable
+	Mark which side of a symmetric difference a commit is reachable
 	from.  Commits from the left side are prefixed with a `<`
 	symbol and those from the right with a `>` symbol.
 
@@ -82,7 +82,7 @@
 
 --simplify-merges::
 
-	Additional option to '--full-history' to remove some needless
+	Additional option to `--full-history` to remove some needless
 	merges from the resulting history, as there are no selected
 	commits contributing to this merge.  (See "History
 	simplification" in linkgit:git-log[1] for a more detailed
@@ -99,10 +99,10 @@
 	detailed explanation.)
 
 -L<start>,<end>:<file>::
--L:<regex>:<file>::
+-L:<funcname>:<file>::
 
 	Trace the evolution of the line range given by "<start>,<end>"
-	(or the funcname regex <regex>) within the <file>.  You may
+	(or the function name regex <funcname>) within the <file>.  You may
 	not give any pathspec limiters.  This is currently limited to
 	a walk starting from a single revision, i.e., you may only
 	give zero or one positive revision arguments.
@@ -166,8 +166,14 @@
 
 Files
 -----
-Gitk creates the .gitk file in your $HOME directory to store preferences
-such as display options, font, and colors.
+User configuration and preferences are stored at:
+
+* '$XDG_CONFIG_HOME/git/gitk' if it exists, otherwise
+* '$HOME/.gitk' if it exists
+
+If neither of the above exist then '$XDG_CONFIG_HOME/git/gitk' is created and
+used by default. If '$XDG_CONFIG_HOME' is not set it defaults to
+'$HOME/.config' in all cases.
 
 History
 -------
# install gitk.txt /usr/share/doc/git-doc/gitk.txt
--- /usr/share/doc/git-doc/gitmodules.txt	2016-03-21 09:24:29.000000000 -0600
+++ gitmodules.txt	2016-10-03 14:24:18.000000000 -0600
@@ -19,7 +19,7 @@
 
 The file contains one subsection per submodule, and the subsection value
 is the name of the submodule. The name is set to the path where the
-submodule has been added unless it was customized with the '--name'
+submodule has been added unless it was customized with the `--name`
 option of 'git submodule add'. Each submodule section also contains the
 following required keys:
 
@@ -38,18 +38,15 @@
 In addition, there are a number of optional keys:
 
 submodule.<name>.update::
-	Defines what to do when the submodule is updated by the superproject.
-	If 'checkout' (the default), the new commit specified in the
-	superproject will be checked out in the submodule on a detached HEAD.
-	If 'rebase', the current branch of the submodule will be rebased onto
-	the commit specified in the superproject. If 'merge', the commit
-	specified in the superproject will be merged into the current branch
-	in the submodule.
-	If 'none', the submodule with name `$name` will not be updated
-	by default.
-
-	This config option is overridden if 'git submodule update' is given
-	the '--merge', '--rebase' or '--checkout' options.
+	Defines the default update procedure for the named submodule,
+	i.e. how the submodule is updated by "git submodule update"
+	command in the superproject. This is only used by `git
+	submodule init` to initialize the configuration variable of
+	the same name. Allowed values here are 'checkout', 'rebase',
+	'merge' or 'none'. See description of 'update' command in
+	linkgit:git-submodule[1] for their meaning. Note that the
+	'!command' form is intentionally ignored here for security
+	reasons.
 
 submodule.<name>.branch::
 	A remote branch name for tracking updates in the upstream submodule.
@@ -67,7 +64,9 @@
 submodule.<name>.ignore::
 	Defines under what circumstances "git status" and the diff family show
 	a submodule as modified. When set to "all", it will never be considered
-	modified, "dirty" will ignore all changes to the submodules work tree and
+	modified (but will nonetheless show up in the output of status and
+	commit when it has been staged), "dirty" will ignore all changes
+	to the submodules work tree and
 	takes only differences between the HEAD of the submodule and the commit
 	recorded in the superproject into account. "untracked" will additionally
 	let submodules with modified tracked files in their work tree show up.
@@ -80,6 +79,11 @@
 	"--ignore-submodule" option. The 'git submodule' commands are not
 	affected by this setting.
 
+submodule.<name>.shallow::
+	When set to true, a clone of this submodule will be performed as a
+	shallow clone unless the user explicitly asks for a non-shallow
+	clone.
+
 
 EXAMPLES
 --------
# install gitmodules.txt /usr/share/doc/git-doc/gitmodules.txt
--- /usr/share/doc/git-doc/gitremote-helpers.txt	2016-03-21 09:24:29.000000000 -0600
+++ gitremote-helpers.txt	2016-10-03 14:24:18.000000000 -0600
@@ -43,7 +43,7 @@
 it is either the name of a configured remote or a URL. The second
 argument specifies a URL; it is usually of the form
 '<transport>://<address>', but any arbitrary string is possible.
-The 'GIT_DIR' environment variable is set up for the remote helper
+The `GIT_DIR` environment variable is set up for the remote helper
 and can be used to determine where to store additional data or from
 which directory to invoke auxiliary Git commands.
 
@@ -61,10 +61,10 @@
 the first argument is '<address>', and if it is encountered in a
 configured remote, the first argument is the name of that remote.
 
-Additionally, when a configured remote has 'remote.<name>.vcs' set to
+Additionally, when a configured remote has `remote.<name>.vcs` set to
 '<transport>', Git explicitly invokes 'git remote-<transport>' with
 '<name>' as the first argument. If set, the second argument is
-'remote.<name>.url'; otherwise, the second argument is omitted.
+`remote.<name>.url`; otherwise, the second argument is omitted.
 
 INPUT FORMAT
 ------------
@@ -210,17 +210,17 @@
 'export-marks' <file>::
 	This modifies the 'export' capability, instructing Git to dump the
 	internal marks table to <file> when complete. For details,
-	read up on '--export-marks=<file>' in linkgit:git-fast-export[1].
+	read up on `--export-marks=<file>` in linkgit:git-fast-export[1].
 
 'import-marks' <file>::
 	This modifies the 'export' capability, instructing Git to load the
 	marks specified in <file> before processing any input. For details,
-	read up on '--import-marks=<file>' in linkgit:git-fast-export[1].
+	read up on `--import-marks=<file>` in linkgit:git-fast-export[1].
 
 'signed-tags'::
 	This modifies the 'export' capability, instructing Git to pass
-	'--signed-tags=verbatim' to linkgit:git-fast-export[1].  In the
-	absence of this capability, Git will use '--signed-tags=warn-strip'.
+	`--signed-tags=verbatim` to linkgit:git-fast-export[1].  In the
+	absence of this capability, Git will use `--signed-tags=warn-strip`.
 
 
 
@@ -298,7 +298,7 @@
 	is followed by a blank line). For example, the following would
 	be two batches of 'push', the first asking the remote-helper
 	to push the local ref 'master' to the remote ref 'master' and
-	the local 'HEAD' to the remote 'branch', and the second
+	the local `HEAD` to the remote 'branch', and the second
 	asking to push ref 'foo' to ref 'bar' (forced update requested
 	by the '+').
 +
@@ -408,14 +408,14 @@
 	of <n> correspond to the number of -v flags passed on the
 	command line.
 
-'option progress' \{'true'|'false'\}::
+'option progress' {'true'|'false'}::
 	Enables (or disables) progress messages displayed by the
 	transport helper during a command.
 
 'option depth' <depth>::
 	Deepens the history of a shallow repository.
 
-'option followtags' \{'true'|'false'\}::
+'option followtags' {'true'|'false'}::
 	If enabled the helper should automatically fetch annotated
 	tag objects if the object the tag points at was transferred
 	during the fetch command.  If the tag is not fetched by
@@ -423,7 +423,7 @@
 	ask for the tag specifically.  Some helpers may be able to
 	use this option to avoid a second network connection.
 
-'option dry-run' \{'true'|'false'\}:
+'option dry-run' {'true'|'false'}:
 	If true, pretend the operation completed successfully,
 	but don't actually change any repository data.	For most
 	helpers this only applies to the 'push', if supported.
@@ -434,22 +434,35 @@
 	must not rely on this option being set before
 	connect request occurs.
 
-'option check-connectivity' \{'true'|'false'\}::
+'option check-connectivity' {'true'|'false'}::
 	Request the helper to check connectivity of a clone.
 
-'option cloning \{'true'|'false'\}::
+'option force' {'true'|'false'}::
+	Request the helper to perform a force update.  Defaults to
+	'false'.
+
+'option cloning {'true'|'false'}::
 	Notify the helper this is a clone request (i.e. the current
 	repository is guaranteed empty).
 
-'option update-shallow \{'true'|'false'\}::
+'option update-shallow {'true'|'false'}::
 	Allow to extend .git/shallow if the new refs require it.
 
+'option pushcert {'true'|'false'}::
+	GPG sign pushes.
+
 SEE ALSO
 --------
 linkgit:git-remote[1]
 
+linkgit:git-remote-ext[1]
+
+linkgit:git-remote-fd[1]
+
 linkgit:git-remote-testgit[1]
 
+linkgit:git-fast-import[1]
+
 GIT
 ---
 Part of the linkgit:git[1] suite
# install gitremote-helpers.txt /usr/share/doc/git-doc/gitremote-helpers.txt
--- /usr/share/doc/git-doc/gitrepository-layout.txt	2016-03-21 09:24:29.000000000 -0600
+++ gitrepository-layout.txt	2016-10-03 14:24:18.000000000 -0600
@@ -46,6 +46,9 @@
 use with dumb transports but otherwise is OK as long as
 `objects/info/alternates` points at the object stores it
 borrows from.
++
+This directory is ignored if $GIT_COMMON_DIR is set and
+"$GIT_COMMON_DIR/objects" will be used instead.
 
 objects/[0-9a-f][0-9a-f]::
 	A newly created object is stored in its own file.
@@ -92,7 +95,8 @@
 	References are stored in subdirectories of this
 	directory.  The 'git prune' command knows to preserve
 	objects reachable from refs found in this directory and
-	its subdirectories.
+	its subdirectories. This directory is ignored if $GIT_COMMON_DIR
+	is set and "$GIT_COMMON_DIR/refs" will be used instead.
 
 refs/heads/`name`::
 	records tip-of-the-tree commit objects of branch `name`
@@ -114,7 +118,8 @@
 packed-refs::
 	records the same information as refs/heads/, refs/tags/,
 	and friends record in a more efficient way.  See
-	linkgit:git-pack-refs[1].
+	linkgit:git-pack-refs[1]. This file is ignored if $GIT_COMMON_DIR
+	is set and "$GIT_COMMON_DIR/packed-refs" will be used instead.
 
 HEAD::
 	A symref (see glossary) to the `refs/heads/` namespace
@@ -133,6 +138,11 @@
 is often called 'detached HEAD.'  See linkgit:git-checkout[1]
 for details.
 
+config::
+	Repository specific configuration file. This file is ignored
+	if $GIT_COMMON_DIR is set and "$GIT_COMMON_DIR/config" will be
+	used instead.
+
 branches::
 	A slightly deprecated way to store shorthands to be used
 	to specify a URL to 'git fetch', 'git pull' and 'git push'.
@@ -140,7 +150,10 @@
 	'name' can be given to these commands in place of
 	'repository' argument.  See the REMOTES section in
 	linkgit:git-fetch[1] for details.  This mechanism is legacy
-	and not likely to be found in modern repositories.
+	and not likely to be found in modern repositories. This
+	directory is ignored if $GIT_COMMON_DIR is set and
+	"$GIT_COMMON_DIR/branches" will be used instead.
+
 
 hooks::
 	Hooks are customization scripts used by various Git
@@ -149,15 +162,22 @@
 	default.  To enable, the `.sample` suffix has to be
 	removed from the filename by renaming.
 	Read linkgit:githooks[5] for more details about
-	each hook.
+	each hook. This directory is ignored if $GIT_COMMON_DIR is set
+	and "$GIT_COMMON_DIR/hooks" will be used instead.
+
 
 index::
 	The current index file for the repository.  It is
 	usually not found in a bare repository.
 
+sharedindex.<SHA-1>::
+	The shared index part, to be referenced by $GIT_DIR/index and
+	other temporary index files. Only valid in split index mode.
+
 info::
 	Additional information about the repository is recorded
-	in this directory.
+	in this directory. This directory is ignored if $GIT_COMMON_DIR
+	is set and "$GIT_COMMON_DIR/index" will be used instead.
 
 info/refs::
 	This file helps dumb transports discover what refs are
@@ -176,6 +196,10 @@
 	per line describes a commit and its fake parents by
 	listing their 40-byte hexadecimal object names separated
 	by a space and terminated by a newline.
++
+Note that the grafts mechanism is outdated and can lead to problems
+transferring objects between repositories; see linkgit:git-replace[1]
+for a more flexible and robust system to do the same thing.
 
 info/exclude::
 	This file, by convention among Porcelains, stores the
@@ -193,12 +217,15 @@
 	when interacting with remote repositories via 'git fetch',
 	'git pull' and 'git push' commands.  See the REMOTES section
 	in linkgit:git-fetch[1] for details.  This mechanism is legacy
-	and not likely to be found in modern repositories.
+	and not likely to be found in modern repositories. This
+	directory is ignored if $GIT_COMMON_DIR is set and
+	"$GIT_COMMON_DIR/remotes" will be used instead.
 
 logs::
-	Records of changes made to refs are stored in this
-	directory.  See linkgit:git-update-ref[1]
-	for more information.
+	Records of changes made to refs are stored in this directory.
+	See linkgit:git-update-ref[1] for more information. This
+	directory is ignored if $GIT_COMMON_DIR is set and
+	"$GIT_COMMON_DIR/logs" will be used instead.
 
 logs/refs/heads/`name`::
 	Records all changes made to the branch tip named `name`.
@@ -209,11 +236,46 @@
 shallow::
 	This is similar to `info/grafts` but is internally used
 	and maintained by shallow clone mechanism.  See `--depth`
-	option to linkgit:git-clone[1] and linkgit:git-fetch[1].
+	option to linkgit:git-clone[1] and linkgit:git-fetch[1]. This
+	file is ignored if $GIT_COMMON_DIR is set and
+	"$GIT_COMMON_DIR/shallow" will be used instead.
+
+commondir::
+	If this file exists, $GIT_COMMON_DIR (see linkgit:git[1]) will
+	be set to the path specified in this file if it is not
+	explicitly set. If the specified path is relative, it is
+	relative to $GIT_DIR. The repository with commondir is
+	incomplete without the repository pointed by "commondir".
 
 modules::
 	Contains the git-repositories of the submodules.
 
+worktrees::
+	Contains administrative data for linked
+	working trees. Each subdirectory contains the working tree-related
+	part of a linked working tree. This directory is ignored if
+	$GIT_COMMON_DIR is set, in which case
+	"$GIT_COMMON_DIR/worktrees" will be used instead.
+
+worktrees/<id>/gitdir::
+	A text file containing the absolute path back to the .git file
+	that points to here. This is used to check if the linked
+	repository has been manually removed and there is no need to
+	keep this directory any more. The mtime of this file should be
+	updated every time the linked repository is accessed.
+
+worktrees/<id>/locked::
+	If this file exists, the linked working tree may be on a
+	portable device and not available. The presence of this file
+	prevents `worktrees/<id>` from being pruned either automatically
+	or manually by `git worktree prune`. The file may contain a string
+	explaining why the repository is locked.
+
+worktrees/<id>/link::
+	If this file exists, it is a hard link to the linked .git
+	file. It is used to detect if the linked repository is
+	manually removed.
+
 SEE ALSO
 --------
 linkgit:git-init[1],
# install gitrepository-layout.txt /usr/share/doc/git-doc/gitrepository-layout.txt
--- /usr/share/doc/git-doc/gitrevisions.txt	2016-03-21 09:24:29.000000000 -0600
+++ gitrevisions.txt	2016-10-03 14:24:18.000000000 -0600
@@ -1,5 +1,5 @@
 gitrevisions(7)
-================
+===============
 
 NAME
 ----
@@ -15,9 +15,9 @@
 
 Many Git commands take revision parameters as arguments. Depending on
 the command, they denote a specific commit or, for commands which
-walk the revision graph (such as linkgit:git-log[1]), all commits which can
-be reached from that commit. In the latter case one can also specify a
-range of revisions explicitly.
+walk the revision graph (such as linkgit:git-log[1]), all commits which are
+reachable from that commit. For commands that walk the revision graph one can
+also specify a range of revisions explicitly.
 
 In addition, some Git commands (such as linkgit:git-show[1]) also take
 revision parameters which denote other objects than commits, e.g. blobs
# install gitrevisions.txt /usr/share/doc/git-doc/gitrevisions.txt
--- /usr/share/doc/git-doc/gittutorial-2.txt	2016-03-21 09:24:29.000000000 -0600
+++ gittutorial-2.txt	2016-10-03 14:24:18.000000000 -0600
@@ -368,17 +368,18 @@
 
 ------------------------------------------------
 $ git status
-# On branch master
-# Changes to be committed:
-#   (use "git reset HEAD <file>..." to unstage)
-#
-#       new file: closing.txt
-#
-# Changes not staged for commit:
-#   (use "git add <file>..." to update what will be committed)
-#
-#       modified: file.txt
-#
+On branch master
+Changes to be committed:
+  (use "git reset HEAD <file>..." to unstage)
+
+	new file:   closing.txt
+
+Changes not staged for commit:
+  (use "git add <file>..." to update what will be committed)
+  (use "git checkout -- <file>..." to discard changes in working directory)
+
+	modified:   file.txt
+
 ------------------------------------------------
 
 Since the current state of closing.txt is cached in the index file,
@@ -403,7 +404,7 @@
 
 At this point you should know everything necessary to read the man
 pages for any of the git commands; one good place to start would be
-with the commands mentioned in link:everyday.html[Everyday Git].  You
+with the commands mentioned in linkgit:giteveryday[7].  You
 should be able to find any unknown jargon in linkgit:gitglossary[7].
 
 The link:user-manual.html[Git User's Manual] provides a more
@@ -427,7 +428,7 @@
 linkgit:gitcore-tutorial[7],
 linkgit:gitglossary[7],
 linkgit:git-help[1],
-link:everyday.html[Everyday Git],
+linkgit:giteveryday[7],
 link:user-manual.html[The Git User's Manual]
 
 GIT
# install gittutorial-2.txt /usr/share/doc/git-doc/gittutorial-2.txt
--- /usr/share/doc/git-doc/gittutorial.txt	2016-03-21 09:24:29.000000000 -0600
+++ gittutorial.txt	2016-10-03 14:24:18.000000000 -0600
@@ -3,7 +3,7 @@
 
 NAME
 ----
-gittutorial - A tutorial introduction to Git (for version 1.5.1 or newer)
+gittutorial - A tutorial introduction to Git
 
 SYNOPSIS
 --------
@@ -107,14 +107,15 @@
 
 ------------------------------------------------
 $ git status
-# On branch master
-# Changes to be committed:
-#   (use "git reset HEAD <file>..." to unstage)
-#
-#	modified:   file1
-#	modified:   file2
-#	modified:   file3
-#
+On branch master
+Changes to be committed:
+Your branch is up-to-date with 'origin/master'.
+  (use "git reset HEAD <file>..." to unstage)
+
+	modified:   file1
+	modified:   file2
+	modified:   file3
+
 ------------------------------------------------
 
 If you need to make any further adjustments, do so now, and then add any
@@ -450,7 +451,7 @@
 bob$ git clone alice.org:/home/alice/project myrepo
 -------------------------------------
 
-Alternatively, Git has a native protocol, or can use rsync or http;
+Alternatively, Git has a native protocol, or can use http;
 see linkgit:git-pull[1] for details.
 
 Git can also be used in a CVS-like mode, with a central repository
@@ -656,7 +657,7 @@
   * linkgit:gitworkflows[7]: Gives an overview of recommended
     workflows.
 
-  * link:everyday.html[Everyday Git with 20 Commands Or So]
+  * linkgit:giteveryday[7]: Everyday Git with 20 Commands Or So.
 
   * linkgit:gitcvs-migration[7]: Git for CVS users.
 
@@ -668,7 +669,7 @@
 linkgit:gitglossary[7],
 linkgit:git-help[1],
 linkgit:gitworkflows[7],
-link:everyday.html[Everyday Git],
+linkgit:giteveryday[7],
 link:user-manual.html[The Git User's Manual]
 
 GIT
# install gittutorial.txt /usr/share/doc/git-doc/gittutorial.txt
--- /usr/share/doc/git-doc/gitweb.conf.txt	2016-03-21 09:24:29.000000000 -0600
+++ gitweb.conf.txt	2016-10-03 14:24:18.000000000 -0600
@@ -376,7 +376,7 @@
 	Name of your site or organization, to appear in page titles.  Set it
 	to something descriptive for clearer bookmarks etc.  If this variable
 	is not set or is, then gitweb uses the value of the `SERVER_NAME`
-	CGI environment variable, setting site name to "$SERVER_NAME Git",
+	`CGI` environment variable, setting site name to "$SERVER_NAME Git",
 	or "Untitled Git" if this variable is not set (e.g. if running gitweb
 	as standalone script).
 +
@@ -482,12 +482,12 @@
 composed from `@git_base_url_list` elements and project name.
 +
 You can setup one single value (single entry/item in this list) at build
-time by setting the `GITWEB_BASE_URL` built-time configuration variable.
+time by setting the `GITWEB_BASE_URL` build-time configuration variable.
 By default it is set to (), i.e. an empty list.  This means that gitweb
 would not try to create project URL (to fetch) from project name.
 
 $projects_list_group_categories::
-	Whether to enables the grouping of projects by category on the project
+	Whether to enable the grouping of projects by category on the project
 	list page. The category of a project is determined by the
 	`$GIT_DIR/category` file or the `gitweb.category` variable in each
 	repository's configuration.  Disabled by default (set to 0).
@@ -706,7 +706,7 @@
 	I/O.  Enabled by default.
 +
 This feature can be configured on a per-repository basis via
-repository's `gitweb.showsizes` configuration variable (boolean).
+repository's `gitweb.showSizes` configuration variable (boolean).
 
 patches::
 	Enable and configure "patches" view, which displays list of commits in email
@@ -904,7 +904,7 @@
 	$feature{'snapshot'}{'override'} = 1;
 
 If you allow overriding for the snapshot feature, you can specify which
-snapshot formats are globally disabled. You can also add any command line
+snapshot formats are globally disabled. You can also add any command-line
 options you want (such as setting the compression level). For instance, you
 can disable Zip compressed snapshots and set *gzip*(1) to run at level 6 by
 adding the following lines to your gitweb configuration file:
# install gitweb.conf.txt /usr/share/doc/git-doc/gitweb.conf.txt
--- /usr/share/doc/git-doc/gitweb.txt	2016-03-21 09:24:29.000000000 -0600
+++ gitweb.txt	2016-10-03 14:24:18.000000000 -0600
@@ -84,7 +84,7 @@
 
 * Fields use modified URI encoding, defined in RFC 3986, section 2.1
 (Percent-Encoding), or rather "Query string encoding" (see
-link:http://en.wikipedia.org/wiki/Query_string#URL_encoding[]), the difference
+http://en.wikipedia.org/wiki/Query_string#URL_encoding[]), the difference
 being that SP (" ") can be encoded as "{plus}" (and therefore "{plus}" has to be
 also percent-encoded).
 +
@@ -206,8 +206,8 @@
 Per-repository gitweb configuration
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 You can configure individual repositories shown in gitweb by creating file
-in the 'GIT_DIR' of Git repository, or by setting some repo configuration
-variable (in 'GIT_DIR/config', see linkgit:git-config[1]).
+in the `GIT_DIR` of Git repository, or by setting some repo configuration
+variable (in `GIT_DIR/config`, see linkgit:git-config[1]).
 
 You can use the following files in repository:
 
# install gitweb.txt /usr/share/doc/git-doc/gitweb.txt
--- /usr/share/doc/git-doc/glossary-content.txt	2016-03-21 09:24:29.000000000 -0600
+++ glossary-content.txt	2016-10-03 14:24:18.000000000 -0600
@@ -1,7 +1,7 @@
 [[def_alternate_object_database]]alternate object database::
 	Via the alternates mechanism, a <<def_repository,repository>>
 	can inherit part of its <<def_object_database,object database>>
-	from another object database, which is called "alternate".
+	from another object database, which is called an "alternate".
 
 [[def_bare_repository]]bare repository::
 	A bare repository is normally an appropriately
@@ -145,7 +145,7 @@
 	A fast-forward is a special type of <<def_merge,merge>> where you have a
 	<<def_revision,revision>> and you are "merging" another
 	<<def_branch,branch>>'s changes that happen to be a descendant of what
-	you have. In such these cases, you do not make a new <<def_merge,merge>>
+	you have. In such a case, you do not make a new <<def_merge,merge>>
 	<<def_commit,commit>> but instead just update to his
 	revision. This will happen frequently on a
 	<<def_remote_tracking_branch,remote-tracking branch>> of a remote
@@ -176,6 +176,10 @@
 	you can make Git pretend the set of <<def_parent,parents>> a <<def_commit,commit>> has
 	is different from what was recorded when the commit was
 	created. Configured via the `.git/info/grafts` file.
++
+Note that the grafts mechanism is outdated and can lead to problems
+transferring objects between repositories; see linkgit:git-replace[1]
+for a more flexible and robust system to do the same thing.
 
 [[def_hash]]hash::
 	In Git's context, synonym for <<def_object_name,object name>>.
@@ -325,7 +329,7 @@
 signature" letters (which optionally is terminated by another colon `:`),
 and the remainder is the pattern to match against the path.
 The "magic signature" consists of ASCII symbols that are neither
-alphanumeric, glob, regex special charaters nor colon.
+alphanumeric, glob, regex special characters nor colon.
 The optional colon that terminates the "magic signature" can be
 omitted if the pattern begins with a character that does not belong to
 "magic signature" symbol set and is not a colon.
@@ -407,6 +411,28 @@
 	core Git. Porcelains expose more of a <<def_SCM,SCM>>
 	interface than the <<def_plumbing,plumbing>>.
 
+[[def_per_worktree_ref]]per-worktree ref::
+	Refs that are per-<<def_working_tree,worktree>>, rather than
+	global.  This is presently only <<def_HEAD,HEAD>> and any refs
+	that start with `refs/bisect/`, but might later include other
+	unusual refs.
+
+[[def_pseudoref]]pseudoref::
+	Pseudorefs are a class of files under `$GIT_DIR` which behave
+	like refs for the purposes of rev-parse, but which are treated
+	specially by git.  Pseudorefs both have names that are all-caps,
+	and always start with a line consisting of a
+	<<def_SHA1,SHA-1>> followed by whitespace.  So, HEAD is not a
+	pseudoref, because it is sometimes a symbolic ref.  They might
+	optionally contain some additional data.  `MERGE_HEAD` and
+	`CHERRY_PICK_HEAD` are examples.  Unlike
+	<<def_per_worktree_ref,per-worktree refs>>, these files cannot
+	be symbolic refs, and never have reflogs.  They also cannot be
+	updated through the normal ref update machinery.  Instead,
+	they are updated by directly writing to the files.  However,
+	they can be read as if they were refs, so `git rev-parse
+	MERGE_HEAD` will work.
+
 [[def_pull]]pull::
 	Pulling a <<def_branch,branch>> means to <<def_fetch,fetch>> it and
 	<<def_merge,merge>> it.  See also linkgit:git-pull[1].
@@ -465,6 +491,11 @@
 	<<def_push,push>> to describe the mapping between remote
 	<<def_ref,ref>> and local ref.
 
+[[def_remote]]remote repository::
+	A <<def_repository,repository>> which is used to track the same
+	project but resides somewhere else. To communicate with remotes,
+	see <<def_fetch,fetch>> or <<def_push,push>>.
+
 [[def_remote_tracking_branch]]remote-tracking branch::
 	A <<def_ref,ref>> that is used to follow changes from another
 	<<def_repository,repository>>. It typically looks like
@@ -500,6 +531,11 @@
 	"Secure Hash Algorithm 1"; a cryptographic hash function.
 	In the context of Git used as a synonym for <<def_object_name,object name>>.
 
+[[def_shallow_clone]]shallow clone::
+	Mostly a synonym to <<def_shallow_repository,shallow repository>>
+	but the phrase makes it more explicit that it was created by
+	running `git clone --depth=...` command.
+
 [[def_shallow_repository]]shallow repository::
 	A shallow <<def_repository,repository>> has an incomplete
 	history some of whose <<def_commit,commits>> have <<def_parent,parents>> cauterized away (in other
@@ -511,6 +547,17 @@
 	is created by giving the `--depth` option to linkgit:git-clone[1], and
 	its history can be later deepened with linkgit:git-fetch[1].
 
+[[def_submodule]]submodule::
+	A <<def_repository,repository>> that holds the history of a
+	separate project inside another repository (the latter of
+	which is called <<def_superproject, superproject>>).
+
+[[def_superproject]]superproject::
+	A <<def_repository,repository>> that references repositories
+	of other projects in its working tree as <<def_submodule,submodules>>.
+	The superproject knows about the names of (but does not hold
+	copies of) commit objects of the contained submodules.
+
 [[def_symref]]symref::
 	Symbolic reference: instead of containing the <<def_SHA1,SHA-1>>
 	id itself, it is of the format 'ref: refs/some/thing' and when
# install glossary-content.txt /usr/share/doc/git-doc/glossary-content.txt
--- /usr/share/doc/git-doc/howto-index.txt	2016-03-21 09:24:29.000000000 -0600
+++ howto-index.txt	2016-10-15 00:44:26.908075418 -0600
@@ -4,6 +4,12 @@
 Here is a collection of mailing list postings made by various
 people describing how they use Git in their workflow.
 
+* link:howto/keep-canonical-history-correct.html[keep-canonical-history-correct] by Junio C Hamano <gitster@pobox.com>
+
+This how-to explains a method for keeping a
+project's history correct when using git pull.
+
+
 * link:howto/maintain-git.html[maintain-git] by Junio C Hamano <gitster@pobox.com>
 
 Imagine that Git development is racing along as usual, when our friendly
# install howto-index.txt /usr/share/doc/git-doc/howto-index.txt
--- /usr/share/doc/git-doc/i18n.txt	2016-03-21 09:24:29.000000000 -0600
+++ i18n.txt	2016-10-03 14:24:18.000000000 -0600
@@ -1,18 +1,31 @@
-At the core level, Git is character encoding agnostic.
-
- - The pathnames recorded in the index and in the tree objects
-   are treated as uninterpreted sequences of non-NUL bytes.
-   What readdir(2) returns are what are recorded and compared
-   with the data Git keeps track of, which in turn are expected
-   to be what lstat(2) and creat(2) accepts.  There is no such
-   thing as pathname encoding translation.
+Git is to some extent character encoding agnostic.
 
  - The contents of the blob objects are uninterpreted sequences
    of bytes.  There is no encoding translation at the core
    level.
 
- - The commit log messages are uninterpreted sequences of non-NUL
-   bytes.
+ - Path names are encoded in UTF-8 normalization form C. This
+   applies to tree objects, the index file, ref names, as well as
+   path names in command line arguments, environment variables
+   and config files (`.git/config` (see linkgit:git-config[1]),
+   linkgit:gitignore[5], linkgit:gitattributes[5] and
+   linkgit:gitmodules[5]).
++
+Note that Git at the core level treats path names simply as
+sequences of non-NUL bytes, there are no path name encoding
+conversions (except on Mac and Windows). Therefore, using
+non-ASCII path names will mostly work even on platforms and file
+systems that use legacy extended ASCII encodings. However,
+repositories created on such systems will not work properly on
+UTF-8-based systems (e.g. Linux, Mac, Windows) and vice versa.
+Additionally, many Git-based tools simply assume path names to
+be UTF-8 and will fail to display other encodings correctly.
+
+ - Commit log messages are typically encoded in UTF-8, but other
+   extended ASCII encodings are also supported. This includes
+   ISO-8859-x, CP125x and many others, but _not_ UTF-16/32,
+   EBCDIC and CJK multi-byte encodings (GBK, Shift-JIS, Big5,
+   EUC-x, CP9xx etc.).
 
 Although we encourage that the commit log messages are encoded
 in UTF-8, both the core and Git Porcelain are designed not to
# install i18n.txt /usr/share/doc/git-doc/i18n.txt
--- /usr/share/doc/git-doc/line-range-format.txt	2016-03-21 09:24:29.000000000 -0600
+++ line-range-format.txt	2016-10-03 14:24:18.000000000 -0600
@@ -22,8 +22,9 @@
 of lines before or after the line given by <start>.
 
 +
-If ``:<regex>'' is given in place of <start> and <end>, it denotes the range
-from the first funcname line that matches <regex>, up to the next
-funcname line. ``:<regex>'' searches from the end of the previous `-L` range,
-if any, otherwise from the start of file.
-``^:<regex>'' searches from the start of file.
+If ``:<funcname>'' is given in place of <start> and <end>, it is a
+regular expression that denotes the range from the first funcname line
+that matches <funcname>, up to the next funcname line. ``:<funcname>''
+searches from the end of the previous `-L` range, if any, otherwise
+from the start of file. ``^:<funcname>'' searches from the start of
+file.
# install line-range-format.txt /usr/share/doc/git-doc/line-range-format.txt
--- /usr/share/doc/git-doc/merge-config.txt	2016-03-21 09:24:29.000000000 -0600
+++ merge-config.txt	2016-10-03 14:24:18.000000000 -0600
@@ -1,4 +1,4 @@
-merge.conflictstyle::
+merge.conflictStyle::
 	Specify the style in which conflicted hunks are written out to
 	working tree files upon merge.  The default is "merge", which
 	shows a `<<<<<<<` conflict marker, changes made by one side,
@@ -26,11 +26,7 @@
 	allowed (equivalent to giving the `--ff-only` option from the
 	command line).
 
-merge.log::
-	In addition to branch names, populate the log message with at
-	most the specified number of one-line descriptions from the
-	actual commits that are being merged.  Defaults to false, and
-	true is a synonym for 20.
+include::fmt-merge-msg-config.txt[]
 
 merge.renameLimit::
 	The number of files to consider when performing rename detection
@@ -65,7 +61,7 @@
 	message if conflicts were detected. Level 1 outputs only
 	conflicts, 2 outputs conflicts and file changes.  Level 5 and
 	above outputs debugging information.  The default is level 2.
-	Can be overridden by the 'GIT_MERGE_VERBOSITY' environment variable.
+	Can be overridden by the `GIT_MERGE_VERBOSITY` environment variable.
 
 merge.<driver>.name::
 	Defines a human-readable name for a custom low-level
# install merge-config.txt /usr/share/doc/git-doc/merge-config.txt
--- /usr/share/doc/git-doc/merge-options.txt	2016-03-21 09:24:29.000000000 -0600
+++ merge-options.txt	2016-10-03 14:24:18.000000000 -0600
@@ -63,14 +63,13 @@
 
 --squash::
 --no-squash::
-	Produce the working tree and index state as if a real
-	merge happened (except for the merge information),
-	but do not actually make a commit or
-	move the `HEAD`, nor record `$GIT_DIR/MERGE_HEAD` to
-	cause the next `git commit` command to create a merge
-	commit.  This allows you to create a single commit on
-	top of the current branch whose effect is the same as
-	merging another branch (or more in case of an octopus).
+	Produce the working tree and index state as if a real merge
+	happened (except for the merge information), but do not actually
+	make a commit, move the `HEAD`, or record `$GIT_DIR/MERGE_HEAD`
+	(to cause the next `git commit` command to create a merge
+	commit).  This allows you to create a single commit on top of
+	the current branch whose effect is the same as merging another
+	branch (or more in case of an octopus).
 +
 With --no-squash perform the merge and commit the result. This
 option can be used to override --squash.
@@ -90,8 +89,11 @@
 
 --verify-signatures::
 --no-verify-signatures::
-	Verify that the commits being merged have good and trusted GPG signatures
-	and abort the merge in case they do not.
+	Verify that the tip commit of the side branch being merged is
+	signed with a valid key, i.e. a key that has a valid uid: in the
+	default trust model, this means the signing key has been signed by
+	a trusted key.  If the tip commit of the side branch is not signed
+	with a valid key, the merge is aborted.
 
 --summary::
 --no-summary::
@@ -115,3 +117,11 @@
 	reporting.
 
 endif::git-pull[]
+
+--allow-unrelated-histories::
+	By default, `git merge` command refuses to merge histories
+	that do not share a common ancestor.  This option can be
+	used to override this safety when merging histories of two
+	projects that started their lives independently. As that is
+	a very rare occasion, no configuration variable to enable
+	this by default exists and will not be added.
# install merge-options.txt /usr/share/doc/git-doc/merge-options.txt
--- /usr/share/doc/git-doc/merge-strategies.txt	2016-03-21 09:24:29.000000000 -0600
+++ merge-strategies.txt	2016-10-03 14:24:18.000000000 -0600
@@ -1,10 +1,10 @@
 MERGE STRATEGIES
 ----------------
 
-The merge mechanism ('git-merge' and 'git-pull' commands) allows the
+The merge mechanism (`git merge` and `git pull` commands) allows the
 backend 'merge strategies' to be chosen with `-s` option.  Some strategies
 can also take their own options, which can be passed by giving `-X<option>`
-arguments to 'git-merge' and/or 'git-pull'.
+arguments to `git merge` and/or `git pull`.
 
 resolve::
 	This can only resolve two heads (i.e. the current branch
@@ -20,7 +20,7 @@
 	merged tree of the common ancestors and uses that as
 	the reference tree for the 3-way merge.  This has been
 	reported to result in fewer merge conflicts without
-	causing mis-merges by tests done on actual merge commits
+	causing mismerges by tests done on actual merge commits
 	taken from Linux 2.6 kernel development history.
 	Additionally this can detect and handle merges involving
 	renames.  This is the default merge strategy when
@@ -81,9 +81,17 @@
 	Disables the `renormalize` option.  This overrides the
 	`merge.renormalize` configuration variable.
 
+no-renames;;
+	Turn off rename detection.
+	See also linkgit:git-diff[1] `--no-renames`.
+
+find-renames[=<n>];;
+	Turn on rename detection, optionally setting the similarity
+	threshold.  This is the default.
+	See also linkgit:git-diff[1] `--find-renames`.
+
 rename-threshold=<n>;;
-	Controls the similarity threshold used for rename detection.
-	See also linkgit:git-diff[1] `-M`.
+	Deprecated synonym for `find-renames=<n>`.
 
 subtree[=<path>];;
 	This option is a more advanced form of 'subtree' strategy, where
# install merge-strategies.txt /usr/share/doc/git-doc/merge-strategies.txt
--- /usr/share/doc/git-doc/mergetools-diff.txt	2016-03-21 09:24:29.000000000 -0600
+++ mergetools-diff.txt	2016-10-15 00:40:38.540071130 -0600
@@ -1,4 +1,5 @@
 * araxis
+* bc
 * bc3
 * codecompare
 * deltawalker
@@ -6,8 +7,10 @@
 * diffuse
 * ecmerge
 * emerge
+* examdiff
 * gvimdiff
 * gvimdiff2
+* gvimdiff3
 * kdiff3
 * kompare
 * meld
@@ -16,4 +19,6 @@
 * tkdiff
 * vimdiff
 * vimdiff2
+* vimdiff3
+* winmerge
 * xxdiff
# install mergetools-diff.txt /usr/share/doc/git-doc/mergetools-diff.txt
--- /usr/share/doc/git-doc/mergetools-merge.txt	2016-03-21 09:24:29.000000000 -0600
+++ mergetools-merge.txt	2016-10-15 00:40:38.568071131 -0600
@@ -1,4 +1,5 @@
 * araxis
+* bc
 * bc3
 * codecompare
 * deltawalker
@@ -6,8 +7,10 @@
 * diffuse
 * ecmerge
 * emerge
+* examdiff
 * gvimdiff
 * gvimdiff2
+* gvimdiff3
 * kdiff3
 * meld
 * opendiff
@@ -16,4 +19,6 @@
 * tortoisemerge
 * vimdiff
 * vimdiff2
+* vimdiff3
+* winmerge
 * xxdiff
# install mergetools-merge.txt /usr/share/doc/git-doc/mergetools-merge.txt
--- /usr/share/doc/git-doc/pretty-formats.txt	2016-03-21 09:24:29.000000000 -0600
+++ pretty-formats.txt	2016-10-03 14:24:18.000000000 -0600
@@ -78,8 +78,11 @@
 stored in the commit object.  Notably, the SHA-1s are
 displayed in full, regardless of whether --abbrev or
 --no-abbrev are used, and 'parents' information show the
-true parent commits, without taking grafts nor history
-simplification into account.
+true parent commits, without taking grafts or history
+simplification into account. Note that this format affects the way
+commits are displayed, but not the way the diff is shown e.g. with
+`git log --raw`. To get full object names in a raw diff format,
+use `--no-abbrev`.
 
 * 'format:<string>'
 +
@@ -95,7 +98,7 @@
 The author of fe6e0ee was Junio C Hamano, 23 hours ago
 The title was >>t4119: test autocomputing -p<n> for traditional diff input.<<
 
---------
+-------
 +
 The placeholders are:
 
@@ -115,32 +118,43 @@
 - '%aD': author date, RFC2822 style
 - '%ar': author date, relative
 - '%at': author date, UNIX timestamp
-- '%ai': author date, ISO 8601 format
+- '%ai': author date, ISO 8601-like format
+- '%aI': author date, strict ISO 8601 format
 - '%cn': committer name
 - '%cN': committer name (respecting .mailmap, see
   linkgit:git-shortlog[1] or linkgit:git-blame[1])
 - '%ce': committer email
 - '%cE': committer email (respecting .mailmap, see
   linkgit:git-shortlog[1] or linkgit:git-blame[1])
-- '%cd': committer date
+- '%cd': committer date (format respects --date= option)
 - '%cD': committer date, RFC2822 style
 - '%cr': committer date, relative
 - '%ct': committer date, UNIX timestamp
-- '%ci': committer date, ISO 8601 format
+- '%ci': committer date, ISO 8601-like format
+- '%cI': committer date, strict ISO 8601 format
 - '%d': ref names, like the --decorate option of linkgit:git-log[1]
+- '%D': ref names without the " (", ")" wrapping.
 - '%e': encoding
 - '%s': subject
 - '%f': sanitized subject line, suitable for a filename
 - '%b': body
 - '%B': raw body (unwrapped subject and body)
+ifndef::git-rev-list[]
 - '%N': commit notes
+endif::git-rev-list[]
 - '%GG': raw verification message from GPG for a signed commit
-- '%G?': show "G" for a Good signature, "B" for a Bad signature, "U" for a good,
-  untrusted signature and "N" for no signature
+- '%G?': show "G" for a good (valid) signature, "B" for a bad signature,
+  "U" for a good signature with unknown validity and "N" for no signature
 - '%GS': show the name of the signer for a signed commit
 - '%GK': show the key used to sign a signed commit
-- '%gD': reflog selector, e.g., `refs/stash@{1}`
-- '%gd': shortened reflog selector, e.g., `stash@{1}`
+- '%gD': reflog selector, e.g., `refs/stash@{1}` or
+  `refs/stash@{2 minutes ago`}; the format follows the rules described
+  for the `-g` option. The portion before the `@` is the refname as
+  given on the command line (so `git log -g refs/heads/master` would
+  yield `refs/heads/master@{0}`).
+- '%gd': shortened reflog selector; same as `%gD`, but the refname
+  portion is shortened for human readability (so `refs/heads/master`
+  becomes just `master`).
 - '%gn': reflog identity name
 - '%gN': reflog identity name (respecting .mailmap, see
   linkgit:git-shortlog[1] or linkgit:git-blame[1])
@@ -158,7 +172,7 @@
   respecting the `auto` settings of the former if we are going to a
   terminal). `auto` alone (i.e. `%C(auto)`) will turn on auto coloring
   on the next placeholders until the color is switched again.
-- '%m': left, right or boundary mark
+- '%m': left (`<`), right (`>`) or boundary (`-`) mark
 - '%n': newline
 - '%%': a raw '%'
 - '%x00': print a byte from a hex code
@@ -182,8 +196,9 @@
 NOTE: Some placeholders may depend on other options given to the
 revision traversal engine. For example, the `%g*` reflog options will
 insert an empty string unless we are traversing reflog entries (e.g., by
-`git log -g`). The `%d` placeholder will use the "short" decoration
-format if `--decorate` was not already provided on the command line.
+`git log -g`). The `%d` and `%D` placeholders will use the "short"
+decoration format if `--decorate` was not already provided on the command
+line.
 
 If you add a `+` (plus sign) after '%' of a placeholder, a line-feed
 is inserted immediately before the expansion if and only if the
# install pretty-formats.txt /usr/share/doc/git-doc/pretty-formats.txt
--- /usr/share/doc/git-doc/pretty-options.txt	2016-03-21 09:24:29.000000000 -0600
+++ pretty-options.txt	2016-10-03 14:24:18.000000000 -0600
@@ -3,9 +3,13 @@
 
 	Pretty-print the contents of the commit logs in a given format,
 	where '<format>' can be one of 'oneline', 'short', 'medium',
-	'full', 'fuller', 'email', 'raw' and 'format:<string>'.  See
-	the "PRETTY FORMATS" section for some additional details for each
-	format.  When omitted, the format defaults to 'medium'.
+	'full', 'fuller', 'email', 'raw', 'format:<string>'
+	and 'tformat:<string>'.  When '<format>' is none of the above,
+	and has '%placeholder' in it, it acts as if
+	'--pretty=tformat:<format>' were given.
++
+See the "PRETTY FORMATS" section for some additional details for each
+format.  When '=<format>' part is omitted, it defaults to 'medium'.
 +
 Note: you can specify the default pretty format in the repository
 configuration (see linkgit:git-config[1]).
@@ -22,7 +26,7 @@
 --no-abbrev-commit::
 	Show the full 40-byte hexadecimal commit object name. This negates
 	`--abbrev-commit` and those options which imply it such as
-	"--oneline". It also overrides the 'log.abbrevCommit' variable.
+	"--oneline". It also overrides the `log.abbrevCommit` variable.
 
 --oneline::
 	This is a shorthand for "--pretty=oneline --abbrev-commit"
@@ -33,22 +37,41 @@
 	in their encoding header; this option can be used to tell the
 	command to re-code the commit log message in the encoding
 	preferred by the user.  For non plumbing commands this
-	defaults to UTF-8.
+	defaults to UTF-8. Note that if an object claims to be encoded
+	in `X` and we are outputting in `X`, we will output the object
+	verbatim; this means that invalid sequences in the original
+	commit may be copied to the output.
+
+--expand-tabs=<n>::
+--expand-tabs::
+--no-expand-tabs::
+	Perform a tab expansion (replace each tab with enough spaces
+	to fill to the next display column that is multiple of '<n>')
+	in the log message before showing it in the output.
+	`--expand-tabs` is a short-hand for `--expand-tabs=8`, and
+	`--no-expand-tabs` is a short-hand for `--expand-tabs=0`,
+	which disables tab expansion.
++
+By default, tabs are expanded in pretty formats that indent the log
+message by 4 spaces (i.e.  'medium', which is the default, 'full',
+and 'fuller').
 
---notes[=<ref>]::
+ifndef::git-rev-list[]
+--notes[=<treeish>]::
 	Show the notes (see linkgit:git-notes[1]) that annotate the
 	commit, when showing the commit log message.  This is the default
 	for `git log`, `git show` and `git whatchanged` commands when
-	there is no `--pretty`, `--format` nor `--oneline` option given
+	there is no `--pretty`, `--format`, or `--oneline` option given
 	on the command line.
 +
 By default, the notes shown are from the notes refs listed in the
-'core.notesRef' and 'notes.displayRef' variables (or corresponding
+`core.notesRef` and `notes.displayRef` variables (or corresponding
 environment overrides). See linkgit:git-config[1] for more details.
 +
-With an optional '<ref>' argument, show this notes ref instead of the
-default notes ref(s). The ref is taken to be in `refs/notes/` if it
-is not qualified.
+With an optional '<treeish>' argument, use the treeish to find the notes
+to display.  The treeish can specify the full refname when it begins
+with `refs/notes/`; when it begins with `notes/`, `refs/` and otherwise
+`refs/notes/` is prefixed to form a full name of the ref.
 +
 Multiple --notes options can be combined to control which notes are
 being displayed. Examples: "--notes=foo" will show only notes from
@@ -62,10 +85,11 @@
 	"--notes --notes=foo --no-notes --notes=bar" will only show notes
 	from "refs/notes/bar".
 
---show-notes[=<ref>]::
+--show-notes[=<treeish>]::
 --[no-]standard-notes::
 	These options are deprecated. Use the above --notes/--no-notes
 	options instead.
+endif::git-rev-list[]
 
 --show-signature::
 	Check the validity of a signed commit object by passing the signature
# install pretty-options.txt /usr/share/doc/git-doc/pretty-options.txt
--- /usr/share/doc/git-doc/pull-fetch-param.txt	2016-03-21 09:24:29.000000000 -0600
+++ pull-fetch-param.txt	2016-10-03 14:24:18.000000000 -0600
@@ -12,9 +12,23 @@
 endif::git-pull[]
 
 <refspec>::
-	The format of a <refspec> parameter is an optional plus
-	`+`, followed by the source ref <src>, followed
-	by a colon `:`, followed by the destination ref <dst>.
+	Specifies which refs to fetch and which local refs to update.
+	When no <refspec>s appear on the command line, the refs to fetch
+	are read from `remote.<repository>.fetch` variables instead
+ifndef::git-pull[]
+	(see <<CRTB,CONFIGURED REMOTE-TRACKING BRANCHES>> below).
+endif::git-pull[]
+ifdef::git-pull[]
+	(see linkgit:git-fetch[1]).
+endif::git-pull[]
++
+The format of a <refspec> parameter is an optional plus
+`+`, followed by the source ref <src>, followed
+by a colon `:`, followed by the destination ref <dst>.
+The colon can be omitted when <dst> is empty.
++
+`tag <tag>` means the same as `refs/tags/<tag>:refs/tags/<tag>`;
+it requests fetching everything up to the given tag.
 +
 The remote ref that matches <src>
 is fetched, and if <dst> is not empty string, the local
@@ -24,55 +38,34 @@
 update.
 +
 [NOTE]
-If the remote branch from which you want to pull is
-modified in non-linear ways such as being rewound and
-rebased frequently, then a pull will attempt a merge with
-an older version of itself, likely conflict, and fail.
-It is under these conditions that you would want to use
-the `+` sign to indicate non-fast-forward updates will
-be needed.  There is currently no easy way to determine
-or declare that a branch will be made available in a
-repository with this behavior; the pulling user simply
+When the remote branch you want to fetch is known to
+be rewound and rebased regularly, it is expected that
+its new tip will not be descendant of its previous tip
+(as stored in your remote-tracking branch the last time
+you fetched).  You would want
+to use the `+` sign to indicate non-fast-forward updates
+will be needed for such branches.  There is no way to
+determine or declare that a branch will be made available
+in a repository with this behavior; the pulling user simply
 must know this is the expected usage pattern for a branch.
-+
-[NOTE]
-You never do your own development on branches that appear
-on the right hand side of a <refspec> colon on `Pull:` lines;
-they are to be updated by 'git fetch'.  If you intend to do
-development derived from a remote branch `B`, have a `Pull:`
-line to track it (i.e. `Pull: B:remote-B`), and have a separate
-branch `my-B` to do your development on top of it.  The latter
-is created by `git branch my-B remote-B` (or its equivalent `git
-checkout -b my-B remote-B`).  Run `git fetch` to keep track of
-the progress of the remote side, and when you see something new
-on the remote branch, merge it into your development branch with
-`git pull . remote-B`, while you are on `my-B` branch.
+ifdef::git-pull[]
 +
 [NOTE]
 There is a difference between listing multiple <refspec>
 directly on 'git pull' command line and having multiple
-`Pull:` <refspec> lines for a <repository> and running
+`remote.<repository>.fetch` entries in your configuration
+for a <repository> and running a
 'git pull' command without any explicit <refspec> parameters.
-<refspec> listed explicitly on the command line are always
+<refspec>s listed explicitly on the command line are always
 merged into the current branch after fetching.  In other words,
-if you list more than one remote refs, you would be making
-an Octopus.  While 'git pull' run without any explicit <refspec>
-parameter takes default <refspec>s from `Pull:` lines, it
-merges only the first <refspec> found into the current branch,
-after fetching all the remote refs.  This is because making an
+if you list more than one remote ref, 'git pull' will create
+an Octopus merge.  On the other hand, if you do not list any
+explicit <refspec> parameter on the command line, 'git pull'
+will fetch all the <refspec>s it finds in the
+`remote.<repository>.fetch` configuration and merge
+only the first <refspec> found into the current branch.
+This is because making an
 Octopus from remote refs is rarely done, while keeping track
 of multiple remote heads in one-go by fetching more than one
 is often useful.
-+
-Some short-cut notations are also supported.
-+
-* `tag <tag>` means the same as `refs/tags/<tag>:refs/tags/<tag>`;
-  it requests fetching everything up to the given tag.
-ifndef::git-pull[]
-* A parameter <ref> without a colon fetches that ref into FETCH_HEAD,
-endif::git-pull[]
-ifdef::git-pull[]
-* A parameter <ref> without a colon merges <ref> into the current
-  branch,
 endif::git-pull[]
-  and updates the remote-tracking branches (if any).
# install pull-fetch-param.txt /usr/share/doc/git-doc/pull-fetch-param.txt
--- /usr/share/doc/git-doc/rev-list-options.txt	2016-03-21 09:24:29.000000000 -0600
+++ rev-list-options.txt	2016-10-03 14:24:18.000000000 -0600
@@ -58,14 +58,20 @@
 	more than one `--grep=<pattern>`, commits whose message
 	matches any of the given patterns are chosen (but see
 	`--all-match`).
+ifndef::git-rev-list[]
 +
-When `--show-notes` is in effect, the message from the notes as
-if it is part of the log message.
+When `--show-notes` is in effect, the message from the notes is
+matched as if it were part of the log message.
+endif::git-rev-list[]
 
 --all-match::
 	Limit the commits output to ones that match all given `--grep`,
 	instead of ones that match at least one.
 
+--invert-grep::
+	Limit the commits output to ones with log message that do not
+	match the pattern specified with `--grep=<pattern>`.
+
 -i::
 --regexp-ignore-case::
 	Match the regular expression limiting patterns without regard to letter
@@ -119,7 +125,8 @@
 	because merges into a topic branch tend to be only about
 	adjusting to updated upstream from time to time, and
 	this option allows you to ignore the individual commits
-	brought in to your history by such a merge.
+	brought in to your history by such a merge. Cannot be
+	combined with --bisect.
 
 --not::
 	Reverses the meaning of the '{caret}' prefix (or lack thereof)
@@ -160,7 +167,7 @@
 	consider. Repetitions of this option accumulate exclusion patterns
 	up to the next `--all`, `--branches`, `--tags`, `--remotes`, or
 	`--glob` option (other options or arguments do not clear
-	accumlated patterns).
+	accumulated patterns).
 +
 The patterns given should not begin with `refs/heads`, `refs/tags`, or
 `refs/remotes` when applied to `--branches`, `--tags`, or `--remotes`,
@@ -168,6 +175,10 @@
 or `--all`. If a trailing '/{asterisk}' is intended, it must be given
 explicitly.
 
+--reflog::
+	Pretend as if all objects mentioned by reflogs are listed on the
+	command line as `<commit>`.
+
 --ignore-missing::
 	Upon seeing an invalid object name in the input, pretend as if
 	the bad input was not given.
@@ -177,12 +188,12 @@
 	Pretend as if the bad bisection ref `refs/bisect/bad`
 	was listed and as if it was followed by `--not` and the good
 	bisection refs `refs/bisect/good-*` on the command
-	line.
+	line. Cannot be combined with --first-parent.
 endif::git-rev-list[]
 
 --stdin::
 	In addition to the '<commit>' listed on the command
-	line, read them from the standard input. If a '--' separator is
+	line, read them from the standard input. If a `--` separator is
 	seen, stop reading commits and start reading paths to limit the
 	result.
 
@@ -214,7 +225,7 @@
 
 --left-only::
 --right-only::
-	List only commits on the respective side of a symmetric range,
+	List only commits on the respective side of a symmetric difference,
 	i.e. only those which would be marked `<` resp. `>` by
 	`--left-right`.
 +
@@ -237,14 +248,29 @@
 	reflog entries from the most recent one to older ones.
 	When this option is used you cannot specify commits to
 	exclude (that is, '{caret}commit', 'commit1..commit2',
-	nor 'commit1\...commit2' notations cannot be used).
+	and 'commit1\...commit2' notations cannot be used).
 +
 With `--pretty` format other than `oneline` (for obvious reasons),
 this causes the output to have two extra lines of information
-taken from the reflog.  By default, 'commit@\{Nth}' notation is
-used in the output.  When the starting commit is specified as
-'commit@\{now}', output also uses 'commit@\{timestamp}' notation
-instead.  Under `--pretty=oneline`, the commit message is
+taken from the reflog.  The reflog designator in the output may be shown
+as `ref@{Nth}` (where `Nth` is the reverse-chronological index in the
+reflog) or as `ref@{timestamp}` (with the timestamp for that entry),
+depending on a few rules:
++
+--
+1. If the starting point is specified as `ref@{Nth}`, show the index
+format.
++
+2. If the starting point was specified as `ref@{now}`, show the
+timestamp format.
++
+3. If neither was used, but `--date` was given on the command line, show
+the timestamp in the format requested by `--date`.
++
+4. Otherwise, show the index format.
+--
++
+Under `--pretty=oneline`, the commit message is
 prefixed with this information on the same line.
 This option cannot be combined with `--reverse`.
 See also linkgit:git-reflog[1].
@@ -257,6 +283,18 @@
 	Output excluded boundary commits. Boundary commits are
 	prefixed with `-`.
 
+ifdef::git-rev-list[]
+--use-bitmap-index::
+
+	Try to speed up the traversal using the pack bitmap index (if
+	one is available). Note that when traversing with `--objects`,
+	trees and blobs will not have their associated path printed.
+
+--progress=<header>::
+	Show progress reports on stderr as objects are considered. The
+	`<header>` text will be printed with each progress update.
+endif::git-rev-list[]
+
 --
 
 History Simplification
@@ -550,7 +588,7 @@
 would be of roughly the same length.  Finding the change which
 introduces a regression is thus reduced to a binary search: repeatedly
 generate and test new 'midpoint's until the commit chain is of length
-one.
+one. Cannot be combined with --first-parent.
 
 --bisect-vars::
 	This calculates the same as `--bisect`, except that refs in
@@ -627,6 +665,7 @@
 
 These options are mostly targeted for packing of Git repositories.
 
+ifdef::git-rev-list[]
 --objects::
 	Print the object IDs of any object referenced by the listed
 	commits.  `--objects foo ^bar` thus means ``send me
@@ -636,13 +675,24 @@
 --objects-edge::
 	Similar to `--objects`, but also print the IDs of excluded
 	commits prefixed with a ``-'' character.  This is used by
-	linkgit:git-pack-objects[1] to build ``thin'' pack, which records
+	linkgit:git-pack-objects[1] to build a ``thin'' pack, which records
 	objects in deltified form based on objects contained in these
 	excluded commits to reduce network traffic.
 
+--objects-edge-aggressive::
+	Similar to `--objects-edge`, but it tries harder to find excluded
+	commits at the cost of increased time.  This is used instead of
+	`--objects-edge` to build ``thin'' packs for shallow repositories.
+
+--indexed-objects::
+	Pretend as if all trees and blobs used by the index are listed
+	on the command line.  Note that you probably want to use
+	`--objects`, too.
+
 --unpacked::
 	Only useful with `--objects`; print the object IDs that are not
 	in packs.
+endif::git-rev-list[]
 
 --no-walk[=(sorted|unsorted)]::
 	Only show the given commits, but do not traverse their ancestors.
@@ -651,6 +701,7 @@
 	given on the command line. Otherwise (if `sorted` or no argument
 	was given), the commits are shown in reverse chronological order
 	by commit time.
+	Cannot be combined with `--graph`.
 
 --do-walk::
 	Overrides a previous `--no-walk`.
@@ -669,27 +720,61 @@
 --relative-date::
 	Synonym for `--date=relative`.
 
---date=(relative|local|default|iso|rfc|short|raw)::
+--date=<format>::
 	Only takes effect for dates shown in human-readable format, such
 	as when using `--pretty`. `log.date` config variable sets a default
-	value for the log command's `--date` option.
+	value for the log command's `--date` option. By default, dates
+	are shown in the original time zone (either committer's or
+	author's). If `-local` is appended to the format (e.g.,
+	`iso-local`), the user's local time zone is used instead.
 +
 `--date=relative` shows dates relative to the current time,
-e.g. ``2 hours ago''.
+e.g. ``2 hours ago''. The `-local` option has no effect for
+`--date=relative`.
 +
-`--date=local` shows timestamps in user's local time zone.
+`--date=local` is an alias for `--date=default-local`.
 +
-`--date=iso` (or `--date=iso8601`) shows timestamps in ISO 8601 format.
+`--date=iso` (or `--date=iso8601`) shows timestamps in a ISO 8601-like format.
+The differences to the strict ISO 8601 format are:
+
+	- a space instead of the `T` date/time delimiter
+	- a space between time and time zone
+	- no colon between hours and minutes of the time zone
+
++
+`--date=iso-strict` (or `--date=iso8601-strict`) shows timestamps in strict
+ISO 8601 format.
 +
 `--date=rfc` (or `--date=rfc2822`) shows timestamps in RFC 2822
 format, often found in email messages.
 +
 `--date=short` shows only the date, but not the time, in `YYYY-MM-DD` format.
 +
-`--date=raw` shows the date in the internal raw Git format `%s %z` format.
+`--date=raw` shows the date as seconds since the epoch (1970-01-01
+00:00:00 UTC), followed by a space, and then the timezone as an offset
+from UTC (a `+` or `-` with four digits; the first two are hours, and
+the second two are minutes). I.e., as if the timestamp were formatted
+with `strftime("%s %z")`).
+Note that the `-local` option does not affect the seconds-since-epoch
+value (which is always measured in UTC), but does switch the accompanying
+timezone value.
++
+`--date=unix` shows the date as a Unix epoch timestamp (seconds since
+1970).  As with `--raw`, this is always in UTC and therefore `-local`
+has no effect.
++
+`--date=format:...` feeds the format `...` to your system `strftime`.
+Use `--date=format:%c` to show the date in your system locale's
+preferred format.  See the `strftime` manual for a complete list of
+format placeholders. When using `-local`, the correct syntax is
+`--date=format-local:...`.
 +
-`--date=default` shows timestamps in the original time zone
-(either committer's or author's).
+`--date=default` is the default format, and is similar to
+`--date=rfc2822`, with a few exceptions:
+
+	- there is no comma after the day-of-week
+
+	- the time zone is omitted when the local time zone is used
 
 ifdef::git-rev-list[]
 --header::
@@ -711,7 +796,7 @@
 endif::git-rev-list[]
 
 --left-right::
-	Mark which side of a symmetric diff a commit is reachable from.
+	Mark which side of a symmetric difference a commit is reachable from.
 	Commits from the left side are prefixed with `<` and those from
 	the right with `>`.  If combined with `--boundary`, those
 	commits are prefixed with `-`.
@@ -744,12 +829,20 @@
 	on the left hand side of the output.  This may cause extra lines
 	to be printed in between commits, in order for the graph history
 	to be drawn properly.
+	Cannot be combined with `--no-walk`.
 +
 This enables parent rewriting, see 'History Simplification' below.
 +
 This implies the `--topo-order` option by default, but the
 `--date-order` option may also be specified.
 
+--show-linear-break[=<barrier>]::
+	When --graph is not used, all history branches are flattened
+	which can make it hard to see that the two consecutive commits
+	do not belong to a linear branch. This option puts a barrier
+	in between them in that case. If `<barrier>` is specified, it
+	is the string that will be shown instead of the default one.
+
 ifdef::git-rev-list[]
 --count::
 	Print a number stating how many commits would have been
# install rev-list-options.txt /usr/share/doc/git-doc/rev-list-options.txt
--- /usr/share/doc/git-doc/revisions.txt	2016-03-21 09:24:29.000000000 -0600
+++ revisions.txt	2016-10-03 14:24:18.000000000 -0600
@@ -28,8 +28,8 @@
   first match in the following rules:
 
   . If '$GIT_DIR/<refname>' exists, that is what you mean (this is usually
-    useful only for 'HEAD', 'FETCH_HEAD', 'ORIG_HEAD', 'MERGE_HEAD'
-    and 'CHERRY_PICK_HEAD');
+    useful only for `HEAD`, `FETCH_HEAD`, `ORIG_HEAD`, `MERGE_HEAD`
+    and `CHERRY_PICK_HEAD`);
 
   . otherwise, 'refs/<refname>' if it exists;
 
@@ -41,16 +41,16 @@
 
   . otherwise, 'refs/remotes/<refname>/HEAD' if it exists.
 +
-'HEAD' names the commit on which you based the changes in the working tree.
-'FETCH_HEAD' records the branch which you fetched from a remote repository
+`HEAD` names the commit on which you based the changes in the working tree.
+`FETCH_HEAD` records the branch which you fetched from a remote repository
 with your last `git fetch` invocation.
-'ORIG_HEAD' is created by commands that move your 'HEAD' in a drastic
-way, to record the position of the 'HEAD' before their operation, so that
+`ORIG_HEAD` is created by commands that move your `HEAD` in a drastic
+way, to record the position of the `HEAD` before their operation, so that
 you can easily change the tip of the branch back to the state before you ran
 them.
-'MERGE_HEAD' records the commit(s) which you are merging into your branch
+`MERGE_HEAD` records the commit(s) which you are merging into your branch
 when you run `git merge`.
-'CHERRY_PICK_HEAD' records the commit which you are cherry-picking
+`CHERRY_PICK_HEAD` records the commit which you are cherry-picking
 when you run `git cherry-pick`.
 +
 Note that any of the 'refs/*' cases above may come either from
@@ -59,21 +59,21 @@
 some output processing may assume ref names in UTF-8.
 
 '@'::
-  '@' alone is a shortcut for 'HEAD'.
+  '@' alone is a shortcut for `HEAD`.
 
-'<refname>@\{<date>\}', e.g. 'master@\{yesterday\}', 'HEAD@\{5 minutes ago\}'::
+'<refname>@{<date>}', e.g. 'master@\{yesterday\}', 'HEAD@{5 minutes ago}'::
   A ref followed by the suffix '@' with a date specification
   enclosed in a brace
-  pair (e.g. '\{yesterday\}', '\{1 month 2 weeks 3 days 1 hour 1
-  second ago\}' or '\{1979-02-26 18:30:00\}') specifies the value
+  pair (e.g. '\{yesterday\}', '{1 month 2 weeks 3 days 1 hour 1
+  second ago}' or '{1979-02-26 18:30:00}') specifies the value
   of the ref at a prior point in time.  This suffix may only be
   used immediately following a ref name and the ref must have an
   existing log ('$GIT_DIR/logs/<ref>'). Note that this looks up the state
   of your *local* ref at a given time; e.g., what was in your local
   'master' branch last week. If you want to look at commits made during
-  certain times, see '--since' and '--until'.
+  certain times, see `--since` and `--until`.
 
-'<refname>@\{<n>\}', e.g. 'master@\{1\}'::
+'<refname>@{<n>}', e.g. 'master@\{1\}'::
   A ref followed by the suffix '@' with an ordinal specification
   enclosed in a brace pair (e.g. '\{1\}', '\{15\}') specifies
   the n-th prior value of that ref.  For example 'master@\{1\}'
@@ -82,19 +82,46 @@
   immediately following a ref name and the ref must have an existing
   log ('$GIT_DIR/logs/<refname>').
 
-'@\{<n>\}', e.g. '@\{1\}'::
+'@{<n>}', e.g. '@\{1\}'::
   You can use the '@' construct with an empty ref part to get at a
   reflog entry of the current branch. For example, if you are on
   branch 'blabla' then '@\{1\}' means the same as 'blabla@\{1\}'.
 
-'@\{-<n>\}', e.g. '@\{-1\}'::
-  The construct '@\{-<n>\}' means the <n>th branch/commit checked out
+'@{-<n>}', e.g. '@{-1}'::
+  The construct '@{-<n>}' means the <n>th branch/commit checked out
   before the current one.
 
 '<branchname>@\{upstream\}', e.g. 'master@\{upstream\}', '@\{u\}'::
   The suffix '@\{upstream\}' to a branchname (short form '<branchname>@\{u\}')
   refers to the branch that the branch specified by branchname is set to build on
-  top of.  A missing branchname defaults to the current one.
+  top of (configured with `branch.<name>.remote` and
+  `branch.<name>.merge`).  A missing branchname defaults to the
+  current one.
+
+'<branchname>@\{push\}', e.g. 'master@\{push\}', '@\{push\}'::
+  The suffix '@\{push}' reports the branch "where we would push to" if
+  `git push` were run while `branchname` was checked out (or the current
+  `HEAD` if no branchname is specified). Since our push destination is
+  in a remote repository, of course, we report the local tracking branch
+  that corresponds to that branch (i.e., something in 'refs/remotes/').
++
+Here's an example to make it more clear:
++
+------------------------------
+$ git config push.default current
+$ git config remote.pushdefault myfork
+$ git checkout -b mybranch origin/master
+
+$ git rev-parse --symbolic-full-name @{upstream}
+refs/remotes/origin/master
+
+$ git rev-parse --symbolic-full-name @{push}
+refs/remotes/myfork/mybranch
+------------------------------
++
+Note in the example that we set up a triangular workflow, where we pull
+from one location and push to another. In a non-triangular workflow,
+'@\{push}' is the same as '@\{upstream}', and there is no need for it.
 
 '<rev>{caret}', e.g. 'HEAD{caret}, v1.5.1{caret}0'::
   A suffix '{caret}' to a revision parameter means the first parent of
@@ -112,7 +139,7 @@
   '<rev>{caret}1{caret}1{caret}1'.  See below for an illustration of
   the usage of this form.
 
-'<rev>{caret}\{<type>\}', e.g. 'v0.99.8{caret}\{commit\}'::
+'<rev>{caret}{<type>}', e.g. 'v0.99.8{caret}\{commit\}'::
   A suffix '{caret}' followed by an object type name enclosed in
   brace pair means dereference the object at '<rev>' recursively until
   an object of type '<type>' is found or the object cannot be
@@ -132,13 +159,13 @@
 'rev{caret}\{tag\}' can be used to ensure that 'rev' identifies an
 existing tag object.
 
-'<rev>{caret}\{\}', e.g. 'v0.99.8{caret}\{\}'::
+'<rev>{caret}{}', e.g. 'v0.99.8{caret}{}'::
   A suffix '{caret}' followed by an empty brace pair
   means the object could be a tag,
   and dereference the tag recursively until a non-tag object is
   found.
 
-'<rev>{caret}\{/<text>\}', e.g. 'HEAD^{/fix nasty bug}'::
+'<rev>{caret}{/<text>}', e.g. 'HEAD^{/fix nasty bug}'::
   A suffix '{caret}' to a revision parameter, followed by a brace
   pair that contains a text led by a slash,
   is the same as the ':/fix nasty bug' syntax below except that
@@ -149,11 +176,12 @@
   A colon, followed by a slash, followed by a text, names
   a commit whose commit message matches the specified regular expression.
   This name returns the youngest matching commit which is
-  reachable from any ref.  If the commit message starts with a
-  '!' you have to repeat that;  the special sequence ':/!',
-  followed by something else than '!', is reserved for now.
-  The regular expression can match any part of the commit message. To
-  match messages starting with a string, one can use e.g. ':/^foo'.
+  reachable from any ref. The regular expression can match any part of the
+  commit message. To match messages starting with a string, one can use
+  e.g. ':/^foo'. The special sequence ':/!' is reserved for modifiers to what
+  is matched. ':/!-foo' performs a negative match, while ':/!!foo' matches a
+  literal '!' character, followed by 'foo'. Any other sequence beginning with
+  ':/!' is reserved for now.
 
 '<rev>:<path>', e.g. 'HEAD:README', ':README', 'master:./README'::
   A suffix ':' followed by a path names the blob or tree
@@ -209,58 +237,84 @@
 -----------------
 
 History traversing commands such as `git log` operate on a set
-of commits, not just a single commit.  To these commands,
-specifying a single revision with the notation described in the
-previous section means the set of commits reachable from that
-commit, following the commit ancestry chain.
-
-To exclude commits reachable from a commit, a prefix '{caret}'
-notation is used.  E.g. '{caret}r1 r2' means commits reachable
-from 'r2' but exclude the ones reachable from 'r1'.
-
-This set operation appears so often that there is a shorthand
-for it.  When you have two commits 'r1' and 'r2' (named according
-to the syntax explained in SPECIFYING REVISIONS above), you can ask
-for commits that are reachable from r2 excluding those that are reachable
-from r1 by '{caret}r1 r2' and it can be written as 'r1..r2'.
-
-A similar notation 'r1\...r2' is called symmetric difference
-of 'r1' and 'r2' and is defined as
-'r1 r2 --not $(git merge-base --all r1 r2)'.
-It is the set of commits that are reachable from either one of
-'r1' or 'r2' but not from both.
+of commits, not just a single commit.
 
-In these two shorthands, you can omit one end and let it default to HEAD.
+For these commands,
+specifying a single revision, using the notation described in the
+previous section, means the set of commits `reachable` from the given
+commit.
+
+A commit's reachable set is the commit itself and the commits in
+its ancestry chain.
+
+
+Commit Exclusions
+~~~~~~~~~~~~~~~~~
+
+'{caret}<rev>' (caret) Notation::
+ To exclude commits reachable from a commit, a prefix '{caret}'
+ notation is used.  E.g. '{caret}r1 r2' means commits reachable
+ from 'r2' but exclude the ones reachable from 'r1' (i.e. 'r1' and
+ its ancestors).
+
+Dotted Range Notations
+~~~~~~~~~~~~~~~~~~~~~~
+
+The '..' (two-dot) Range Notation::
+ The '{caret}r1 r2' set operation appears so often that there is a shorthand
+ for it.  When you have two commits 'r1' and 'r2' (named according
+ to the syntax explained in SPECIFYING REVISIONS above), you can ask
+ for commits that are reachable from r2 excluding those that are reachable
+ from r1 by '{caret}r1 r2' and it can be written as 'r1..r2'.
+
+The '...' (three dot) Symmetric Difference Notation::
+ A similar notation 'r1\...r2' is called symmetric difference
+ of 'r1' and 'r2' and is defined as
+ 'r1 r2 --not $(git merge-base --all r1 r2)'.
+ It is the set of commits that are reachable from either one of
+ 'r1' (left side) or 'r2' (right side) but not from both.
+
+In these two shorthand notations, you can omit one end and let it default to HEAD.
 For example, 'origin..' is a shorthand for 'origin..HEAD' and asks "What
 did I do since I forked from the origin branch?"  Similarly, '..origin'
 is a shorthand for 'HEAD..origin' and asks "What did the origin do since
 I forked from them?"  Note that '..' would mean 'HEAD..HEAD' which is an
 empty range that is both reachable and unreachable from HEAD.
 
-Two other shorthands for naming a set that is formed by a commit
-and its parent commits exist.  The 'r1{caret}@' notation means all
-parents of 'r1'.  'r1{caret}!' includes commit 'r1' but excludes
-all of its parents.
+Other <rev>{caret} Parent Shorthand Notations
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+Two other shorthands exist, particularly useful for merge commits,
+for naming a set that is formed by a commit and its parent commits.
+
+The 'r1{caret}@' notation means all parents of 'r1'.
+
+The 'r1{caret}!' notation includes commit 'r1' but excludes all of its parents.
+By itself, this notation denotes the single commit 'r1'.
+
+While '<rev>{caret}<n>' was about specifying a single commit parent, these
+two notations consider all its parents. For example you can say
+'HEAD{caret}2{caret}@', however you cannot say 'HEAD{caret}@{caret}2'.
 
-To summarize:
+Revision Range Summary
+----------------------
 
 '<rev>'::
-	Include commits that are reachable from (i.e. ancestors of)
-	<rev>.
+	Include commits that are reachable from <rev> (i.e. <rev> and its
+	ancestors).
 
 '{caret}<rev>'::
-	Exclude commits that are reachable from (i.e. ancestors of)
-	<rev>.
+	Exclude commits that are reachable from <rev> (i.e. <rev> and its
+	ancestors).
 
 '<rev1>..<rev2>'::
 	Include commits that are reachable from <rev2> but exclude
 	those that are reachable from <rev1>.  When either <rev1> or
-	<rev2> is omitted, it defaults to 'HEAD'.
+	<rev2> is omitted, it defaults to `HEAD`.
 
 '<rev1>\...<rev2>'::
 	Include commits that are reachable from either <rev1> or
 	<rev2> but exclude those that are reachable from both.  When
-	either <rev1> or <rev2> is omitted, it defaults to 'HEAD'.
+	either <rev1> or <rev2> is omitted, it defaults to `HEAD`.
 
 '<rev>{caret}@', e.g. 'HEAD{caret}@'::
   A suffix '{caret}' followed by an at sign is the same as listing
@@ -272,16 +326,27 @@
   as giving commit '<rev>' and then all its parents prefixed with
   '{caret}' to exclude them (and their ancestors).
 
-Here are a handful of examples:
-
-   D                G H D
-   D F              G H I J D F
-   ^G D             H D
-   ^D B             E I J F B
-   B..C             C
-   B...C            G H D E B C
-   ^D B C           E I J F B C
-   C                I J F C
-   C^@              I J F
-   C^!              C
-   F^! D            G H D F
+Here are a handful of examples using the Loeliger illustration above,
+with each step in the notation's expansion and selection carefully
+spelt out:
+
+   Args   Expanded arguments    Selected commits
+   D                            G H D
+   D F                          G H I J D F
+   ^G D                         H D
+   ^D B                         E I J F B
+   ^D B C                       E I J F B C
+   C                            I J F C
+   B..C   = ^B C                C
+   B...C  = B ^F C              G H D E B C
+   C^@    = C^1
+	  = F                   I J F
+   B^@    = B^1 B^2 B^3
+	  = D E F               D G H E F I J
+   C^!    = C ^C^@
+	  = C ^C^1
+	  = C ^F                C
+   B^!    = B ^B^@
+	  = B ^B^1 ^B^2 ^B^3
+	  = B ^D ^E ^F          B
+   F^! D  = F ^I ^J D           G H D F
# install revisions.txt /usr/share/doc/git-doc/revisions.txt
--- /usr/share/doc/git-doc/urls-remotes.txt	2016-03-21 09:24:30.000000000 -0600
+++ urls-remotes.txt	2016-10-03 14:24:18.000000000 -0600
@@ -36,7 +36,7 @@
 to `<url>`.
 
 Named file in `$GIT_DIR/remotes`
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 You can choose to provide the name of a
 file in `$GIT_DIR/remotes`.  The URL
# install urls-remotes.txt /usr/share/doc/git-doc/urls-remotes.txt
--- /usr/share/doc/git-doc/urls.txt	2016-03-21 09:24:30.000000000 -0600
+++ urls.txt	2016-10-03 14:24:18.000000000 -0600
@@ -7,9 +7,8 @@
 absent.
 
 Git supports ssh, git, http, and https protocols (in addition, ftp,
-and ftps can be used for fetching and rsync can be used for fetching
-and pushing, but these are inefficient and deprecated; do not use
-them).
+and ftps can be used for fetching, but this is inefficient and
+deprecated; do not use it).
 
 The native transport (i.e. git:// URL) does no authentication and
 should be used with caution on unsecured networks.
@@ -20,7 +19,6 @@
 - git://host.xz{startsb}:port{endsb}/path/to/repo.git/
 - http{startsb}s{endsb}://host.xz{startsb}:port{endsb}/path/to/repo.git/
 - ftp{startsb}s{endsb}://host.xz{startsb}:port{endsb}/path/to/repo.git/
-- rsync://host.xz/path/to/repo.git/
 
 An alternative scp-like syntax may also be used with the ssh protocol:
 
# install urls.txt /usr/share/doc/git-doc/urls.txt
--- /usr/share/doc/git-doc/user-manual.txt	2016-03-21 09:24:30.000000000 -0600
+++ user-manual.txt	2016-10-03 14:24:18.000000000 -0600
@@ -416,12 +416,11 @@
 Updating a repository with git fetch
 ------------------------------------
 
-Eventually the developer cloned from will do additional work in her
-repository, creating new commits and advancing the branches to point
-at the new commits.
+After you clone a repository and commit a few changes of your own, you
+may wish to check the original repository for updates.
 
-The command `git fetch`, with no arguments, will update all of the
-remote-tracking branches to the latest version found in her
+The `git-fetch` command, with no arguments, will update all of the
+remote-tracking branches to the latest version found in the original
 repository.  It will not touch any of your own branches--not even the
 "master" branch that was created for you on clone.
 
@@ -1201,7 +1200,7 @@
 If you wish the exclude patterns to affect only certain repositories
 (instead of every repository for a given project), you may instead put
 them in a file in your repository named `.git/info/exclude`, or in any
-file specified by the `core.excludesfile` configuration variable.
+file specified by the `core.excludesFile` configuration variable.
 Some Git commands can also take exclude patterns directly on the
 command line.  See linkgit:gitignore[5] for the details.
 
@@ -1432,11 +1431,11 @@
 parents, one pointing at each of the two lines of development that
 were merged.
 
-However, if the current branch is a descendant of the other--so every
-commit present in the one is already contained in the other--then Git
-just performs a "fast-forward"; the head of the current branch is moved
-forward to point at the head of the merged-in branch, without any new
-commits being created.
+However, if the current branch is an ancestor of the other--so every commit
+present in the current branch is already contained in the other branch--then Git
+just performs a "fast-forward"; the head of the current branch is moved forward
+to point at the head of the merged-in branch, without any new commits being
+created.
 
 [[fixing-mistakes]]
 Fixing mistakes
@@ -1492,7 +1491,7 @@
 
 [[fixing-a-mistake-by-rewriting-history]]
 Fixing a mistake by rewriting history
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 If the problematic commit is the most recent commit, and you have not
 yet made that commit public, then you may just
@@ -1811,8 +1810,8 @@
 You can then import these into your mail client and send them by
 hand.  However, if you have a lot to send at once, you may prefer to
 use the linkgit:git-send-email[1] script to automate the process.
-Consult the mailing list for your project first to determine how they
-prefer such patches be handled.
+Consult the mailing list for your project first to determine
+their requirements for submitting patches.
 
 [[importing-patches]]
 Importing patches to a project
@@ -2126,8 +2125,37 @@
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 The gitweb cgi script provides users an easy way to browse your
-project's files and history without having to install Git; see the file
-gitweb/INSTALL in the Git source tree for instructions on setting it up.
+project's revisions, file contents and logs without having to install
+Git. Features like RSS/Atom feeds and blame/annotation details may
+optionally be enabled.
+
+The linkgit:git-instaweb[1] command provides a simple way to start
+browsing the repository using gitweb. The default server when using
+instaweb is lighttpd.
+
+See the file gitweb/INSTALL in the Git source tree and
+linkgit:gitweb[1] for instructions on details setting up a permanent
+installation with a CGI or Perl capable server.
+
+[[how-to-get-a-git-repository-with-minimal-history]]
+How to get a Git repository with minimal history
+------------------------------------------------
+
+A <<def_shallow_clone,shallow clone>>, with its truncated
+history, is useful when one is interested only in recent history
+of a project and getting full history from the upstream is
+expensive.
+
+A <<def_shallow_clone,shallow clone>> is created by specifying
+the linkgit:git-clone[1] `--depth` switch. The depth can later be
+changed with the linkgit:git-fetch[1] `--depth` switch, or full
+history restored with `--unshallow`.
+
+Merging inside a <<def_shallow_clone,shallow clone>> will work as long
+as a merge base is in the recent history.
+Otherwise, it will be like merging unrelated histories and may
+have to result in huge conflicts.  This limitation may make such
+a repository unsuitable to be used in merge based workflows.
 
 [[sharing-development-examples]]
 Examples
@@ -2255,7 +2283,7 @@
 It is unlikely that you would have any conflicts here ... but you might if you
 spent a while on this step and had also pulled new versions from upstream.
 
-Some time later when enough time has passed and testing done, you can pull the
+Sometime later when enough time has passed and testing done, you can pull the
 same branch into the `release` tree ready to go upstream.  This is where you
 see the value of keeping each patch (or patch series) in its own branch.  It
 means that the patches can be moved into the `release` tree in any order.
@@ -3425,7 +3453,7 @@
 
 [[the-index]]
 The index
------------
+---------
 
 The index is a binary file (generally kept in `.git/index`) containing a
 sorted list of path names, each with permissions and the SHA-1 of a blob
@@ -4074,7 +4102,7 @@
 
 Earlier we said that trivial merges are done inside
 `git read-tree -m`.  For example, if the file did not change
-from `$orig` to `HEAD` nor `$target`, or if the file changed
+from `$orig` to `HEAD` or `$target`, or if the file changed
 from `$orig` to `HEAD` and `$orig` to `$target` the same way,
 obviously the final outcome is what is in `HEAD`.  What the
 above example shows is that file `hello.c` was changed from
@@ -4231,9 +4259,9 @@
 controls how and what revisions are walked, and more.
 
 The original job of `git rev-parse` is now taken by the function
-`setup_revisions()`, which parses the revisions and the common command line
+`setup_revisions()`, which parses the revisions and the common command-line
 options for the revision walker. This information is stored in the struct
-`rev_info` for later consumption. You can do your own command line option
+`rev_info` for later consumption. You can do your own command-line option
 parsing after calling `setup_revisions()`. After that, you have to call
 `prepare_revision_walk()` for initialization, and then you can get the
 commits one by one with the function `get_revision()`.
@@ -4637,23 +4665,15 @@
 Scan man pages to see if any assume more background than this manual
 provides.
 
-Simplify beginning by suggesting disconnected head instead of
-temporary branch creation?
-
 Add more good examples.  Entire sections of just cookbook examples
 might be a good idea; maybe make an "advanced examples" section a
 standard end-of-chapter section?
 
 Include cross-references to the glossary, where appropriate.
 
-Document shallow clones?  See draft 1.5.0 release notes for some
-documentation.
-
 Add a section on working with other version control systems, including
 CVS, Subversion, and just imports of series of release tarballs.
 
-More details on gitweb?
-
 Write a chapter on using plumbing and writing scripts.
 
 Alternates, clone -reference, etc.
# install user-manual.txt /usr/share/doc/git-doc/user-manual.txt
--- /usr/share/doc/git-doc/everyday.html	2016-03-21 09:24:28.000000000 -0600
+++ everyday.html	2016-10-15 00:44:26.676075413 -0600
@@ -738,733 +738,10 @@
 <div id="content">
 <div id="preamble">
 <div class="sectionbody">
-<div class="paragraph"><p><a href="#Individual Developer (Standalone)">[Individual Developer (Standalone)]</a> commands are essential for
-anybody who makes a commit, even for somebody who works alone.</p></div>
-<div class="paragraph"><p>If you work with other people, you will need commands listed in
-the <a href="#Individual Developer (Participant)">[Individual Developer (Participant)]</a> section as well.</p></div>
-<div class="paragraph"><p>People who play the <a href="#Integrator">[Integrator]</a> role need to learn some more
-commands in addition to the above.</p></div>
-<div class="paragraph"><p><a href="#Repository Administration">[Repository Administration]</a> commands are for system
-administrators who are responsible for the care and feeding
-of Git repositories.</p></div>
-</div>
-</div>
-<div class="sect1">
-<h2 id="_individual_developer_standalone_a_id_individual_developer_standalone_a">Individual Developer (Standalone)<a id="Individual Developer (Standalone)"></a></h2>
-<div class="sectionbody">
-<div class="paragraph"><p>A standalone individual developer does not exchange patches with
-other people, and works alone in a single repository, using the
-following commands.</p></div>
-<div class="ulist"><ul>
-<li>
-<p>
-<a href="git-init.html">git-init(1)</a> to create a new repository.
-</p>
-</li>
-<li>
-<p>
-<a href="git-show-branch.html">git-show-branch(1)</a> to see where you are.
-</p>
-</li>
-<li>
-<p>
-<a href="git-log.html">git-log(1)</a> to see what happened.
-</p>
-</li>
-<li>
-<p>
-<a href="git-checkout.html">git-checkout(1)</a> and <a href="git-branch.html">git-branch(1)</a> to switch
-    branches.
-</p>
-</li>
-<li>
-<p>
-<a href="git-add.html">git-add(1)</a> to manage the index file.
-</p>
-</li>
-<li>
-<p>
-<a href="git-diff.html">git-diff(1)</a> and <a href="git-status.html">git-status(1)</a> to see what
-    you are in the middle of doing.
-</p>
-</li>
-<li>
-<p>
-<a href="git-commit.html">git-commit(1)</a> to advance the current branch.
-</p>
-</li>
-<li>
-<p>
-<a href="git-reset.html">git-reset(1)</a> and <a href="git-checkout.html">git-checkout(1)</a> (with
-    pathname parameters) to undo changes.
-</p>
-</li>
-<li>
-<p>
-<a href="git-merge.html">git-merge(1)</a> to merge between local branches.
-</p>
-</li>
-<li>
-<p>
-<a href="git-rebase.html">git-rebase(1)</a> to maintain topic branches.
-</p>
-</li>
-<li>
-<p>
-<a href="git-tag.html">git-tag(1)</a> to mark known point.
-</p>
-</li>
-</ul></div>
-<div class="sect2">
-<h3 id="_examples">Examples</h3>
-<div class="dlist"><dl>
-<dt class="hdlist1">
-Use a tarball as a starting point for a new repository.
-</dt>
-<dd>
-<div class="listingblock">
-<div class="content">
-<pre><code>$ tar zxf frotz.tar.gz
-$ cd frotz
-$ git init
-$ git add . <b>&lt;1&gt;</b>
-$ git commit -m "import of frotz source tree."
-$ git tag v2.43 <b>&lt;2&gt;</b></code></pre>
-</div></div>
-<div class="colist arabic"><ol>
-<li>
-<p>
-add everything under the current directory.
-</p>
-</li>
-<li>
-<p>
-make a lightweight, unannotated tag.
-</p>
-</li>
-</ol></div>
-</dd>
-<dt class="hdlist1">
-Create a topic branch and develop.
-</dt>
-<dd>
-<div class="listingblock">
-<div class="content">
-<pre><code>$ git checkout -b alsa-audio <b>&lt;1&gt;</b>
-$ edit/compile/test
-$ git checkout -- curses/ux_audio_oss.c <b>&lt;2&gt;</b>
-$ git add curses/ux_audio_alsa.c <b>&lt;3&gt;</b>
-$ edit/compile/test
-$ git diff HEAD <b>&lt;4&gt;</b>
-$ git commit -a -s <b>&lt;5&gt;</b>
-$ edit/compile/test
-$ git reset --soft HEAD^ <b>&lt;6&gt;</b>
-$ edit/compile/test
-$ git diff ORIG_HEAD <b>&lt;7&gt;</b>
-$ git commit -a -c ORIG_HEAD <b>&lt;8&gt;</b>
-$ git checkout master <b>&lt;9&gt;</b>
-$ git merge alsa-audio <b>&lt;10&gt;</b>
-$ git log --since='3 days ago' <b>&lt;11&gt;</b>
-$ git log v2.43.. curses/ <b>&lt;12&gt;</b></code></pre>
-</div></div>
-<div class="colist arabic"><ol>
-<li>
-<p>
-create a new topic branch.
-</p>
-</li>
-<li>
-<p>
-revert your botched changes in <code>curses/ux_audio_oss.c</code>.
-</p>
-</li>
-<li>
-<p>
-you need to tell Git if you added a new file; removal and
-modification will be caught if you do <code>git commit -a</code> later.
-</p>
-</li>
-<li>
-<p>
-to see what changes you are committing.
-</p>
-</li>
-<li>
-<p>
-commit everything as you have tested, with your sign-off.
-</p>
-</li>
-<li>
-<p>
-take the last commit back, keeping what is in the working tree.
-</p>
-</li>
-<li>
-<p>
-look at the changes since the premature commit we took back.
-</p>
-</li>
-<li>
-<p>
-redo the commit undone in the previous step, using the message
-you originally wrote.
-</p>
-</li>
-<li>
-<p>
-switch to the master branch.
-</p>
-</li>
-<li>
-<p>
-merge a topic branch into your master branch.
-</p>
-</li>
-<li>
-<p>
-review commit logs; other forms to limit output can be
-combined and include <code>--max-count=10</code> (show 10 commits),
-<code>--until=2005-12-10</code>, etc.
-</p>
-</li>
-<li>
-<p>
-view only the changes that touch what&#8217;s in <code>curses/</code>
-directory, since <code>v2.43</code> tag.
-</p>
-</li>
-</ol></div>
-</dd>
-</dl></div>
-</div>
-</div>
-</div>
-<div class="sect1">
-<h2 id="_individual_developer_participant_a_id_individual_developer_participant_a">Individual Developer (Participant)<a id="Individual Developer (Participant)"></a></h2>
-<div class="sectionbody">
-<div class="paragraph"><p>A developer working as a participant in a group project needs to
-learn how to communicate with others, and uses these commands in
-addition to the ones needed by a standalone developer.</p></div>
-<div class="ulist"><ul>
-<li>
-<p>
-<a href="git-clone.html">git-clone(1)</a> from the upstream to prime your local
-    repository.
-</p>
-</li>
-<li>
-<p>
-<a href="git-pull.html">git-pull(1)</a> and <a href="git-fetch.html">git-fetch(1)</a> from "origin"
-    to keep up-to-date with the upstream.
-</p>
-</li>
-<li>
-<p>
-<a href="git-push.html">git-push(1)</a> to shared repository, if you adopt CVS
-    style shared repository workflow.
-</p>
-</li>
-<li>
-<p>
-<a href="git-format-patch.html">git-format-patch(1)</a> to prepare e-mail submission, if
-    you adopt Linux kernel-style public forum workflow.
-</p>
-</li>
-</ul></div>
-<div class="sect2">
-<h3 id="_examples_2">Examples</h3>
-<div class="dlist"><dl>
-<dt class="hdlist1">
-Clone the upstream and work on it.  Feed changes to upstream.
-</dt>
-<dd>
-<div class="listingblock">
-<div class="content">
-<pre><code>$ git clone git://git.kernel.org/pub/scm/.../torvalds/linux-2.6 my2.6
-$ cd my2.6
-$ edit/compile/test; git commit -a -s <b>&lt;1&gt;</b>
-$ git format-patch origin <b>&lt;2&gt;</b>
-$ git pull <b>&lt;3&gt;</b>
-$ git log -p ORIG_HEAD.. arch/i386 include/asm-i386 <b>&lt;4&gt;</b>
-$ git pull git://git.kernel.org/pub/.../jgarzik/libata-dev.git ALL <b>&lt;5&gt;</b>
-$ git reset --hard ORIG_HEAD <b>&lt;6&gt;</b>
-$ git gc <b>&lt;7&gt;</b>
-$ git fetch --tags <b>&lt;8&gt;</b></code></pre>
-</div></div>
-<div class="colist arabic"><ol>
-<li>
-<p>
-repeat as needed.
-</p>
-</li>
-<li>
-<p>
-extract patches from your branch for e-mail submission.
-</p>
-</li>
-<li>
-<p>
-<code>git pull</code> fetches from <code>origin</code> by default and merges into the
-current branch.
-</p>
-</li>
-<li>
-<p>
-immediately after pulling, look at the changes done upstream
-since last time we checked, only in the
-area we are interested in.
-</p>
-</li>
-<li>
-<p>
-fetch from a specific branch from a specific repository and merge.
-</p>
-</li>
-<li>
-<p>
-revert the pull.
-</p>
-</li>
-<li>
-<p>
-garbage collect leftover objects from reverted pull.
-</p>
-</li>
-<li>
-<p>
-from time to time, obtain official tags from the <code>origin</code>
-and store them under <code>.git/refs/tags/</code>.
-</p>
-</li>
-</ol></div>
-</dd>
-<dt class="hdlist1">
-Push into another repository.
-</dt>
-<dd>
-<div class="listingblock">
-<div class="content">
-<pre><code>satellite$ git clone mothership:frotz frotz <b>&lt;1&gt;</b>
-satellite$ cd frotz
-satellite$ git config --get-regexp '^(remote|branch)\.' <b>&lt;2&gt;</b>
-remote.origin.url mothership:frotz
-remote.origin.fetch refs/heads/*:refs/remotes/origin/*
-branch.master.remote origin
-branch.master.merge refs/heads/master
-satellite$ git config remote.origin.push \
-           master:refs/remotes/satellite/master <b>&lt;3&gt;</b>
-satellite$ edit/compile/test/commit
-satellite$ git push origin <b>&lt;4&gt;</b>
-
-mothership$ cd frotz
-mothership$ git checkout master
-mothership$ git merge satellite/master <b>&lt;5&gt;</b></code></pre>
-</div></div>
-<div class="colist arabic"><ol>
-<li>
-<p>
-mothership machine has a frotz repository under your home
-directory; clone from it to start a repository on the satellite
-machine.
-</p>
-</li>
-<li>
-<p>
-clone sets these configuration variables by default.
-It arranges <code>git pull</code> to fetch and store the branches of mothership
-machine to local <code>remotes/origin/*</code> remote-tracking branches.
-</p>
-</li>
-<li>
-<p>
-arrange <code>git push</code> to push local <code>master</code> branch to
-<code>remotes/satellite/master</code> branch of the mothership machine.
-</p>
-</li>
-<li>
-<p>
-push will stash our work away on <code>remotes/satellite/master</code>
-remote-tracking branch on the mothership machine.  You could use this
-as a back-up method.
-</p>
-</li>
-<li>
-<p>
-on mothership machine, merge the work done on the satellite
-machine into the master branch.
-</p>
-</li>
-</ol></div>
-</dd>
-<dt class="hdlist1">
-Branch off of a specific tag.
-</dt>
-<dd>
-<div class="listingblock">
-<div class="content">
-<pre><code>$ git checkout -b private2.6.14 v2.6.14 <b>&lt;1&gt;</b>
-$ edit/compile/test; git commit -a
-$ git checkout master
-$ git format-patch -k -m --stdout v2.6.14..private2.6.14 |
-  git am -3 -k <b>&lt;2&gt;</b></code></pre>
-</div></div>
-<div class="colist arabic"><ol>
-<li>
-<p>
-create a private branch based on a well known (but somewhat behind)
-tag.
-</p>
-</li>
-<li>
-<p>
-forward port all changes in <code>private2.6.14</code> branch to <code>master</code> branch
-without a formal "merging".
-</p>
-</li>
-</ol></div>
-</dd>
-</dl></div>
-</div>
-</div>
-</div>
-<div class="sect1">
-<h2 id="_integrator_a_id_integrator_a">Integrator<a id="Integrator"></a></h2>
-<div class="sectionbody">
-<div class="paragraph"><p>A fairly central person acting as the integrator in a group
-project receives changes made by others, reviews and integrates
-them and publishes the result for others to use, using these
-commands in addition to the ones needed by participants.</p></div>
-<div class="ulist"><ul>
-<li>
-<p>
-<a href="git-am.html">git-am(1)</a> to apply patches e-mailed in from your
-    contributors.
-</p>
-</li>
-<li>
-<p>
-<a href="git-pull.html">git-pull(1)</a> to merge from your trusted lieutenants.
-</p>
-</li>
-<li>
-<p>
-<a href="git-format-patch.html">git-format-patch(1)</a> to prepare and send suggested
-    alternative to contributors.
-</p>
-</li>
-<li>
-<p>
-<a href="git-revert.html">git-revert(1)</a> to undo botched commits.
-</p>
-</li>
-<li>
-<p>
-<a href="git-push.html">git-push(1)</a> to publish the bleeding edge.
-</p>
-</li>
-</ul></div>
-<div class="sect2">
-<h3 id="_examples_3">Examples</h3>
-<div class="dlist"><dl>
-<dt class="hdlist1">
-My typical Git day.
-</dt>
-<dd>
-<div class="listingblock">
-<div class="content">
-<pre><code>$ git status <b>&lt;1&gt;</b>
-$ git show-branch <b>&lt;2&gt;</b>
-$ mailx <b>&lt;3&gt;</b>
-&amp; s 2 3 4 5 ./+to-apply
-&amp; s 7 8 ./+hold-linus
-&amp; q
-$ git checkout -b topic/one master
-$ git am -3 -i -s -u ./+to-apply <b>&lt;4&gt;</b>
-$ compile/test
-$ git checkout -b hold/linus &amp;&amp; git am -3 -i -s -u ./+hold-linus <b>&lt;5&gt;</b>
-$ git checkout topic/one &amp;&amp; git rebase master <b>&lt;6&gt;</b>
-$ git checkout pu &amp;&amp; git reset --hard next <b>&lt;7&gt;</b>
-$ git merge topic/one topic/two &amp;&amp; git merge hold/linus <b>&lt;8&gt;</b>
-$ git checkout maint
-$ git cherry-pick master~4 <b>&lt;9&gt;</b>
-$ compile/test
-$ git tag -s -m "GIT 0.99.9x" v0.99.9x <b>&lt;10&gt;</b>
-$ git fetch ko &amp;&amp; git show-branch master maint 'tags/ko-*' <b>&lt;11&gt;</b>
-$ git push ko <b>&lt;12&gt;</b>
-$ git push ko v0.99.9x <b>&lt;13&gt;</b></code></pre>
-</div></div>
-<div class="colist arabic"><ol>
-<li>
-<p>
-see what I was in the middle of doing, if any.
-</p>
-</li>
-<li>
-<p>
-see what topic branches I have and think about how ready
-they are.
-</p>
-</li>
-<li>
-<p>
-read mails, save ones that are applicable, and save others
-that are not quite ready.
-</p>
-</li>
-<li>
-<p>
-apply them, interactively, with my sign-offs.
-</p>
-</li>
-<li>
-<p>
-create topic branch as needed and apply, again with my
-sign-offs.
-</p>
-</li>
-<li>
-<p>
-rebase internal topic branch that has not been merged to the
-master, nor exposed as a part of a stable branch.
-</p>
-</li>
-<li>
-<p>
-restart <code>pu</code> every time from the next.
-</p>
-</li>
-<li>
-<p>
-and bundle topic branches still cooking.
-</p>
-</li>
-<li>
-<p>
-backport a critical fix.
-</p>
-</li>
-<li>
-<p>
-create a signed tag.
-</p>
-</li>
-<li>
-<p>
-make sure I did not accidentally rewind master beyond what I
-already pushed out.  <code>ko</code> shorthand points at the repository I have
-at kernel.org, and looks like this:
-</p>
-<div class="listingblock">
-<div class="content">
-<pre><code>$ cat .git/remotes/ko
-URL: kernel.org:/pub/scm/git/git.git
-Pull: master:refs/tags/ko-master
-Pull: next:refs/tags/ko-next
-Pull: maint:refs/tags/ko-maint
-Push: master
-Push: next
-Push: +pu
-Push: maint</code></pre>
-</div></div>
-<div class="paragraph"><p>In the output from <code>git show-branch</code>, <code>master</code> should have
-everything <code>ko-master</code> has, and <code>next</code> should have
-everything <code>ko-next</code> has.</p></div>
-</li>
-<li>
-<p>
-push out the bleeding edge.
-</p>
-</li>
-<li>
-<p>
-push the tag out, too.
-</p>
-</li>
-</ol></div>
-</dd>
-</dl></div>
-</div>
-</div>
-</div>
-<div class="sect1">
-<h2 id="_repository_administration_a_id_repository_administration_a">Repository Administration<a id="Repository Administration"></a></h2>
-<div class="sectionbody">
-<div class="paragraph"><p>A repository administrator uses the following tools to set up
-and maintain access to the repository by developers.</p></div>
-<div class="ulist"><ul>
-<li>
-<p>
-<a href="git-daemon.html">git-daemon(1)</a> to allow anonymous download from
-    repository.
-</p>
-</li>
-<li>
-<p>
-<a href="git-shell.html">git-shell(1)</a> can be used as a <em>restricted login shell</em>
-    for shared central repository users.
-</p>
-</li>
-</ul></div>
-<div class="paragraph"><p><a href="howto/update-hook-example.html">update hook howto</a> has a good
-example of managing a shared central repository.</p></div>
-<div class="sect2">
-<h3 id="_examples_4">Examples</h3>
-<div class="dlist"><dl>
-<dt class="hdlist1">
-We assume the following in /etc/services
-</dt>
-<dd>
-<div class="listingblock">
-<div class="content">
-<pre><code>$ grep 9418 /etc/services
-git             9418/tcp                # Git Version Control System</code></pre>
-</div></div>
-</dd>
-<dt class="hdlist1">
-Run git-daemon to serve /pub/scm from inetd.
-</dt>
-<dd>
-<div class="listingblock">
-<div class="content">
-<pre><code>$ grep git /etc/inetd.conf
-git     stream  tcp     nowait  nobody \
-  /usr/bin/git-daemon git-daemon --inetd --export-all /pub/scm</code></pre>
-</div></div>
-<div class="paragraph"><p>The actual configuration line should be on one line.</p></div>
-</dd>
-<dt class="hdlist1">
-Run git-daemon to serve /pub/scm from xinetd.
-</dt>
-<dd>
-<div class="listingblock">
-<div class="content">
-<pre><code>$ cat /etc/xinetd.d/git-daemon
-# default: off
-# description: The Git server offers access to Git repositories
-service git
-{
-        disable = no
-        type            = UNLISTED
-        port            = 9418
-        socket_type     = stream
-        wait            = no
-        user            = nobody
-        server          = /usr/bin/git-daemon
-        server_args     = --inetd --export-all --base-path=/pub/scm
-        log_on_failure  += USERID
-}</code></pre>
-</div></div>
-<div class="paragraph"><p>Check your xinetd(8) documentation and setup, this is from a Fedora system.
-Others might be different.</p></div>
-</dd>
-<dt class="hdlist1">
-Give push/pull only access to developers.
-</dt>
-<dd>
-<div class="listingblock">
-<div class="content">
-<pre><code>$ grep git /etc/passwd <b>&lt;1&gt;</b>
-alice:x:1000:1000::/home/alice:/usr/bin/git-shell
-bob:x:1001:1001::/home/bob:/usr/bin/git-shell
-cindy:x:1002:1002::/home/cindy:/usr/bin/git-shell
-david:x:1003:1003::/home/david:/usr/bin/git-shell
-$ grep git /etc/shells <b>&lt;2&gt;</b>
-/usr/bin/git-shell</code></pre>
-</div></div>
-<div class="colist arabic"><ol>
-<li>
-<p>
-log-in shell is set to /usr/bin/git-shell, which does not
-allow anything but <code>git push</code> and <code>git pull</code>.  The users should
-get an ssh access to the machine.
-</p>
-</li>
-<li>
-<p>
-in many distributions /etc/shells needs to list what is used
-as the login shell.
-</p>
-</li>
-</ol></div>
-</dd>
-<dt class="hdlist1">
-CVS-style shared repository.
-</dt>
-<dd>
-<div class="listingblock">
-<div class="content">
-<pre><code>$ grep git /etc/group <b>&lt;1&gt;</b>
-git:x:9418:alice,bob,cindy,david
-$ cd /home/devo.git
-$ ls -l <b>&lt;2&gt;</b>
-  lrwxrwxrwx   1 david git    17 Dec  4 22:40 HEAD -&gt; refs/heads/master
-  drwxrwsr-x   2 david git  4096 Dec  4 22:40 branches
-  -rw-rw-r--   1 david git    84 Dec  4 22:40 config
-  -rw-rw-r--   1 david git    58 Dec  4 22:40 description
-  drwxrwsr-x   2 david git  4096 Dec  4 22:40 hooks
-  -rw-rw-r--   1 david git 37504 Dec  4 22:40 index
-  drwxrwsr-x   2 david git  4096 Dec  4 22:40 info
-  drwxrwsr-x   4 david git  4096 Dec  4 22:40 objects
-  drwxrwsr-x   4 david git  4096 Nov  7 14:58 refs
-  drwxrwsr-x   2 david git  4096 Dec  4 22:40 remotes
-$ ls -l hooks/update <b>&lt;3&gt;</b>
-  -r-xr-xr-x   1 david git  3536 Dec  4 22:40 update
-$ cat info/allowed-users <b>&lt;4&gt;</b>
-refs/heads/master       alice\|cindy
-refs/heads/doc-update   bob
-refs/tags/v[0-9]*       david</code></pre>
-</div></div>
-<div class="colist arabic"><ol>
-<li>
-<p>
-place the developers into the same git group.
-</p>
-</li>
-<li>
-<p>
-and make the shared repository writable by the group.
-</p>
-</li>
-<li>
-<p>
-use update-hook example by Carl from Documentation/howto/
-for branch policy control.
-</p>
-</li>
-<li>
-<p>
-alice and cindy can push into master, only bob can push into doc-update.
-david is the release manager and is the only person who can
-create and push version tags.
-</p>
-</li>
-</ol></div>
-</dd>
-<dt class="hdlist1">
-HTTP server to support dumb protocol transfer.
-</dt>
-<dd>
-<div class="listingblock">
-<div class="content">
-<pre><code>dev$ git update-server-info <b>&lt;1&gt;</b>
-dev$ ftp user@isp.example.com <b>&lt;2&gt;</b>
-ftp&gt; cp -r .git /home/user/myproject.git</code></pre>
-</div></div>
-<div class="colist arabic"><ol>
-<li>
-<p>
-make sure your info/refs and objects/info/packs are up-to-date
-</p>
-</li>
-<li>
-<p>
-upload to public HTTP server hosted by your ISP.
-</p>
-</li>
-</ol></div>
-</dd>
-</dl></div>
-</div>
+<div class="paragraph"><p>This document has been moved to <a href="giteveryday.html">giteveryday(7)</a>.</p></div>
+<div class="paragraph"><p>Please let the owners of the referring site know so that they can update the
+link you clicked to get here.</p></div>
+<div class="paragraph"><p>Thanks.</p></div>
 </div>
 </div>
 </div>
# install everyday.html /usr/share/doc/git-doc/everyday.html
--- /usr/share/doc/git-doc/git-add.html	2016-03-21 09:24:28.000000000 -0600
+++ git-add.html	2016-10-15 00:43:14.128074051 -0600
@@ -748,10 +748,10 @@
 <h2 id="_synopsis">SYNOPSIS</h2>
 <div class="sectionbody">
 <div class="verseblock">
-<pre class="content"><em>git add</em> [-n] [-v] [--force | -f] [--interactive | -i] [--patch | -p]
+<pre class="content"><em>git add</em> [--verbose | -v] [--dry-run | -n] [--force | -f] [--interactive | -i] [--patch | -p]
           [--edit | -e] [--[no-]all | --[no-]ignore-removal | [--update | -u]]
           [--intent-to-add | -N] [--refresh] [--ignore-errors] [--ignore-missing]
-          [--] [&lt;pathspec&gt;&#8230;]</pre>
+          [--chmod=(+|-)x] [--] [&lt;pathspec&gt;&#8230;]</pre>
 <div class="attribution">
 </div></div>
 </div>
@@ -767,7 +767,7 @@
 remove paths that do not exist in the working tree anymore.</p></div>
 <div class="paragraph"><p>The "index" holds a snapshot of the content of the working tree, and it
 is this snapshot that is taken as the contents of the next commit.  Thus
-after making any changes to the working directory, and before running
+after making any changes to the working tree, and before running
 the commit command, you must use the <code>add</code> command to add any new or
 modified files to the index.</p></div>
 <div class="paragraph"><p>This command can be performed multiple times before a commit.  It only
@@ -798,8 +798,14 @@
         Files to add content from.  Fileglobs (e.g. <code>*.c</code>) can
         be given to add all matching files.  Also a
         leading directory name (e.g. <code>dir</code> to add <code>dir/file1</code>
-        and <code>dir/file2</code>) can be given to add all files in the
-        directory, recursively.
+        and <code>dir/file2</code>) can be given to update the index to
+        match the current state of the directory as a whole (e.g.
+        specifying <code>dir</code> will record not just a file <code>dir/file1</code>
+        modified in the working tree, a file <code>dir/file2</code> added to
+        the working tree, but also a file <code>dir/file3</code> removed from
+        the working tree.  Note that older versions of Git used
+        to ignore removed files; use <code>--no-all</code> option if you want
+        to add modified or new files but ignore removed ones.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -868,7 +874,10 @@
 See &#8220;Interactive mode&#8221; for details.</p></div>
 </dd>
 <dt class="hdlist1">
--e, --edit
+-e
+</dt>
+<dt class="hdlist1">
+--edit
 </dt>
 <dd>
 <p>
@@ -894,10 +903,10 @@
         &lt;pathspec&gt;.  This removes as well as modifies index entries to
         match the working tree, but adds no new files.
 </p>
-<div class="paragraph"><p>If no &lt;pathspec&gt; is given, the current version of Git defaults to
-"."; in other words, update all tracked files in the current directory
-and its subdirectories. This default will change in a future version
-of Git, hence the form without &lt;pathspec&gt; should not be used.</p></div>
+<div class="paragraph"><p>If no &lt;pathspec&gt; is given when <code>-u</code> option is used, all
+tracked files in the entire working tree are updated (old versions
+of Git used to limit the update to the current directory and its
+subdirectories).</p></div>
 </dd>
 <dt class="hdlist1">
 -A
@@ -915,10 +924,10 @@
         entry.  This adds, modifies, and removes index entries to
         match the working tree.
 </p>
-<div class="paragraph"><p>If no &lt;pathspec&gt; is given, the current version of Git defaults to
-"."; in other words, update all files in the current directory
-and its subdirectories. This default will change in a future version
-of Git, hence the form without &lt;pathspec&gt; should not be used.</p></div>
+<div class="paragraph"><p>If no &lt;pathspec&gt; is given when <code>-A</code> option is used, all
+files in the entire working tree are updated (old versions
+of Git used to limit the update to the current directory and its
+subdirectories).</p></div>
 </dd>
 <dt class="hdlist1">
 --no-all
@@ -933,11 +942,9 @@
         files that have been removed from the working tree.  This
         option is a no-op when no &lt;pathspec&gt; is used.
 </p>
-<div class="paragraph"><p>This option is primarily to help the current users of Git, whose
-"git add &lt;pathspec&gt;&#8230;" ignores removed files.  In future versions
-of Git, "git add &lt;pathspec&gt;&#8230;" will be a synonym to "git add -A
-&lt;pathspec&gt;&#8230;" and "git add --ignore-removal &lt;pathspec&gt;&#8230;" will behave like
-today&#8217;s "git add &lt;pathspec&gt;&#8230;", ignoring removed files.</p></div>
+<div class="paragraph"><p>This option is primarily to help users who are used to older
+versions of Git, whose "git add &lt;pathspec&gt;&#8230;" was a synonym
+for "git add --no-all &lt;pathspec&gt;&#8230;", i.e. ignored removed files.</p></div>
 </dd>
 <dt class="hdlist1">
 -N
@@ -987,6 +994,16 @@
 </p>
 </dd>
 <dt class="hdlist1">
+--chmod=(+|-)x
+</dt>
+<dd>
+<p>
+        Override the executable bit of the added files.  The executable
+        bit is only changed in the index, the files on disk are left
+        unchanged.
+</p>
+</dd>
+<dt class="hdlist1">
 --
 </dt>
 <dd>
@@ -1002,7 +1019,7 @@
 <div class="sect1">
 <h2 id="_configuration">Configuration</h2>
 <div class="sectionbody">
-<div class="paragraph"><p>The optional configuration variable <code>core.excludesfile</code> indicates a path to a
+<div class="paragraph"><p>The optional configuration variable <code>core.excludesFile</code> indicates a path to a
 file containing patterns of file names to exclude from git-add, similar to
 $GIT_DIR/info/exclude.  Patterns in the exclude file are used in addition to
 those in info/exclude.  See <a href="gitignore.html">gitignore(5)</a>.</p></div>
@@ -1152,9 +1169,9 @@
 <div class="content">
 <pre><code>y - stage this hunk
 n - do not stage this hunk
-q - quit; do not stage this hunk nor any of the remaining ones
+q - quit; do not stage this hunk or any of the remaining ones
 a - stage this hunk and all later hunks in the file
-d - do not stage this hunk nor any of the later hunks in the file
+d - do not stage this hunk or any of the later hunks in the file
 g - select a hunk to go to
 / - search for a hunk matching the given regex
 j - leave this hunk undecided, see next undecided hunk
@@ -1168,7 +1185,7 @@
 <div class="paragraph"><p>After deciding the fate for all hunks, if there is any hunk
 that was chosen, the index is updated with the selected hunks.</p></div>
 <div class="paragraph"><p>You can omit having to type return here, by setting the configuration
-variable <code>interactive.singlekey</code> to <code>true</code>.</p></div>
+variable <code>interactive.singleKey</code> to <code>true</code>.</p></div>
 </dd>
 <dt class="hdlist1">
 diff
# install git-add.html /usr/share/doc/git-doc/git-add.html
--- /usr/share/doc/git-doc/git-am.html	2016-03-21 09:24:28.000000000 -0600
+++ git-am.html	2016-10-15 00:43:14.508074059 -0600
@@ -749,11 +749,11 @@
 <div class="sectionbody">
 <div class="verseblock">
 <pre class="content"><em>git am</em> [--signoff] [--keep] [--[no-]keep-cr] [--[no-]utf8]
-         [--3way] [--interactive] [--committer-date-is-author-date]
+         [--[no-]3way] [--interactive] [--committer-date-is-author-date]
          [--ignore-date] [--ignore-space-change | --ignore-whitespace]
          [--whitespace=&lt;option&gt;] [-C&lt;n&gt;] [-p&lt;n&gt;] [--directory=&lt;dir&gt;]
          [--exclude=&lt;path&gt;] [--include=&lt;path&gt;] [--reject] [-q | --quiet]
-         [--[no-]scissors]
+         [--[no-]scissors] [-S[&lt;keyid&gt;]] [--patch-format=&lt;format&gt;]
          [(&lt;mbox&gt; | &lt;Maildir&gt;)&#8230;]
 <em>git am</em> (--continue | --skip | --abort)</pre>
 <div class="attribution">
@@ -792,6 +792,7 @@
 <p>
         Add a <code>Signed-off-by:</code> line to the commit message, using
         the committer identity of yourself.
+        See the signoff option in <a href="git-commit.html">git-commit(1)</a> for more information.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -833,7 +834,8 @@
 <dd>
 <p>
         Remove everything in body before a scissors line (see
-        <a href="git-mailinfo.html">git-mailinfo(1)</a>).
+        <a href="git-mailinfo.html">git-mailinfo(1)</a>). Can be activated by default using
+        the <code>mailinfo.scissors</code> configuration variable.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -845,6 +847,29 @@
 </p>
 </dd>
 <dt class="hdlist1">
+-m
+</dt>
+<dt class="hdlist1">
+--message-id
+</dt>
+<dd>
+<p>
+        Pass the <code>-m</code> flag to <em>git mailinfo</em> (see <a href="git-mailinfo.html">git-mailinfo(1)</a>),
+        so that the Message-ID header is added to the commit message.
+        The <code>am.messageid</code> configuration variable can be used to specify
+        the default behaviour.
+</p>
+</dd>
+<dt class="hdlist1">
+--no-message-id
+</dt>
+<dd>
+<p>
+        Do not add the Message-ID header to the commit message.
+        <code>no-message-id</code> is useful to override <code>am.messageid</code>.
+</p>
+</dd>
+<dt class="hdlist1">
 -q
 </dt>
 <dt class="hdlist1">
@@ -887,18 +912,20 @@
 <dt class="hdlist1">
 --3way
 </dt>
+<dt class="hdlist1">
+--no-3way
+</dt>
 <dd>
 <p>
         When the patch does not apply cleanly, fall back on
         3-way merge if the patch records the identity of blobs
         it is supposed to apply to and we have those blobs
-        available locally.
+        available locally. <code>--no-3way</code> can be used to override
+        am.threeWay configuration variable. For more information,
+        see am.threeWay in <a href="git-config.html">git-config(1)</a>.
 </p>
 </dd>
 <dt class="hdlist1">
---ignore-date
-</dt>
-<dt class="hdlist1">
 --ignore-space-change
 </dt>
 <dt class="hdlist1">
@@ -933,6 +960,18 @@
 </p>
 </dd>
 <dt class="hdlist1">
+--patch-format
+</dt>
+<dd>
+<p>
+        By default the command will try to detect the patch format
+        automatically. This option allows the user to bypass the automatic
+        detection and specify the patch format that the patch(es) should be
+        interpreted as. Valid formats are mbox, mboxrd,
+        stgit, stgit-series and hg.
+</p>
+</dd>
+<dt class="hdlist1">
 -i
 </dt>
 <dt class="hdlist1">
@@ -977,6 +1016,19 @@
 </p>
 </dd>
 <dt class="hdlist1">
+-S[&lt;keyid&gt;]
+</dt>
+<dt class="hdlist1">
+--gpg-sign[=&lt;keyid&gt;]
+</dt>
+<dd>
+<p>
+        GPG-sign commits. The <code>keyid</code> argument is optional and
+        defaults to the committer identity; if specified, it must be
+        stuck to the option without a space.
+</p>
+</dd>
+<dt class="hdlist1">
 --continue
 </dt>
 <dt class="hdlist1">
@@ -1060,7 +1112,7 @@
 <div class="olist arabic"><ol class="arabic">
 <li>
 <p>
-skip the current patch by re-running the command with the <em>--skip</em>
+skip the current patch by re-running the command with the <code>--skip</code>
   option.
 </p>
 </li>
@@ -1068,7 +1120,7 @@
 <p>
 hand resolve the conflict in the working directory, and update
   the index file to bring it into a state that the patch should
-  have produced.  Then run the command with the <em>--continue</em> option.
+  have produced.  Then run the command with the <code>--continue</code> option.
 </p>
 </li>
 </ol></div>
@@ -1084,6 +1136,14 @@
 </div>
 </div>
 <div class="sect1">
+<h2 id="_hooks">HOOKS</h2>
+<div class="sectionbody">
+<div class="paragraph"><p>This command can run <code>applypatch-msg</code>, <code>pre-applypatch</code>,
+and <code>post-applypatch</code> hooks.  See <a href="githooks.html">githooks(5)</a> for more
+information.</p></div>
+</div>
+</div>
+<div class="sect1">
 <h2 id="_see_also">SEE ALSO</h2>
 <div class="sectionbody">
 <div class="paragraph"><p><a href="git-apply.html">git-apply(1)</a>.</p></div>
# install git-am.html /usr/share/doc/git-doc/git-am.html
--- /usr/share/doc/git-doc/git-annotate.html	2016-03-21 09:24:28.000000000 -0600
+++ git-annotate.html	2016-10-15 00:43:14.828074065 -0600
@@ -783,7 +783,7 @@
 <dd>
 <p>
         Do not treat root commits as boundaries.  This can also be
-        controlled via the <code>blame.showroot</code> config option.
+        controlled via the <code>blame.showRoot</code> config option.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -798,7 +798,7 @@
 -L &lt;start&gt;,&lt;end&gt;
 </dt>
 <dt class="hdlist1">
--L :&lt;regex&gt;
+-L :&lt;funcname&gt;
 </dt>
 <dd>
 <p>
@@ -835,11 +835,12 @@
 of lines before or after the line given by &lt;start&gt;.</p></div>
 </li>
 </ul></div>
-<div class="paragraph"><p>If &#8220;:&lt;regex&gt;&#8221; is given in place of &lt;start&gt; and &lt;end&gt;, it denotes the range
-from the first funcname line that matches &lt;regex&gt;, up to the next
-funcname line. &#8220;:&lt;regex&gt;&#8221; searches from the end of the previous <code>-L</code> range,
-if any, otherwise from the start of file.
-&#8220;^:&lt;regex&gt;&#8221; searches from the start of file.</p></div>
+<div class="paragraph"><p>If &#8220;:&lt;funcname&gt;&#8221; is given in place of &lt;start&gt; and &lt;end&gt;, it is a
+regular expression that denotes the range from the first funcname line
+that matches &lt;funcname&gt;, up to the next funcname line. &#8220;:&lt;funcname&gt;&#8221;
+searches from the end of the previous <code>-L</code> range, if any, otherwise
+from the start of file. &#8220;^:&lt;funcname&gt;&#8221; searches from the start of
+file.</p></div>
 </dd>
 <dt class="hdlist1">
 -l
@@ -936,15 +937,26 @@
 </dt>
 <dd>
 <p>
-        The value is one of the following alternatives:
-        {relative,local,default,iso,rfc,short}. If --date is not
+        Specifies the format used to output dates. If --date is not
         provided, the value of the blame.date config variable is
         used. If the blame.date config variable is also not set, the
-        iso format is used. For more information, See the discussion
+        iso format is used. For supported values, see the discussion
         of the --date option at <a href="git-log.html">git-log(1)</a>.
 </p>
 </dd>
 <dt class="hdlist1">
+--[no-]progress
+</dt>
+<dd>
+<p>
+        Progress status is reported on the standard error stream
+        by default when it is attached to a terminal. This flag
+        enables progress reporting even if not attached to a
+        terminal. Can&#8217;t use <code>--progress</code> together with <code>--porcelain</code>
+        or <code>--incremental</code>.
+</p>
+</dd>
+<dt class="hdlist1">
 -M|&lt;num&gt;|
 </dt>
 <dd>
# install git-annotate.html /usr/share/doc/git-doc/git-annotate.html
--- /usr/share/doc/git-doc/git-apply.html	2016-03-21 09:24:28.000000000 -0600
+++ git-apply.html	2016-10-15 00:43:15.228074072 -0600
@@ -752,10 +752,10 @@
           [--apply] [--no-add] [--build-fake-ancestor=&lt;file&gt;] [-R | --reverse]
           [--allow-binary-replacement | --binary] [--reject] [-z]
           [-p&lt;n&gt;] [-C&lt;n&gt;] [--inaccurate-eof] [--recount] [--cached]
-          [--ignore-space-change | --ignore-whitespace ]
+          [--ignore-space-change | --ignore-whitespace]
           [--whitespace=(nowarn|warn|fix|error|error-all)]
           [--exclude=&lt;path&gt;] [--include=&lt;path&gt;] [--directory=&lt;root&gt;]
-          [--verbose] [&lt;patch&gt;&#8230;]</pre>
+          [--verbose] [--unsafe-paths] [&lt;patch&gt;&#8230;]</pre>
 <div class="attribution">
 </div></div>
 </div>
@@ -764,6 +764,8 @@
 <h2 id="_description">DESCRIPTION</h2>
 <div class="sectionbody">
 <div class="paragraph"><p>Reads the supplied diff output (i.e. "a patch") and applies it to files.
+When running from a subdirectory in a repository, patched paths
+outside the directory are ignored.
 With the <code>--index</code> option the patch is also applied to the index, and
 with the <code>--cached</code> option the patch is only applied to the index.
 Without these options, the command applies the patch only to files,
@@ -1128,6 +1130,20 @@
 can be applied to the file in the working tree <code>modules/git-gui/git-gui.sh</code> by
 running <code>git apply --directory=modules/git-gui</code>.</p></div>
 </dd>
+<dt class="hdlist1">
+--unsafe-paths
+</dt>
+<dd>
+<p>
+        By default, a patch that affects outside the working area
+        (either a Git controlled working tree, or the current working
+        directory when "git apply" is used as a replacement of GNU
+        patch) is rejected as a mistake (or a mischief).
+</p>
+<div class="paragraph"><p>When <code>git apply</code> is used as a "better GNU patch", the user can pass
+the <code>--unsafe-paths</code> option to override this safety check.  This option
+has no effect when <code>--index</code> or <code>--cached</code> is in use.</p></div>
+</dd>
 </dl></div>
 </div>
 </div>
@@ -1136,7 +1152,7 @@
 <div class="sectionbody">
 <div class="dlist"><dl>
 <dt class="hdlist1">
-apply.ignorewhitespace
+apply.ignoreWhitespace
 </dt>
 <dd>
 <p>
# install git-apply.html /usr/share/doc/git-doc/git-apply.html
--- /usr/share/doc/git-doc/git-archive.html	2016-03-21 09:24:28.000000000 -0600
+++ git-archive.html	2016-10-15 00:43:15.848074084 -0600
@@ -854,7 +854,10 @@
 <dd>
 <p>
         Instead of making a tar archive from the local repository,
-        retrieve a tar archive from a remote repository.
+        retrieve a tar archive from a remote repository. Note that the
+        remote repository may place restrictions on which sha1
+        expressions may be allowed in <code>&lt;tree-ish&gt;</code>. See
+        <a href="git-upload-archive.html">git-upload-archive(1)</a> for details.
 </p>
 </dd>
 <dt class="hdlist1">
# install git-archive.html /usr/share/doc/git-doc/git-archive.html
--- /usr/share/doc/git-doc/git-bisect-lk2009.html	2016-03-21 09:24:28.000000000 -0600
+++ git-bisect-lk2009.html	2016-10-15 00:44:28.452075447 -0600
@@ -849,7 +849,7 @@
 developed and maintained during years or even tens of years by a lot
 of people. And as there are often many people who depend (sometimes
 critically) on such software, regressions are a really big problem.</p></div>
-<div class="paragraph"><p>One such software is the linux kernel. And if we look at the linux
+<div class="paragraph"><p>One such software is the Linux kernel. And if we look at the Linux
 kernel, we can see that a lot of time and effort is spent to fight
 regressions. The release cycle start with a 2 weeks long merge
 window. Then the first release candidate (rc) version is tagged. And
@@ -860,7 +860,7 @@
 regressions. And this time is more than 80% of the release cycle
 time. But this is not the end of the fight yet, as of course it
 continues after the release.</p></div>
-<div class="paragraph"><p>And then this is what Ingo Molnar (a well known linux kernel
+<div class="paragraph"><p>And then this is what Ingo Molnar (a well known Linux kernel
 developer) says about his use of git bisect:</p></div>
 <div class="quoteblock">
 <div class="content">
@@ -1073,7 +1073,7 @@
 "git bisect run" use "git bisect skip" in the background.)</p></div>
 <div class="paragraph"><p>Or if you want more control, you can inspect the current state using
 for example "git bisect visualize". It will launch gitk (or "git log"
-if the DISPLAY environment variable is not set) to help you find a
+if the <code>DISPLAY</code> environment variable is not set) to help you find a
 better bisection point.</p></div>
 <div class="paragraph"><p>Either way, if you have a string of untestable commits, it might
 happen that the regression you are looking for has been introduced by
# install git-bisect-lk2009.html /usr/share/doc/git-doc/git-bisect-lk2009.html
--- /usr/share/doc/git-doc/git-bisect.html	2016-03-21 09:24:28.000000000 -0600
+++ git-bisect.html	2016-10-15 00:43:16.328074093 -0600
@@ -739,7 +739,7 @@
 <h2>NAME</h2>
 <div class="sectionbody">
 <p>git-bisect -
-   Find by binary search the change that introduced a bug
+   Use binary search to find the commit that introduced a bug
 </p>
 </div>
 </div>
@@ -760,65 +760,78 @@
 on the subcommand:</p></div>
 <div class="literalblock">
 <div class="content">
-<pre><code>git bisect help
-git bisect start [--no-checkout] [&lt;bad&gt; [&lt;good&gt;...]] [--] [&lt;paths&gt;...]
-git bisect bad [&lt;rev&gt;]
-git bisect good [&lt;rev&gt;...]
+<pre><code>git bisect start [--term-{old,good}=&lt;term&gt; --term-{new,bad}=&lt;term&gt;]
+                 [--no-checkout] [&lt;bad&gt; [&lt;good&gt;...]] [--] [&lt;paths&gt;...]
+git bisect (bad|new) [&lt;rev&gt;]
+git bisect (good|old) [&lt;rev&gt;...]
+git bisect terms [--term-good | --term-bad]
 git bisect skip [(&lt;rev&gt;|&lt;range&gt;)...]
 git bisect reset [&lt;commit&gt;]
 git bisect visualize
 git bisect replay &lt;logfile&gt;
 git bisect log
-git bisect run &lt;cmd&gt;...</code></pre>
+git bisect run &lt;cmd&gt;...
+git bisect help</code></pre>
 </div></div>
-<div class="paragraph"><p>This command uses <em>git rev-list --bisect</em> to help drive the
-binary search process to find which change introduced a bug, given an
-old "good" commit object name and a later "bad" commit object name.</p></div>
-<div class="sect2">
-<h3 id="_getting_help">Getting help</h3>
-<div class="paragraph"><p>Use "git bisect" to get a short usage description, and "git bisect
-help" or "git bisect -h" to get a long usage description.</p></div>
-</div>
+<div class="paragraph"><p>This command uses a binary search algorithm to find which commit in
+your project&#8217;s history introduced a bug. You use it by first telling
+it a "bad" commit that is known to contain the bug, and a "good"
+commit that is known to be before the bug was introduced. Then <code>git
+bisect</code> picks a commit between those two endpoints and asks you
+whether the selected commit is "good" or "bad". It continues narrowing
+down the range until it finds the exact commit that introduced the
+change.</p></div>
+<div class="paragraph"><p>In fact, <code>git bisect</code> can be used to find the commit that changed
+<strong>any</strong> property of your project; e.g., the commit that fixed a bug, or
+the commit that caused a benchmark&#8217;s performance to improve. To
+support this more general usage, the terms "old" and "new" can be used
+in place of "good" and "bad", or you can choose your own terms. See
+section "Alternate terms" below for more information.</p></div>
 <div class="sect2">
 <h3 id="_basic_bisect_commands_start_bad_good">Basic bisect commands: start, bad, good</h3>
-<div class="paragraph"><p>Using the Linux kernel tree as an example, basic use of the bisect
-command is as follows:</p></div>
+<div class="paragraph"><p>As an example, suppose you are trying to find the commit that broke a
+feature that was known to work in version <code>v2.6.13-rc2</code> of your
+project. You start a bisect session as follows:</p></div>
 <div class="listingblock">
 <div class="content">
 <pre><code>$ git bisect start
 $ git bisect bad                 # Current version is bad
-$ git bisect good v2.6.13-rc2    # v2.6.13-rc2 was the last version
-                                 # tested that was good</code></pre>
+$ git bisect good v2.6.13-rc2    # v2.6.13-rc2 is known to be good</code></pre>
+</div></div>
+<div class="paragraph"><p>Once you have specified at least one bad and one good commit, <code>git
+bisect</code> selects a commit in the middle of that range of history,
+checks it out, and outputs something similar to the following:</p></div>
+<div class="listingblock">
+<div class="content">
+<pre><code>Bisecting: 675 revisions left to test after this (roughly 10 steps)</code></pre>
 </div></div>
-<div class="paragraph"><p>When you have specified at least one bad and one good version, the
-command bisects the revision tree and outputs something similar to
-the following:</p></div>
+<div class="paragraph"><p>You should now compile the checked-out version and test it. If that
+version works correctly, type</p></div>
 <div class="listingblock">
 <div class="content">
-<pre><code>Bisecting: 675 revisions left to test after this</code></pre>
+<pre><code>$ git bisect good</code></pre>
 </div></div>
-<div class="paragraph"><p>The state in the middle of the set of revisions is then checked out.
-You would now compile that kernel and boot it. If the booted kernel
-works correctly, you would then issue the following command:</p></div>
+<div class="paragraph"><p>If that version is broken, type</p></div>
 <div class="listingblock">
 <div class="content">
-<pre><code>$ git bisect good                       # this one is good</code></pre>
+<pre><code>$ git bisect bad</code></pre>
 </div></div>
-<div class="paragraph"><p>The output of this command would be something similar to the following:</p></div>
+<div class="paragraph"><p>Then <code>git bisect</code> will respond with something like</p></div>
 <div class="listingblock">
 <div class="content">
-<pre><code>Bisecting: 337 revisions left to test after this</code></pre>
+<pre><code>Bisecting: 337 revisions left to test after this (roughly 9 steps)</code></pre>
 </div></div>
-<div class="paragraph"><p>You keep repeating this process, compiling the tree, testing it, and
-depending on whether it is good or bad issuing the command "git bisect good"
-or "git bisect bad" to ask for the next bisection.</p></div>
-<div class="paragraph"><p>Eventually there will be no more revisions left to bisect, and you
-will have been left with the first bad kernel revision in "refs/bisect/bad".</p></div>
+<div class="paragraph"><p>Keep repeating the process: compile the tree, test it, and depending
+on whether it is good or bad run <code>git bisect good</code> or <code>git bisect bad</code>
+to ask for the next commit that needs testing.</p></div>
+<div class="paragraph"><p>Eventually there will be no more revisions left to inspect, and the
+command will print out a description of the first bad commit. The
+reference <code>refs/bisect/bad</code> will be left pointing at that commit.</p></div>
 </div>
 <div class="sect2">
 <h3 id="_bisect_reset">Bisect reset</h3>
 <div class="paragraph"><p>After a bisect session, to clean up the bisection state and return to
-the original HEAD (i.e., to quit bisecting), issue the following command:</p></div>
+the original HEAD, issue the following command:</p></div>
 <div class="listingblock">
 <div class="content">
 <pre><code>$ git bisect reset</code></pre>
@@ -832,9 +845,70 @@
 <div class="content">
 <pre><code>$ git bisect reset &lt;commit&gt;</code></pre>
 </div></div>
-<div class="paragraph"><p>For example, <code>git bisect reset HEAD</code> will leave you on the current
-bisection commit and avoid switching commits at all, while <code>git bisect
-reset bisect/bad</code> will check out the first bad revision.</p></div>
+<div class="paragraph"><p>For example, <code>git bisect reset bisect/bad</code> will check out the first
+bad revision, while <code>git bisect reset HEAD</code> will leave you on the
+current bisection commit and avoid switching commits at all.</p></div>
+</div>
+<div class="sect2">
+<h3 id="_alternate_terms">Alternate terms</h3>
+<div class="paragraph"><p>Sometimes you are not looking for the commit that introduced a
+breakage, but rather for a commit that caused a change between some
+other "old" state and "new" state. For example, you might be looking
+for the commit that introduced a particular fix. Or you might be
+looking for the first commit in which the source-code filenames were
+finally all converted to your company&#8217;s naming standard. Or whatever.</p></div>
+<div class="paragraph"><p>In such cases it can be very confusing to use the terms "good" and
+"bad" to refer to "the state before the change" and "the state after
+the change". So instead, you can use the terms "old" and "new",
+respectively, in place of "good" and "bad". (But note that you cannot
+mix "good" and "bad" with "old" and "new" in a single session.)</p></div>
+<div class="paragraph"><p>In this more general usage, you provide <code>git bisect</code> with a "new"
+commit has some property and an "old" commit that doesn&#8217;t have that
+property. Each time <code>git bisect</code> checks out a commit, you test if that
+commit has the property. If it does, mark the commit as "new";
+otherwise, mark it as "old". When the bisection is done, <code>git bisect</code>
+will report which commit introduced the property.</p></div>
+<div class="paragraph"><p>To use "old" and "new" instead of "good" and bad, you must run <code>git
+bisect start</code> without commits as argument and then run the following
+commands to add the commits:</p></div>
+<div class="listingblock">
+<div class="content">
+<pre><code>git bisect old [&lt;rev&gt;]</code></pre>
+</div></div>
+<div class="paragraph"><p>to indicate that a commit was before the sought change, or</p></div>
+<div class="listingblock">
+<div class="content">
+<pre><code>git bisect new [&lt;rev&gt;...]</code></pre>
+</div></div>
+<div class="paragraph"><p>to indicate that it was after.</p></div>
+<div class="paragraph"><p>To get a reminder of the currently used terms, use</p></div>
+<div class="listingblock">
+<div class="content">
+<pre><code>git bisect terms</code></pre>
+</div></div>
+<div class="paragraph"><p>You can get just the old (respectively new) term with <code>git bisect term
+--term-old</code> or <code>git bisect term --term-good</code>.</p></div>
+<div class="paragraph"><p>If you would like to use your own terms instead of "bad"/"good" or
+"new"/"old", you can choose any names you like (except existing bisect
+subcommands like <code>reset</code>, <code>start</code>, &#8230;) by starting the
+bisection using</p></div>
+<div class="listingblock">
+<div class="content">
+<pre><code>git bisect start --term-old &lt;term-old&gt; --term-new &lt;term-new&gt;</code></pre>
+</div></div>
+<div class="paragraph"><p>For example, if you are looking for a commit that introduced a
+performance regression, you might use</p></div>
+<div class="listingblock">
+<div class="content">
+<pre><code>git bisect start --term-old fast --term-new slow</code></pre>
+</div></div>
+<div class="paragraph"><p>Or if you are looking for the commit that fixed a bug, you might use</p></div>
+<div class="listingblock">
+<div class="content">
+<pre><code>git bisect start --term-new fixed --term-old broken</code></pre>
+</div></div>
+<div class="paragraph"><p>Then, use <code>git bisect &lt;term-old&gt;</code> and <code>git bisect &lt;term-new&gt;</code> instead
+of <code>git bisect good</code> and <code>git bisect bad</code> to mark commits.</p></div>
 </div>
 <div class="sect2">
 <h3 id="_bisect_visualize">Bisect visualize</h3>
@@ -845,8 +919,8 @@
 <pre><code>$ git bisect visualize</code></pre>
 </div></div>
 <div class="paragraph"><p><code>view</code> may also be used as a synonym for <code>visualize</code>.</p></div>
-<div class="paragraph"><p>If the <em>DISPLAY</em> environment variable is not set, <em>git log</em> is used
-instead.  You can also give command line options such as <code>-p</code> and
+<div class="paragraph"><p>If the <code>DISPLAY</code> environment variable is not set, <em>git log</em> is used
+instead.  You can also give command-line options such as <code>-p</code> and
 <code>--stat</code>.</p></div>
 <div class="listingblock">
 <div class="content">
@@ -873,16 +947,16 @@
 </div>
 <div class="sect2">
 <h3 id="_avoiding_testing_a_commit">Avoiding testing a commit</h3>
-<div class="paragraph"><p>If, in the middle of a bisect session, you know that the next suggested
-revision is not a good one to test (e.g. the change the commit
-introduces is known not to work in your environment and you know it
-does not have anything to do with the bug you are chasing), you may
-want to find a nearby commit and try that instead.</p></div>
+<div class="paragraph"><p>If, in the middle of a bisect session, you know that the suggested
+revision is not a good one to test (e.g. it fails to build and you
+know that the failure does not have anything to do with the bug you
+are chasing), you can manually select a nearby commit and test that
+one instead.</p></div>
 <div class="paragraph"><p>For example:</p></div>
 <div class="listingblock">
 <div class="content">
 <pre><code>$ git bisect good/bad                   # previous round was good or bad.
-Bisecting: 337 revisions left to test after this
+Bisecting: 337 revisions left to test after this (roughly 9 steps)
 $ git bisect visualize                  # oops, that is uninteresting.
 $ git reset --hard HEAD~3               # try 3 revisions before what
                                         # was suggested</code></pre>
@@ -892,16 +966,17 @@
 </div>
 <div class="sect2">
 <h3 id="_bisect_skip">Bisect skip</h3>
-<div class="paragraph"><p>Instead of choosing by yourself a nearby commit, you can ask Git
-to do it for you by issuing the command:</p></div>
+<div class="paragraph"><p>Instead of choosing a nearby commit by yourself, you can ask Git to do
+it for you by issuing the command:</p></div>
 <div class="listingblock">
 <div class="content">
 <pre><code>$ git bisect skip                 # Current version cannot be tested</code></pre>
 </div></div>
-<div class="paragraph"><p>But Git may eventually be unable to tell the first bad commit among
-a bad commit and one or more skipped commits.</p></div>
-<div class="paragraph"><p>You can even skip a range of commits, instead of just one commit,
-using the "<em>&lt;commit1&gt;</em>..<em>&lt;commit2&gt;</em>" notation. For example:</p></div>
+<div class="paragraph"><p>However, if you skip a commit adjacent to the one you are looking for,
+Git will be unable to tell exactly which of those commits was the
+first bad one.</p></div>
+<div class="paragraph"><p>You can also skip a range of commits, instead of just one commit,
+using range notation. For example:</p></div>
 <div class="listingblock">
 <div class="content">
 <pre><code>$ git bisect skip v2.5..v2.6</code></pre>
@@ -914,8 +989,8 @@
 <div class="content">
 <pre><code>$ git bisect skip v2.5 v2.5..v2.6</code></pre>
 </div></div>
-<div class="paragraph"><p>This tells the bisect process that the commits between <code>v2.5</code> included
-and <code>v2.6</code> included should be skipped.</p></div>
+<div class="paragraph"><p>This tells the bisect process that the commits between <code>v2.5</code> and
+<code>v2.6</code> (inclusive) should be skipped.</p></div>
 </div>
 <div class="sect2">
 <h3 id="_cutting_down_bisection_by_giving_more_parameters_to_bisect_start">Cutting down bisection by giving more parameters to bisect start</h3>
@@ -944,21 +1019,21 @@
 <div class="content">
 <pre><code>$ git bisect run my_script arguments</code></pre>
 </div></div>
-<div class="paragraph"><p>Note that the script (<code>my_script</code> in the above example) should
-exit with code 0 if the current source code is good, and exit with a
-code between 1 and 127 (inclusive), except 125, if the current
-source code is bad.</p></div>
+<div class="paragraph"><p>Note that the script (<code>my_script</code> in the above example) should exit
+with code 0 if the current source code is good/old, and exit with a
+code between 1 and 127 (inclusive), except 125, if the current source
+code is bad/new.</p></div>
 <div class="paragraph"><p>Any other exit code will abort the bisect process. It should be noted
-that a program that terminates via "exit(-1)" leaves $? = 255, (see the
-exit(3) manual page), as the value is chopped with "&amp; 0377".</p></div>
+that a program that terminates via <code>exit(-1)</code> leaves $? = 255, (see the
+exit(3) manual page), as the value is chopped with <code>&amp; 0377</code>.</p></div>
 <div class="paragraph"><p>The special exit code 125 should be used when the current source code
 cannot be tested. If the script exits with this code, the current
 revision will be skipped (see <code>git bisect skip</code> above). 125 was chosen
 as the highest sensible value to use for this purpose, because 126 and 127
 are used by POSIX shells to signal specific error status (127 is for
-command not found, 126 is for command found but not executable---these
+command not found, 126 is for command found but not executable&#8212;these
 details do not matter, as they are normal errors in the script, as far as
-"bisect run" is concerned).</p></div>
+<code>bisect run</code> is concerned).</p></div>
 <div class="paragraph"><p>You may often find that during a bisect session you want to have
 temporary modifications (e.g. s/#define DEBUG 0/#define DEBUG 1/ in a
 header file, or "revision that does not have this commit needs this
@@ -969,7 +1044,7 @@
 before compiling, run the real test, and afterwards decide if the
 revision (possibly with the needed patch) passed the test and then
 rewind the tree to the pristine state.  Finally the script should exit
-with the status of the real test to let the "git bisect run" command loop
+with the status of the real test to let the <code>git bisect run</code> command loop
 determine the eventual outcome of the bisect session.</p></div>
 </div>
 </div>
@@ -983,7 +1058,7 @@
 </dt>
 <dd>
 <div class="paragraph"><p>Do not checkout the new working tree at each iteration of the bisection
-process. Instead just update a special reference named <em>BISECT_HEAD</em> to make
+process. Instead just update a special reference named <code>BISECT_HEAD</code> to make
 it point to the commit that should be tested.</p></div>
 <div class="paragraph"><p>This option may be useful when the test you would perform in each step
 does not require a checked out tree.</p></div>
@@ -1032,11 +1107,11 @@
 $ git bisect run ~/test.sh
 $ git bisect reset                   # quit the bisect session</code></pre>
 </div></div>
-<div class="paragraph"><p>Here we use a "test.sh" custom script. In this script, if "make"
+<div class="paragraph"><p>Here we use a <code>test.sh</code> custom script. In this script, if <code>make</code>
 fails, we skip the current commit.
-"check_test_case.sh" should "exit 0" if the test case passes,
-and "exit 1" otherwise.</p></div>
-<div class="paragraph"><p>It is safer if both "test.sh" and "check_test_case.sh" are
+<code>check_test_case.sh</code> should <code>exit 0</code> if the test case passes,
+and <code>exit 1</code> otherwise.</p></div>
+<div class="paragraph"><p>It is safer if both <code>test.sh</code> and <code>check_test_case.sh</code> are
 outside the repository to prevent interactions between the bisect,
 make and test processes and the scripts.</p></div>
 </li>
@@ -1109,7 +1184,30 @@
 has at least one parent whose reachable graph is fully traversable in the sense
 required by <em>git pack objects</em>.</p></div>
 </li>
+<li>
+<p>
+Look for a fix instead of a regression in the code
+</p>
+<div class="listingblock">
+<div class="content">
+<pre><code>$ git bisect start
+$ git bisect new HEAD    # current commit is marked as new
+$ git bisect old HEAD~10 # the tenth commit from now is marked as old</code></pre>
+</div></div>
+<div class="paragraph"><p>or:</p></div>
+</li>
 </ul></div>
+<div class="listingblock">
+<div class="content">
+<pre><code>$ git bisect start --term-old broken --term-new fixed
+$ git bisect fixed
+$ git bisect broken HEAD~10</code></pre>
+</div></div>
+<div class="sect2">
+<h3 id="_getting_help">Getting help</h3>
+<div class="paragraph"><p>Use <code>git bisect</code> to get a short usage description, and <code>git bisect
+help</code> or <code>git bisect -h</code> to get a long usage description.</p></div>
+</div>
 </div>
 </div>
 <div class="sect1">
# install git-bisect.html /usr/share/doc/git-doc/git-bisect.html
--- /usr/share/doc/git-doc/git-blame.html	2016-03-21 09:24:28.000000000 -0600
+++ git-blame.html	2016-10-15 00:43:16.872074103 -0600
@@ -750,7 +750,8 @@
 <div class="verseblock">
 <pre class="content"><em>git blame</em> [-c] [-b] [-l] [--root] [-t] [-f] [-n] [-s] [-e] [-p] [-w] [--incremental]
             [-L &lt;range&gt;] [-S &lt;revs-file&gt;] [-M] [-C] [-C] [-C] [--since=&lt;date&gt;]
-            [--abbrev=&lt;n&gt;] [&lt;rev&gt; | --contents &lt;file&gt; | --reverse &lt;rev&gt;] [--] &lt;file&gt;</pre>
+            [--progress] [--abbrev=&lt;n&gt;] [&lt;rev&gt; | --contents &lt;file&gt; | --reverse &lt;rev&gt;]
+            [--] &lt;file&gt;</pre>
 <div class="attribution">
 </div></div>
 </div>
@@ -774,7 +775,8 @@
 development history for when a code snippet occurred in a change. This makes it
 possible to track when a code snippet was added to a file, moved or copied
 between files, and eventually deleted or replaced. It works by searching for
-a text string in the diff. A small example:</p></div>
+a text string in the diff. A small example of the pickaxe interface
+that searches for <code>blame_usage</code>:</p></div>
 <div class="listingblock">
 <div class="content">
 <pre><code>$ git log --pretty=oneline -S'blame_usage'
@@ -802,7 +804,7 @@
 <dd>
 <p>
         Do not treat root commits as boundaries.  This can also be
-        controlled via the <code>blame.showroot</code> config option.
+        controlled via the <code>blame.showRoot</code> config option.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -817,7 +819,7 @@
 -L &lt;start&gt;,&lt;end&gt;
 </dt>
 <dt class="hdlist1">
--L :&lt;regex&gt;
+-L :&lt;funcname&gt;
 </dt>
 <dd>
 <p>
@@ -854,11 +856,12 @@
 of lines before or after the line given by &lt;start&gt;.</p></div>
 </li>
 </ul></div>
-<div class="paragraph"><p>If &#8220;:&lt;regex&gt;&#8221; is given in place of &lt;start&gt; and &lt;end&gt;, it denotes the range
-from the first funcname line that matches &lt;regex&gt;, up to the next
-funcname line. &#8220;:&lt;regex&gt;&#8221; searches from the end of the previous <code>-L</code> range,
-if any, otherwise from the start of file.
-&#8220;^:&lt;regex&gt;&#8221; searches from the start of file.</p></div>
+<div class="paragraph"><p>If &#8220;:&lt;funcname&gt;&#8221; is given in place of &lt;start&gt; and &lt;end&gt;, it is a
+regular expression that denotes the range from the first funcname line
+that matches &lt;funcname&gt;, up to the next funcname line. &#8220;:&lt;funcname&gt;&#8221;
+searches from the end of the previous <code>-L</code> range, if any, otherwise
+from the start of file. &#8220;^:&lt;funcname&gt;&#8221; searches from the start of
+file.</p></div>
 </dd>
 <dt class="hdlist1">
 -l
@@ -955,15 +958,26 @@
 </dt>
 <dd>
 <p>
-        The value is one of the following alternatives:
-        {relative,local,default,iso,rfc,short}. If --date is not
+        Specifies the format used to output dates. If --date is not
         provided, the value of the blame.date config variable is
         used. If the blame.date config variable is also not set, the
-        iso format is used. For more information, See the discussion
+        iso format is used. For supported values, see the discussion
         of the --date option at <a href="git-log.html">git-log(1)</a>.
 </p>
 </dd>
 <dt class="hdlist1">
+--[no-]progress
+</dt>
+<dd>
+<p>
+        Progress status is reported on the standard error stream
+        by default when it is attached to a terminal. This flag
+        enables progress reporting even if not attached to a
+        terminal. Can&#8217;t use <code>--progress</code> together with <code>--porcelain</code>
+        or <code>--incremental</code>.
+</p>
+</dd>
+<dt class="hdlist1">
 -M|&lt;num&gt;|
 </dt>
 <dd>
@@ -1075,6 +1089,8 @@
 <dd>
 <p>
         Show the author email instead of author name (Default: off).
+        This can also be controlled via the <code>blame.showEmail</code> config
+        option.
 </p>
 </dd>
 <dt class="hdlist1">
# install git-blame.html /usr/share/doc/git-doc/git-blame.html
--- /usr/share/doc/git-doc/git-branch.html	2016-03-21 09:24:28.000000000 -0600
+++ git-branch.html	2016-10-15 00:43:17.320074111 -0600
@@ -751,7 +751,8 @@
 <pre class="content"><em>git branch</em> [--color[=&lt;when&gt;] | --no-color] [-r | -a]
         [--list] [-v [--abbrev=&lt;length&gt; | --no-abbrev]]
         [--column[=&lt;options&gt;] | --no-column]
-        [(--merged | --no-merged | --contains) [&lt;commit&gt;]] [&lt;pattern&gt;&#8230;]
+        [(--merged | --no-merged | --contains) [&lt;commit&gt;]] [--sort=&lt;key&gt;]
+        [--points-at &lt;object&gt;] [&lt;pattern&gt;&#8230;]
 <em>git branch</em> [--set-upstream | --track | --no-track] [-l] [-f] &lt;branchname&gt; [&lt;start-point&gt;]
 <em>git branch</em> (--set-upstream-to=&lt;upstream&gt; | -u &lt;upstream&gt;) [&lt;branchname&gt;]
 <em>git branch</em> --unset-upstream [&lt;branchname&gt;]
@@ -780,9 +781,9 @@
 commit (i.e. the branches whose tip commits are reachable from the named
 commit) will be listed.  With <code>--no-merged</code> only branches not merged into
 the named commit will be listed.  If the &lt;commit&gt; argument is missing it
-defaults to <em>HEAD</em> (i.e. the tip of the current branch).</p></div>
+defaults to <code>HEAD</code> (i.e. the tip of the current branch).</p></div>
 <div class="paragraph"><p>The command&#8217;s second form creates a new branch head named &lt;branchname&gt;
-which points to the current <em>HEAD</em>, or &lt;start-point&gt; if given.</p></div>
+which points to the current <code>HEAD</code>, or &lt;start-point&gt; if given.</p></div>
 <div class="paragraph"><p>Note that this will create the new branch, but it will not switch the
 working tree to it; use "git checkout &lt;newbranch&gt;" to switch to the
 new branch.</p></div>
@@ -790,7 +791,7 @@
 branch (specifically the <code>branch.&lt;name&gt;.remote</code> and <code>branch.&lt;name&gt;.merge</code>
 configuration entries) so that <em>git pull</em> will appropriately merge from
 the remote-tracking branch. This behavior may be changed via the global
-<code>branch.autosetupmerge</code> configuration flag. That setting can be
+<code>branch.autoSetupMerge</code> configuration flag. That setting can be
 overridden by using the <code>--track</code> and <code>--no-track</code> options, and
 changed later using <code>git branch --set-upstream-to</code>.</p></div>
 <div class="paragraph"><p>With a <code>-m</code> or <code>-M</code> option, &lt;oldbranch&gt; will be renamed to &lt;newbranch&gt;.
@@ -830,7 +831,7 @@
 </dt>
 <dd>
 <p>
-        Delete a branch irrespective of its merged status.
+        Shortcut for <code>--delete --force</code>.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -858,6 +859,10 @@
 <p>
         Reset &lt;branchname&gt; to &lt;startpoint&gt; if &lt;branchname&gt; exists
         already. Without <code>-f</code> <em>git branch</em> refuses to change an existing branch.
+        In combination with <code>-d</code> (or <code>--delete</code>), allow deleting the
+        branch irrespective of its merged status. In combination with
+        <code>-m</code> (or <code>--move</code>), allow renaming the branch even if the new
+        branch name already exists.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -876,7 +881,7 @@
 </dt>
 <dd>
 <p>
-        Move/rename a branch even if the new branch name already exists.
+        Shortcut for <code>--move --force</code>.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1009,8 +1014,8 @@
         upstream when the new branch is checked out.
 </p>
 <div class="paragraph"><p>This behavior is the default when the start point is a remote-tracking branch.
-Set the branch.autosetupmerge configuration variable to <code>false</code> if you
-want <code>git checkout</code> and <code>git branch</code> to always behave as if <em>--no-track</em>
+Set the branch.autoSetupMerge configuration variable to <code>false</code> if you
+want <code>git checkout</code> and <code>git branch</code> to always behave as if <code>--no-track</code>
 were given. Set it to <code>always</code> if you want this behavior when the
 start-point is either a local or remote-tracking branch.</p></div>
 </dd>
@@ -1020,7 +1025,7 @@
 <dd>
 <p>
         Do not set up "upstream" configuration, even if the
-        branch.autosetupmerge configuration variable is true.
+        branch.autoSetupMerge configuration variable is true.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1062,7 +1067,9 @@
 <dd>
 <p>
         Open an editor and edit the text to explain what the branch is
-        for, to be used by various other commands (e.g. <code>request-pull</code>).
+        for, to be used by various other commands (e.g. <code>format-patch</code>,
+        <code>request-pull</code>, and <code>merge</code> (if enabled)). Multi-line explanations
+        may be used.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1130,6 +1137,29 @@
         &lt;branchname&gt; apply.
 </p>
 </dd>
+<dt class="hdlist1">
+--sort=&lt;key&gt;
+</dt>
+<dd>
+<p>
+        Sort based on the key given. Prefix <code>-</code> to sort in descending
+        order of the value. You may use the --sort=&lt;key&gt; option
+        multiple times, in which case the last key becomes the primary
+        key. The keys supported are the same as those in <code>git
+        for-each-ref</code>. Sort order defaults to sorting based on the
+        full refname (including <code>refs/...</code> prefix). This lists
+        detached HEAD (if present) first, then local branches and
+        finally remote-tracking branches.
+</p>
+</dd>
+<dt class="hdlist1">
+--points-at &lt;object&gt;
+</dt>
+<dd>
+<p>
+        Only list branches of the given object.
+</p>
+</dd>
 </dl></div>
 </div>
 </div>
# install git-branch.html /usr/share/doc/git-doc/git-branch.html
--- /usr/share/doc/git-doc/git-bundle.html	2016-03-21 09:24:28.000000000 -0600
+++ git-bundle.html	2016-10-15 00:43:17.644074117 -0600
@@ -762,7 +762,7 @@
 <div class="paragraph"><p>Some workflows require that one or more branches of development on one
 machine be replicated on another machine, but the two machines cannot
 be directly connected, and therefore the interactive Git protocols (git,
-ssh, rsync, http) cannot be used.  This command provides support for
+ssh, http) cannot be used.  This command provides support for
 <em>git fetch</em> and <em>git pull</em> to operate by packaging objects and references
 in an archive at the originating machine, then importing those into
 another repository using <em>git fetch</em> and <em>git pull</em>
# install git-bundle.html /usr/share/doc/git-doc/git-bundle.html
--- /usr/share/doc/git-doc/git-cat-file.html	2016-03-21 09:24:28.000000000 -0600
+++ git-cat-file.html	2016-10-15 00:43:18.076074126 -0600
@@ -748,8 +748,8 @@
 <h2 id="_synopsis">SYNOPSIS</h2>
 <div class="sectionbody">
 <div class="verseblock">
-<pre class="content"><em>git cat-file</em> (-t | -s | -e | -p | &lt;type&gt; | --textconv ) &lt;object&gt;
-<em>git cat-file</em> (--batch | --batch-check) &lt; &lt;list-of-objects&gt;</pre>
+<pre class="content"><em>git cat-file</em> (-t [--allow-unknown-type]| -s [--allow-unknown-type]| -e | -p | &lt;type&gt; | --textconv ) &lt;object&gt;
+<em>git cat-file</em> (--batch | --batch-check) [--follow-symlinks]</pre>
 <div class="attribution">
 </div></div>
 </div>
@@ -758,8 +758,8 @@
 <h2 id="_description">DESCRIPTION</h2>
 <div class="sectionbody">
 <div class="paragraph"><p>In its first form, the command provides the content or the type of an object in
-the repository. The type is required unless <em>-t</em> or <em>-p</em> is used to find the
-object type, or <em>-s</em> is used to find the object size, or <em>--textconv</em> is used
+the repository. The type is required unless <code>-t</code> or <code>-p</code> is used to find the
+object type, or <code>-s</code> is used to find the object size, or <code>--textconv</code> is used
 (which implies type "blob").</p></div>
 <div class="paragraph"><p>In the second form, a list of objects (separated by linefeeds) is provided on
 stdin, and the SHA-1, type, and size of each object is printed on stdout.</p></div>
@@ -863,16 +863,115 @@
         section <code>BATCH OUTPUT</code> below for details.
 </p>
 </dd>
+<dt class="hdlist1">
+--batch-all-objects
+</dt>
+<dd>
+<p>
+        Instead of reading a list of objects on stdin, perform the
+        requested batch operation on all objects in the repository and
+        any alternate object stores (not just reachable objects).
+        Requires <code>--batch</code> or <code>--batch-check</code> be specified. Note that
+        the objects are visited in order sorted by their hashes.
+</p>
+</dd>
+<dt class="hdlist1">
+--buffer
+</dt>
+<dd>
+<p>
+        Normally batch output is flushed after each object is output, so
+        that a process can interactively read and write from
+        <code>cat-file</code>. With this option, the output uses normal stdio
+        buffering; this is much more efficient when invoking
+        <code>--batch-check</code> on a large number of objects.
+</p>
+</dd>
+<dt class="hdlist1">
+--allow-unknown-type
+</dt>
+<dd>
+<p>
+        Allow -s or -t to query broken/corrupt objects of unknown type.
+</p>
+</dd>
+<dt class="hdlist1">
+--follow-symlinks
+</dt>
+<dd>
+<p>
+        With --batch or --batch-check, follow symlinks inside the
+        repository when requesting objects with extended SHA-1
+        expressions of the form tree-ish:path-in-tree.  Instead of
+        providing output about the link itself, provide output about
+        the linked-to object.  If a symlink points outside the
+        tree-ish (e.g. a link to /foo or a root-level link to ../foo),
+        the portion of the link which is outside the tree will be
+        printed.
+</p>
+<div class="paragraph"><p>This option does not (currently) work correctly when an object in the
+index is specified (e.g. <code>:link</code> instead of <code>HEAD:link</code>) rather than
+one in the tree.</p></div>
+<div class="paragraph"><p>This option cannot (currently) be used unless <code>--batch</code> or
+<code>--batch-check</code> is used.</p></div>
+<div class="paragraph"><p>For example, consider a git repository containing:</p></div>
+<div class="openblock">
+<div class="content">
+<div class="literalblock">
+<div class="content">
+<pre><code>f: a file containing "hello\n"
+link: a symlink to f
+dir/link: a symlink to ../f
+plink: a symlink to ../f
+alink: a symlink to /etc/passwd</code></pre>
+</div></div>
+</div></div>
+<div class="paragraph"><p>For a regular file <code>f</code>, <code>echo HEAD:f | git cat-file --batch</code> would print</p></div>
+<div class="openblock">
+<div class="content">
+<div class="literalblock">
+<div class="content">
+<pre><code>ce013625030ba8dba906f756967f9e9ca394464a blob 6</code></pre>
+</div></div>
+</div></div>
+<div class="paragraph"><p>And <code>echo HEAD:link | git cat-file --batch --follow-symlinks</code> would
+print the same thing, as would <code>HEAD:dir/link</code>, as they both point at
+<code>HEAD:f</code>.</p></div>
+<div class="paragraph"><p>Without <code>--follow-symlinks</code>, these would print data about the symlink
+itself.  In the case of <code>HEAD:link</code>, you would see</p></div>
+<div class="openblock">
+<div class="content">
+<div class="literalblock">
+<div class="content">
+<pre><code>4d1ae35ba2c8ec712fa2a379db44ad639ca277bd blob 1</code></pre>
+</div></div>
+</div></div>
+<div class="paragraph"><p>Both <code>plink</code> and <code>alink</code> point outside the tree, so they would
+respectively print:</p></div>
+<div class="openblock">
+<div class="content">
+<div class="literalblock">
+<div class="content">
+<pre><code>symlink 4
+../f</code></pre>
+</div></div>
+<div class="literalblock">
+<div class="content">
+<pre><code>symlink 11
+/etc/passwd</code></pre>
+</div></div>
+</div></div>
+</dd>
 </dl></div>
 </div>
 </div>
 <div class="sect1">
 <h2 id="_output">OUTPUT</h2>
 <div class="sectionbody">
-<div class="paragraph"><p>If <em>-t</em> is specified, one of the &lt;type&gt;.</p></div>
-<div class="paragraph"><p>If <em>-s</em> is specified, the size of the &lt;object&gt; in bytes.</p></div>
-<div class="paragraph"><p>If <em>-e</em> is specified, no output.</p></div>
-<div class="paragraph"><p>If <em>-p</em> is specified, the contents of &lt;object&gt; are pretty-printed.</p></div>
+<div class="paragraph"><p>If <code>-t</code> is specified, one of the &lt;type&gt;.</p></div>
+<div class="paragraph"><p>If <code>-s</code> is specified, the size of the &lt;object&gt; in bytes.</p></div>
+<div class="paragraph"><p>If <code>-e</code> is specified, no output.</p></div>
+<div class="paragraph"><p>If <code>-p</code> is specified, the contents of &lt;object&gt; are pretty-printed.</p></div>
 <div class="paragraph"><p>If &lt;type&gt; is specified, the raw (though uncompressed) contents of the &lt;object&gt;
 will be returned.</p></div>
 </div>
@@ -968,6 +1067,45 @@
 <div class="content">
 <pre><code>&lt;object&gt; SP missing LF</code></pre>
 </div></div>
+<div class="paragraph"><p>If --follow-symlinks is used, and a symlink in the repository points
+outside the repository, then <code>cat-file</code> will ignore any custom format
+and print:</p></div>
+<div class="listingblock">
+<div class="content">
+<pre><code>symlink SP &lt;size&gt; LF
+&lt;symlink&gt; LF</code></pre>
+</div></div>
+<div class="paragraph"><p>The symlink will either be absolute (beginning with a /), or relative
+to the tree root.  For instance, if dir/link points to ../../foo, then
+&lt;symlink&gt; will be ../foo.  &lt;size&gt; is the size of the symlink in bytes.</p></div>
+<div class="paragraph"><p>If --follow-symlinks is used, the following error messages will be
+displayed:</p></div>
+<div class="listingblock">
+<div class="content">
+<pre><code>&lt;object&gt; SP missing LF</code></pre>
+</div></div>
+<div class="paragraph"><p>is printed when the initial symlink requested does not exist.</p></div>
+<div class="listingblock">
+<div class="content">
+<pre><code>dangling SP &lt;size&gt; LF
+&lt;object&gt; LF</code></pre>
+</div></div>
+<div class="paragraph"><p>is printed when the initial symlink exists, but something that
+it (transitive-of) points to does not.</p></div>
+<div class="listingblock">
+<div class="content">
+<pre><code>loop SP &lt;size&gt; LF
+&lt;object&gt; LF</code></pre>
+</div></div>
+<div class="paragraph"><p>is printed for symlink loops (or any symlinks that
+require more than 40 link resolutions to resolve).</p></div>
+<div class="listingblock">
+<div class="content">
+<pre><code>notdir SP &lt;size&gt; LF
+&lt;object&gt; LF</code></pre>
+</div></div>
+<div class="paragraph"><p>is printed when, during symlink resolution, a file is used as a
+directory name.</p></div>
 </div>
 </div>
 <div class="sect1">
# install git-cat-file.html /usr/share/doc/git-doc/git-cat-file.html
--- /usr/share/doc/git-doc/git-check-attr.html	2016-03-21 09:24:28.000000000 -0600
+++ git-check-attr.html	2016-10-15 00:43:18.348074131 -0600
@@ -749,7 +749,7 @@
 <div class="sectionbody">
 <div class="verseblock">
 <pre class="content"><em>git check-attr</em> [-a | --all | attr&#8230;] [--] pathname&#8230;
-<em>git check-attr</em> --stdin [-z] [-a | --all | attr&#8230;] &lt; &lt;list-of-paths&gt;</pre>
+<em>git check-attr</em> --stdin [-z] [-a | --all | attr&#8230;]</pre>
 <div class="attribution">
 </div></div>
 </div>
@@ -788,7 +788,8 @@
 </dt>
 <dd>
 <p>
-        Read file names from stdin instead of from the command-line.
+        Read pathnames from the standard input, one per line,
+        instead of from the command-line.
 </p>
 </dd>
 <dt class="hdlist1">
# install git-check-attr.html /usr/share/doc/git-doc/git-check-attr.html
--- /usr/share/doc/git-doc/git-check-ignore.html	2016-03-21 09:24:28.000000000 -0600
+++ git-check-ignore.html	2016-10-15 00:43:18.628074136 -0600
@@ -749,7 +749,7 @@
 <div class="sectionbody">
 <div class="verseblock">
 <pre class="content"><em>git check-ignore</em> [options] pathname&#8230;
-<em>git check-ignore</em> [options] --stdin &lt; &lt;list-of-paths&gt;</pre>
+<em>git check-ignore</em> [options] --stdin</pre>
 <div class="attribution">
 </div></div>
 </div>
@@ -758,10 +758,11 @@
 <h2 id="_description">DESCRIPTION</h2>
 <div class="sectionbody">
 <div class="paragraph"><p>For each pathname given via the command-line or from a file via
-<code>--stdin</code>, show the pattern from .gitignore (or other input files to
-the exclude mechanism) that decides if the pathname is excluded or
-included.  Later patterns within a file take precedence over earlier
-ones.</p></div>
+<code>--stdin</code>, check whether the file is excluded by .gitignore (or other
+input files to the exclude mechanism) and output the path if it is
+excluded.</p></div>
+<div class="paragraph"><p>By default, tracked files are not shown at all since they are not
+subject to exclude rules; but see &#8216;--no-index&#8217;.</p></div>
 </div>
 </div>
 <div class="sect1">
@@ -783,7 +784,8 @@
 <dd>
 <p>
         Also output details about the matching pattern (if any)
-        for each given pathname.
+        for each given pathname. For precedence rules within and
+        between exclude sources, see <a href="gitignore.html">gitignore(5)</a>.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -791,7 +793,8 @@
 </dt>
 <dd>
 <p>
-        Read file names from stdin instead of from the command-line.
+        Read pathnames from the standard input, one per line,
+        instead of from the command-line.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -844,7 +847,7 @@
 is the line number of the pattern within that source.  If the pattern
 contained a <code>!</code> prefix or <code>/</code> suffix, it will be preserved in the
 output.  &lt;source&gt; will be an absolute path when referring to the file
-configured by <code>core.excludesfile</code>, or relative to the repository root
+configured by <code>core.excludesFile</code>, or relative to the repository root
 when referring to <code>.git/info/exclude</code> or a per-directory exclude file.</p></div>
 <div class="paragraph"><p>If <code>-z</code> is specified, the pathnames in the output are delimited by the
 null character; if <code>--verbose</code> is also specified then null characters
@@ -900,7 +903,7 @@
 <h2 id="_see_also">SEE ALSO</h2>
 <div class="sectionbody">
 <div class="paragraph"><p><a href="gitignore.html">gitignore(5)</a>
-<a href="gitconfig.html">gitconfig(5)</a>
+<a href="git-config.html">git-config(1)</a>
 <a href="git-ls-files.html">git-ls-files(1)</a></p></div>
 </div>
 </div>
# install git-check-ignore.html /usr/share/doc/git-doc/git-check-ignore.html
--- /usr/share/doc/git-doc/git-check-ref-format.html	2016-03-21 09:24:28.000000000 -0600
+++ git-check-ref-format.html	2016-10-15 00:43:20.024074162 -0600
@@ -833,7 +833,7 @@
 </ol></div>
 <div class="paragraph"><p>These rules make it easy for shell script based tools to parse
 reference names, pathname expansion by the shell when a reference name is used
-unquoted (by mistake), and also avoids ambiguities in certain
+unquoted (by mistake), and also avoid ambiguities in certain
 reference name expressions (see <a href="gitrevisions.html">gitrevisions(7)</a>):</p></div>
 <div class="olist arabic"><ol class="arabic">
 <li>
@@ -892,8 +892,8 @@
         Interpret &lt;refname&gt; as a reference name pattern for a refspec
         (as used with remote repositories).  If this option is
         enabled, &lt;refname&gt; is allowed to contain a single <code>*</code>
-        in place of a one full pathname component (e.g.,
-        <code>foo/*/bar</code> but not <code>foo/bar*</code>).
+        in the refspec (e.g., <code>foo/bar*/baz</code> or <code>foo/bar*baz/</code>
+        but not <code>foo/bar*/baz*</code>).
 </p>
 </dd>
 <dt class="hdlist1">
@@ -931,8 +931,8 @@
 </p>
 <div class="listingblock">
 <div class="content">
-<pre><code>$ ref=$(git check-ref-format --normalize "refs/heads/$newbranch") ||
-die "we do not like '$newbranch' as a branch name."</code></pre>
+<pre><code>$ ref=$(git check-ref-format --normalize "refs/heads/$newbranch")||
+{ echo "we do not like '$newbranch' as a branch name." &gt;&amp;2 ; exit 1 ; }</code></pre>
 </div></div>
 </li>
 </ul></div>
# install git-check-ref-format.html /usr/share/doc/git-doc/git-check-ref-format.html
--- /usr/share/doc/git-doc/git-checkout.html	2016-03-21 09:24:28.000000000 -0600
+++ git-checkout.html	2016-10-15 00:43:19.760074157 -0600
@@ -739,7 +739,7 @@
 <h2>NAME</h2>
 <div class="sectionbody">
 <p>git-checkout -
-   Checkout a branch or paths to the working tree
+   Switch branches or restore working tree files
 </p>
 </div>
 </div>
@@ -845,6 +845,9 @@
         (i.e.  commit, tag or tree) to update the index for the given
         paths before updating the working tree.
 </p>
+<div class="paragraph"><p><em>git checkout</em> with &lt;paths&gt; or <code>--patch</code> is used to restore modified or
+deleted paths to their original contents from the index or replace paths
+with the contents from a named &lt;tree-ish&gt; (most often a commit-ish).</p></div>
 <div class="paragraph"><p>The index may contain unmerged entries because of a previous failed merge.
 By default, if you try to check out such an entry from the index, the
 checkout operation will fail and nothing will be checked out.
@@ -872,6 +875,17 @@
 </p>
 </dd>
 <dt class="hdlist1">
+--[no-]progress
+</dt>
+<dd>
+<p>
+        Progress status is reported on the standard error stream
+        by default when it is attached to a terminal, unless <code>--quiet</code>
+        is specified. This flag enables progress reporting even if not
+        attached to a terminal, regardless of <code>--quiet</code>.
+</p>
+</dd>
+<dt class="hdlist1">
 -f
 </dt>
 <dt class="hdlist1">
@@ -897,6 +911,19 @@
         When checking out paths from the index, check out stage #2
         (<em>ours</em>) or #3 (<em>theirs</em>) for unmerged paths.
 </p>
+<div class="paragraph"><p>Note that during <code>git rebase</code> and <code>git pull --rebase</code>, <em>ours</em> and
+<em>theirs</em> may appear swapped; <code>--ours</code> gives the version from the
+branch the changes are rebased onto, while <code>--theirs</code> gives the
+version from the branch that holds your work that is being rebased.</p></div>
+<div class="paragraph"><p>This is because <code>rebase</code> is used in a workflow that treats the
+history at the remote as the shared canonical one, and treats the
+work done on the branch you are rebasing as the third-party work to
+be integrated, and you are temporarily assuming the role of the
+keeper of the canonical history during the rebase.  As the keeper of
+the canonical history, you need to view the history from the remote
+as <code>ours</code> (i.e. "our shared canonical history"), while what you did
+on your side branch as <code>theirs</code> (i.e. "one contributor&#8217;s work on top
+of it").</p></div>
 </dd>
 <dt class="hdlist1">
 -b &lt;new_branch&gt;
@@ -929,7 +956,7 @@
         When creating a new branch, set up "upstream" configuration. See
         "--track" in <a href="git-branch.html">git-branch(1)</a> for details.
 </p>
-<div class="paragraph"><p>If no <em>-b</em> option is given, the name of the new branch will be
+<div class="paragraph"><p>If no <code>-b</code> option is given, the name of the new branch will be
 derived from the remote-tracking branch, by looking at the local part of
 the refspec configured for the corresponding remote, and then stripping
 the initial part up to the "*".
@@ -937,7 +964,7 @@
 off of "origin/hack" (or "remotes/origin/hack", or even
 "refs/remotes/origin/hack").  If the given name has no slash, or the above
 guessing results in an empty name, the guessing is aborted.  You can
-explicitly give a name with <em>-b</em> in such a case.</p></div>
+explicitly give a name with <code>-b</code> in such a case.</p></div>
 </dd>
 <dt class="hdlist1">
 --no-track
@@ -945,7 +972,7 @@
 <dd>
 <p>
         Do not set up "upstream" configuration, even if the
-        branch.autosetupmerge configuration variable is true.
+        branch.autoSetupMerge configuration variable is true.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1038,7 +1065,7 @@
 <p>
         The same as --merge option above, but changes the way the
         conflicting hunks are presented, overriding the
-        merge.conflictstyle configuration variable.  Possible values are
+        merge.conflictStyle configuration variable.  Possible values are
         "merge" (default) and "diff3" (in addition to what is shown by
         "merge" style, shows the original contents).
 </p>
@@ -1061,6 +1088,17 @@
 section of <a href="git-add.html">git-add(1)</a> to learn how to operate the <code>--patch</code> mode.</p></div>
 </dd>
 <dt class="hdlist1">
+--ignore-other-worktrees
+</dt>
+<dd>
+<p>
+        <code>git checkout</code> refuses when the wanted ref is already checked
+        out by another worktree. This option makes it check the ref
+        out anyway. In other words, the ref can be held by more than one
+        worktree.
+</p>
+</dd>
+<dt class="hdlist1">
 &lt;branch&gt;
 </dt>
 <dd>
@@ -1249,6 +1287,19 @@
 </div>
 </div>
 <div class="sect1">
+<h2 id="_argument_disambiguation">ARGUMENT DISAMBIGUATION</h2>
+<div class="sectionbody">
+<div class="paragraph"><p>When there is only one argument given and it is not <code>--</code> (e.g. "git
+checkout abc"), and when the argument is both a valid <code>&lt;tree-ish&gt;</code>
+(e.g. a branch "abc" exists) and a valid <code>&lt;pathspec&gt;</code> (e.g. a file
+or a directory whose name is "abc" exists), Git would usually ask
+you to disambiguate.  Because checking out a branch is so common an
+operation, however, "git checkout abc" takes "abc" as a <code>&lt;tree-ish&gt;</code>
+in such a situation.  Use <code>git checkout -- &lt;pathspec&gt;</code> if you want
+to checkout these paths out of the index.</p></div>
+</div>
+</div>
+<div class="sect1">
 <h2 id="_examples">EXAMPLES</h2>
 <div class="sectionbody">
 <div class="olist arabic"><ol class="arabic">
# install git-checkout.html /usr/share/doc/git-doc/git-checkout.html
--- /usr/share/doc/git-doc/git-cherry-pick.html	2016-03-21 09:24:28.000000000 -0600
+++ git-cherry-pick.html	2016-10-15 00:43:20.384074169 -0600
@@ -748,7 +748,8 @@
 <h2 id="_synopsis">SYNOPSIS</h2>
 <div class="sectionbody">
 <div class="verseblock">
-<pre class="content"><em>git cherry-pick</em> [--edit] [-n] [-m parent-number] [-s] [-x] [--ff] &lt;commit&gt;&#8230;
+<pre class="content"><em>git cherry-pick</em> [--edit] [-n] [-m parent-number] [-s] [-x] [--ff]
+                  [-S[&lt;keyid&gt;]] &lt;commit&gt;&#8230;
 <em>git cherry-pick</em> --continue
 <em>git cherry-pick</em> --quit
 <em>git cherry-pick</em> --abort</pre>
@@ -815,7 +816,7 @@
         For a more complete list of ways to spell commits, see
         <a href="gitrevisions.html">gitrevisions(7)</a>.
         Sets of commits can be passed but no traversal is done by
-        default, as if the <em>--no-walk</em> option was specified, see
+        default, as if the <code>--no-walk</code> option was specified, see
         <a href="git-rev-list.html">git-rev-list(1)</a>. Note that specifying a range will
         feed all &lt;commit&gt;&#8230; arguments to a single revision walk
         (see a later example that uses <em>maint master..next</em>).
@@ -905,6 +906,20 @@
 <dd>
 <p>
         Add Signed-off-by line at the end of the commit message.
+        See the signoff option in <a href="git-commit.html">git-commit(1)</a> for more information.
+</p>
+</dd>
+<dt class="hdlist1">
+-S[&lt;keyid&gt;]
+</dt>
+<dt class="hdlist1">
+--gpg-sign[=&lt;keyid&gt;]
+</dt>
+<dd>
+<p>
+        GPG-sign commits. The <code>keyid</code> argument is optional and
+        defaults to the committer identity; if specified, it must be
+        stuck to the option without a space.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -941,7 +956,7 @@
 <dd>
 <p>
         By default, cherry-picking a commit with an empty message will fail.
-        This option overrides that behaviour, allowing commits with empty
+        This option overrides that behavior, allowing commits with empty
         messages to be cherry picked.
 </p>
 </dd>
@@ -952,7 +967,8 @@
 <p>
         If a commit being cherry picked duplicates a commit already in the
         current history, it will become empty.  By default these
-        redundant commits are ignored.  This option overrides that behavior and
+        redundant commits cause <code>cherry-pick</code> to stop so the user can
+        examine the commit. This option overrides that behavior and
         creates an empty commit object.  Implies <code>--allow-empty</code>.
 </p>
 </dd>
# install git-cherry-pick.html /usr/share/doc/git-doc/git-cherry-pick.html
--- /usr/share/doc/git-doc/git-clean.html	2016-03-21 09:24:28.000000000 -0600
+++ git-clean.html	2016-10-15 00:43:21.140074183 -0600
@@ -758,7 +758,7 @@
 <div class="sectionbody">
 <div class="paragraph"><p>Cleans the working tree by recursively removing files that are not
 under version control, starting from the current directory.</p></div>
-<div class="paragraph"><p>Normally, only files unknown to Git are removed, but if the <em>-x</em>
+<div class="paragraph"><p>Normally, only files unknown to Git are removed, but if the <code>-x</code>
 option is specified, ignored files are also removed. This can, for
 example, be useful to remove all build products.</p></div>
 <div class="paragraph"><p>If any optional <code>&lt;path&gt;...</code> arguments are given, only those paths
@@ -789,8 +789,10 @@
 <dd>
 <p>
         If the Git configuration variable clean.requireForce is not set
-        to false, <em>git clean</em> will refuse to run unless given -f, -n or
-        -i.
+        to false, <em>git clean</em> will refuse to delete files or directories
+        unless given -f, -n or -i. Git will refuse to delete directories
+        with .git sub directory or file unless a second -f
+        is given.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -900,7 +902,7 @@
 <dd>
 <p>
    This shows the files and directories to be deleted and issues an
-   "Input ignore patterns&gt;&gt;" prompt. You can input space-seperated
+   "Input ignore patterns&gt;&gt;" prompt. You can input space-separated
    patterns to exclude files and directories from deletion.
    E.g. "*.c *.h" will excludes files end with ".c" and ".h" from
    deletion. When you are satisfied with the filtered result, press
# install git-clean.html /usr/share/doc/git-doc/git-clean.html
--- /usr/share/doc/git-doc/git-clone.html	2016-03-21 09:24:28.000000000 -0600
+++ git-clone.html	2016-10-15 00:43:21.612074192 -0600
@@ -751,10 +751,10 @@
 <pre class="content"><em>git clone</em> [--template=&lt;template_directory&gt;]
           [-l] [-s] [--no-hardlinks] [-q] [-n] [--bare] [--mirror]
           [-o &lt;name&gt;] [-b &lt;name&gt;] [-u &lt;upload-pack&gt;] [--reference &lt;repository&gt;]
-          [--separate-git-dir &lt;git dir&gt;]
+          [--dissociate] [--separate-git-dir &lt;git dir&gt;]
           [--depth &lt;depth&gt;] [--[no-]single-branch]
-          [--recursive | --recurse-submodules] [--] &lt;repository&gt;
-          [&lt;directory&gt;]</pre>
+          [--recursive | --recurse-submodules] [--[no-]shallow-submodules]
+          [--jobs &lt;n&gt;] [--] &lt;repository&gt; [&lt;directory&gt;]</pre>
 <div class="attribution">
 </div></div>
 </div>
@@ -803,18 +803,16 @@
 never use the local optimizations).  Specifying <code>--no-local</code> will
 override the default when <code>/path/to/repo</code> is given, using the regular
 Git transport instead.</p></div>
-<div class="paragraph"><p>To force copying instead of hardlinking (which may be desirable if you
-are trying to make a back-up of your repository), but still avoid the
-usual "Git aware" transport mechanism, <code>--no-hardlinks</code> can be used.</p></div>
 </dd>
 <dt class="hdlist1">
 --no-hardlinks
 </dt>
 <dd>
 <p>
-        Optimize the cloning process from a repository on a
-        local filesystem by copying files under <code>.git/objects</code>
-        directory.
+        Force the cloning process from a repository on a local
+        filesystem to copy the files under the <code>.git/objects</code>
+        directory instead of using hardlinks. This may be desirable
+        if you are trying to make a back-up of your repository.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -861,7 +859,24 @@
         require fewer objects to be copied from the repository
         being cloned, reducing network and local storage costs.
 </p>
-<div class="paragraph"><p><strong>NOTE</strong>: see the NOTE for the <code>--shared</code> option.</p></div>
+<div class="paragraph"><p><strong>NOTE</strong>: see the NOTE for the <code>--shared</code> option, and also the
+<code>--dissociate</code> option.</p></div>
+</dd>
+<dt class="hdlist1">
+--dissociate
+</dt>
+<dd>
+<p>
+        Borrow the objects from reference repositories specified
+        with the <code>--reference</code> options only to reduce network
+        transfer, and stop borrowing from them after a clone is made
+        by making necessary local copies of borrowed objects.  This
+        option can also be used when cloning locally from a
+        repository that already borrows objects from another
+        repository&#8212;the new repository will borrow objects from the
+        same repository, and this option can be used to stop the
+        borrowing.
+</p>
 </dd>
 <dt class="hdlist1">
 --quiet
@@ -872,8 +887,7 @@
 <dd>
 <p>
         Operate quietly.  Progress is not reported to the standard
-        error stream. This flag is also passed to the &#8216;rsync&#8217;
-        command when given.
+        error stream.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1014,7 +1028,10 @@
 <dd>
 <p>
         Create a <em>shallow</em> clone with a history truncated to the
-        specified number of revisions.
+        specified number of commits. Implies <code>--single-branch</code> unless
+        <code>--no-single-branch</code> is given to fetch the histories near the
+        tips of all branches. If you want to clone submodules shallowly,
+        also pass <code>--shallow-submodules</code>.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1024,10 +1041,7 @@
 <p>
         Clone only the history leading to the tip of a single branch,
         either specified by the <code>--branch</code> option or the primary
-        branch remote&#8217;s <code>HEAD</code> points at. When creating a shallow
-        clone with the <code>--depth</code> option, this is the default, unless
-        <code>--no-single-branch</code> is given to fetch the histories near the
-        tips of all branches.
+        branch remote&#8217;s <code>HEAD</code> points at.
         Further fetches into the resulting repository will only update the
         remote-tracking branch for the branch this option was used for the
         initial cloning.  If the HEAD at the remote did not point at any
@@ -1052,6 +1066,14 @@
 </p>
 </dd>
 <dt class="hdlist1">
+--[no-]shallow-submodules
+</dt>
+<dd>
+<p>
+        All submodules which are cloned will be shallow with a depth of 1.
+</p>
+</dd>
+<dt class="hdlist1">
 --separate-git-dir=&lt;git dir&gt;
 </dt>
 <dd>
@@ -1064,6 +1086,18 @@
 </p>
 </dd>
 <dt class="hdlist1">
+-j &lt;n&gt;
+</dt>
+<dt class="hdlist1">
+--jobs &lt;n&gt;
+</dt>
+<dd>
+<p>
+        The number of submodules fetched at the same time.
+        Defaults to the <code>submodule.fetchJobs</code> option.
+</p>
+</dd>
+<dt class="hdlist1">
 &lt;repository&gt;
 </dt>
 <dd>
@@ -1096,9 +1130,8 @@
 Depending on the transport protocol, some of this information may be
 absent.</p></div>
 <div class="paragraph"><p>Git supports ssh, git, http, and https protocols (in addition, ftp,
-and ftps can be used for fetching and rsync can be used for fetching
-and pushing, but these are inefficient and deprecated; do not use
-them).</p></div>
+and ftps can be used for fetching, but this is inefficient and
+deprecated; do not use it).</p></div>
 <div class="paragraph"><p>The native transport (i.e. git:// URL) does no authentication and
 should be used with caution on unsecured networks.</p></div>
 <div class="paragraph"><p>The following syntaxes may be used with them:</p></div>
@@ -1123,11 +1156,6 @@
 ftp&#91;s&#93;://host.xz&#91;:port&#93;/path/to/repo.git/
 </p>
 </li>
-<li>
-<p>
-rsync://host.xz/path/to/repo.git/
-</p>
-</li>
 </ul></div>
 <div class="paragraph"><p>An alternative scp-like syntax may also be used with the ssh protocol:</p></div>
 <div class="ulist"><ul>
# install git-clone.html /usr/share/doc/git-doc/git-clone.html
--- /usr/share/doc/git-doc/git-commit-tree.html	2016-03-21 09:24:28.000000000 -0600
+++ git-commit-tree.html	2016-10-15 00:43:22.172074202 -0600
@@ -748,7 +748,7 @@
 <h2 id="_synopsis">SYNOPSIS</h2>
 <div class="sectionbody">
 <div class="verseblock">
-<pre class="content"><em>git commit-tree</em> &lt;tree&gt; [(-p &lt;parent&gt;)&#8230;] &lt; changelog
+<pre class="content"><em>git commit-tree</em> &lt;tree&gt; [(-p &lt;parent&gt;)&#8230;]
 <em>git commit-tree</em> [(-p &lt;parent&gt;)&#8230;] [-S[&lt;keyid&gt;]] [(-m &lt;message&gt;)&#8230;]
                   [(-F &lt;file&gt;)&#8230;] &lt;tree&gt;</pre>
 <div class="attribution">
@@ -794,7 +794,7 @@
 </dt>
 <dd>
 <p>
-        Each <em>-p</em> indicates the id of a parent commit object.
+        Each <code>-p</code> indicates the id of a parent commit object.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -818,9 +818,23 @@
 <dt class="hdlist1">
 -S[&lt;keyid&gt;]
 </dt>
+<dt class="hdlist1">
+--gpg-sign[=&lt;keyid&gt;]
+</dt>
+<dd>
+<p>
+        GPG-sign commits. The <code>keyid</code> argument is optional and
+        defaults to the committer identity; if specified, it must be
+        stuck to the option without a space.
+</p>
+</dd>
+<dt class="hdlist1">
+--no-gpg-sign
+</dt>
 <dd>
 <p>
-        GPG-sign commit.
+        Do not GPG-sign commit, to countermand a <code>--gpg-sign</code> option
+        given earlier on the command line.
 </p>
 </dd>
 </dl></div>
@@ -874,7 +888,7 @@
 <div class="sect1">
 <h2 id="_date_formats">DATE FORMATS</h2>
 <div class="sectionbody">
-<div class="paragraph"><p>The GIT_AUTHOR_DATE, GIT_COMMITTER_DATE environment variables
+<div class="paragraph"><p>The <code>GIT_AUTHOR_DATE</code>, <code>GIT_COMMITTER_DATE</code> environment variables
 support the following date formats:</p></div>
 <div class="dlist"><dl>
 <dt class="hdlist1">
@@ -922,20 +936,10 @@
 <div class="sect1">
 <h2 id="_discussion">Discussion</h2>
 <div class="sectionbody">
-<div class="paragraph"><p>At the core level, Git is character encoding agnostic.</p></div>
+<div class="paragraph"><p>Git is to some extent character encoding agnostic.</p></div>
 <div class="ulist"><ul>
 <li>
 <p>
-The pathnames recorded in the index and in the tree objects
-   are treated as uninterpreted sequences of non-NUL bytes.
-   What readdir(2) returns are what are recorded and compared
-   with the data Git keeps track of, which in turn are expected
-   to be what lstat(2) and creat(2) accepts.  There is no such
-   thing as pathname encoding translation.
-</p>
-</li>
-<li>
-<p>
 The contents of the blob objects are uninterpreted sequences
    of bytes.  There is no encoding translation at the core
    level.
@@ -943,8 +947,30 @@
 </li>
 <li>
 <p>
-The commit log messages are uninterpreted sequences of non-NUL
-   bytes.
+Path names are encoded in UTF-8 normalization form C. This
+   applies to tree objects, the index file, ref names, as well as
+   path names in command line arguments, environment variables
+   and config files (<code>.git/config</code> (see <a href="git-config.html">git-config(1)</a>),
+   <a href="gitignore.html">gitignore(5)</a>, <a href="gitattributes.html">gitattributes(5)</a> and
+   <a href="gitmodules.html">gitmodules(5)</a>).
+</p>
+<div class="paragraph"><p>Note that Git at the core level treats path names simply as
+sequences of non-NUL bytes, there are no path name encoding
+conversions (except on Mac and Windows). Therefore, using
+non-ASCII path names will mostly work even on platforms and file
+systems that use legacy extended ASCII encodings. However,
+repositories created on such systems will not work properly on
+UTF-8-based systems (e.g. Linux, Mac, Windows) and vice versa.
+Additionally, many Git-based tools simply assume path names to
+be UTF-8 and will fail to display other encodings correctly.</p></div>
+</li>
+<li>
+<p>
+Commit log messages are typically encoded in UTF-8, but other
+   extended ASCII encodings are also supported. This includes
+   ISO-8859-x, CP125x and many others, but <em>not</em> UTF-16/32,
+   EBCDIC and CJK multi-byte encodings (GBK, Shift-JIS, Big5,
+   EUC-x, CP9xx etc.).
 </p>
 </li>
 </ul></div>
# install git-commit-tree.html /usr/share/doc/git-doc/git-commit-tree.html
--- /usr/share/doc/git-doc/git-commit.html	2016-03-21 09:24:28.000000000 -0600
+++ git-commit.html	2016-10-15 00:43:22.800074214 -0600
@@ -862,7 +862,7 @@
 </dt>
 <dd>
 <p>
-        Like <em>-C</em>, but with <em>-c</em> the editor is invoked, so that
+        Like <em>-C</em>, but with <code>-c</code> the editor is invoked, so that
         the user can further edit the commit message.
 </p>
 </dd>
@@ -896,7 +896,7 @@
 <p>
         When used with -C/-c/--amend options, or when committing after a
         a conflicting cherry-pick, declare that the authorship of the
-        resulting commit now belongs of the committer. This also renews
+        resulting commit now belongs to the committer. This also renews
         the author timestamp.
 </p>
 </dd>
@@ -1021,7 +1021,11 @@
 <dd>
 <p>
         Add Signed-off-by line by the committer at the end of the commit
-        log message.
+        log message.  The meaning of a signoff depends on the project,
+        but it typically certifies that committer has
+        the rights to submit this work under the same license and
+        agrees to a Developer Certificate of Origin
+        (see <a href="http://developercertificate.org/">http://developercertificate.org/</a> for more information).
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1065,7 +1069,7 @@
 <p>
         This option determines how the supplied commit message should be
         cleaned up before committing.  The <em>&lt;mode&gt;</em> can be <code>strip</code>,
-        <code>whitespace</code>, <code>verbatim</code>, or <code>default</code>.
+        <code>whitespace</code>, <code>verbatim</code>, <code>scissors</code> or <code>default</code>.
 </p>
 <div class="openblock">
 <div class="content">
@@ -1075,8 +1079,8 @@
 </dt>
 <dd>
 <p>
-        Strip leading and trailing empty lines, trailing whitespace, and
-        #commentary and collapse consecutive empty lines.
+        Strip leading and trailing empty lines, trailing whitespace,
+        commentary and collapse consecutive empty lines.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1096,6 +1100,18 @@
 </p>
 </dd>
 <dt class="hdlist1">
+scissors
+</dt>
+<dd>
+<p>
+        Same as <code>whitespace</code>, except that everything from (and
+        including) the line
+        "<code># ------------------------ &gt;8 ------------------------</code>"
+        is truncated if the message is to be edited. "<code>#</code>" can be
+        customized with core.commentChar.
+</p>
+</dd>
+<dt class="hdlist1">
 default
 </dt>
 <dd>
@@ -1106,7 +1122,7 @@
 </dd>
 </dl></div>
 </div></div>
-<div class="paragraph"><p>The default can be changed by the <em>commit.cleanup</em> configuration
+<div class="paragraph"><p>The default can be changed by the <code>commit.cleanup</code> configuration
 variable (see <a href="git-config.html">git-config(1)</a>).</p></div>
 </dd>
 <dt class="hdlist1">
@@ -1193,12 +1209,13 @@
 </dt>
 <dd>
 <p>
-        Make a commit only from the paths specified on the
+        Make a commit by taking the updated working tree contents
+        of the paths specified on the
         command line, disregarding any contents that have been
-        staged so far. This is the default mode of operation of
+        staged for other paths. This is the default mode of operation of
         <em>git commit</em> if any paths are given on the command line,
         in which case this option can be omitted.
-        If this option is specified together with <em>--amend</em>, then
+        If this option is specified together with <code>--amend</code>, then
         no paths need to be specified, which can be used to amend
         the last commit without committing changes that have
         already been staged.
@@ -1248,9 +1265,16 @@
 <p>
         Show unified diff between the HEAD commit and what
         would be committed at the bottom of the commit message
-        template.  Note that this diff output doesn&#8217;t have its
-        lines prefixed with <em>#</em>.
-</p>
+        template to help the user describe the commit by reminding
+        what changes the commit has.
+        Note that this diff output doesn&#8217;t have its
+        lines prefixed with <em>#</em>. This diff will not be a part
+        of the commit message. See the <code>commit.verbose</code> configuration
+        variable in <a href="git-config.html">git-config(1)</a>.
+</p>
+<div class="paragraph"><p>If specified twice, show in addition the unified diff between
+what would be committed and the worktree files, i.e. the unstaged
+changes to tracked files.</p></div>
 </dd>
 <dt class="hdlist1">
 -q
@@ -1302,7 +1326,18 @@
 </dt>
 <dd>
 <p>
-        GPG-sign commit.
+        GPG-sign commits. The <code>keyid</code> argument is optional and
+        defaults to the committer identity; if specified, it must be
+        stuck to the option without a space.
+</p>
+</dd>
+<dt class="hdlist1">
+--no-gpg-sign
+</dt>
+<dd>
+<p>
+        Countermand <code>commit.gpgSign</code> configuration variable that is
+        set to force each and every commit to be signed.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1331,7 +1366,7 @@
 <div class="sect1">
 <h2 id="_date_formats">DATE FORMATS</h2>
 <div class="sectionbody">
-<div class="paragraph"><p>The GIT_AUTHOR_DATE, GIT_COMMITTER_DATE environment variables
+<div class="paragraph"><p>The <code>GIT_AUTHOR_DATE</code>, <code>GIT_COMMITTER_DATE</code> environment variables
 and the <code>--date</code> option
 support the following date formats:</p></div>
 <div class="dlist"><dl>
@@ -1473,20 +1508,10 @@
 as the commit title, and that title is used throughout Git.
 For example, <a href="git-format-patch.html">git-format-patch(1)</a> turns a commit into email, and it uses
 the title on the Subject line and the rest of the commit in the body.</p></div>
-<div class="paragraph"><p>At the core level, Git is character encoding agnostic.</p></div>
+<div class="paragraph"><p>Git is to some extent character encoding agnostic.</p></div>
 <div class="ulist"><ul>
 <li>
 <p>
-The pathnames recorded in the index and in the tree objects
-   are treated as uninterpreted sequences of non-NUL bytes.
-   What readdir(2) returns are what are recorded and compared
-   with the data Git keeps track of, which in turn are expected
-   to be what lstat(2) and creat(2) accepts.  There is no such
-   thing as pathname encoding translation.
-</p>
-</li>
-<li>
-<p>
 The contents of the blob objects are uninterpreted sequences
    of bytes.  There is no encoding translation at the core
    level.
@@ -1494,8 +1519,30 @@
 </li>
 <li>
 <p>
-The commit log messages are uninterpreted sequences of non-NUL
-   bytes.
+Path names are encoded in UTF-8 normalization form C. This
+   applies to tree objects, the index file, ref names, as well as
+   path names in command line arguments, environment variables
+   and config files (<code>.git/config</code> (see <a href="git-config.html">git-config(1)</a>),
+   <a href="gitignore.html">gitignore(5)</a>, <a href="gitattributes.html">gitattributes(5)</a> and
+   <a href="gitmodules.html">gitmodules(5)</a>).
+</p>
+<div class="paragraph"><p>Note that Git at the core level treats path names simply as
+sequences of non-NUL bytes, there are no path name encoding
+conversions (except on Mac and Windows). Therefore, using
+non-ASCII path names will mostly work even on platforms and file
+systems that use legacy extended ASCII encodings. However,
+repositories created on such systems will not work properly on
+UTF-8-based systems (e.g. Linux, Mac, Windows) and vice versa.
+Additionally, many Git-based tools simply assume path names to
+be UTF-8 and will fail to display other encodings correctly.</p></div>
+</li>
+<li>
+<p>
+Commit log messages are typically encoded in UTF-8, but other
+   extended ASCII encodings are also supported. This includes
+   ISO-8859-x, CP125x and many others, but <em>not</em> UTF-16/32,
+   EBCDIC and CJK multi-byte encodings (GBK, Shift-JIS, Big5,
+   EUC-x, CP9xx etc.).
 </p>
 </li>
 </ul></div>
@@ -1551,8 +1598,8 @@
 <h2 id="_environment_and_configuration_variables">ENVIRONMENT AND CONFIGURATION VARIABLES</h2>
 <div class="sectionbody">
 <div class="paragraph"><p>The editor used to edit the commit log message will be chosen from the
-GIT_EDITOR environment variable, the core.editor configuration variable, the
-VISUAL environment variable, or the EDITOR environment variable (in that
+<code>GIT_EDITOR</code> environment variable, the core.editor configuration variable, the
+<code>VISUAL</code> environment variable, or the <code>EDITOR</code> environment variable (in that
 order).  See <a href="git-var.html">git-var(1)</a> for details.</p></div>
 </div>
 </div>
# install git-commit.html /usr/share/doc/git-doc/git-commit.html
--- /usr/share/doc/git-doc/git-config.html	2016-03-21 09:24:28.000000000 -0600
+++ git-config.html	2016-10-15 00:43:26.284074280 -0600
@@ -748,18 +748,18 @@
 <h2 id="_synopsis">SYNOPSIS</h2>
 <div class="sectionbody">
 <div class="verseblock">
-<pre class="content"><em>git config</em> [&lt;file-option&gt;] [type] [-z|--null] name [value [value_regex]]
+<pre class="content"><em>git config</em> [&lt;file-option&gt;] [type] [--show-origin] [-z|--null] name [value [value_regex]]
 <em>git config</em> [&lt;file-option&gt;] [type] --add name value
 <em>git config</em> [&lt;file-option&gt;] [type] --replace-all name value [value_regex]
-<em>git config</em> [&lt;file-option&gt;] [type] [-z|--null] --get name [value_regex]
-<em>git config</em> [&lt;file-option&gt;] [type] [-z|--null] --get-all name [value_regex]
-<em>git config</em> [&lt;file-option&gt;] [type] [-z|--null] --get-regexp name_regex [value_regex]
+<em>git config</em> [&lt;file-option&gt;] [type] [--show-origin] [-z|--null] --get name [value_regex]
+<em>git config</em> [&lt;file-option&gt;] [type] [--show-origin] [-z|--null] --get-all name [value_regex]
+<em>git config</em> [&lt;file-option&gt;] [type] [--show-origin] [-z|--null] [--name-only] --get-regexp name_regex [value_regex]
 <em>git config</em> [&lt;file-option&gt;] [type] [-z|--null] --get-urlmatch name URL
 <em>git config</em> [&lt;file-option&gt;] --unset name [value_regex]
 <em>git config</em> [&lt;file-option&gt;] --unset-all name [value_regex]
 <em>git config</em> [&lt;file-option&gt;] --rename-section old_name new_name
 <em>git config</em> [&lt;file-option&gt;] --remove-section name
-<em>git config</em> [&lt;file-option&gt;] [-z|--null] -l | --list
+<em>git config</em> [&lt;file-option&gt;] [--show-origin] [-z|--null] [--name-only] -l | --list
 <em>git config</em> [&lt;file-option&gt;] --get-color name [default]
 <em>git config</em> [&lt;file-option&gt;] --get-colorbool name [stdout-is-tty]
 <em>git config</em> [&lt;file-option&gt;] -e | --edit</pre>
@@ -773,47 +773,47 @@
 <div class="paragraph"><p>You can query/set/replace/unset options with this command. The name is
 actually the section and the key separated by a dot, and the value will be
 escaped.</p></div>
-<div class="paragraph"><p>Multiple lines can be added to an option by using the <em>--add</em> option.
+<div class="paragraph"><p>Multiple lines can be added to an option by using the <code>--add</code> option.
 If you want to update or unset an option which can occur on multiple
 lines, a POSIX regexp <code>value_regex</code> needs to be given.  Only the
 existing values that match the regexp are updated or unset.  If
 you want to handle the lines that do <strong>not</strong> match the regex, just
 prepend a single exclamation mark in front (see also <a href="#EXAMPLES">[EXAMPLES]</a>).</p></div>
-<div class="paragraph"><p>The type specifier can be either <em>--int</em> or <em>--bool</em>, to make
+<div class="paragraph"><p>The type specifier can be either <code>--int</code> or <code>--bool</code>, to make
 <em>git config</em> ensure that the variable(s) are of the given type and
 convert the value to the canonical form (simple decimal number for int,
-a "true" or "false" string for bool), or <em>--path</em>, which does some
-path expansion (see <em>--path</em> below).  If no type specifier is passed, no
+a "true" or "false" string for bool), or <code>--path</code>, which does some
+path expansion (see <code>--path</code> below).  If no type specifier is passed, no
 checks or transformations are performed on the value.</p></div>
 <div class="paragraph"><p>When reading, the values are read from the system, global and
 repository local configuration files by default, and options
-<em>--system</em>, <em>--global</em>, <em>--local</em> and <em>--file &lt;filename&gt;</em> can be
+<code>--system</code>, <code>--global</code>, <code>--local</code> and <code>--file &lt;filename&gt;</code> can be
 used to tell the command to read from only that location (see <a href="#FILES">[FILES]</a>).</p></div>
 <div class="paragraph"><p>When writing, the new value is written to the repository local
-configuration file by default, and options <em>--system</em>, <em>--global</em>,
-<em>--file &lt;filename&gt;</em> can be used to tell the command to write to
-that location (you can say <em>--local</em> but that is the default).</p></div>
+configuration file by default, and options <code>--system</code>, <code>--global</code>,
+<code>--file &lt;filename&gt;</code> can be used to tell the command to write to
+that location (you can say <code>--local</code> but that is the default).</p></div>
 <div class="paragraph"><p>This command will fail with non-zero status upon error.  Some exit
 codes are:</p></div>
-<div class="olist arabic"><ol class="arabic">
+<div class="ulist"><ul>
 <li>
 <p>
-The config file is invalid (ret=3),
+The section or key is invalid (ret=1),
 </p>
 </li>
 <li>
 <p>
-can not write to the config file (ret=4),
+no section or name was provided (ret=2),
 </p>
 </li>
 <li>
 <p>
-no section or name was provided (ret=2),
+the config file is invalid (ret=3),
 </p>
 </li>
 <li>
 <p>
-the section or key is invalid (ret=1),
+the config file cannot be written (ret=4),
 </p>
 </li>
 <li>
@@ -831,7 +831,7 @@
 you try to use an invalid regexp (ret=6).
 </p>
 </li>
-</ol></div>
+</ul></div>
 <div class="paragraph"><p>On success, the command returns the exit code 0.</p></div>
 </div>
 </div>
@@ -873,8 +873,7 @@
 </dt>
 <dd>
 <p>
-        Like get, but does not fail if the number of values for the key
-        is not exactly one.
+        Like get, but returns all values for a multi-valued key.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -899,7 +898,7 @@
         given URL is returned (if no such key exists, the value for
         section.key is used as a fallback).  When given just the
         section as name, do so for all the keys in the section and
-        list them.
+        list them.  Returns error code 1 if no value is found.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -957,7 +956,7 @@
 </dt>
 <dd>
 <p>
-        Similar to <em>--file</em> but use the given blob instead of a file. E.g.
+        Similar to <code>--file</code> but use the given blob instead of a file. E.g.
         you can use <em>master:.gitmodules</em> to read values from the file
         <em>.gitmodules</em> in the master branch. See "SPECIFYING REVISIONS"
         section in <a href="gitrevisions.html">gitrevisions(7)</a> for a more complete list of
@@ -1004,7 +1003,7 @@
 </dt>
 <dd>
 <p>
-        List all variables set in config file.
+        List all variables set in config file, along with their values.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1064,6 +1063,26 @@
 </p>
 </dd>
 <dt class="hdlist1">
+--name-only
+</dt>
+<dd>
+<p>
+        Output only the names of config variables for <code>--list</code> or
+        <code>--get-regexp</code>.
+</p>
+</dd>
+<dt class="hdlist1">
+--show-origin
+</dt>
+<dd>
+<p>
+        Augment the output of all queried config options with the
+        origin type (file, standard input, blob, command line) and
+        the actual origin (config file path, ref, or blob id if
+        applicable).
+</p>
+</dd>
+<dt class="hdlist1">
 --get-colorbool name [stdout-is-tty]
 </dt>
 <dd>
@@ -1098,7 +1117,7 @@
 <dd>
 <p>
         Opens an editor to modify the specified config file; either
-        <em>--system</em>, <em>--global</em>, or repository (default).
+        <code>--system</code>, <code>--global</code>, or repository (default).
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1107,7 +1126,9 @@
 <dd>
 <p>
         Respect <code>include.*</code> directives in config files when looking up
-        values. Defaults to on.
+        values. Defaults to <code>off</code> when a specific file is given (e.g.,
+        using <code>--file</code>, <code>--global</code>, etc) and <code>on</code> when searching all
+        config files.
 </p>
 </dd>
 </dl></div>
@@ -1116,7 +1137,7 @@
 <div class="sect1">
 <h2 id="FILES">FILES</h2>
 <div class="sectionbody">
-<div class="paragraph"><p>If not set explicitly with <em>--file</em>, there are four files where
+<div class="paragraph"><p>If not set explicitly with <code>--file</code>, there are four files where
 <em>git config</em> will search for configuration options:</p></div>
 <div class="dlist"><dl>
 <dt class="hdlist1">
@@ -1166,12 +1187,14 @@
 <div class="paragraph"><p>The files are read in the order given above, with last value found taking
 precedence over values read earlier.  When multiple values are taken then all
 values of a key from all files will be used.</p></div>
+<div class="paragraph"><p>You may override individual configuration parameters when running any git
+command by using the <code>-c</code> option. See <a href="git.html">git(1)</a> for details.</p></div>
 <div class="paragraph"><p>All writing options will per default write to the repository specific
-configuration file. Note that this also affects options like <em>--replace-all</em>
-and <em>--unset</em>. <strong><em>git config</em> will only ever change one file at a time</strong>.</p></div>
-<div class="paragraph"><p>You can override these rules either by command line options or by environment
-variables. The <em>--global</em> and the <em>--system</em> options will limit the file used
-to the global or system-wide file respectively. The GIT_CONFIG environment
+configuration file. Note that this also affects options like <code>--replace-all</code>
+and <code>--unset</code>. <strong><em>git config</em> will only ever change one file at a time</strong>.</p></div>
+<div class="paragraph"><p>You can override these rules either by command-line options or by environment
+variables. The <code>--global</code> and the <code>--system</code> options will limit the file used
+to the global or system-wide file respectively. The <code>GIT_CONFIG</code> environment
 variable has a similar effect, but you can specify any filename you want.</p></div>
 </div>
 </div>
@@ -1324,7 +1347,7 @@
 % git config --bool --get-urlmatch http.sslverify https://weak.example.com
 false
 % git config --get-urlmatch http https://weak.example.com
-http.cookiefile /tmp/cookie.txt
+http.cookieFile /tmp/cookie.txt
 http.sslverify false</code></pre>
 </div></div>
 </div>
@@ -1344,7 +1367,8 @@
 dot-separated segment and the section name is everything before the last
 dot. The variable names are case-insensitive, allow only alphanumeric
 characters and <code>-</code>, and must start with an alphabetic character.  Some
-variables may appear multiple times.</p></div>
+variables may appear multiple times; we say then that the variable is
+multivalued.</p></div>
 <div class="sect2">
 <h3 id="_syntax">Syntax</h3>
 <div class="paragraph"><p>The syntax is fairly flexible and permissive; whitespaces are mostly
@@ -1352,7 +1376,7 @@
 blank lines are ignored.</p></div>
 <div class="paragraph"><p>The file consists of sections and variables.  A section begins with
 the name of the section in square brackets and continues until the next
-section begins.  Section names are not case sensitive.  Only alphanumeric
+section begins.  Section names are case-insensitive.  Only alphanumeric
 characters, <code>-</code> and <code>.</code> are allowed in section names.  Each variable
 must belong to some section, which means that there must be a section
 header before the first setting of a variable.</p></div>
@@ -1364,8 +1388,8 @@
 <pre><code>        [section "subsection"]</code></pre>
 </div></div>
 <div class="paragraph"><p>Subsection names are case sensitive and can contain any characters except
-newline (doublequote <code>"</code> and backslash have to be escaped as <code>\"</code> and <code>\\</code>,
-respectively).  Section headers cannot span multiple
+newline (doublequote <code>"</code> and backslash can be included by escaping them
+as <code>\"</code> and <code>\\</code>, respectively).  Section headers cannot span multiple
 lines.  Variables may belong directly to a section or to a given subsection.
 You can have <code>[section]</code> if you have <code>[section "subsection"]</code>, but you
 don&#8217;t need to.</p></div>
@@ -1375,44 +1399,36 @@
 restrictions as section names.</p></div>
 <div class="paragraph"><p>All the other lines (and the remainder of the line after the section
 header) are recognized as setting variables, in the form
-<em>name = value</em>.  If there is no equal sign on the line, the entire line
-is taken as <em>name</em> and the variable is recognized as boolean "true".
+<em>name = value</em> (or just <em>name</em>, which is a short-hand to say that
+the variable is the boolean "true").
 The variable names are case-insensitive, allow only alphanumeric characters
-and <code>-</code>, and must start with an alphabetic character.  There can be more
-than one value for a given variable; we say then that the variable is
-multivalued.</p></div>
-<div class="paragraph"><p>Leading and trailing whitespace in a variable value is discarded.
-Internal whitespace within a variable value is retained verbatim.</p></div>
-<div class="paragraph"><p>The values following the equals sign in variable assign are all either
-a string, an integer, or a boolean.  Boolean values may be given as yes/no,
-1/0, true/false or on/off.  Case is not significant in boolean values, when
-converting value to the canonical form using <em>--bool</em> type specifier;
-<em>git config</em> will ensure that the output is "true" or "false".</p></div>
-<div class="paragraph"><p>String values may be entirely or partially enclosed in double quotes.
-You need to enclose variable values in double quotes if you want to
-preserve leading or trailing whitespace, or if the variable value contains
-comment characters (i.e. it contains <em>#</em> or <em>;</em>).
-Double quote <code>"</code> and backslash <code>\</code> characters in variable values must
-be escaped: use <code>\"</code> for <code>"</code> and <code>\\</code> for <code>\</code>.</p></div>
+and <code>-</code>, and must start with an alphabetic character.</p></div>
+<div class="paragraph"><p>A line that defines a value can be continued to the next line by
+ending it with a <code>\</code>; the backquote and the end-of-line are
+stripped.  Leading whitespaces after <em>name =</em>, the remainder of the
+line after the first comment character <em>#</em> or <em>;</em>, and trailing
+whitespaces of the line are discarded unless they are enclosed in
+double quotes.  Internal whitespaces within the value are retained
+verbatim.</p></div>
+<div class="paragraph"><p>Inside double quotes, double quote <code>"</code> and backslash <code>\</code> characters
+must be escaped: use <code>\"</code> for <code>"</code> and <code>\\</code> for <code>\</code>.</p></div>
 <div class="paragraph"><p>The following escape sequences (beside <code>\"</code> and <code>\\</code>) are recognized:
 <code>\n</code> for newline character (NL), <code>\t</code> for horizontal tabulation (HT, TAB)
-and <code>\b</code> for backspace (BS).  No other char escape sequence, nor octal
-char sequences are valid.</p></div>
-<div class="paragraph"><p>Variable values ending in a <code>\</code> are continued on the next line in the
-customary UNIX fashion.</p></div>
-<div class="paragraph"><p>Some variables may require a special value format.</p></div>
+and <code>\b</code> for backspace (BS).  Other char escape sequences (including octal
+escape sequences) are invalid.</p></div>
 </div>
 <div class="sect2">
 <h3 id="_includes">Includes</h3>
 <div class="paragraph"><p>You can include one config file from another by setting the special
 <code>include.path</code> variable to the name of the file to be included. The
+variable takes a pathname as its value, and is subject to tilde
+expansion.</p></div>
+<div class="paragraph"><p>The
 included file is expanded immediately, as if its contents had been
 found at the location of the include directive. If the value of the
 <code>include.path</code> variable is a relative path, the path is considered to be
 relative to the configuration file in which the include directive was
-found. The value of <code>include.path</code> is subject to tilde expansion: <code>~/</code>
-is expanded to the value of <code>$HOME</code>, and <code>~user/</code> to the specified
-user&#8217;s home directory. See below for examples.</p></div>
+found.  See below for examples.</p></div>
 </div>
 <div class="sect2">
 <h3 id="_example">Example</h3>
@@ -1448,15 +1464,113 @@
 <pre><code>[include]
         path = /path/to/foo.inc ; include by absolute path
         path = foo ; expand "foo" relative to the current file
-        path = ~/foo ; expand "foo" in your $HOME directory</code></pre>
+        path = ~/foo ; expand "foo" in your `$HOME` directory</code></pre>
 </div></div>
 </div>
 <div class="sect2">
+<h3 id="_values">Values</h3>
+<div class="paragraph"><p>Values of many variables are treated as a simple string, but there
+are variables that take values of specific types and there are rules
+as to how to spell them.</p></div>
+<div class="dlist"><dl>
+<dt class="hdlist1">
+boolean
+</dt>
+<dd>
+<p>
+       When a variable is said to take a boolean value, many
+       synonyms are accepted for <em>true</em> and <em>false</em>; these are all
+       case-insensitive.
+</p>
+<div class="dlist"><dl>
+<dt class="hdlist1">
+true
+</dt>
+<dd>
+<p>
+Boolean true can be spelled as <code>yes</code>, <code>on</code>, <code>true</code>,
+                or <code>1</code>.  Also, a variable defined without <code>= &lt;value&gt;</code>
+                is taken as true.
+</p>
+</dd>
+<dt class="hdlist1">
+false
+</dt>
+<dd>
+<p>
+Boolean false can be spelled as <code>no</code>, <code>off</code>,
+                <code>false</code>, or <code>0</code>.
+</p>
+<div class="paragraph"><p>When converting value to the canonical form using <code>--bool</code> type
+specifier; <em>git config</em> will ensure that the output is "true" or
+"false" (spelled in lowercase).</p></div>
+</dd>
+</dl></div>
+</dd>
+<dt class="hdlist1">
+integer
+</dt>
+<dd>
+<p>
+       The value for many variables that specify various sizes can
+       be suffixed with <code>k</code>, <code>M</code>,&#8230; to mean "scale the number by
+       1024", "by 1024x1024", etc.
+</p>
+</dd>
+<dt class="hdlist1">
+color
+</dt>
+<dd>
+<p>
+       The value for a variable that takes a color is a list of
+       colors (at most two, one for foreground and one for background)
+       and attributes (as many as you want), separated by spaces.
+</p>
+<div class="paragraph"><p>The basic colors accepted are <code>normal</code>, <code>black</code>, <code>red</code>, <code>green</code>, <code>yellow</code>,
+<code>blue</code>, <code>magenta</code>, <code>cyan</code> and <code>white</code>.  The first color given is the
+foreground; the second is the background.</p></div>
+<div class="paragraph"><p>Colors may also be given as numbers between 0 and 255; these use ANSI
+256-color mode (but note that not all terminals may support this).  If
+your terminal supports it, you may also specify 24-bit RGB values as
+hex, like <code>#ff0ab3</code>.</p></div>
+<div class="paragraph"><p>The accepted attributes are <code>bold</code>, <code>dim</code>, <code>ul</code>, <code>blink</code>, <code>reverse</code>,
+<code>italic</code>, and <code>strike</code> (for crossed-out or "strikethrough" letters).
+The position of any attributes with respect to the colors
+(before, after, or in between), doesn&#8217;t matter. Specific attributes may
+be turned off by prefixing them with <code>no</code> or <code>no-</code> (e.g., <code>noreverse</code>,
+<code>no-ul</code>, etc).</p></div>
+<div class="paragraph"><p>For git&#8217;s pre-defined color slots, the attributes are meant to be reset
+at the beginning of each item in the colored output. So setting
+<code>color.decorate.branch</code> to <code>black</code> will paint that branch name in a
+plain <code>black</code>, even if the previous thing on the same output line (e.g.
+opening parenthesis before the list of branch names in <code>log --decorate</code>
+output) is set to be painted with <code>bold</code> or some other attribute.
+However, custom log formats may do more complicated and layered
+coloring, and the negated forms may be useful there.</p></div>
+</dd>
+<dt class="hdlist1">
+pathname
+</dt>
+<dd>
+<p>
+        A variable that takes a pathname value can be given a
+        string that begins with "<code>~/</code>" or "<code>~user/</code>", and the usual
+        tilde expansion happens to such a string: <code>~/</code>
+        is expanded to the value of <code>$HOME</code>, and <code>~user/</code> to the
+        specified user&#8217;s home directory.
+</p>
+</dd>
+</dl></div>
+</div>
+<div class="sect2">
 <h3 id="_variables">Variables</h3>
 <div class="paragraph"><p>Note that this list is non-comprehensive and not necessarily complete.
 For command-specific variables, you will find a more detailed description
-in the appropriate manual page. You will find a description of non-core
-porcelain configuration variables in the respective porcelain documentation.</p></div>
+in the appropriate manual page.</p></div>
+<div class="paragraph"><p>Other git-related tools may and do use their own variables.  When
+inventing new variables for use in your own tool, make sure their
+names do not conflict with those that are used by Git itself and
+other popular tools, and describe them in your documentation.</p></div>
 <div class="dlist"><dl>
 <dt class="hdlist1">
 advice.*
@@ -1476,7 +1590,7 @@
 <dd>
 <p>
                 Set this variable to <em>false</em> if you want to disable
-                <em>pushNonFFCurrent</em>, <em>pushNonFFDefault</em>,
+                <em>pushNonFFCurrent</em>,
                 <em>pushNonFFMatching</em>, <em>pushAlreadyExists</em>,
                 <em>pushFetchFirst</em>, and <em>pushNeedsForce</em>
                 simultaneously.
@@ -1492,18 +1606,6 @@
 </p>
 </dd>
 <dt class="hdlist1">
-pushNonFFDefault
-</dt>
-<dd>
-<p>
-                Advice to set <em>push.default</em> to <em>upstream</em> or <em>current</em>
-                when you ran <a href="git-push.html">git-push(1)</a> and pushed <em>matching
-                refs</em> by default (i.e. you did not provide an explicit
-                refspec, and no <em>push.default</em> configuration was set)
-                and it resulted in a non-fast-forward error.
-</p>
-</dd>
-<dt class="hdlist1">
 pushNonFFMatching
 </dt>
 <dd>
@@ -1630,16 +1732,38 @@
 </dt>
 <dd>
 <p>
-        If false, the executable bit differences between the index and
-        the working tree are ignored; useful on broken filesystems like FAT.
-        See <a href="git-update-index.html">git-update-index(1)</a>.
+        Tells Git if the executable bit of files in the working tree
+        is to be honored.
 </p>
-<div class="paragraph"><p>The default is true, except <a href="git-clone.html">git-clone(1)</a> or <a href="git-init.html">git-init(1)</a>
-will probe and set core.fileMode false if appropriate when the
-repository is created.</p></div>
+<div class="paragraph"><p>Some filesystems lose the executable bit when a file that is
+marked as executable is checked out, or checks out an
+non-executable file with executable bit on.
+<a href="git-clone.html">git-clone(1)</a> or <a href="git-init.html">git-init(1)</a> probe the filesystem
+to see if it handles the executable bit correctly
+and this variable is automatically set as necessary.</p></div>
+<div class="paragraph"><p>A repository, however, may be on a filesystem that handles
+the filemode correctly, and this variable is set to <em>true</em>
+when created, but later may be made accessible from another
+environment that loses the filemode (e.g. exporting ext4 via
+CIFS mount, visiting a Cygwin created repository with
+Git for Windows or Eclipse).
+In such a case it may be necessary to set this variable to <em>false</em>.
+See <a href="git-update-index.html">git-update-index(1)</a>.</p></div>
+<div class="paragraph"><p>The default is true (when core.filemode is not specified in the config file).</p></div>
 </dd>
 <dt class="hdlist1">
-core.ignorecase
+core.hideDotFiles
+</dt>
+<dd>
+<p>
+        (Windows-only) If true, mark newly-created directories and files whose
+        name starts with a dot as hidden.  If <em>dotGitOnly</em>, only the <code>.git/</code>
+        directory is hidden, but no other files starting with a dot.  The
+        default mode is <em>dotGitOnly</em>.
+</p>
+</dd>
+<dt class="hdlist1">
+core.ignoreCase
 </dt>
 <dd>
 <p>
@@ -1651,16 +1775,16 @@
         "Makefile".
 </p>
 <div class="paragraph"><p>The default is false, except <a href="git-clone.html">git-clone(1)</a> or <a href="git-init.html">git-init(1)</a>
-will probe and set core.ignorecase true if appropriate when the repository
+will probe and set core.ignoreCase true if appropriate when the repository
 is created.</p></div>
 </dd>
 <dt class="hdlist1">
-core.precomposeunicode
+core.precomposeUnicode
 </dt>
 <dd>
 <p>
         This option is only used by Mac OS implementation of Git.
-        When core.precomposeunicode=true, Git reverts the unicode decomposition
+        When core.precomposeUnicode=true, Git reverts the unicode decomposition
         of filenames done by Mac OS. This is useful when sharing a repository
         between Mac OS and Linux or Windows.
         (Git for Windows 1.7.10 or higher is needed, or Git under cygwin 1.7).
@@ -1702,7 +1826,21 @@
 </p>
 </dd>
 <dt class="hdlist1">
-core.checkstat
+core.untrackedCache
+</dt>
+<dd>
+<p>
+        Determines what to do about the untracked cache feature of the
+        index. It will be kept, if this variable is unset or set to
+        <code>keep</code>. It will automatically be added if set to <code>true</code>. And
+        it will automatically be removed, if set to <code>false</code>. Before
+        setting it to <code>true</code>, you should check that mtime is working
+        properly on your system.
+        See <a href="git-update-index.html">git-update-index(1)</a>. <code>keep</code> by default.
+</p>
+</dd>
+<dt class="hdlist1">
+core.checkStat
 </dt>
 <dd>
 <p>
@@ -1713,7 +1851,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
-core.quotepath
+core.quotePath
 </dt>
 <dd>
 <p>
@@ -1735,9 +1873,9 @@
 <dd>
 <p>
         Sets the line ending type to use in the working directory for
-        files that have the <code>text</code> property set.  Alternatives are
-        <em>lf</em>, <em>crlf</em> and <em>native</em>, which uses the platform&#8217;s native
-        line ending.  The default value is <code>native</code>.  See
+        files that have the <code>text</code> property set when core.autocrlf is false.
+        Alternatives are <em>lf</em>, <em>crlf</em> and <em>native</em>, which uses the platform&#8217;s
+        native line ending.  The default value is <code>native</code>.  See
         <a href="gitattributes.html">gitattributes(5)</a> for more information on end-of-line
         conversion.
 </p>
@@ -1793,13 +1931,11 @@
 </dt>
 <dd>
 <p>
-        Setting this variable to "true" is almost the same as setting
-        the <code>text</code> attribute to "auto" on all files except that text
-        files are not guaranteed to be normalized: files that contain
-        <code>CRLF</code> in the repository will not be touched.  Use this
-        setting if you want to have <code>CRLF</code> line endings in your
-        working directory even though the repository does not have
-        normalized line endings.  This variable can be set to <em>input</em>,
+        Setting this variable to "true" is the same as setting
+        the <code>text</code> attribute to "auto" on all files and core.eol to "crlf".
+        Set to true if you want to have <code>CRLF</code> line endings in your
+        working directory and the repository has LF line endings.
+        This variable can be set to <em>input</em>,
         in which case no output conversion is performed.
 </p>
 </dd>
@@ -1831,7 +1967,7 @@
         may be set multiple times and is matched in the given order;
         the first match wins.
 </p>
-<div class="paragraph"><p>Can be overridden by the <em>GIT_PROXY_COMMAND</em> environment variable
+<div class="paragraph"><p>Can be overridden by the <code>GIT_PROXY_COMMAND</code> environment variable
 (which always applies universally, without the special "for"
 handling).</p></div>
 <div class="paragraph"><p>The special string <code>none</code> can be used as the proxy command to
@@ -1840,21 +1976,35 @@
 proxy use, while defaulting to a common proxy for external domains.</p></div>
 </dd>
 <dt class="hdlist1">
-core.ignoreStat
+core.sshCommand
 </dt>
 <dd>
 <p>
-        If true, commands which modify both the working tree and the index
-        will mark the updated paths with the "assume unchanged" bit in the
-        index. These marked files are then assumed to stay unchanged in the
-        working tree, until you mark them otherwise manually - Git will not
-        detect the file changes by lstat() calls. This is useful on systems
-        where those are very slow, such as Microsoft Windows.
-        See <a href="git-update-index.html">git-update-index(1)</a>.
-        False by default.
+        If this variable is set, <code>git fetch</code> and <code>git push</code> will
+        use the specified command instead of <code>ssh</code> when they need to
+        connect to a remote system. The command is in the same form as
+        the <code>GIT_SSH_COMMAND</code> environment variable and is overridden
+        when the environment variable is set.
 </p>
 </dd>
 <dt class="hdlist1">
+core.ignoreStat
+</dt>
+<dd>
+<p>
+        If true, Git will avoid using lstat() calls to detect if files have
+        changed by setting the "assume-unchanged" bit for those tracked files
+        which it has updated identically in both the index and working tree.
+</p>
+<div class="paragraph"><p>When files are modified outside of Git, the user will need to stage
+the modified files explicitly (e.g. see <em>Examples</em> section in
+<a href="git-update-index.html">git-update-index(1)</a>).
+Git will not normally detect changes to those files.</p></div>
+<div class="paragraph"><p>This is useful on systems where lstat() calls are very slow, such as
+CIFS/Microsoft Windows.</p></div>
+<div class="paragraph"><p>False by default.</p></div>
+</dd>
+<dt class="hdlist1">
 core.preferSymlinkRefs
 </dt>
 <dd>
@@ -1887,8 +2037,10 @@
 <dd>
 <p>
         Set the path to the root of the working tree.
-        This can be overridden by the GIT_WORK_TREE environment
-        variable and the <em>--work-tree</em> command line option.
+        If <code>GIT_COMMON_DIR</code> environment variable is set, core.worktree
+        is ignored and not used for determining the root of working tree.
+        This can be overridden by the <code>GIT_WORK_TREE</code> environment
+        variable and the <code>--work-tree</code> command-line option.
         The value can be an absolute path or relative to the path to
         the .git directory, which is either specified by --git-dir
         or GIT_DIR, or automatically discovered.
@@ -1913,10 +2065,10 @@
 <dd>
 <p>
         Enable the reflog. Updates to a ref &lt;ref&gt; is logged to the file
-        "$GIT_DIR/logs/&lt;ref&gt;", by appending the new and old
+        "<code>$GIT_DIR/logs/&lt;ref&gt;</code>", by appending the new and old
         SHA-1, the date/time and the reason of the update, but
         only when the file exists.  If this configuration
-        variable is set to true, missing "$GIT_DIR/logs/&lt;ref&gt;"
+        variable is set to true, missing "<code>$GIT_DIR/logs/&lt;ref&gt;</code>"
         file is automatically created for branch heads (i.e. under
         refs/heads/), remote refs (i.e. under refs/remotes/),
         note refs (i.e. under refs/notes/), and the symbolic ref HEAD.
@@ -1974,11 +2126,11 @@
         -1 is the zlib default. 0 means no compression,
         and 1..9 are various speed/size tradeoffs, 9 being slowest.
         If set, this provides a default to other compression variables,
-        such as <em>core.loosecompression</em> and <em>pack.compression</em>.
+        such as <code>core.looseCompression</code> and <code>pack.compression</code>.
 </p>
 </dd>
 <dt class="hdlist1">
-core.loosecompression
+core.looseCompression
 </dt>
 <dd>
 <p>
@@ -2034,7 +2186,7 @@
         to avoid unpacking and decompressing frequently used base
         objects multiple times.
 </p>
-<div class="paragraph"><p>Default is 16 MiB on all platforms.  This should be reasonable
+<div class="paragraph"><p>Default is 96 MiB on all platforms.  This should be reasonable
 for all users/operating systems, except on the largest projects.
 You probably do not need to adjust this value.</p></div>
 <div class="paragraph"><p>Common unit suffixes of <em>k</em>, <em>m</em>, or <em>g</em> are supported.</p></div>
@@ -2047,7 +2199,8 @@
         Files larger than this size are stored deflated, without
         attempting delta compression.  Storing large files without
         delta compression avoids excessive memory usage, at the
-        slight expense of increased disk usage.
+        slight expense of increased disk usage. Additionally files
+        larger than this size are always treated as binary.
 </p>
 <div class="paragraph"><p>Default is 512 MiB on all platforms.  This should be reasonable
 for most projects as source code and other text files can still
@@ -2055,45 +2208,64 @@
 <div class="paragraph"><p>Common unit suffixes of <em>k</em>, <em>m</em>, or <em>g</em> are supported.</p></div>
 </dd>
 <dt class="hdlist1">
-core.excludesfile
+core.excludesFile
 </dt>
 <dd>
 <p>
-        In addition to <em>.gitignore</em> (per-directory) and
-        <em>.git/info/exclude</em>, Git looks into this file for patterns
-        of files which are not meant to be tracked.  "<code>~/</code>" is expanded
-        to the value of <code>$HOME</code> and "<code>~user/</code>" to the specified user&#8217;s
-        home directory. Its default value is $XDG_CONFIG_HOME/git/ignore.
-        If $XDG_CONFIG_HOME is either not set or empty, $HOME/.config/git/ignore
+        Specifies the pathname to the file that contains patterns to
+        describe paths that are not meant to be tracked, in addition
+        to <em>.gitignore</em> (per-directory) and <em>.git/info/exclude</em>.
+        Defaults to <code>$XDG_CONFIG_HOME/git/ignore</code>.
+        If <code>$XDG_CONFIG_HOME</code> is either not set or empty, <code>$HOME/.config/git/ignore</code>
         is used instead. See <a href="gitignore.html">gitignore(5)</a>.
 </p>
 </dd>
 <dt class="hdlist1">
-core.askpass
+core.askPass
 </dt>
 <dd>
 <p>
         Some commands (e.g. svn and http interfaces) that interactively
         ask for a password can be told to use an external program given
-        via the value of this variable. Can be overridden by the <em>GIT_ASKPASS</em>
+        via the value of this variable. Can be overridden by the <code>GIT_ASKPASS</code>
         environment variable. If not set, fall back to the value of the
-        <em>SSH_ASKPASS</em> environment variable or, failing that, a simple password
+        <code>SSH_ASKPASS</code> environment variable or, failing that, a simple password
         prompt. The external program shall be given a suitable prompt as
-        command line argument and write the password on its STDOUT.
+        command-line argument and write the password on its STDOUT.
 </p>
 </dd>
 <dt class="hdlist1">
-core.attributesfile
+core.attributesFile
 </dt>
 <dd>
 <p>
         In addition to <em>.gitattributes</em> (per-directory) and
         <em>.git/info/attributes</em>, Git looks into this file for attributes
         (see <a href="gitattributes.html">gitattributes(5)</a>). Path expansions are made the same
-        way as for <code>core.excludesfile</code>. Its default value is
-        $XDG_CONFIG_HOME/git/attributes. If $XDG_CONFIG_HOME is either not
-        set or empty, $HOME/.config/git/attributes is used instead.
+        way as for <code>core.excludesFile</code>. Its default value is
+        <code>$XDG_CONFIG_HOME/git/attributes</code>. If <code>$XDG_CONFIG_HOME</code> is either not
+        set or empty, <code>$HOME/.config/git/attributes</code> is used instead.
+</p>
+</dd>
+<dt class="hdlist1">
+core.hooksPath
+</dt>
+<dd>
+<p>
+        By default Git will look for your hooks in the
+        <em>$GIT_DIR/hooks</em> directory. Set this to different path,
+        e.g. <em>/etc/git/hooks</em>, and Git will try to find your hooks in
+        that directory, e.g. <em>/etc/git/hooks/pre-receive</em> instead of
+        in <em>$GIT_DIR/hooks/pre-receive</em>.
 </p>
+<div class="paragraph"><p>The path can be either absolute or relative. A relative path is
+taken as relative to the directory where the hooks are run (see
+the "DESCRIPTION" section of <a href="githooks.html">githooks(5)</a>).</p></div>
+<div class="paragraph"><p>This configuration variable is useful in cases where you&#8217;d like to
+centrally configure your Git hooks instead of configuring them on a
+per-repository basis, or as a more flexible and centralized
+alternative to having an <code>init.templateDir</code> where you&#8217;ve changed
+default hooks.</p></div>
 </dd>
 <dt class="hdlist1">
 core.editor
@@ -2107,7 +2279,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
-core.commentchar
+core.commentChar
 </dt>
 <dd>
 <p>
@@ -2116,6 +2288,19 @@
         commented, and removes them after the editor returns
         (default <em>#</em>).
 </p>
+<div class="paragraph"><p>If set to "auto", <code>git-commit</code> would select a character that is not
+the beginning character of any line in existing commit messages.</p></div>
+</dd>
+<dt class="hdlist1">
+core.packedRefsTimeout
+</dt>
+<dd>
+<p>
+        The length of time, in milliseconds, to retry when trying to
+        lock the <code>packed-refs</code> file. Value 0 means not to retry at
+        all; -1 means to try indefinitely. Default is 1000 (i.e.,
+        retry for 1 second).
+</p>
 </dd>
 <dt class="hdlist1">
 sequence.editor
@@ -2139,14 +2324,19 @@
         configuration, then <code>$PAGER</code>, and then the default chosen at
         compile time (usually <em>less</em>).
 </p>
-<div class="paragraph"><p>When the <code>LESS</code> environment variable is unset, Git sets it to <code>FRSX</code>
+<div class="paragraph"><p>When the <code>LESS</code> environment variable is unset, Git sets it to <code>FRX</code>
 (if <code>LESS</code> environment variable is set, Git does not change it at
 all).  If you want to selectively override Git&#8217;s default setting
-for <code>LESS</code>, you can set <code>core.pager</code> to e.g. <code>less -+S</code>.  This will
+for <code>LESS</code>, you can set <code>core.pager</code> to e.g. <code>less -S</code>.  This will
 be passed to the shell by Git, which will translate the final
-command to <code>LESS=FRSX less -+S</code>. The environment tells the command
-to set the <code>S</code> option to chop long lines but the command line
-resets it to the default to fold long lines.</p></div>
+command to <code>LESS=FRX less -S</code>. The environment does not set the
+<code>S</code> option but the command line does, instructing less to truncate
+long lines. Similarly, setting <code>core.pager</code> to <code>less -+F</code> will
+deactivate the <code>F</code> option specified by the environment from the
+command-line, deactivating the "quit if one screen" behavior of
+<code>less</code>.  One can specifically activate some flags for particular
+commands: for example, setting <code>pager.blame</code> to <code>less -S</code> enables
+line truncation only for <code>git blame</code>.</p></div>
 <div class="paragraph"><p>Likewise, when the <code>LV</code> environment variable is unset, Git sets it
 to <code>-c</code>.  You can override this setting by exporting <code>LV</code> with
 another value or setting <code>core.pager</code> to <code>lv +c</code>.</p></div>
@@ -2219,7 +2409,7 @@
 </ul></div>
 </dd>
 <dt class="hdlist1">
-core.fsyncobjectfiles
+core.fsyncObjectFiles
 </dt>
 <dd>
 <p>
@@ -2231,7 +2421,7 @@
 and not file contents (OS X&#8217;s HFS+, or Linux ext3 with "data=writeback").</p></div>
 </dd>
 <dt class="hdlist1">
-core.preloadindex
+core.preloadIndex
 </dt>
 <dd>
 <p>
@@ -2239,9 +2429,9 @@
 </p>
 <div class="paragraph"><p>This can speed up operations like <em>git diff</em> and <em>git status</em> especially
 on filesystems like NFS that have weak caching semantics and thus
-relatively high IO latencies.  With this set to <em>true</em>, Git will do the
+relatively high IO latencies.  When enabled, Git will do the
 index comparison to the filesystem data in parallel, allowing
-overlapping IO&#8217;s.</p></div>
+overlapping IO&#8217;s.  Defaults to true.</p></div>
 </dd>
 <dt class="hdlist1">
 core.createObject
@@ -2267,7 +2457,7 @@
         notes should be printed.
 </p>
 <div class="paragraph"><p>This setting defaults to "refs/notes/commits", and it can be overridden by
-the <em>GIT_NOTES_REF</em> environment variable.  See <a href="git-notes.html">git-notes(1)</a>.</p></div>
+the <code>GIT_NOTES_REF</code> environment variable.  See <a href="git-notes.html">git-notes(1)</a>.</p></div>
 </dd>
 <dt class="hdlist1">
 core.sparseCheckout
@@ -2290,19 +2480,18 @@
 </p>
 </dd>
 <dt class="hdlist1">
-add.ignore-errors
+add.ignoreErrors
 </dt>
 <dt class="hdlist1">
-add.ignoreErrors
+add.ignore-errors (deprecated)
 </dt>
 <dd>
 <p>
         Tells <em>git add</em> to continue adding files when some files cannot be
-        added due to indexing errors. Equivalent to the <em>--ignore-errors</em>
-        option of <a href="git-add.html">git-add(1)</a>.  Older versions of Git accept only
-        <code>add.ignore-errors</code>, which does not follow the usual naming
-        convention for configuration variables.  Newer versions of Git
-        honor <code>add.ignoreErrors</code> as well.
+        added due to indexing errors. Equivalent to the <code>--ignore-errors</code>
+        option of <a href="git-add.html">git-add(1)</a>.  <code>add.ignore-errors</code> is deprecated,
+        as it does not follow the usual naming convention for configuration
+        variables.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -2316,7 +2505,7 @@
         confusion and troubles with script usage, aliases that
         hide existing Git commands are ignored. Arguments are split by
         spaces, the usual shell quoting and escaping is supported.
-        quote pair and a backslash can be used to quote them.
+        A quote pair or a backslash can be used to quote them.
 </p>
 <div class="paragraph"><p>If the alias expansion is prefixed with an exclamation point,
 it will be treated as a shell command.  For example, defining
@@ -2325,7 +2514,7 @@
 "gitk --all --not ORIG_HEAD".  Note that shell commands will be
 executed from the top-level directory of a repository, which may
 not necessarily be the current directory.
-<em>GIT_PREFIX</em> is set as returned by running <em>git rev-parse --show-prefix</em>
+<code>GIT_PREFIX</code> is set as returned by running <em>git rev-parse --show-prefix</em>
 from the original current directory. See <a href="git-rev-parse.html">git-rev-parse(1)</a>.</p></div>
 </dd>
 <dt class="hdlist1">
@@ -2334,19 +2523,32 @@
 <dd>
 <p>
         If true, git-am will call git-mailsplit for patches in mbox format
-        with parameter <em>--keep-cr</em>. In this case git-mailsplit will
+        with parameter <code>--keep-cr</code>. In this case git-mailsplit will
         not remove <code>\r</code> from lines ending with <code>\r\n</code>. Can be overridden
-        by giving <em>--no-keep-cr</em> from the command line.
+        by giving <code>--no-keep-cr</code> from the command line.
         See <a href="git-am.html">git-am(1)</a>, <a href="git-mailsplit.html">git-mailsplit(1)</a>.
 </p>
 </dd>
 <dt class="hdlist1">
-apply.ignorewhitespace
+am.threeWay
+</dt>
+<dd>
+<p>
+        By default, <code>git am</code> will fail if the patch does not apply cleanly. When
+        set to true, this setting tells <code>git am</code> to fall back on 3-way merge if
+        the patch records the identity of blobs it is supposed to apply to and
+        we have those blobs available locally (equivalent to giving the <code>--3way</code>
+        option from the command line). Defaults to <code>false</code>.
+        See <a href="git-am.html">git-am(1)</a>.
+</p>
+</dd>
+<dt class="hdlist1">
+apply.ignoreWhitespace
 </dt>
 <dd>
 <p>
         When set to <em>change</em>, tells <em>git apply</em> to ignore changes in
-        whitespace, in the same way as the <em>--ignore-space-change</em>
+        whitespace, in the same way as the <code>--ignore-space-change</code>
         option.
         When set to one of: no, none, never, false tells <em>git apply</em> to
         respect all whitespace differences.
@@ -2359,11 +2561,11 @@
 <dd>
 <p>
         Tells <em>git apply</em> how to handle whitespaces, in the same way
-        as the <em>--whitespace</em> option. See <a href="git-apply.html">git-apply(1)</a>.
+        as the <code>--whitespace</code> option. See <a href="git-apply.html">git-apply(1)</a>.
 </p>
 </dd>
 <dt class="hdlist1">
-branch.autosetupmerge
+branch.autoSetupMerge
 </dt>
 <dd>
 <p>
@@ -2379,7 +2581,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
-branch.autosetuprebase
+branch.autoSetupRebase
 </dt>
 <dd>
 <p>
@@ -2393,7 +2595,7 @@
         remote-tracking branches.
         When <code>always</code>, rebase will be set to true for all tracking
         branches.
-        See "branch.autosetupmerge" for details on how to set up a
+        See "branch.autoSetupMerge" for details on how to set up a
         branch to track another branch.
         This option defaults to never.
 </p>
@@ -2405,25 +2607,25 @@
 <p>
         When on branch &lt;name&gt;, it tells <em>git fetch</em> and <em>git push</em>
         which remote to fetch from/push to.  The remote to push to
-        may be overridden with <code>remote.pushdefault</code> (for all branches).
+        may be overridden with <code>remote.pushDefault</code> (for all branches).
         The remote to push to, for the current branch, may be further
-        overridden by <code>branch.&lt;name&gt;.pushremote</code>.  If no remote is
+        overridden by <code>branch.&lt;name&gt;.pushRemote</code>.  If no remote is
         configured, or if you are not on any branch, it defaults to
-        <code>origin</code> for fetching and <code>remote.pushdefault</code> for pushing.
+        <code>origin</code> for fetching and <code>remote.pushDefault</code> for pushing.
         Additionally, <code>.</code> (a period) is the current local repository
         (a dot-repository), see <code>branch.&lt;name&gt;.merge</code>'s final note below.
 </p>
 </dd>
 <dt class="hdlist1">
-branch.&lt;name&gt;.pushremote
+branch.&lt;name&gt;.pushRemote
 </dt>
 <dd>
 <p>
         When on branch &lt;name&gt;, it overrides <code>branch.&lt;name&gt;.remote</code> for
-        pushing.  It also overrides <code>remote.pushdefault</code> for pushing
+        pushing.  It also overrides <code>remote.pushDefault</code> for pushing
         from branch &lt;name&gt;.  When you pull from one place (e.g. your
         upstream) and push to another place (e.g. your own publishing
-        repository), you would want to set <code>remote.pushdefault</code> to
+        repository), you would want to set <code>remote.pushDefault</code> to
         specify the remote to push to for all branches, and use this
         option to override it for a specific branch.
 </p>
@@ -2452,7 +2654,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
-branch.&lt;name&gt;.mergeoptions
+branch.&lt;name&gt;.mergeOptions
 </dt>
 <dd>
 <p>
@@ -2472,12 +2674,10 @@
         "git pull" is run. See "pull.rebase" for doing this in a non
         branch-specific manner.
 </p>
-<div class="literalblock">
-<div class="content">
-<pre><code>When preserve, also pass `--preserve-merges` along to 'git rebase'
+<div class="paragraph"><p>When preserve, also pass <code>--preserve-merges</code> along to <em>git rebase</em>
 so that locally committed merge commits will not be flattened
-by running 'git pull'.</code></pre>
-</div></div>
+by running <em>git pull</em>.</p></div>
+<div class="paragraph"><p>When the value is <code>interactive</code>, the rebase is run in interactive mode.</p></div>
 <div class="paragraph"><p><strong>NOTE</strong>: this is a possibly dangerous operation; do <strong>not</strong> use
 it unless you understand the implications (see <a href="git-rebase.html">git-rebase(1)</a>
 for details).</p></div>
@@ -2509,7 +2709,7 @@
 <dd>
 <p>
         Override the path for the given tool that may be used to
-        browse HTML help (see <em>-w</em> option in <a href="git-help.html">git-help(1)</a>) or a
+        browse HTML help (see <code>-w</code> option in <a href="git-help.html">git-help(1)</a>) or a
         working repository in gitweb (see <a href="git-instaweb.html">git-instaweb(1)</a>).
 </p>
 </dd>
@@ -2530,7 +2730,8 @@
         A boolean to enable/disable color in the output of
         <a href="git-branch.html">git-branch(1)</a>. May be set to <code>always</code>,
         <code>false</code> (or <code>never</code>) or <code>auto</code> (or <code>true</code>), in which case colors are used
-        only when the output is to a terminal. Defaults to false.
+        only when the output is to a terminal. If unset, then the
+        value of <code>color.ui</code> is used (<code>auto</code> by default).
 </p>
 </dd>
 <dt class="hdlist1">
@@ -2544,13 +2745,6 @@
         <code>upstream</code> (upstream tracking branch), <code>plain</code> (other
         refs).
 </p>
-<div class="paragraph"><p>The value for these configuration variables is a list of colors (at most
-two) and attributes (at most one), separated by spaces.  The colors
-accepted are <code>normal</code>, <code>black</code>, <code>red</code>, <code>green</code>, <code>yellow</code>, <code>blue</code>,
-<code>magenta</code>, <code>cyan</code> and <code>white</code>; the attributes are <code>bold</code>, <code>dim</code>, <code>ul</code>,
-<code>blink</code> and <code>reverse</code>.  The first color given is the foreground; the
-second is the background.  The position of the attribute, if any,
-doesn&#8217;t matter.</p></div>
 </dd>
 <dt class="hdlist1">
 color.diff
@@ -2562,9 +2756,10 @@
         <a href="git-log.html">git-log(1)</a>, and <a href="git-show.html">git-show(1)</a> will use color
         for all patches.  If it is set to <code>true</code> or <code>auto</code>, those
         commands will only use color when output is to the terminal.
-        Defaults to false.
+        If unset, then the value of <code>color.ui</code> is used (<code>auto</code> by
+        default).
 </p>
-<div class="paragraph"><p>This does not affect <a href="git-format-patch.html">git-format-patch(1)</a> nor the
+<div class="paragraph"><p>This does not affect <a href="git-format-patch.html">git-format-patch(1)</a> or the
 <em>git-diff-&#42;</em> plumbing commands.  Can be overridden on the
 command line with the <code>--color[=&lt;when&gt;]</code> option.</p></div>
 </dd>
@@ -2575,11 +2770,11 @@
 <p>
         Use customized color for diff colorization.  <code>&lt;slot&gt;</code> specifies
         which part of the patch to use the specified color, and is one
-        of <code>plain</code> (context text), <code>meta</code> (metainformation), <code>frag</code>
+        of <code>context</code> (context text - <code>plain</code> is a historical synonym),
+        <code>meta</code> (metainformation), <code>frag</code>
         (hunk header), <em>func</em> (function in hunk header), <code>old</code> (removed lines),
         <code>new</code> (added lines), <code>commit</code> (commit headers), or <code>whitespace</code>
-        (highlighting whitespace errors). The values of these variables may be
-        specified as in color.branch.&lt;slot&gt;.
+        (highlighting whitespace errors).
 </p>
 </dd>
 <dt class="hdlist1">
@@ -2599,7 +2794,8 @@
 <p>
         When set to <code>always</code>, always highlight matches.  When <code>false</code> (or
         <code>never</code>), never.  When set to <code>true</code> or <code>auto</code>, use color only
-        when the output is written to the terminal.  Defaults to <code>false</code>.
+        when the output is written to the terminal.  If unset, then the
+        value of <code>color.ui</code> is used (<code>auto</code> by default).
 </p>
 </dd>
 <dt class="hdlist1">
@@ -2650,7 +2846,23 @@
 </dt>
 <dd>
 <p>
-        matching text
+        matching text (same as setting <code>matchContext</code> and <code>matchSelected</code>)
+</p>
+</dd>
+<dt class="hdlist1">
+<code>matchContext</code>
+</dt>
+<dd>
+<p>
+        matching text in context lines
+</p>
+</dd>
+<dt class="hdlist1">
+<code>matchSelected</code>
+</dt>
+<dd>
+<p>
+        matching text in selected lines
 </p>
 </dd>
 <dt class="hdlist1">
@@ -2672,7 +2884,6 @@
 </dd>
 </dl></div>
 </div></div>
-<div class="paragraph"><p>The values of these variables may be specified as in color.branch.&lt;slot&gt;.</p></div>
 </dd>
 <dt class="hdlist1">
 color.interactive
@@ -2683,7 +2894,8 @@
         and displays (such as those used by "git-add --interactive" and
         "git-clean --interactive"). When false (or <code>never</code>), never.
         When set to <code>true</code> or <code>auto</code>, use colors only when the output is
-        to the terminal. Defaults to false.
+        to the terminal. If unset, then the value of <code>color.ui</code> is
+        used (<code>auto</code> by default).
 </p>
 </dd>
 <dt class="hdlist1">
@@ -2694,8 +2906,7 @@
         Use customized color for <em>git add --interactive</em> and <em>git clean
         --interactive</em> output. <code>&lt;slot&gt;</code> may be <code>prompt</code>, <code>header</code>, <code>help</code>
         or <code>error</code>, for four distinct types of normal output from
-        interactive commands.  The values of these variables may be
-        specified as in color.branch.&lt;slot&gt;.
+        interactive commands.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -2708,14 +2919,15 @@
 </p>
 </dd>
 <dt class="hdlist1">
-color.showbranch
+color.showBranch
 </dt>
 <dd>
 <p>
         A boolean to enable/disable color in the output of
         <a href="git-show-branch.html">git-show-branch(1)</a>. May be set to <code>always</code>,
         <code>false</code> (or <code>never</code>) or <code>auto</code> (or <code>true</code>), in which case colors are used
-        only when the output is to a terminal. Defaults to false.
+        only when the output is to a terminal. If unset, then the
+        value of <code>color.ui</code> is used (<code>auto</code> by default).
 </p>
 </dd>
 <dt class="hdlist1">
@@ -2726,7 +2938,8 @@
         A boolean to enable/disable color in the output of
         <a href="git-status.html">git-status(1)</a>. May be set to <code>always</code>,
         <code>false</code> (or <code>never</code>) or <code>auto</code> (or <code>true</code>), in which case colors are used
-        only when the output is to a terminal. Defaults to false.
+        only when the output is to a terminal. If unset, then the
+        value of <code>color.ui</code> is used (<code>auto</code> by default).
 </p>
 </dd>
 <dt class="hdlist1">
@@ -2739,10 +2952,10 @@
         <code>added</code> or <code>updated</code> (files which are added but not committed),
         <code>changed</code> (files which are changed but not added in the index),
         <code>untracked</code> (files which are not tracked by Git),
-        <code>branch</code> (the current branch), or
+        <code>branch</code> (the current branch),
         <code>nobranch</code> (the color the <em>no branch</em> warning is shown in, defaulting
-        to red). The values of these variables may be specified as in
-        color.branch.&lt;slot&gt;.
+        to red), or
+        <code>unmerged</code> (files which have unmerged changes).
 </p>
 </dd>
 <dt class="hdlist1">
@@ -2909,6 +3122,18 @@
 </p>
 </dd>
 <dt class="hdlist1">
+commit.gpgSign
+</dt>
+<dd>
+<p>
+        A boolean to specify whether all commits should be GPG signed.
+        Use of this option when doing operations such as rebase can
+        result in a large number of commits being signed. It may be
+        convenient to use an agent to avoid typing your GPG passphrase
+        several times.
+</p>
+</dd>
+<dt class="hdlist1">
 commit.status
 </dt>
 <dd>
@@ -2923,9 +3148,17 @@
 </dt>
 <dd>
 <p>
-        Specify a file to use as the template for new commit messages.
-        "<code>~/</code>" is expanded to the value of <code>$HOME</code> and "<code>~user/</code>" to the
-        specified user&#8217;s home directory.
+        Specify the pathname of a file to use as the template for
+        new commit messages.
+</p>
+</dd>
+<dt class="hdlist1">
+commit.verbose
+</dt>
+<dd>
+<p>
+        A boolean or int to specify the level of verbose with <code>git commit</code>.
+        See <a href="git-commit.html">git-commit(1)</a>.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -2935,8 +3168,9 @@
 <p>
         Specify an external helper to be called when a username or
         password credential is needed; the helper may consult external
-        storage to avoid prompting the user for the credentials. See
-        <a href="gitcredentials.html">gitcredentials(7)</a> for details.
+        storage to avoid prompting the user for the credentials. Note
+        that multiple helpers may be defined. See <a href="gitcredentials.html">gitcredentials(7)</a>
+        for details.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -2972,7 +3206,15 @@
 </p>
 </dd>
 <dt class="hdlist1">
-diff.autorefreshindex
+credentialCache.ignoreSIGHUP
+</dt>
+<dd>
+<p>
+        Tell git-credential-cache&#8212;daemon to ignore SIGHUP, instead of quitting.
+</p>
+</dd>
+<dt class="hdlist1">
+diff.autoRefreshIndex
 </dt>
 <dd>
 <p>
@@ -3108,13 +3350,13 @@
         commands such as <em>git diff-files</em>. <em>git checkout</em> also honors
         this setting when reporting uncommitted changes. Setting it to
         <em>all</em> disables the submodule summary normally shown by <em>git commit</em>
-        and <em>git status</em> when <em>status.submodulesummary</em> is set unless it is
-        overridden by using the --ignore-submodules command line option.
+        and <em>git status</em> when <code>status.submoduleSummary</code> is set unless it is
+        overridden by using the --ignore-submodules command-line option.
         The <em>git submodule</em> commands are not affected by this setting.
 </p>
 </dd>
 <dt class="hdlist1">
-diff.mnemonicprefix
+diff.mnemonicPrefix
 </dt>
 <dd>
 <p>
@@ -3175,7 +3417,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
-diff.orderfile
+diff.orderFile
 </dt>
 <dd>
 <p>
@@ -3190,7 +3432,7 @@
 <dd>
 <p>
         The number of files to consider when performing the copy/rename
-        detection; equivalent to the <em>git diff</em> option <em>-l</em>.
+        detection; equivalent to the <em>git diff</em> option <code>-l</code>.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -3198,9 +3440,13 @@
 </dt>
 <dd>
 <p>
-        Tells Git to detect renames.  If set to any boolean value, it
-        will enable basic rename detection.  If set to "copies" or
-        "copy", it will detect copies, as well.
+        Whether and how Git detects renames.  If set to "false",
+        rename detection is disabled. If set to "true", basic rename
+        detection is enabled.  If set to "copies" or "copy", Git will
+        detect copies, as well.  Defaults to true.  Note that this
+        affects only <em>git diff</em> Porcelain like <a href="git-diff.html">git-diff(1)</a> and
+        <a href="git-log.html">git-log(1)</a>, and not lower level commands such as
+        <a href="git-diff-files.html">git-diff-files(1)</a>.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -3275,7 +3521,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
-diff.&lt;driver&gt;.wordregex
+diff.&lt;driver&gt;.wordRegex
 </dt>
 <dd>
 <p>
@@ -3312,6 +3558,11 @@
 </li>
 <li>
 <p>
+bc
+</p>
+</li>
+<li>
+<p>
 bc3
 </p>
 </li>
@@ -3347,6 +3598,11 @@
 </li>
 <li>
 <p>
+examdiff
+</p>
+</li>
+<li>
+<p>
 gvimdiff
 </p>
 </li>
@@ -3357,6 +3613,11 @@
 </li>
 <li>
 <p>
+gvimdiff3
+</p>
+</li>
+<li>
+<p>
 kdiff3
 </p>
 </li>
@@ -3397,12 +3658,32 @@
 </li>
 <li>
 <p>
+vimdiff3
+</p>
+</li>
+<li>
+<p>
+winmerge
+</p>
+</li>
+<li>
+<p>
 xxdiff
 </p>
 </li>
 </ul></div>
 </dd>
 <dt class="hdlist1">
+diff.compactionHeuristic
+</dt>
+<dd>
+<p>
+        Set this option to <code>true</code> to enable an experimental heuristic that
+        shifts the hunk boundary in an attempt to make the resulting
+        patch easier to read.
+</p>
+</dd>
+<dt class="hdlist1">
 diff.algorithm
 </dt>
 <dd>
@@ -3480,6 +3761,20 @@
 </p>
 </dd>
 <dt class="hdlist1">
+fastimport.unpackLimit
+</dt>
+<dd>
+<p>
+        If the number of objects imported by <a href="git-fast-import.html">git-fast-import(1)</a>
+        is below this limit, then the objects will be unpacked into
+        loose object files.  However if the number of imported objects
+        equals or exceeds this limit then the pack will be stored as a
+        pack.  Storing the pack from a fast-import can make the import
+        operation complete faster, especially on slow filesystems.  If
+        not set, the value of <code>transfer.unpackLimit</code> is used instead.
+</p>
+</dd>
+<dt class="hdlist1">
 fetch.recurseSubmodules
 </dt>
 <dd>
@@ -3531,6 +3826,16 @@
 </p>
 </dd>
 <dt class="hdlist1">
+fetch.output
+</dt>
+<dd>
+<p>
+        Control how ref update status is printed. Valid values are
+        <code>full</code> and <code>compact</code>. Default value is <code>full</code>. See section
+        OUTPUT in <a href="git-fetch.html">git-fetch(1)</a> for detail.
+</p>
+</dd>
+<dt class="hdlist1">
 format.attach
 </dt>
 <dd>
@@ -3543,6 +3848,21 @@
 </p>
 </dd>
 <dt class="hdlist1">
+format.from
+</dt>
+<dd>
+<p>
+        Provides the default value for the <code>--from</code> option to format-patch.
+        Accepts a boolean value, or a name and email address.  If false,
+        format-patch defaults to <code>--no-from</code>, using commit authors directly in
+        the "From:" field of patch mails.  If true, format-patch defaults to
+        <code>--from</code>, using your committer identity in the "From:" field of patch
+        mails and including a "From:" field in the body of the patch mail if
+        different.  If set to a non-boolean value, format-patch uses that
+        value instead of your committer identity.  Defaults to false.
+</p>
+</dd>
+<dt class="hdlist1">
 format.numbered
 </dt>
 <dd>
@@ -3577,7 +3897,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
-format.subjectprefix
+format.subjectPrefix
 </dt>
 <dd>
 <p>
@@ -3597,6 +3917,15 @@
 </p>
 </dd>
 <dt class="hdlist1">
+format.signatureFile
+</dt>
+<dd>
+<p>
+        Works just like format.signature except the contents of the
+        file specified by this variable will be used as the signature.
+</p>
+</dd>
+<dt class="hdlist1">
 format.suffix
 </dt>
 <dd>
@@ -3632,7 +3961,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
-format.signoff
+format.signOff
 </dt>
 <dd>
 <p>
@@ -3654,6 +3983,24 @@
 </p>
 </dd>
 <dt class="hdlist1">
+format.outputDirectory
+</dt>
+<dd>
+<p>
+        Set a custom directory to store the resulting files instead of the
+        current working directory.
+</p>
+</dd>
+<dt class="hdlist1">
+format.useAutoBase
+</dt>
+<dd>
+<p>
+        A boolean value which lets you enable the <code>--base=auto</code> option of
+        format-patch by default.
+</p>
+</dd>
+<dt class="hdlist1">
 filter.&lt;driver&gt;.clean
 </dt>
 <dd>
@@ -3674,6 +4021,43 @@
 </p>
 </dd>
 <dt class="hdlist1">
+fsck.&lt;msg-id&gt;
+</dt>
+<dd>
+<p>
+        Allows overriding the message type (error, warn or ignore) of a
+        specific message ID such as <code>missingEmail</code>.
+</p>
+<div class="paragraph"><p>For convenience, fsck prefixes the error/warning with the message ID,
+e.g.  "missingEmail: invalid author/committer line - missing email" means
+that setting <code>fsck.missingEmail = ignore</code> will hide that issue.</p></div>
+<div class="paragraph"><p>This feature is intended to support working with legacy repositories
+which cannot be repaired without disruptive changes.</p></div>
+</dd>
+<dt class="hdlist1">
+fsck.skipList
+</dt>
+<dd>
+<p>
+        The path to a sorted list of object names (i.e. one SHA-1 per
+        line) that are known to be broken in a non-fatal way and should
+        be ignored. This feature is useful when an established project
+        should be accepted despite early commits containing errors that
+        can be safely ignored such as invalid committer email addresses.
+        Note: corrupt objects cannot be skipped with this setting.
+</p>
+</dd>
+<dt class="hdlist1">
+gc.aggressiveDepth
+</dt>
+<dd>
+<p>
+        The depth parameter used in the delta compression
+        algorithm used by <em>git gc --aggressive</em>.  This defaults
+        to 50.
+</p>
+</dd>
+<dt class="hdlist1">
 gc.aggressiveWindow
 </dt>
 <dd>
@@ -3696,7 +4080,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
-gc.autopacklimit
+gc.autoPackLimit
 </dt>
 <dd>
 <p>
@@ -3707,7 +4091,16 @@
 </p>
 </dd>
 <dt class="hdlist1">
-gc.packrefs
+gc.autoDetach
+</dt>
+<dd>
+<p>
+        Make <code>git gc --auto</code> return immediately and run in background
+        if the system supports it. Default is true.
+</p>
+</dd>
+<dt class="hdlist1">
+gc.packRefs
 </dt>
 <dd>
 <p>
@@ -3720,47 +4113,65 @@
 </p>
 </dd>
 <dt class="hdlist1">
-gc.pruneexpire
+gc.pruneExpire
 </dt>
 <dd>
 <p>
         When <em>git gc</em> is run, it will call <em>prune --expire 2.weeks.ago</em>.
         Override the grace period with this config variable.  The value
-        "now" may be used to disable this  grace period and always prune
-        unreachable objects immediately.
+        "now" may be used to disable this grace period and always prune
+        unreachable objects immediately, or "never" may be used to
+        suppress pruning.
+</p>
+</dd>
+<dt class="hdlist1">
+gc.worktreePruneExpire
+</dt>
+<dd>
+<p>
+        When <em>git gc</em> is run, it calls
+        <em>git worktree prune --expire 3.months.ago</em>.
+        This config variable can be used to set a different grace
+        period. The value "now" may be used to disable the grace
+        period and prune <code>$GIT_DIR/worktrees</code> immediately, or "never"
+        may be used to suppress pruning.
 </p>
 </dd>
 <dt class="hdlist1">
-gc.reflogexpire
+gc.reflogExpire
 </dt>
 <dt class="hdlist1">
-gc.&lt;pattern&gt;.reflogexpire
+gc.&lt;pattern&gt;.reflogExpire
 </dt>
 <dd>
 <p>
         <em>git reflog expire</em> removes reflog entries older than
-        this time; defaults to 90 days.  With "&lt;pattern&gt;" (e.g.
+        this time; defaults to 90 days. The value "now" expires all
+        entries immediately, and "never" suppresses expiration
+        altogether. With "&lt;pattern&gt;" (e.g.
         "refs/stash") in the middle the setting applies only to
         the refs that match the &lt;pattern&gt;.
 </p>
 </dd>
 <dt class="hdlist1">
-gc.reflogexpireunreachable
+gc.reflogExpireUnreachable
 </dt>
 <dt class="hdlist1">
-gc.&lt;ref&gt;.reflogexpireunreachable
+gc.&lt;pattern&gt;.reflogExpireUnreachable
 </dt>
 <dd>
 <p>
         <em>git reflog expire</em> removes reflog entries older than
         this time and are not reachable from the current tip;
-        defaults to 30 days.  With "&lt;pattern&gt;" (e.g. "refs/stash")
+        defaults to 30 days. The value "now" expires all entries
+        immediately, and "never" suppresses expiration altogether.
+        With "&lt;pattern&gt;" (e.g. "refs/stash")
         in the middle, the setting applies only to the refs that
         match the &lt;pattern&gt;.
 </p>
 </dd>
 <dt class="hdlist1">
-gc.rerereresolved
+gc.rerereResolved
 </dt>
 <dd>
 <p>
@@ -3770,7 +4181,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
-gc.rerereunresolved
+gc.rerereUnresolved
 </dt>
 <dd>
 <p>
@@ -3780,7 +4191,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
-gitcvs.commitmsgannotation
+gitcvs.commitMsgAnnotation
 </dt>
 <dd>
 <p>
@@ -3798,7 +4209,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
-gitcvs.logfile
+gitcvs.logFile
 </dt>
 <dd>
 <p>
@@ -3812,33 +4223,33 @@
 <dd>
 <p>
         If true, the server will look up the end-of-line conversion
-        attributes for files to determine the <em>-k</em> modes to use. If
+        attributes for files to determine the <code>-k</code> modes to use. If
         the attributes force Git to treat a file as text,
-        the <em>-k</em> mode will be left blank so CVS clients will
+        the <code>-k</code> mode will be left blank so CVS clients will
         treat it as text. If they suppress text conversion, the file
         will be set with <em>-kb</em> mode, which suppresses any newline munging
         the client might otherwise do. If the attributes do not allow
-        the file type to be determined, then <em>gitcvs.allbinary</em> is
+        the file type to be determined, then <code>gitcvs.allBinary</code> is
         used. See <a href="gitattributes.html">gitattributes(5)</a>.
 </p>
 </dd>
 <dt class="hdlist1">
-gitcvs.allbinary
+gitcvs.allBinary
 </dt>
 <dd>
 <p>
-        This is used if <em>gitcvs.usecrlfattr</em> does not resolve
+        This is used if <code>gitcvs.usecrlfattr</code> does not resolve
         the correct <em>-kb</em> mode to use. If true, all
         unresolved files are sent to the client in
         mode <em>-kb</em>. This causes the client to treat them
         as binary files, which suppresses any newline munging it
         otherwise might do. Alternatively, if it is set to "guess",
         then the contents of the file are examined to decide if
-        it is binary, similar to <em>core.autocrlf</em>.
+        it is binary, similar to <code>core.autocrlf</code>.
 </p>
 </dd>
 <dt class="hdlist1">
-gitcvs.dbname
+gitcvs.dbName
 </dt>
 <dd>
 <p>
@@ -3851,7 +4262,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
-gitcvs.dbdriver
+gitcvs.dbDriver
 </dt>
 <dd>
 <p>
@@ -3864,13 +4275,13 @@
 </p>
 </dd>
 <dt class="hdlist1">
-gitcvs.dbuser, gitcvs.dbpass
+gitcvs.dbUser, gitcvs.dbPass
 </dt>
 <dd>
 <p>
-        Database user and password. Only useful if setting <em>gitcvs.dbdriver</em>,
+        Database user and password. Only useful if setting <code>gitcvs.dbDriver</code>,
         since SQLite has no concept of database users and/or passwords.
-        <em>gitcvs.dbuser</em> supports variable substitution (see
+        <em>gitcvs.dbUser</em> supports variable substitution (see
         <a href="git-cvsserver.html">git-cvsserver(1)</a> for details).
 </p>
 </dd>
@@ -3887,8 +4298,8 @@
 </p>
 </dd>
 </dl></div>
-<div class="paragraph"><p>All gitcvs variables except for <em>gitcvs.usecrlfattr</em> and
-<em>gitcvs.allbinary</em> can also be specified as
+<div class="paragraph"><p>All gitcvs variables except for <code>gitcvs.usecrlfattr</code> and
+<code>gitcvs.allBinary</code> can also be specified as
 <em>gitcvs.&lt;access_method&gt;.&lt;varname&gt;</em> (where <em>access_method</em>
 is one of "ext" and "pserver") to make them apply only for the given
 access method.</p></div>
@@ -3932,7 +4343,7 @@
 gitweb.remote_heads
 </dt>
 <dt class="hdlist1">
-gitweb.showsizes
+gitweb.showSizes
 </dt>
 <dt class="hdlist1">
 gitweb.snapshot
@@ -3947,7 +4358,7 @@
 </dt>
 <dd>
 <p>
-        If set to true, enable <em>-n</em> option by default.
+        If set to true, enable <code>-n</code> option by default.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -3956,8 +4367,8 @@
 <dd>
 <p>
         Set the default matching behavior. Using a value of <em>basic</em>, <em>extended</em>,
-        <em>fixed</em>, or <em>perl</em> will enable the <em>--basic-regexp</em>, <em>--extended-regexp</em>,
-        <em>--fixed-strings</em>, or <em>--perl-regexp</em> option accordingly, while the
+        <em>fixed</em>, or <em>perl</em> will enable the <code>--basic-regexp</code>, <code>--extended-regexp</code>,
+        <code>--fixed-strings</code>, or <code>--perl-regexp</code> option accordingly, while the
         value <em>default</em> will return to the default matching behavior.
 </p>
 </dd>
@@ -3966,29 +4377,47 @@
 </dt>
 <dd>
 <p>
-        If set to true, enable <em>--extended-regexp</em> option by default. This
-        option is ignored when the <em>grep.patternType</em> option is set to a value
+        If set to true, enable <code>--extended-regexp</code> option by default. This
+        option is ignored when the <code>grep.patternType</code> option is set to a value
         other than <em>default</em>.
 </p>
 </dd>
 <dt class="hdlist1">
+grep.threads
+</dt>
+<dd>
+<p>
+        Number of grep worker threads to use.
+        See <code>grep.threads</code> in <a href="git-grep.html">git-grep(1)</a> for more information.
+</p>
+</dd>
+<dt class="hdlist1">
+grep.fallbackToNoIndex
+</dt>
+<dd>
+<p>
+        If set to true, fall back to git grep --no-index if git grep
+        is executed outside of a git repository.  Defaults to false.
+</p>
+</dd>
+<dt class="hdlist1">
 gpg.program
 </dt>
 <dd>
 <p>
-        Use this custom program instead of "gpg" found on $PATH when
+        Use this custom program instead of "<code>gpg</code>" found on <code>$PATH</code> when
         making or verifying a PGP signature. The program must support the
-        same command line interface as GPG, namely, to verify a detached
-        signature, "gpg --verify $file - &lt;$signature" is run, and the
+        same command-line interface as GPG, namely, to verify a detached
+        signature, "<code>gpg --verify $file - &lt;$signature</code>" is run, and the
         program is expected to signal a good signature by exiting with
-        code 0, and to generate an ascii-armored detached signature, the
-        standard input of "gpg -bsau $key" is fed with the contents to be
+        code 0, and to generate an ASCII-armored detached signature, the
+        standard input of "<code>gpg -bsau $key</code>" is fed with the contents to be
         signed, and the program is expected to send the result to its
         standard output.
 </p>
 </dd>
 <dt class="hdlist1">
-gui.commitmsgwidth
+gui.commitMsgWidth
 </dt>
 <dd>
 <p>
@@ -3997,7 +4426,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
-gui.diffcontext
+gui.diffContext
 </dt>
 <dd>
 <p>
@@ -4006,20 +4435,29 @@
 </p>
 </dd>
 <dt class="hdlist1">
-gui.encoding
+gui.displayUntracked
 </dt>
 <dd>
 <p>
-        Specifies the default encoding to use for displaying of
-        file contents in <a href="git-gui.html">git-gui(1)</a> and <a href="gitk.html">gitk(1)</a>.
-        It can be overridden by setting the <em>encoding</em> attribute
+        Determines if <a href="git-gui.html">git-gui(1)</a> shows untracked files
+        in the file list. The default is "true".
+</p>
+</dd>
+<dt class="hdlist1">
+gui.encoding
+</dt>
+<dd>
+<p>
+        Specifies the default encoding to use for displaying of
+        file contents in <a href="git-gui.html">git-gui(1)</a> and <a href="gitk.html">gitk(1)</a>.
+        It can be overridden by setting the <em>encoding</em> attribute
         for relevant files (see <a href="gitattributes.html">gitattributes(5)</a>).
         If this option is not set, the tools default to the
         locale encoding.
 </p>
 </dd>
 <dt class="hdlist1">
-gui.matchtrackingbranch
+gui.matchTrackingBranch
 </dt>
 <dd>
 <p>
@@ -4029,7 +4467,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
-gui.newbranchtemplate
+gui.newBranchTemplate
 </dt>
 <dd>
 <p>
@@ -4038,7 +4476,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
-gui.pruneduringfetch
+gui.pruneDuringFetch
 </dt>
 <dd>
 <p>
@@ -4056,7 +4494,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
-gui.spellingdictionary
+gui.spellingDictionary
 </dt>
 <dd>
 <p>
@@ -4066,7 +4504,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
-gui.fastcopyblame
+gui.fastCopyBlame
 </dt>
 <dd>
 <p>
@@ -4076,7 +4514,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
-gui.copyblamethreshold
+gui.copyBlameThreshold
 </dt>
 <dd>
 <p>
@@ -4105,13 +4543,13 @@
         of the <a href="git-gui.html">git-gui(1)</a> <code>Tools</code> menu is invoked. This option is
         mandatory for every tool. The command is executed from the root of
         the working directory, and in the environment it receives the name of
-        the tool as <em>GIT_GUITOOL</em>, the name of the currently selected file as
+        the tool as <code>GIT_GUITOOL</code>, the name of the currently selected file as
         <em>FILENAME</em>, and the name of the current branch as <em>CUR_BRANCH</em> (if
         the head is detached, <em>CUR_BRANCH</em> is empty).
 </p>
 </dd>
 <dt class="hdlist1">
-guitool.&lt;name&gt;.needsfile
+guitool.&lt;name&gt;.needsFile
 </dt>
 <dd>
 <p>
@@ -4120,7 +4558,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
-guitool.&lt;name&gt;.noconsole
+guitool.&lt;name&gt;.noConsole
 </dt>
 <dd>
 <p>
@@ -4129,7 +4567,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
-guitool.&lt;name&gt;.norescan
+guitool.&lt;name&gt;.noRescan
 </dt>
 <dd>
 <p>
@@ -4146,12 +4584,12 @@
 </p>
 </dd>
 <dt class="hdlist1">
-guitool.&lt;name&gt;.argprompt
+guitool.&lt;name&gt;.argPrompt
 </dt>
 <dd>
 <p>
         Request a string argument from the user, and pass it to the tool
-        through the <em>ARGS</em> environment variable. Since requesting an
+        through the <code>ARGS</code> environment variable. Since requesting an
         argument implies confirmation, the <em>confirm</em> option has no effect
         if this is enabled. If the option is set to <em>true</em>, <em>yes</em>, or <em>1</em>,
         the dialog uses a built-in generic prompt; otherwise the exact
@@ -4159,21 +4597,21 @@
 </p>
 </dd>
 <dt class="hdlist1">
-guitool.&lt;name&gt;.revprompt
+guitool.&lt;name&gt;.revPrompt
 </dt>
 <dd>
 <p>
         Request a single valid revision from the user, and set the
-        <em>REVISION</em> environment variable. In other aspects this option
-        is similar to <em>argprompt</em>, and can be used together with it.
+        <code>REVISION</code> environment variable. In other aspects this option
+        is similar to <em>argPrompt</em>, and can be used together with it.
 </p>
 </dd>
 <dt class="hdlist1">
-guitool.&lt;name&gt;.revunmerged
+guitool.&lt;name&gt;.revUnmerged
 </dt>
 <dd>
 <p>
-        Show only unmerged branches in the <em>revprompt</em> subdialog.
+        Show only unmerged branches in the <em>revPrompt</em> subdialog.
         This is useful for tools similar to merge or rebase, but not
         for things like checkout or reset.
 </p>
@@ -4193,7 +4631,7 @@
 <dd>
 <p>
         Specifies the general prompt string to display at the top of
-        the dialog, before subsections for <em>argprompt</em> and <em>revprompt</em>.
+        the dialog, before subsections for <em>argPrompt</em> and <em>revPrompt</em>.
         The default value includes the actual command.
 </p>
 </dd>
@@ -4217,7 +4655,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
-help.autocorrect
+help.autoCorrect
 </dt>
 <dd>
 <p>
@@ -4231,7 +4669,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
-help.htmlpath
+help.htmlPath
 </dt>
 <dd>
 <p>
@@ -4247,32 +4685,175 @@
 <dd>
 <p>
         Override the HTTP proxy, normally configured using the <em>http_proxy</em>,
-        <em>https_proxy</em>, and <em>all_proxy</em> environment variables (see
-        <code>curl(1)</code>).  This can be overridden on a per-remote basis; see
-        remote.&lt;name&gt;.proxy
+        <em>https_proxy</em>, and <em>all_proxy</em> environment variables (see <code>curl(1)</code>). In
+        addition to the syntax understood by curl, it is possible to specify a
+        proxy string with a user name but no password, in which case git will
+        attempt to acquire one in the same way it does for other credentials. See
+        <a href="gitcredentials.html">gitcredentials(7)</a> for more information. The syntax thus is
+        <em>[protocol://][user[:password]@]proxyhost[:port]</em>. This can be overridden
+        on a per-remote basis; see remote.&lt;name&gt;.proxy
+</p>
+</dd>
+<dt class="hdlist1">
+http.proxyAuthMethod
+</dt>
+<dd>
+<p>
+        Set the method with which to authenticate against the HTTP proxy. This
+        only takes effect if the configured proxy string contains a user name part
+        (i.e. is of the form <em>user@host</em> or <em>user@host:port</em>). This can be
+        overridden on a per-remote basis; see <code>remote.&lt;name&gt;.proxyAuthMethod</code>.
+        Both can be overridden by the <code>GIT_HTTP_PROXY_AUTHMETHOD</code> environment
+        variable.  Possible values are:
+</p>
+<div class="openblock">
+<div class="content">
+<div class="ulist"><ul>
+<li>
+<p>
+<code>anyauth</code> - Automatically pick a suitable authentication method. It is
+  assumed that the proxy answers an unauthenticated request with a 407
+  status code and one or more Proxy-authenticate headers with supported
+  authentication methods. This is the default.
+</p>
+</li>
+<li>
+<p>
+<code>basic</code> - HTTP Basic authentication
+</p>
+</li>
+<li>
+<p>
+<code>digest</code> - HTTP Digest authentication; this prevents the password from being
+  transmitted to the proxy in clear text
+</p>
+</li>
+<li>
+<p>
+<code>negotiate</code> - GSS-Negotiate authentication (compare the --negotiate option
+  of <code>curl(1)</code>)
 </p>
+</li>
+<li>
+<p>
+<code>ntlm</code> - NTLM authentication (compare the --ntlm option of <code>curl(1)</code>)
+</p>
+</li>
+</ul></div>
+</div></div>
 </dd>
 <dt class="hdlist1">
-http.cookiefile
+http.emptyAuth
 </dt>
 <dd>
 <p>
-        File containing previously stored cookie lines which should be used
+        Attempt authentication without seeking a username or password.  This
+        can be used to attempt GSS-Negotiate authentication without specifying
+        a username in the URL, as libcurl normally requires a username for
+        authentication.
+</p>
+</dd>
+<dt class="hdlist1">
+http.extraHeader
+</dt>
+<dd>
+<p>
+        Pass an additional HTTP header when communicating with a server.  If
+        more than one such entry exists, all of them are added as extra
+        headers.  To allow overriding the settings inherited from the system
+        config, an empty value will reset the extra headers to the empty list.
+</p>
+</dd>
+<dt class="hdlist1">
+http.cookieFile
+</dt>
+<dd>
+<p>
+        The pathname of a file containing previously stored cookie lines,
+        which should be used
         in the Git http session, if they match the server. The file format
         of the file to read cookies from should be plain HTTP headers or
-        the Netscape/Mozilla cookie file format (see <a href="curl.html">curl(1)</a>).
-        NOTE that the file specified with http.cookiefile is only used as
+        the Netscape/Mozilla cookie file format (see <code>curl(1)</code>).
+        NOTE that the file specified with http.cookieFile is used only as
         input unless http.saveCookies is set.
 </p>
 </dd>
 <dt class="hdlist1">
-http.savecookies
+http.saveCookies
 </dt>
 <dd>
 <p>
         If set, store cookies received during requests to the file specified by
-        http.cookiefile. Has no effect if http.cookiefile is unset.
+        http.cookieFile. Has no effect if http.cookieFile is unset.
+</p>
+</dd>
+<dt class="hdlist1">
+http.sslVersion
+</dt>
+<dd>
+<p>
+        The SSL version to use when negotiating an SSL connection, if you
+        want to force the default.  The available and default version
+        depend on whether libcurl was built against NSS or OpenSSL and the
+        particular configuration of the crypto library in use. Internally
+        this sets the <em>CURLOPT_SSL_VERSION</em> option; see the libcurl
+        documentation for more details on the format of this option and
+        for the ssl version supported. Actually the possible values of
+        this option are:
+</p>
+<div class="ulist"><ul>
+<li>
+<p>
+sslv2
+</p>
+</li>
+<li>
+<p>
+sslv3
+</p>
+</li>
+<li>
+<p>
+tlsv1
+</p>
+</li>
+<li>
+<p>
+tlsv1.0
+</p>
+</li>
+<li>
+<p>
+tlsv1.1
+</p>
+</li>
+<li>
+<p>
+tlsv1.2
+</p>
+</li>
+</ul></div>
+<div class="paragraph"><p>Can be overridden by the <code>GIT_SSL_VERSION</code> environment variable.
+To force git to use libcurl&#8217;s default ssl version and ignore any
+explicit http.sslversion option, set <code>GIT_SSL_VERSION</code> to the
+empty string.</p></div>
+</dd>
+<dt class="hdlist1">
+http.sslCipherList
+</dt>
+<dd>
+<p>
+  A list of SSL ciphers to use when negotiating an SSL connection.
+  The available ciphers depend on whether libcurl was built against
+  NSS or OpenSSL and the particular configuration of the crypto
+  library in use.  Internally this sets the <em>CURLOPT_SSL_CIPHER_LIST</em>
+  option; see the libcurl documentation for more details on the format
+  of this list.
 </p>
+<div class="paragraph"><p>Can be overridden by the <code>GIT_SSL_CIPHER_LIST</code> environment variable.
+To force git to use libcurl&#8217;s default cipher list and ignore any
+explicit http.sslCipherList option, set <code>GIT_SSL_CIPHER_LIST</code> to the
+empty string.</p></div>
 </dd>
 <dt class="hdlist1">
 http.sslVerify
@@ -4280,7 +4861,7 @@
 <dd>
 <p>
         Whether to verify the SSL certificate when fetching or pushing
-        over HTTPS. Can be overridden by the <em>GIT_SSL_NO_VERIFY</em> environment
+        over HTTPS. Can be overridden by the <code>GIT_SSL_NO_VERIFY</code> environment
         variable.
 </p>
 </dd>
@@ -4290,7 +4871,7 @@
 <dd>
 <p>
         File containing the SSL certificate when fetching or pushing
-        over HTTPS. Can be overridden by the <em>GIT_SSL_CERT</em> environment
+        over HTTPS. Can be overridden by the <code>GIT_SSL_CERT</code> environment
         variable.
 </p>
 </dd>
@@ -4300,7 +4881,7 @@
 <dd>
 <p>
         File containing the SSL private key when fetching or pushing
-        over HTTPS. Can be overridden by the <em>GIT_SSL_KEY</em> environment
+        over HTTPS. Can be overridden by the <code>GIT_SSL_KEY</code> environment
         variable.
 </p>
 </dd>
@@ -4312,7 +4893,7 @@
         Enable Git&#8217;s password prompt for the SSL certificate.  Otherwise
         OpenSSL will prompt the user, possibly many times, if the
         certificate or private key is encrypted.  Can be overridden by the
-        <em>GIT_SSL_CERT_PASSWORD_PROTECTED</em> environment variable.
+        <code>GIT_SSL_CERT_PASSWORD_PROTECTED</code> environment variable.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -4322,7 +4903,7 @@
 <p>
         File containing the certificates to verify the peer with when
         fetching or pushing over HTTPS. Can be overridden by the
-        <em>GIT_SSL_CAINFO</em> environment variable.
+        <code>GIT_SSL_CAINFO</code> environment variable.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -4332,7 +4913,20 @@
 <p>
         Path containing files with the CA certificates to verify the peer
         with when fetching or pushing over HTTPS. Can be overridden
-        by the <em>GIT_SSL_CAPATH</em> environment variable.
+        by the <code>GIT_SSL_CAPATH</code> environment variable.
+</p>
+</dd>
+<dt class="hdlist1">
+http.pinnedpubkey
+</dt>
+<dd>
+<p>
+        Public key of the https service. It may either be the filename of
+        a PEM or DER encoded public key file or a string starting with
+        <em>sha256//</em> followed by the base64 encoded sha256 hash of the
+        public key. See also libcurl <em>CURLOPT_PINNEDPUBLICKEY</em>. git will
+        exit with an error if this option is set but not supported by
+        cURL.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -4354,7 +4948,7 @@
 <dd>
 <p>
         How many HTTP requests to launch in parallel. Can be overridden
-        by the <em>GIT_HTTP_MAX_REQUESTS</em> environment variable. Default is 5.
+        by the <code>GIT_HTTP_MAX_REQUESTS</code> environment variable. Default is 5.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -4388,8 +4982,8 @@
 <p>
         If the HTTP transfer speed is less than <em>http.lowSpeedLimit</em>
         for longer than <em>http.lowSpeedTime</em> seconds, the transfer is aborted.
-        Can be overridden by the <em>GIT_HTTP_LOW_SPEED_LIMIT</em> and
-        <em>GIT_HTTP_LOW_SPEED_TIME</em> environment variables.
+        Can be overridden by the <code>GIT_HTTP_LOW_SPEED_LIMIT</code> and
+        <code>GIT_HTTP_LOW_SPEED_TIME</code> environment variables.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -4399,12 +4993,12 @@
 <p>
         A boolean which disables using of EPSV ftp command by curl.
         This can helpful with some "poor" ftp servers which don&#8217;t
-        support EPSV mode. Can be overridden by the <em>GIT_CURL_FTP_NO_EPSV</em>
+        support EPSV mode. Can be overridden by the <code>GIT_CURL_FTP_NO_EPSV</code>
         environment variable. Default is false (curl will use EPSV).
 </p>
 </dd>
 <dt class="hdlist1">
-http.useragent
+http.userAgent
 </dt>
 <dd>
 <p>
@@ -4414,7 +5008,7 @@
         such as Mozilla/4.0.  This may be necessary, for instance, if
         connecting through a firewall that restricts HTTP connections to a set
         of common USER_AGENT strings (but not including those like git/1.7.1).
-        Can be overridden by the <em>GIT_HTTP_USER_AGENT</em> environment variable.
+        Can be overridden by the <code>GIT_HTTP_USER_AGENT</code> environment variable.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -4422,7 +5016,7 @@
 </dt>
 <dd>
 <p>
-        Any of the http.* options above can be applied selectively to some urls.
+        Any of the http.* options above can be applied selectively to some URLs.
         For a config key to match a URL, each element of the config key is
         compared to that of the URL, in the following order:
 </p>
@@ -4478,8 +5072,8 @@
 <code>https://user@example.com</code>.</p></div>
 <div class="paragraph"><p>All URLs are normalized before attempting any matching (the password part,
 if embedded in the URL, is always ignored for matching purposes) so that
-equivalent urls that are simply spelled differently will match properly.
-Environment variable settings always override any matches.  The urls that are
+equivalent URLs that are simply spelled differently will match properly.
+Environment variable settings always override any matches.  The URLs that are
 matched against are those given directly to Git commands.  This means any URLs
 visited as a result of a redirection do not participate in matching.</p></div>
 </dd>
@@ -4514,7 +5108,16 @@
 </p>
 </dd>
 <dt class="hdlist1">
-init.templatedir
+index.version
+</dt>
+<dd>
+<p>
+        Specify the version with which new index files should be
+        initialized.  This does not affect existing repositories.
+</p>
+</dd>
+<dt class="hdlist1">
+init.templateDir
 </dt>
 <dd>
 <p>
@@ -4550,7 +5153,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
-instaweb.modulepath
+instaweb.modulePath
 </dt>
 <dd>
 <p>
@@ -4569,7 +5172,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
-interactive.singlekey
+interactive.singleKey
 </dt>
 <dd>
 <p>
@@ -4579,7 +5182,20 @@
         <a href="git-add.html">git-add(1)</a>, <a href="git-checkout.html">git-checkout(1)</a>, <a href="git-commit.html">git-commit(1)</a>,
         <a href="git-reset.html">git-reset(1)</a>, and <a href="git-stash.html">git-stash(1)</a>. Note that this
         setting is silently ignored if portable keystroke input
-        is not available.
+        is not available; requires the Perl module Term::ReadKey.
+</p>
+</dd>
+<dt class="hdlist1">
+interactive.diffFilter
+</dt>
+<dd>
+<p>
+        When an interactive command (such as <code>git add --patch</code>) shows
+        a colorized diff, git will pipe the diff through the shell
+        command defined by this configuration variable. The command may
+        mark up the diff further for human consumption, provided that it
+        retains a one-to-one correspondence with the lines in the
+        original diff. Defaults to disabled (no filtering).
 </p>
 </dd>
 <dt class="hdlist1">
@@ -4599,9 +5215,7 @@
 <p>
         Set the default date-time mode for the <em>log</em> command.
         Setting a value for log.date is similar to using <em>git log</em>'s
-        <code>--date</code> option.  Possible values are <code>relative</code>, <code>local</code>,
-        <code>default</code>, <code>iso</code>, <code>rfc</code>, and <code>short</code>; see <a href="git-log.html">git-log(1)</a>
-        for details.
+        <code>--date</code> option.  See <a href="git-log.html">git-log(1)</a> for details.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -4613,11 +5227,25 @@
         command. If <em>short</em> is specified, the ref name prefixes <em>refs/heads/</em>,
         <em>refs/tags/</em> and <em>refs/remotes/</em> will not be printed. If <em>full</em> is
         specified, the full ref name (including prefix) will be printed.
-        This is the same as the log commands <em>--decorate</em> option.
+        If <em>auto</em> is specified, then if the output is going to a terminal,
+        the ref names are shown as if <em>short</em> were given, otherwise no ref
+        names are shown. This is the same as the <code>--decorate</code> option
+        of the <code>git log</code>.
 </p>
 </dd>
 <dt class="hdlist1">
-log.showroot
+log.follow
+</dt>
+<dd>
+<p>
+        If <code>true</code>, <code>git log</code> will act as if the <code>--follow</code> option was used when
+        a single &lt;path&gt; is given.  This has the same limitations as <code>--follow</code>,
+        i.e. it cannot be used to follow multiple files and does not work well
+        on non-linear history.
+</p>
+</dd>
+<dt class="hdlist1">
+log.showRoot
 </dt>
 <dd>
 <p>
@@ -4637,6 +5265,18 @@
 </p>
 </dd>
 <dt class="hdlist1">
+mailinfo.scissors
+</dt>
+<dd>
+<p>
+        If true, makes <a href="git-mailinfo.html">git-mailinfo(1)</a> (and therefore
+        <a href="git-am.html">git-am(1)</a>) act by default as if the --scissors option
+        was provided on the command-line. When active, this features
+        removes everything from the message body before a scissors
+        line (i.e. consisting mainly of "&gt;8", "8&lt;" and "-").
+</p>
+</dd>
+<dt class="hdlist1">
 mailmap.file
 </dt>
 <dd>
@@ -4691,7 +5331,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
-merge.conflictstyle
+merge.conflictStyle
 </dt>
 <dd>
 <p>
@@ -4734,6 +5374,16 @@
 </p>
 </dd>
 <dt class="hdlist1">
+merge.branchdesc
+</dt>
+<dd>
+<p>
+        In addition to branch names, populate the log message with
+        the branch description text associated with them.  Defaults
+        to false.
+</p>
+</dd>
+<dt class="hdlist1">
 merge.log
 </dt>
 <dd>
@@ -4796,6 +5446,11 @@
 </li>
 <li>
 <p>
+bc
+</p>
+</li>
+<li>
+<p>
 bc3
 </p>
 </li>
@@ -4831,6 +5486,11 @@
 </li>
 <li>
 <p>
+examdiff
+</p>
+</li>
+<li>
+<p>
 gvimdiff
 </p>
 </li>
@@ -4841,6 +5501,11 @@
 </li>
 <li>
 <p>
+gvimdiff3
+</p>
+</li>
+<li>
+<p>
 kdiff3
 </p>
 </li>
@@ -4881,6 +5546,16 @@
 </li>
 <li>
 <p>
+vimdiff3
+</p>
+</li>
+<li>
+<p>
+winmerge
+</p>
+</li>
+<li>
+<p>
 xxdiff
 </p>
 </li>
@@ -4896,7 +5571,7 @@
         message if conflicts were detected. Level 1 outputs only
         conflicts, 2 outputs conflicts and file changes.  Level 5 and
         above outputs debugging information.  The default is level 2.
-        Can be overridden by the <em>GIT_MERGE_VERBOSITY</em> environment variable.
+        Can be overridden by the <code>GIT_MERGE_VERBOSITY</code> environment variable.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -4966,6 +5641,20 @@
 </p>
 </dd>
 <dt class="hdlist1">
+mergetool.meld.hasOutput
+</dt>
+<dd>
+<p>
+        Older versions of <code>meld</code> do not support the <code>--output</code> option.
+        Git will attempt to detect whether <code>meld</code> supports <code>--output</code>
+        by inspecting the output of <code>meld --help</code>.  Configuring
+        <code>mergetool.meld.hasOutput</code> will make Git skip these checks and
+        use the configured value instead.  Setting <code>mergetool.meld.hasOutput</code>
+        to <code>true</code> tells Git to unconditionally use the <code>--output</code> option,
+        and <code>false</code> avoids using <code>--output</code>.
+</p>
+</dd>
+<dt class="hdlist1">
 mergetool.keepBackup
 </dt>
 <dd>
@@ -4989,6 +5678,17 @@
 </p>
 </dd>
 <dt class="hdlist1">
+mergetool.writeToTemp
+</dt>
+<dd>
+<p>
+        Git writes temporary <em>BASE</em>, <em>LOCAL</em>, and <em>REMOTE</em> versions of
+        conflicting files in the worktree by default.  Git will attempt
+        to use a temporary directory for these files when set <code>true</code>.
+        Defaults to <code>false</code>.
+</p>
+</dd>
+<dt class="hdlist1">
 mergetool.prompt
 </dt>
 <dd>
@@ -4997,6 +5697,28 @@
 </p>
 </dd>
 <dt class="hdlist1">
+notes.mergeStrategy
+</dt>
+<dd>
+<p>
+        Which merge strategy to choose by default when resolving notes
+        conflicts.  Must be one of <code>manual</code>, <code>ours</code>, <code>theirs</code>, <code>union</code>, or
+        <code>cat_sort_uniq</code>.  Defaults to <code>manual</code>.  See "NOTES MERGE STRATEGIES"
+        section of <a href="git-notes.html">git-notes(1)</a> for more information on each strategy.
+</p>
+</dd>
+<dt class="hdlist1">
+notes.&lt;name&gt;.mergeStrategy
+</dt>
+<dd>
+<p>
+        Which merge strategy to choose when doing a notes merge into
+        refs/notes/&lt;name&gt;.  This overrides the more general
+        "notes.mergeStrategy".  See the "NOTES MERGE STRATEGIES" section in
+        <a href="git-notes.html">git-notes(1)</a> for more information on the available strategies.
+</p>
+</dd>
+<dt class="hdlist1">
 notes.displayRef
 </dt>
 <dd>
@@ -5036,8 +5758,8 @@
         When copying notes during a rewrite (see the
         "notes.rewrite.&lt;command&gt;" option), determines what to do if
         the target commit already has a note.  Must be one of
-        <code>overwrite</code>, <code>concatenate</code>, or <code>ignore</code>.  Defaults to
-        <code>concatenate</code>.
+        <code>overwrite</code>, <code>concatenate</code>, <code>cat_sort_uniq</code>, or <code>ignore</code>.
+        Defaults to <code>concatenate</code>.
 </p>
 <div class="paragraph"><p>This setting can be overridden with the <code>GIT_NOTES_REWRITE_MODE</code>
 environment variable.</p></div>
@@ -5082,10 +5804,11 @@
 </dt>
 <dd>
 <p>
-        The window memory size limit used by <a href="git-pack-objects.html">git-pack-objects(1)</a>
-        when no limit is given on the command line.  The value can be
-        suffixed with "k", "m", or "g".  Defaults to 0, meaning no
-        limit.
+        The maximum size of memory that is consumed by each thread
+        in <a href="git-pack-objects.html">git-pack-objects(1)</a> for pack window memory when
+        no limit is given on the command line.  The value can be
+        suffixed with "k", "m", or "g".  When left unconfigured (or
+        set explicitly to 0), there will be no limit.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -5161,7 +5884,7 @@
         larger than 2 GB.
 </p>
 <div class="paragraph"><p>If you have an old Git that does not understand the version 2 <code>*.idx</code> file,
-cloning or fetching over a non native protocol (e.g. "http" and "rsync")
+cloning or fetching over a non native protocol (e.g. "http")
 that will copy both <code>*.pack</code> file and corresponding <code>*.idx</code> file from the
 other side may give you a repository that cannot be accessed with your
 older version of Git. If the <code>*.pack</code> file is smaller than 2 GB, however,
@@ -5176,13 +5899,51 @@
         The maximum size of a pack.  This setting only affects
         packing to a file when repacking, i.e. the git:// protocol
         is unaffected.  It can be overridden by the <code>--max-pack-size</code>
-        option of <a href="git-repack.html">git-repack(1)</a>. The minimum size allowed is
-        limited to 1 MiB. The default is unlimited.
+        option of <a href="git-repack.html">git-repack(1)</a>.  Reaching this limit results
+        in the creation of multiple packfiles; which in turn prevents
+        bitmaps from being created.
+        The minimum size allowed is limited to 1 MiB.
+        The default is unlimited.
         Common unit suffixes of <em>k</em>, <em>m</em>, or <em>g</em> are
         supported.
 </p>
 </dd>
 <dt class="hdlist1">
+pack.useBitmaps
+</dt>
+<dd>
+<p>
+        When true, git will use pack bitmaps (if available) when packing
+        to stdout (e.g., during the server side of a fetch). Defaults to
+        true. You should not generally need to turn this off unless
+        you are debugging pack bitmaps.
+</p>
+</dd>
+<dt class="hdlist1">
+pack.writeBitmaps (deprecated)
+</dt>
+<dd>
+<p>
+        This is a deprecated synonym for <code>repack.writeBitmaps</code>.
+</p>
+</dd>
+<dt class="hdlist1">
+pack.writeBitmapHashCache
+</dt>
+<dd>
+<p>
+        When true, git will include a "hash cache" section in the bitmap
+        index (if one is written). This cache can be used to feed git&#8217;s
+        delta heuristics, potentially leading to better deltas between
+        bitmapped and non-bitmapped objects (e.g., when serving a fetch
+        between an older, bitmapped pack and objects that have been
+        pushed since the last gc). The downside is that it consumes 4
+        bytes per object of disk space, and that JGit&#8217;s bitmap
+        implementation does not understand it, causing it to complain if
+        Git and JGit are used on the same repository. Defaults to false.
+</p>
+</dd>
+<dt class="hdlist1">
 pager.&lt;cmd&gt;
 </dt>
 <dd>
@@ -5212,6 +5973,21 @@
 </p>
 </dd>
 <dt class="hdlist1">
+pull.ff
+</dt>
+<dd>
+<p>
+        By default, Git does not create an extra merge commit when merging
+        a commit that is a descendant of the current commit. Instead, the
+        tip of the current branch is fast-forwarded. When set to <code>false</code>,
+        this variable tells Git to create an extra merge commit in such
+        a case (equivalent to giving the <code>--no-ff</code> option from the command
+        line). When set to <code>only</code>, only such fast-forward merges are
+        allowed (equivalent to giving the <code>--ff-only</code> option from the
+        command line). This setting overrides <code>merge.ff</code> when pulling.
+</p>
+</dd>
+<dt class="hdlist1">
 pull.rebase
 </dt>
 <dd>
@@ -5221,12 +5997,10 @@
         pull" is run. See "branch.&lt;name&gt;.rebase" for setting this on a
         per-branch basis.
 </p>
-<div class="literalblock">
-<div class="content">
-<pre><code>When preserve, also pass `--preserve-merges` along to 'git rebase'
+<div class="paragraph"><p>When preserve, also pass <code>--preserve-merges</code> along to <em>git rebase</em>
 so that locally committed merge commits will not be flattened
-by running 'git pull'.</code></pre>
-</div></div>
+by running <em>git pull</em>.</p></div>
+<div class="paragraph"><p>When the value is <code>interactive</code>, the rebase is run in interactive mode.</p></div>
 <div class="paragraph"><p><strong>NOTE</strong>: this is a possibly dangerous operation; do <strong>not</strong> use
 it unless you understand the implications (see <a href="git-rebase.html">git-rebase(1)</a>
 for details).</p></div>
@@ -5294,7 +6068,7 @@
 <div class="paragraph"><p>When pushing to a remote that is different from the remote you normally
 pull from, work as <code>current</code>.  This is the safest option and is suited
 for beginners.</p></div>
-<div class="paragraph"><p>This mode will become the default in Git 2.0.</p></div>
+<div class="paragraph"><p>This mode has become the default in Git 2.0.</p></div>
 </li>
 <li>
 <p>
@@ -5314,13 +6088,56 @@
 suitable for pushing into a shared central repository, as other
 people may add new branches there, or update the tip of existing
 branches outside your control.</p></div>
-<div class="paragraph"><p>This is currently the default, but Git 2.0 will change the default
-to <code>simple</code>.</p></div>
+<div class="paragraph"><p>This used to be the default, but not since Git 2.0 (<code>simple</code> is the
+new default).</p></div>
 </li>
 </ul></div>
 </div></div>
 </dd>
 <dt class="hdlist1">
+push.followTags
+</dt>
+<dd>
+<p>
+        If set to true enable <code>--follow-tags</code> option by default.  You
+        may override this configuration at time of push by specifying
+        <code>--no-follow-tags</code>.
+</p>
+</dd>
+<dt class="hdlist1">
+push.gpgSign
+</dt>
+<dd>
+<p>
+        May be set to a boolean value, or the string <em>if-asked</em>. A true
+        value causes all pushes to be GPG signed, as if <code>--signed</code> is
+        passed to <a href="git-push.html">git-push(1)</a>. The string <em>if-asked</em> causes
+        pushes to be signed if the server supports it, as if
+        <code>--signed=if-asked</code> is passed to <em>git push</em>. A false value may
+        override a value from a lower-priority config file. An explicit
+        command-line flag always overrides this config option.
+</p>
+</dd>
+<dt class="hdlist1">
+push.recurseSubmodules
+</dt>
+<dd>
+<p>
+        Make sure all submodule commits used by the revisions to be pushed
+        are available on a remote-tracking branch. If the value is <em>check</em>
+        then Git will verify that all submodule commits that changed in the
+        revisions to be pushed are available on at least one remote of the
+        submodule. If any commits are missing, the push will be aborted and
+        exit with non-zero status. If the value is <em>on-demand</em> then all
+        submodules that changed in the revisions to be pushed will be
+        pushed. If on-demand was not able to push all necessary revisions
+        it will also be aborted and exit with non-zero status. If the value
+        is <em>no</em> then default behavior of ignoring submodules when pushing
+        is retained. You may override this configuration at time of push by
+        specifying <em>--recurse-submodules=check|on-demand|no</em>.
+</p>
+</dd>
+<dt class="hdlist1">
 rebase.stat
 </dt>
 <dd>
@@ -5330,15 +6147,15 @@
 </p>
 </dd>
 <dt class="hdlist1">
-rebase.autosquash
+rebase.autoSquash
 </dt>
 <dd>
 <p>
-        If set to true enable <em>--autosquash</em> option by default.
+        If set to true enable <code>--autosquash</code> option by default.
 </p>
 </dd>
 <dt class="hdlist1">
-rebase.autostash
+rebase.autoStash
 </dt>
 <dd>
 <p>
@@ -5351,6 +6168,48 @@
 </p>
 </dd>
 <dt class="hdlist1">
+rebase.missingCommitsCheck
+</dt>
+<dd>
+<p>
+        If set to "warn", git rebase -i will print a warning if some
+        commits are removed (e.g. a line was deleted), however the
+        rebase will still proceed. If set to "error", it will print
+        the previous warning and stop the rebase, <em>git rebase
+        --edit-todo</em> can then be used to correct the error. If set to
+        "ignore", no checking is done.
+        To drop a commit without warning or error, use the <code>drop</code>
+        command in the todo-list.
+        Defaults to "ignore".
+</p>
+</dd>
+</dl></div>
+<div class="paragraph"><p>rebase.instructionFormat
+        A format string, as specified in <a href="git-log.html">git-log(1)</a>, to be used for
+        the instruction list during an interactive rebase.  The format will automatically
+        have the long commit hash prepended to the format.</p></div>
+<div class="dlist"><dl>
+<dt class="hdlist1">
+receive.advertiseAtomic
+</dt>
+<dd>
+<p>
+        By default, git-receive-pack will advertise the atomic push
+        capability to its clients. If you don&#8217;t want to advertise this
+        capability, set this variable to false.
+</p>
+</dd>
+<dt class="hdlist1">
+receive.advertisePushOptions
+</dt>
+<dd>
+<p>
+        By default, git-receive-pack will advertise the push options
+        capability to its clients. If you don&#8217;t want to advertise this
+        capability, set this variable to false.
+</p>
+</dd>
+<dt class="hdlist1">
 receive.autogc
 </dt>
 <dd>
@@ -5361,6 +6220,35 @@
 </p>
 </dd>
 <dt class="hdlist1">
+receive.certNonceSeed
+</dt>
+<dd>
+<p>
+        By setting this variable to a string, <code>git receive-pack</code>
+        will accept a <code>git push --signed</code> and verifies it by using
+        a "nonce" protected by HMAC using this string as a secret
+        key.
+</p>
+</dd>
+<dt class="hdlist1">
+receive.certNonceSlop
+</dt>
+<dd>
+<p>
+        When a <code>git push --signed</code> sent a push certificate with a
+        "nonce" that was issued by a receive-pack serving the same
+        repository within this many seconds, export the "nonce"
+        found in the certificate to <code>GIT_PUSH_CERT_NONCE</code> to the
+        hooks (instead of what the receive-pack asked the sending
+        side to include).  This may allow writing checks in
+        <code>pre-receive</code> and <code>post-receive</code> a bit easier.  Instead of
+        checking <code>GIT_PUSH_CERT_NONCE_SLOP</code> environment variable
+        that records by how many seconds the nonce is stale to
+        decide if they want to accept the certificate, they only
+        can check <code>GIT_PUSH_CERT_NONCE_STATUS</code> is <code>OK</code>.
+</p>
+</dd>
+<dt class="hdlist1">
 receive.fsckObjects
 </dt>
 <dd>
@@ -5373,6 +6261,51 @@
 </p>
 </dd>
 <dt class="hdlist1">
+receive.fsck.&lt;msg-id&gt;
+</dt>
+<dd>
+<p>
+        When <code>receive.fsckObjects</code> is set to true, errors can be switched
+        to warnings and vice versa by configuring the <code>receive.fsck.&lt;msg-id&gt;</code>
+        setting where the <code>&lt;msg-id&gt;</code> is the fsck message ID and the value
+        is one of <code>error</code>, <code>warn</code> or <code>ignore</code>. For convenience, fsck prefixes
+        the error/warning with the message ID, e.g. "missingEmail: invalid
+        author/committer line - missing email" means that setting
+        <code>receive.fsck.missingEmail = ignore</code> will hide that issue.
+</p>
+<div class="paragraph"><p>This feature is intended to support working with legacy repositories
+which would not pass pushing when <code>receive.fsckObjects = true</code>, allowing
+the host to accept repositories with certain known issues but still catch
+other issues.</p></div>
+</dd>
+<dt class="hdlist1">
+receive.fsck.skipList
+</dt>
+<dd>
+<p>
+        The path to a sorted list of object names (i.e. one SHA-1 per
+        line) that are known to be broken in a non-fatal way and should
+        be ignored. This feature is useful when an established project
+        should be accepted despite early commits containing errors that
+        can be safely ignored such as invalid committer email addresses.
+        Note: corrupt objects cannot be skipped with this setting.
+</p>
+</dd>
+<dt class="hdlist1">
+receive.keepAlive
+</dt>
+<dd>
+<p>
+        After receiving the pack from the client, <code>receive-pack</code> may
+        produce no output (if <code>--quiet</code> was specified) while processing
+        the pack, causing some networks to drop the TCP connection.
+        With this option set, if <code>receive-pack</code> does not transmit
+        any data in this phase for <code>receive.keepAlive</code> seconds, it will
+        send a short keepalive packet.  The default is 5 seconds; set
+        to 0 to disable keepalives entirely.
+</p>
+</dd>
+<dt class="hdlist1">
 receive.unpackLimit
 </dt>
 <dd>
@@ -5418,6 +6351,15 @@
         proceed. If set to false or "ignore", allow such pushes with no
         message. Defaults to "refuse".
 </p>
+<div class="paragraph"><p>Another option is "updateInstead" which will update the working
+tree if pushing into the current branch.  This option is
+intended for synchronizing working directories when one side is not easily
+accessible via interactive ssh (e.g. a live web site, hence the requirement
+that the working directory be clean). This mode also comes in handy when
+developing inside a VM to test and fix code on different Operating Systems.</p></div>
+<div class="paragraph"><p>By default, "updateInstead" will refuse the push if the working tree or
+the index have any difference from the HEAD, but the <code>push-to-checkout</code>
+hook can be used to customize this.  See <a href="githooks.html">githooks(5)</a>.</p></div>
 </dd>
 <dt class="hdlist1">
 receive.denyNonFastForwards
@@ -5431,21 +6373,18 @@
 </p>
 </dd>
 <dt class="hdlist1">
-receive.hiderefs
+receive.hideRefs
 </dt>
 <dd>
 <p>
-        String(s) <code>receive-pack</code> uses to decide which refs to omit
-        from its initial advertisement.  Use more than one
-        definitions to specify multiple prefix strings. A ref that
-        are under the hierarchies listed on the value of this
-        variable is excluded, and is hidden when responding to <code>git
-        push</code>, and an attempt to update or delete a hidden ref by
-        <code>git push</code> is rejected.
+        This variable is the same as <code>transfer.hideRefs</code>, but applies
+        only to <code>receive-pack</code> (and so affects pushes, but not fetches).
+        An attempt to update or delete a hidden ref by <code>git push</code> is
+        rejected.
 </p>
 </dd>
 <dt class="hdlist1">
-receive.updateserverinfo
+receive.updateServerInfo
 </dt>
 <dd>
 <p>
@@ -5454,7 +6393,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
-receive.shallowupdate
+receive.shallowUpdate
 </dt>
 <dd>
 <p>
@@ -5463,13 +6402,13 @@
 </p>
 </dd>
 <dt class="hdlist1">
-remote.pushdefault
+remote.pushDefault
 </dt>
 <dd>
 <p>
         The remote to push to by default.  Overrides
         <code>branch.&lt;name&gt;.remote</code> for all branches, and is overridden by
-        <code>branch.&lt;name&gt;.pushremote</code> for specific branches.
+        <code>branch.&lt;name&gt;.pushRemote</code> for specific branches.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -5500,6 +6439,16 @@
 </p>
 </dd>
 <dt class="hdlist1">
+remote.&lt;name&gt;.proxyAuthMethod
+</dt>
+<dd>
+<p>
+        For remotes that require curl (http, https and ftp), the method to use for
+        authenticating against the proxy in use (probably set in
+        <code>remote.&lt;name&gt;.proxy</code>). See <code>http.proxyAuthMethod</code>.
+</p>
+</dd>
+<dt class="hdlist1">
 remote.&lt;name&gt;.fetch
 </dt>
 <dd>
@@ -5565,7 +6514,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
-remote.&lt;name&gt;.tagopt
+remote.&lt;name&gt;.tagOpt
 </dt>
 <dd>
 <p>
@@ -5607,7 +6556,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
-repack.usedeltabaseoffset
+repack.useDeltaBaseOffset
 </dt>
 <dd>
 <p>
@@ -5620,7 +6569,33 @@
 </p>
 </dd>
 <dt class="hdlist1">
-rerere.autoupdate
+repack.packKeptObjects
+</dt>
+<dd>
+<p>
+        If set to true, makes <code>git repack</code> act as if
+        <code>--pack-kept-objects</code> was passed. See <a href="git-repack.html">git-repack(1)</a> for
+        details. Defaults to <code>false</code> normally, but <code>true</code> if a bitmap
+        index is being written (either via <code>--write-bitmap-index</code> or
+        <code>repack.writeBitmaps</code>).
+</p>
+</dd>
+<dt class="hdlist1">
+repack.writeBitmaps
+</dt>
+<dd>
+<p>
+        When true, git will write a bitmap index when packing all
+        objects to disk (e.g., when <code>git repack -a</code> is run).  This
+        index can speed up the "counting objects" phase of subsequent
+        packs created for clones and fetches, at the cost of some disk
+        space and extra time spent on the initial repack.  This has
+        no effect if multiple packfiles are created.
+        Defaults to false.
+</p>
+</dd>
+<dt class="hdlist1">
+rerere.autoUpdate
 </dt>
 <dd>
 <p>
@@ -5650,11 +6625,11 @@
         A configuration identity. When given, causes values in the
         <em>sendemail.&lt;identity&gt;</em> subsection to take precedence over
         values in the <em>sendemail</em> section. The default identity is
-        the value of <em>sendemail.identity</em>.
+        the value of <code>sendemail.identity</code>.
 </p>
 </dd>
 <dt class="hdlist1">
-sendemail.smtpencryption
+sendemail.smtpEncryption
 </dt>
 <dd>
 <p>
@@ -5663,11 +6638,11 @@
 </p>
 </dd>
 <dt class="hdlist1">
-sendemail.smtpssl
+sendemail.smtpssl (deprecated)
 </dt>
 <dd>
 <p>
-        Deprecated alias for <em>sendemail.smtpencryption = ssl</em>.
+        Deprecated alias for <em>sendemail.smtpEncryption = ssl</em>.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -5687,14 +6662,14 @@
         Identity-specific versions of the <em>sendemail.*</em> parameters
         found below, taking precedence over those when the this
         identity is selected, through command-line or
-        <em>sendemail.identity</em>.
+        <code>sendemail.identity</code>.
 </p>
 </dd>
 <dt class="hdlist1">
-sendemail.aliasesfile
+sendemail.aliasesFile
 </dt>
 <dt class="hdlist1">
-sendemail.aliasfiletype
+sendemail.aliasFileType
 </dt>
 <dt class="hdlist1">
 sendemail.annotate
@@ -5706,70 +6681,76 @@
 sendemail.cc
 </dt>
 <dt class="hdlist1">
-sendemail.cccmd
+sendemail.ccCmd
 </dt>
 <dt class="hdlist1">
-sendemail.chainreplyto
+sendemail.chainReplyTo
 </dt>
 <dt class="hdlist1">
 sendemail.confirm
 </dt>
 <dt class="hdlist1">
-sendemail.envelopesender
+sendemail.envelopeSender
 </dt>
 <dt class="hdlist1">
 sendemail.from
 </dt>
 <dt class="hdlist1">
-sendemail.multiedit
+sendemail.multiEdit
 </dt>
 <dt class="hdlist1">
 sendemail.signedoffbycc
 </dt>
 <dt class="hdlist1">
-sendemail.smtppass
+sendemail.smtpPass
 </dt>
 <dt class="hdlist1">
 sendemail.suppresscc
 </dt>
 <dt class="hdlist1">
-sendemail.suppressfrom
+sendemail.suppressFrom
 </dt>
 <dt class="hdlist1">
 sendemail.to
 </dt>
 <dt class="hdlist1">
-sendemail.smtpdomain
+sendemail.smtpDomain
 </dt>
 <dt class="hdlist1">
-sendemail.smtpserver
+sendemail.smtpServer
 </dt>
 <dt class="hdlist1">
-sendemail.smtpserverport
+sendemail.smtpServerPort
 </dt>
 <dt class="hdlist1">
-sendemail.smtpserveroption
+sendemail.smtpServerOption
 </dt>
 <dt class="hdlist1">
-sendemail.smtpuser
+sendemail.smtpUser
 </dt>
 <dt class="hdlist1">
 sendemail.thread
 </dt>
 <dt class="hdlist1">
+sendemail.transferEncoding
+</dt>
+<dt class="hdlist1">
 sendemail.validate
 </dt>
+<dt class="hdlist1">
+sendemail.xmailer
+</dt>
 <dd>
 <p>
         See <a href="git-send-email.html">git-send-email(1)</a> for description.
 </p>
 </dd>
 <dt class="hdlist1">
-sendemail.signedoffcc
+sendemail.signedoffcc (deprecated)
 </dt>
 <dd>
 <p>
-        Deprecated alias for <em>sendemail.signedoffbycc</em>.
+        Deprecated alias for <code>sendemail.signedoffbycc</code>.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -5831,7 +6812,7 @@
         files which are not currently tracked by Git. Directories which
         contain only untracked files, are shown with the directory name
         only. Showing untracked files means that Git needs to lstat() all
-        all the files in the whole repository, which might be slow on some
+        the files in the whole repository, which might be slow on some
         systems. So, this variable controls how the commands displays
         the untracked files. Possible values are:
 </p>
@@ -5860,7 +6841,7 @@
 of <a href="git-status.html">git-status(1)</a> and <a href="git-commit.html">git-commit(1)</a>.</p></div>
 </dd>
 <dt class="hdlist1">
-status.submodulesummary
+status.submoduleSummary
 </dt>
 <dd>
 <p>
@@ -5871,29 +6852,58 @@
         --summary-limit option of <a href="git-submodule.html">git-submodule(1)</a>). Please note
         that the summary output command will be suppressed for all
         submodules when <code>diff.ignoreSubmodules</code> is set to <em>all</em> or only
-        for those submodules where <code>submodule.&lt;name&gt;.ignore=all</code>. To
+        for those submodules where <code>submodule.&lt;name&gt;.ignore=all</code>. The only
+        exception to that rule is that status and commit will show staged
+        submodule changes. To
         also view the summary for ignored submodules you can either use
-        the --ignore-submodules=dirty command line option or the <em>git
+        the --ignore-submodules=dirty command-line option or the <em>git
         submodule summary</em> command, which shows a similar output but does
         not honor these settings.
 </p>
 </dd>
 <dt class="hdlist1">
+stash.showPatch
+</dt>
+<dd>
+<p>
+        If this is set to true, the <code>git stash show</code> command without an
+        option will show the stash in patch form.  Defaults to false.
+        See description of <em>show</em> command in <a href="git-stash.html">git-stash(1)</a>.
+</p>
+</dd>
+<dt class="hdlist1">
+stash.showStat
+</dt>
+<dd>
+<p>
+        If this is set to true, the <code>git stash show</code> command without an
+        option will show diffstat of the stash.  Defaults to true.
+        See description of <em>show</em> command in <a href="git-stash.html">git-stash(1)</a>.
+</p>
+</dd>
+<dt class="hdlist1">
 submodule.&lt;name&gt;.path
 </dt>
 <dt class="hdlist1">
 submodule.&lt;name&gt;.url
 </dt>
+<dd>
+<p>
+        The path within this project and URL for a submodule. These
+        variables are initially populated by <em>git submodule init</em>. See
+        <a href="git-submodule.html">git-submodule(1)</a> and <a href="gitmodules.html">gitmodules(5)</a> for
+        details.
+</p>
+</dd>
 <dt class="hdlist1">
 submodule.&lt;name&gt;.update
 </dt>
 <dd>
 <p>
-        The path within this project, URL, and the updating strategy
-        for a submodule.  These variables are initially populated
-        by <em>git submodule init</em>; edit them to override the
-        URL and other values found in the <code>.gitmodules</code> file.  See
-        <a href="git-submodule.html">git-submodule(1)</a> and <a href="gitmodules.html">gitmodules(5)</a> for details.
+        The default update procedure for a submodule. This variable
+        is populated by <code>git submodule init</code> from the
+        <a href="gitmodules.html">gitmodules(5)</a> file. See description of <em>update</em>
+        command in <a href="git-submodule.html">git-submodule(1)</a>.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -5914,7 +6924,7 @@
 <p>
         This option can be used to control recursive fetching of this
         submodule. It can be overridden by using the --[no-]recurse-submodules
-        command line option to "git fetch" and "git pull".
+        command-line option to "git fetch" and "git pull".
         This setting will override that from in the <a href="gitmodules.html">gitmodules(5)</a>
         file.
 </p>
@@ -5926,7 +6936,9 @@
 <p>
         Defines under what circumstances "git status" and the diff family show
         a submodule as modified. When set to "all", it will never be considered
-        modified, "dirty" will ignore all changes to the submodules work tree and
+        modified (but it will nonetheless show up in the output of status and
+        commit when it has been staged), "dirty" will ignore all changes
+        to the submodules work tree and
         takes only differences between the HEAD of the submodule and the commit
         recorded in the superproject into account. "untracked" will additionally
         let submodules with modified tracked files in their work tree show up.
@@ -5939,6 +6951,37 @@
 </p>
 </dd>
 <dt class="hdlist1">
+submodule.fetchJobs
+</dt>
+<dd>
+<p>
+        Specifies how many submodules are fetched/cloned at the same time.
+        A positive integer allows up to that number of submodules fetched
+        in parallel. A value of 0 will give some reasonable default.
+        If unset, it defaults to 1.
+</p>
+</dd>
+<dt class="hdlist1">
+tag.forceSignAnnotated
+</dt>
+<dd>
+<p>
+        A boolean to specify whether annotated tags created should be GPG signed.
+        If <code>--annotate</code> is specified on the command line, it takes
+        precedence over this option.
+</p>
+</dd>
+<dt class="hdlist1">
+tag.sort
+</dt>
+<dd>
+<p>
+        This variable controls the sort ordering of tags when displayed by
+        <a href="git-tag.html">git-tag(1)</a>. Without the "--sort=&lt;value&gt;" option provided, the
+        value of this variable will be used as the default.
+</p>
+</dd>
+<dt class="hdlist1">
 tar.umask
 </dt>
 <dd>
@@ -5961,14 +7004,30 @@
 </p>
 </dd>
 <dt class="hdlist1">
-transfer.hiderefs
+transfer.hideRefs
 </dt>
 <dd>
 <p>
-        This variable can be used to set both <code>receive.hiderefs</code>
-        and <code>uploadpack.hiderefs</code> at the same time to the same
-        values.  See entries for these other variables.
-</p>
+        String(s) <code>receive-pack</code> and <code>upload-pack</code> use to decide which
+        refs to omit from their initial advertisements.  Use more than
+        one definition to specify multiple prefix strings. A ref that is
+        under the hierarchies listed in the value of this variable is
+        excluded, and is hidden when responding to <code>git push</code> or <code>git
+        fetch</code>.  See <code>receive.hideRefs</code> and <code>uploadpack.hideRefs</code> for
+        program-specific versions of this config.
+</p>
+<div class="paragraph"><p>You may also include a <code>!</code> in front of the ref name to negate the entry,
+explicitly exposing it, even if an earlier entry marked it as hidden.
+If you have multiple hideRefs values, later entries override earlier ones
+(and entries in more-specific config files override less-specific ones).</p></div>
+<div class="paragraph"><p>If a namespace is in use, the namespace prefix is stripped from each
+reference before it is matched against <code>transfer.hiderefs</code> patterns.
+For example, if <code>refs/heads/master</code> is specified in <code>transfer.hideRefs</code> and
+the current namespace is <code>foo</code>, then <code>refs/namespaces/foo/refs/heads/master</code>
+is omitted from the advertisements but <code>refs/heads/master</code> and
+<code>refs/namespaces/bar/refs/heads/master</code> are still advertised as so-called
+"have" lines. In order to match refs before stripping, add a <code>^</code> in front of
+the ref name. If you combine <code>!</code> and <code>^</code>, <code>!</code> must be specified first.</p></div>
 </dd>
 <dt class="hdlist1">
 transfer.unpackLimit
@@ -5981,32 +7040,52 @@
 </p>
 </dd>
 <dt class="hdlist1">
-uploadpack.hiderefs
+uploadarchive.allowUnreachable
 </dt>
 <dd>
 <p>
-        String(s) <code>upload-pack</code> uses to decide which refs to omit
-        from its initial advertisement.  Use more than one
-        definitions to specify multiple prefix strings. A ref that
-        are under the hierarchies listed on the value of this
-        variable is excluded, and is hidden from <code>git ls-remote</code>,
-        <code>git fetch</code>, etc.  An attempt to fetch a hidden ref by <code>git
-        fetch</code> will fail.  See also <code>uploadpack.allowtipsha1inwant</code>.
+        If true, allow clients to use <code>git archive --remote</code> to request
+        any tree, whether reachable from the ref tips or not. See the
+        discussion in the <code>SECURITY</code> section of
+        <a href="git-upload-archive.html">git-upload-archive(1)</a> for more details. Defaults to
+        <code>false</code>.
 </p>
 </dd>
 <dt class="hdlist1">
-uploadpack.allowtipsha1inwant
+uploadpack.hideRefs
 </dt>
 <dd>
 <p>
-        When <code>uploadpack.hiderefs</code> is in effect, allow <code>upload-pack</code>
+        This variable is the same as <code>transfer.hideRefs</code>, but applies
+        only to <code>upload-pack</code> (and so affects only fetches, not pushes).
+        An attempt to fetch a hidden ref by <code>git fetch</code> will fail.  See
+        also <code>uploadpack.allowTipSHA1InWant</code>.
+</p>
+</dd>
+<dt class="hdlist1">
+uploadpack.allowTipSHA1InWant
+</dt>
+<dd>
+<p>
+        When <code>uploadpack.hideRefs</code> is in effect, allow <code>upload-pack</code>
         to accept a fetch request that asks for an object at the tip
         of a hidden ref (by default, such a request is rejected).
-        see also <code>uploadpack.hiderefs</code>.
+        see also <code>uploadpack.hideRefs</code>.
 </p>
 </dd>
 <dt class="hdlist1">
-uploadpack.keepalive
+uploadpack.allowReachableSHA1InWant
+</dt>
+<dd>
+<p>
+        Allow <code>upload-pack</code> to accept a fetch request that asks for an
+        object that is reachable from any ref tip. However, note that
+        calculating object reachability is computationally expensive.
+        Defaults to <code>false</code>.
+</p>
+</dd>
+<dt class="hdlist1">
+uploadpack.keepAlive
 </dt>
 <dd>
 <p>
@@ -6017,11 +7096,30 @@
         the pack data begins. Some clients and networks may consider
         the server to be hung and give up. Setting this option instructs
         <code>upload-pack</code> to send an empty keepalive packet every
-        <code>uploadpack.keepalive</code> seconds. Setting this option to 0
+        <code>uploadpack.keepAlive</code> seconds. Setting this option to 0
         disables keepalive packets entirely. The default is 5 seconds.
 </p>
 </dd>
 <dt class="hdlist1">
+uploadpack.packObjectsHook
+</dt>
+<dd>
+<p>
+        If this option is set, when <code>upload-pack</code> would run
+        <code>git pack-objects</code> to create a packfile for a client, it will
+        run this shell command instead.  The <code>pack-objects</code> command and
+        arguments it <em>would</em> have run (including the <code>git pack-objects</code>
+        at the beginning) are appended to the shell command. The stdin
+        and stdout of the hook are treated as if <code>pack-objects</code> itself
+        was run. I.e., <code>upload-pack</code> will feed input intended for
+        <code>pack-objects</code> to the hook, and expects a completed packfile on
+        stdout.
+</p>
+<div class="paragraph"><p>Note that this configuration variable is ignored if it is seen in the
+repository-level config (this is a safety measure against fetching from
+untrusted repositories).</p></div>
+</dd>
+<dt class="hdlist1">
 url.&lt;base&gt;.insteadOf
 </dt>
 <dd>
@@ -6061,8 +7159,8 @@
 <dd>
 <p>
         Your email address to be recorded in any newly created commits.
-        Can be overridden by the <em>GIT_AUTHOR_EMAIL</em>, <em>GIT_COMMITTER_EMAIL</em>, and
-        <em>EMAIL</em> environment variables.  See <a href="git-commit-tree.html">git-commit-tree(1)</a>.
+        Can be overridden by the <code>GIT_AUTHOR_EMAIL</code>, <code>GIT_COMMITTER_EMAIL</code>, and
+        <code>EMAIL</code> environment variables.  See <a href="git-commit-tree.html">git-commit-tree(1)</a>.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -6071,12 +7169,27 @@
 <dd>
 <p>
         Your full name to be recorded in any newly created commits.
-        Can be overridden by the <em>GIT_AUTHOR_NAME</em> and <em>GIT_COMMITTER_NAME</em>
+        Can be overridden by the <code>GIT_AUTHOR_NAME</code> and <code>GIT_COMMITTER_NAME</code>
         environment variables.  See <a href="git-commit-tree.html">git-commit-tree(1)</a>.
 </p>
 </dd>
 <dt class="hdlist1">
-user.signingkey
+user.useConfigOnly
+</dt>
+<dd>
+<p>
+        Instruct Git to avoid trying to guess defaults for <code>user.email</code>
+        and <code>user.name</code>, and instead retrieve the values only from the
+        configuration. For example, if you have multiple email addresses
+        and would like to use a different one for each repository, then
+        with this configuration option set to <code>true</code> in the global config
+        along with a name, Git will prompt you to set up an email before
+        making new commits in a newly cloned repository.
+        Defaults to <code>false</code>.
+</p>
+</dd>
+<dt class="hdlist1">
+user.signingKey
 </dt>
 <dd>
 <p>
@@ -6088,6 +7201,22 @@
 </p>
 </dd>
 <dt class="hdlist1">
+versionsort.prereleaseSuffix
+</dt>
+<dd>
+<p>
+        When version sort is used in <a href="git-tag.html">git-tag(1)</a>, prerelease
+        tags (e.g. "1.0-rc1") may appear after the main release
+        "1.0". By specifying the suffix "-rc" in this variable,
+        "1.0-rc1" will appear before "1.0".
+</p>
+<div class="paragraph"><p>This variable can be specified multiple times, once per suffix. The
+order of suffixes in the config file determines the sorting order
+(e.g. if "-pre" appears before "-rc" in the config file then 1.0-preXX
+is sorted before 1.0-rcXX). The sorting order between different
+suffixes is undefined if they are in multiple config files.</p></div>
+</dd>
+<dt class="hdlist1">
 web.browser
 </dt>
 <dd>
# install git-config.html /usr/share/doc/git-doc/git-config.html
--- /usr/share/doc/git-doc/git-count-objects.html	2016-03-21 09:24:28.000000000 -0600
+++ git-count-objects.html	2016-10-15 00:43:26.516074284 -0600
@@ -780,8 +780,8 @@
 <div class="paragraph"><p>size-pack: disk space consumed by the packs, in KiB (unless -H is specified)</p></div>
 <div class="paragraph"><p>prune-packable: the number of loose objects that are also present in
 the packs. These objects could be pruned using <code>git prune-packed</code>.</p></div>
-<div class="paragraph"><p>garbage: the number of files in object database that are not valid
-loose objects nor valid packs</p></div>
+<div class="paragraph"><p>garbage: the number of files in object database that are neither valid loose
+objects nor valid packs</p></div>
 <div class="paragraph"><p>size-garbage: disk space consumed by garbage files, in KiB (unless -H is
 specified)</p></div>
 </dd>
# install git-count-objects.html /usr/share/doc/git-doc/git-count-objects.html
--- /usr/share/doc/git-doc/git-credential-cache--daemon.html	2016-03-21 09:24:28.000000000 -0600
+++ git-credential-cache--daemon.html	2016-10-15 00:43:26.716074288 -0600
@@ -748,7 +748,7 @@
 <h2 id="_synopsis">SYNOPSIS</h2>
 <div class="sectionbody">
 <div class="verseblock">
-<pre class="content">git credential-cache&#8212;daemon &lt;socket&gt;</pre>
+<pre class="content">git credential-cache&#8212;daemon [--debug] &lt;socket&gt;</pre>
 <div class="attribution">
 </div></div>
 </div>
@@ -769,6 +769,9 @@
 for <code>git-credential-cache</code> clients. Clients may store and retrieve
 credentials. Each credential is held for a timeout specified by the
 client; once no credentials are held, the daemon exits.</p></div>
+<div class="paragraph"><p>If the <code>--debug</code> option is specified, the daemon does not close its
+stderr stream, and may output extra diagnostics to it even after it has
+begun listening for clients.</p></div>
 </div>
 </div>
 <div class="sect1">
# install git-credential-cache--daemon.html /usr/share/doc/git-doc/git-credential-cache--daemon.html
--- /usr/share/doc/git-doc/git-credential-cache.html	2016-03-21 09:24:28.000000000 -0600
+++ git-credential-cache.html	2016-10-15 00:43:26.940074292 -0600
@@ -786,7 +786,7 @@
         cache daemon if one is not started). Defaults to
         <code>~/.git-credential-cache/socket</code>. If your home directory is on a
         network-mounted filesystem, you may need to change this to a
-        local filesystem.
+        local filesystem. You must specify an absolute path.
 </p>
 </dd>
 </dl></div>
# install git-credential-cache.html /usr/share/doc/git-doc/git-credential-cache.html
--- /usr/share/doc/git-doc/git-credential-store.html	2016-03-21 09:24:28.000000000 -0600
+++ git-credential-store.html	2016-10-15 00:43:27.188074297 -0600
@@ -779,20 +779,60 @@
 <div class="sectionbody">
 <div class="dlist"><dl>
 <dt class="hdlist1">
---store=&lt;path&gt;
+--file=&lt;path&gt;
 </dt>
 <dd>
 <p>
-        Use <code>&lt;path&gt;</code> to store credentials. The file will have its
+        Use <code>&lt;path&gt;</code> to lookup and store credentials. The file will have its
         filesystem permissions set to prevent other users on the system
         from reading it, but will not be encrypted or otherwise
-        protected. Defaults to <code>~/.git-credentials</code>.
+        protected. If not specified, credentials will be searched for from
+        <code>~/.git-credentials</code> and <code>$XDG_CONFIG_HOME/git/credentials</code>, and
+        credentials will be written to <code>~/.git-credentials</code> if it exists, or
+        <code>$XDG_CONFIG_HOME/git/credentials</code> if it exists and the former does
+        not. See also <a href="#FILES">[FILES]</a>.
 </p>
 </dd>
 </dl></div>
 </div>
 </div>
 <div class="sect1">
+<h2 id="FILES">FILES</h2>
+<div class="sectionbody">
+<div class="paragraph"><p>If not set explicitly with <code>--file</code>, there are two files where
+git-credential-store will search for credentials in order of precedence:</p></div>
+<div class="dlist"><dl>
+<dt class="hdlist1">
+~/.git-credentials
+</dt>
+<dd>
+<p>
+        User-specific credentials file.
+</p>
+</dd>
+<dt class="hdlist1">
+$XDG_CONFIG_HOME/git/credentials
+</dt>
+<dd>
+<p>
+        Second user-specific credentials file. If <em>$XDG_CONFIG_HOME</em> is not set
+        or empty, <code>$HOME/.config/git/credentials</code> will be used. Any credentials
+        stored in this file will not be used if <code>~/.git-credentials</code> has a
+        matching credential as well. It is a good idea not to create this file
+        if you sometimes use older versions of Git that do not support it.
+</p>
+</dd>
+</dl></div>
+<div class="paragraph"><p>For credential lookups, the files are read in the order given above, with the
+first matching credential found taking precedence over credentials found in
+files further down the list.</p></div>
+<div class="paragraph"><p>Credential storage will by default write to the first existing file in the
+list. If none of these files exist, <code>~/.git-credentials</code> will be created and
+written to.</p></div>
+<div class="paragraph"><p>When erasing credentials, matching credentials will be erased from all files.</p></div>
+</div>
+</div>
+<div class="sect1">
 <h2 id="_examples">EXAMPLES</h2>
 <div class="sectionbody">
 <div class="paragraph"><p>The point of this helper is to reduce the number of times you must type
# install git-credential-store.html /usr/share/doc/git-doc/git-credential-store.html
--- /usr/share/doc/git-doc/git-cvsimport.html	2016-03-21 09:24:28.000000000 -0600
+++ git-cvsimport.html	2016-10-15 00:43:28.124074314 -0600
@@ -764,7 +764,7 @@
 deprecated; it does not work with cvsps version 3 and later.  If you are
 performing a one-shot import of a CVS repository consider using
 <a href="http://cvs2svn.tigris.org/cvs2git.html">cvs2git</a> or
-<a href="https://github.com/BartMassey/parsecvs">parsecvs</a>.</p></div>
+<a href="http://www.catb.org/esr/cvs-fast-export/">cvs-fast-export</a>.</p></div>
 <div class="paragraph"><p>Imports a CVS repository into Git. It will either create a new
 repository, or incrementally import into an existing one.</p></div>
 <div class="paragraph"><p>Splitting the CVS log into patch sets is done by <em>cvsps</em>.
@@ -842,10 +842,10 @@
 </dt>
 <dd>
 <p>
-        When no remote is specified (via -r) the <em>HEAD</em> branch
+        When no remote is specified (via -r) the <code>HEAD</code> branch
         from CVS is imported to the <em>origin</em> branch within the Git
-        repository, as <em>HEAD</em> already has a special meaning for Git.
-        When a remote is specified the <em>HEAD</em> branch is named
+        repository, as <code>HEAD</code> already has a special meaning for Git.
+        When a remote is specified the <code>HEAD</code> branch is named
         remotes/&lt;remote&gt;/master mirroring <em>git clone</em> behaviour.
         Use this option if you want to import into a different
         branch.
@@ -895,7 +895,7 @@
 <dd>
 <p>
         Additional options for cvsps.
-        The options <em>-u</em> and <em>-A</em> are implicit and should not be used here.
+        The options <code>-u</code> and <em>-A</em> are implicit and should not be used here.
 </p>
 <div class="paragraph"><p>If you need to pass multiple options, separate them with a comma.</p></div>
 </dd>
@@ -933,7 +933,7 @@
 <dd>
 <p>
         Attempt to detect merges based on the commit message with a custom
-        regex. It can be used with <em>-m</em> to enable the default regexes
+        regex. It can be used with <code>-m</code> to enable the default regexes
         as well. You must escape forward slashes.
 </p>
 <div class="paragraph"><p>The regex must capture the source branch name in $1.</p></div>
@@ -1024,7 +1024,7 @@
 <div class="sect1">
 <h2 id="_output">OUTPUT</h2>
 <div class="sectionbody">
-<div class="paragraph"><p>If <em>-v</em> is specified, the script reports what it is doing.</p></div>
+<div class="paragraph"><p>If <code>-v</code> is specified, the script reports what it is doing.</p></div>
 <div class="paragraph"><p>Otherwise, success is indicated the Unix way, i.e. by simply exiting with
 a zero exit status.</p></div>
 </div>
@@ -1085,7 +1085,7 @@
 </li>
 </ul></div>
 <div class="paragraph"><p>If you suspect that any of these issues may apply to the repository you
-want to imort, consider using cvs2git:</p></div>
+want to import, consider using cvs2git:</p></div>
 <div class="ulist"><ul>
 <li>
 <p>
# install git-cvsimport.html /usr/share/doc/git-doc/git-cvsimport.html
--- /usr/share/doc/git-doc/git-cvsserver.html	2016-03-21 09:24:28.000000000 -0600
+++ git-cvsserver.html	2016-10-15 00:43:28.652074324 -0600
@@ -830,7 +830,7 @@
 You can specify a list of allowed directories. If no directories
 are given, all are allowed. This is an additional restriction, gitcvs
 access still needs to be enabled by the <code>gitcvs.enabled</code> config option
-unless <em>--export-all</em> was given, too.
+unless <code>--export-all</code> was given, too.
 </p>
 </dd>
 </dl></div>
@@ -888,7 +888,7 @@
 <pre><code>   [gitcvs]
         authdb = /etc/cvsserver/passwd</code></pre>
 </div></div>
-<div class="paragraph"><p>The format of these files is username followed by the crypted password,
+<div class="paragraph"><p>The format of these files is username followed by the encrypted password,
 for example:</p></div>
 <div class="listingblock">
 <div class="content">
@@ -936,7 +936,7 @@
 <pre><code>   [gitcvs]
         enabled=1
         # optional for debugging
-        logfile=/path/to/logfile</code></pre>
+        logFile=/path/to/logfile</code></pre>
 </div></div>
 <div class="paragraph"><p>Note: you need to ensure each user that is going to invoke <em>git-cvsserver</em> has
 write access to the log file and to the database (see
@@ -1041,7 +1041,7 @@
 about <code>DBI-&gt;connect()</code>.</p></div>
 <div class="dlist"><dl>
 <dt class="hdlist1">
-gitcvs.dbname
+gitcvs.dbName
 </dt>
 <dd>
 <p>
@@ -1053,7 +1053,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
-gitcvs.dbdriver
+gitcvs.dbDriver
 </dt>
 <dd>
 <p>
@@ -1071,17 +1071,17 @@
 </dt>
 <dd>
 <p>
-        Database user. Only useful if setting <code>dbdriver</code>, since
+        Database user. Only useful if setting <code>dbDriver</code>, since
         SQLite has no concept of database users. Supports variable
         substitution (see below).
 </p>
 </dd>
 <dt class="hdlist1">
-gitcvs.dbpass
+gitcvs.dbPass
 </dt>
 <dd>
 <p>
-        Database password.  Only useful if setting <code>dbdriver</code>, since
+        Database password.  Only useful if setting <code>dbDriver</code>, since
         SQLite has no concept of database passwords.
 </p>
 </dd>
@@ -1099,7 +1099,7 @@
 <div class="paragraph"><p>All variables can also be set per access method, see <a href="#configaccessmethod">above</a>.</p></div>
 <div class="sect3">
 <h4 id="_variable_substitution">Variable substitution</h4>
-<div class="paragraph"><p>In <code>dbdriver</code> and <code>dbuser</code> you can use the following variables:</p></div>
+<div class="paragraph"><p>In <code>dbDriver</code> and <code>dbUser</code> you can use the following variables:</p></div>
 <div class="dlist"><dl>
 <dt class="hdlist1">
 %G
@@ -1189,7 +1189,7 @@
 </li>
 <li>
 <p>
-Pick <em>HEAD</em> when it asks what branch/tag to check out. Untick the
+Pick <code>HEAD</code> when it asks what branch/tag to check out. Untick the
    "launch commit wizard" to avoid committing the .project file.
 </p>
 </li>
@@ -1274,24 +1274,24 @@
 Exports and tagging (tags and branches) are not supported at this stage.</p></div>
 <div class="sect2">
 <h3 id="_crlf_line_ending_conversions">CRLF Line Ending Conversions</h3>
-<div class="paragraph"><p>By default the server leaves the <em>-k</em> mode blank for all files,
+<div class="paragraph"><p>By default the server leaves the <code>-k</code> mode blank for all files,
 which causes the CVS client to treat them as a text files, subject
 to end-of-line conversion on some platforms.</p></div>
 <div class="paragraph"><p>You can make the server use the end-of-line conversion attributes to
-set the <em>-k</em> modes for files by setting the <code>gitcvs.usecrlfattr</code>
+set the <code>-k</code> modes for files by setting the <code>gitcvs.usecrlfattr</code>
 config variable.  See <a href="gitattributes.html">gitattributes(5)</a> for more information
 about end-of-line conversion.</p></div>
 <div class="paragraph"><p>Alternatively, if <code>gitcvs.usecrlfattr</code> config is not enabled
 or the attributes do not allow automatic detection for a filename, then
-the server uses the <code>gitcvs.allbinary</code> config for the default setting.
-If <code>gitcvs.allbinary</code> is set, then file not otherwise
-specified will default to <em>-kb</em> mode. Otherwise the <em>-k</em> mode
-is left blank. But if <code>gitcvs.allbinary</code> is set to "guess", then
-the correct <em>-k</em> mode will be guessed based on the contents of
+the server uses the <code>gitcvs.allBinary</code> config for the default setting.
+If <code>gitcvs.allBinary</code> is set, then file not otherwise
+specified will default to <em>-kb</em> mode. Otherwise the <code>-k</code> mode
+is left blank. But if <code>gitcvs.allBinary</code> is set to "guess", then
+the correct <code>-k</code> mode will be guessed based on the contents of
 the file.</p></div>
 <div class="paragraph"><p>For best consistency with <em>cvs</em>, it is probably best to override the
 defaults by setting <code>gitcvs.usecrlfattr</code> to true,
-and <code>gitcvs.allbinary</code> to "guess".</p></div>
+and <code>gitcvs.allBinary</code> to "guess".</p></div>
 </div>
 </div>
 </div>
# install git-cvsserver.html /usr/share/doc/git-doc/git-cvsserver.html
--- /usr/share/doc/git-doc/git-daemon.html	2016-03-21 09:24:28.000000000 -0600
+++ git-daemon.html	2016-10-15 00:43:29.072074332 -0600
@@ -773,7 +773,7 @@
 that service if it is enabled.</p></div>
 <div class="paragraph"><p>It verifies that the directory has the magic file "git-daemon-export-ok", and
 it will refuse to export any Git directory that hasn&#8217;t explicitly been marked
-for export this way (unless the <em>--export-all</em> parameter is specified). If you
+for export this way (unless the <code>--export-all</code> parameter is specified). If you
 pass some directory paths as <em>git daemon</em> arguments, you can further restrict
 the offers to a whitelist comprising of those.</p></div>
 <div class="paragraph"><p>By default, only <code>upload-pack</code> service is enabled, which serves
@@ -867,7 +867,7 @@
         is not supported, then --listen=hostname is also not supported and
         --listen must be given an IPv4 address.
         Can be given more than once.
-        Incompatible with <em>--inetd</em> option.
+        Incompatible with <code>--inetd</code> option.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -875,7 +875,7 @@
 </dt>
 <dd>
 <p>
-        Listen on an alternative port.  Incompatible with <em>--inetd</em> option.
+        Listen on an alternative port.  Incompatible with <code>--inetd</code> option.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1017,7 +1017,7 @@
 <p>
         Allow/forbid overriding the site-wide default with per
         repository configuration.  By default, all the services
-        are overridable.
+        may be overridden.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1042,11 +1042,11 @@
         Every time a client connects, first run an external command
         specified by the &lt;path&gt; with service name (e.g. "upload-pack"),
         path to the repository, hostname (%H), canonical hostname
-        (%CH), ip address (%IP), and tcp port (%P) as its command line
+        (%CH), IP address (%IP), and TCP port (%P) as its command-line
         arguments. The external command can decide to decline the
         service by exiting with a non-zero status (or to allow it by
         exiting with a zero status).  It can also look at the $REMOTE_ADDR
-        and $REMOTE_PORT environment variables to learn about the
+        and <code>$REMOTE_PORT</code> environment variables to learn about the
         requestor when making this decision.
 </p>
 <div class="paragraph"><p>The external command can optionally write a single line to its
@@ -1070,7 +1070,7 @@
 <h2 id="_services">SERVICES</h2>
 <div class="sectionbody">
 <div class="paragraph"><p>These services can be globally enabled/disabled using the
-command line options of this command.  If a finer-grained
+command-line options of this command.  If finer-grained
 control is desired (e.g. to allow <em>git archive</em> to be run
 against only in a few selected repositories the daemon serves),
 the per-repository configuration file can be used to enable or
@@ -1200,7 +1200,7 @@
 <p>
         To enable <em>git archive --remote</em> and disable <em>git fetch</em> against
         a repository, have the following in the configuration file in the
-        repository (that is the file <em>config</em> next to <em>HEAD</em>, <em>refs</em> and
+        repository (that is the file <em>config</em> next to <code>HEAD</code>, <em>refs</em> and
         <em>objects</em>).
 </p>
 <div class="listingblock">
# install git-daemon.html /usr/share/doc/git-doc/git-daemon.html
--- /usr/share/doc/git-doc/git-describe.html	2016-03-21 09:24:28.000000000 -0600
+++ git-describe.html	2016-10-15 00:43:29.428074339 -0600
@@ -739,7 +739,7 @@
 <h2>NAME</h2>
 <div class="sectionbody">
 <p>git-describe -
-   Show the most recent tag that is reachable from a commit
+   Describe a commit using the most recent tag reachable from it
 </p>
 </div>
 </div>
@@ -748,7 +748,7 @@
 <h2 id="_synopsis">SYNOPSIS</h2>
 <div class="sectionbody">
 <div class="verseblock">
-<pre class="content"><em>git describe</em> [--all] [--tags] [--contains] [--abbrev=&lt;n&gt;] &lt;commit-ish&gt;&#8230;
+<pre class="content"><em>git describe</em> [--all] [--tags] [--contains] [--abbrev=&lt;n&gt;] [&lt;commit-ish&gt;&#8230;]
 <em>git describe</em> [--all] [--tags] [--contains] [--abbrev=&lt;n&gt;] --dirty[=&lt;mark&gt;]</pre>
 <div class="attribution">
 </div></div>
@@ -776,7 +776,7 @@
 </dt>
 <dd>
 <p>
-        Commit-ish object names to describe.
+        Commit-ish object names to describe.  Defaults to HEAD if omitted.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -970,7 +970,7 @@
 <div class="paragraph"><p>If an exact match was not found, <em>git describe</em> will walk back
 through the commit history to locate an ancestor commit which
 has been tagged.  The ancestor&#8217;s tag will be output along with an
-abbreviation of the input commit-ish&#8217;s SHA-1. If <em>--first-parent</em> was
+abbreviation of the input commit-ish&#8217;s SHA-1. If <code>--first-parent</code> was
 specified then the walk will only consider the first parent of each
 commit.</p></div>
 <div class="paragraph"><p>If multiple tags were found during the walk then the tag which
# install git-describe.html /usr/share/doc/git-doc/git-describe.html
--- /usr/share/doc/git-doc/git-diff-files.html	2016-03-21 09:24:28.000000000 -0600
+++ git-diff-files.html	2016-10-15 00:43:30.368074356 -0600
@@ -778,7 +778,6 @@
 <dd>
 <p>
         Generate patch (see section on generating patches).
-        
 </p>
 </dd>
 <dt class="hdlist1">
@@ -811,8 +810,8 @@
 </dt>
 <dd>
 <p>
-        Generate the raw format.
-         This is the default.
+        Generate the diff in raw format.
+        This is the default.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -824,6 +823,20 @@
 </p>
 </dd>
 <dt class="hdlist1">
+--compaction-heuristic
+</dt>
+<dt class="hdlist1">
+--no-compaction-heuristic
+</dt>
+<dd>
+<p>
+        These are to help debugging and tuning an experimental
+        heuristic (which is off by default) that shifts the hunk
+        boundary in an attempt to make the resulting patch easier
+        to read.
+</p>
+</dd>
+<dt class="hdlist1">
 --minimal
 </dt>
 <dd>
@@ -1175,8 +1188,10 @@
 expression to make sure that it matches all non-whitespace characters.
 A match that contains a newline is silently truncated(!) at the
 newline.</p></div>
+<div class="paragraph"><p>For example, <code>--word-diff-regex=.</code> will treat each character as a word
+and, correspondingly, show differences character by character.</p></div>
 <div class="paragraph"><p>The regex can also be set via a diff driver or configuration option, see
-<a href="gitattributes.html">gitattributes(1)</a> or <a href="git-config.html">git-config(1)</a>.  Giving it explicitly
+<a href="gitattributes.html">gitattributes(5)</a> or <a href="git-config.html">git-config(1)</a>.  Giving it explicitly
 overrides any diff driver or configuration setting.  Diff drivers
 override configuration settings.</p></div>
 </dd>
@@ -1203,8 +1218,8 @@
 </dt>
 <dd>
 <p>
-        Warn if changes introduce whitespace errors.  What are
-        considered whitespace errors is controlled by <code>core.whitespace</code>
+        Warn if changes introduce conflict markers or whitespace errors.
+        What are considered whitespace errors is controlled by <code>core.whitespace</code>
         configuration.  By default, trailing whitespaces (including
         lines that solely consist of whitespaces) and a space character
         that is immediately followed by a tab character inside the
@@ -1214,6 +1229,20 @@
 </p>
 </dd>
 <dt class="hdlist1">
+--ws-error-highlight=&lt;kind&gt;
+</dt>
+<dd>
+<p>
+        Highlight whitespace errors on lines specified by &lt;kind&gt;
+        in the color specified by <code>color.diff.whitespace</code>.  &lt;kind&gt;
+        is a comma separated list of <code>old</code>, <code>new</code>, <code>context</code>.  When
+        this option is not given, only whitespace errors in <code>new</code>
+        lines are highlighted.  E.g. <code>--ws-error-highlight=new,old</code>
+        highlights whitespace errors on both deleted and added lines.
+        <code>all</code> can be used as a short-hand for <code>old,new,context</code>.
+</p>
+</dd>
+<dt class="hdlist1">
 --full-index
 </dt>
 <dd>
@@ -1329,7 +1358,7 @@
 <p>
         Omit the preimage for deletes, i.e. print only the header but not
         the diff between the preimage and <code>/dev/null</code>. The resulting patch
-        is not meant to be applied with <code>patch</code> nor <code>git apply</code>; this is
+        is not meant to be applied with <code>patch</code> or <code>git apply</code>; this is
         solely for people who want to just concentrate on reviewing the
         text after the change. In addition, the output obviously lack
         enough information to apply such a patch in reverse, even manually,
@@ -1366,6 +1395,8 @@
         other criteria in the comparison; if there is no file
         that matches other criteria, nothing is selected.
 </p>
+<div class="paragraph"><p>Also, these upper-case letters can be downcased to exclude.  E.g.
+<code>--diff-filter=ad</code> excludes added and deleted paths.</p></div>
 </dd>
 <dt class="hdlist1">
 -S&lt;string&gt;
@@ -1431,8 +1462,8 @@
 <p>
         Output the patch in the order specified in the
         &lt;orderfile&gt;, which has one shell glob pattern per line.
-        This overrides the <code>diff.orderfile</code> configuration variable
-        (see <a href="git-config.html">git-config(1)</a>).  To cancel <code>diff.orderfile</code>,
+        This overrides the <code>diff.orderFile</code> configuration variable
+        (see <a href="git-config.html">git-config(1)</a>).  To cancel <code>diff.orderFile</code>,
         use <code>-O/dev/null</code>.
 </p>
 </dd>
@@ -1786,7 +1817,7 @@
 </li>
 <li>
 <p>
-a tab or a NUL when <em>-z</em> option is used.
+a tab or a NUL when <code>-z</code> option is used.
 </p>
 </li>
 <li>
@@ -1796,7 +1827,7 @@
 </li>
 <li>
 <p>
-a tab or a NUL when <em>-z</em> option is used; only exists for C or R.
+a tab or a NUL when <code>-z</code> option is used; only exists for C or R.
 </p>
 </li>
 <li>
@@ -1806,7 +1837,7 @@
 </li>
 <li>
 <p>
-an LF or a NUL when <em>-z</em> option is used, to terminate the record.
+an LF or a NUL when <code>-z</code> option is used, to terminate the record.
 </p>
 </li>
 </ol></div>
@@ -1856,7 +1887,8 @@
 </ul></div>
 <div class="paragraph"><p>Status letters C and R are always followed by a score (denoting the
 percentage of similarity between the source and target of the move or
-copy), and are the only ones to be so.</p></div>
+copy).  Status letter M may be followed by a score (denoting the
+percentage of dissimilarity) for file rewrites.</p></div>
 <div class="paragraph"><p>&lt;sha1&gt; is shown as all 0&#8217;s if a file is new on the filesystem
 and it is out of sync with the index.</p></div>
 <div class="paragraph"><p>Example:</p></div>
@@ -1873,7 +1905,7 @@
 <h2 id="_diff_format_for_merges">diff format for merges</h2>
 <div class="sectionbody">
 <div class="paragraph"><p>"git-diff-tree", "git-diff-files" and "git-diff --raw"
-can take <em>-c</em> or <em>--cc</em> option
+can take <code>-c</code> or <code>--cc</code> option
 to generate diff output also for merge commits.  The output differs
 from the format described above in the following way:</p></div>
 <div class="olist arabic"><ol class="arabic">
@@ -1916,11 +1948,11 @@
 <h2 id="_generating_patches_with_p">Generating patches with -p</h2>
 <div class="sectionbody">
 <div class="paragraph"><p>When "git-diff-index", "git-diff-tree", or "git-diff-files" are run
-with a <em>-p</em> option, "git diff" without the <em>--raw</em> option, or
+with a <code>-p</code> option, "git diff" without the <code>--raw</code> option, or
 "git log" with the "-p" option, they
 do not produce the output described above; instead they produce a
 patch file.  You can customize the creation of such patches via the
-GIT_EXTERNAL_DIFF and the GIT_DIFF_OPTS environment variables.</p></div>
+<code>GIT_EXTERNAL_DIFF</code> and the <code>GIT_DIFF_OPTS</code> environment variables.</p></div>
 <div class="paragraph"><p>What the -p option produces is slightly different from the traditional
 diff format:</p></div>
 <div class="olist arabic"><ol class="arabic">
@@ -2001,10 +2033,10 @@
 <div class="sect1">
 <h2 id="_combined_diff_format">combined diff format</h2>
 <div class="sectionbody">
-<div class="paragraph"><p>Any diff-generating command can take the &#8216;-c` or <code>--cc</code> option to
+<div class="paragraph"><p>Any diff-generating command can take the <code>-c</code> or <code>--cc</code> option to
 produce a <em>combined diff</em> when showing a merge. This is the default
 format when showing merges with <a href="git-diff.html">git-diff(1)</a> or
-<a href="git-show.html">git-show(1)</a>. Note also that you can give the `-m&#8217; option to any
+<a href="git-show.html">git-show(1)</a>. Note also that you can give the <code>-m</code> option to any
 of these commands to force generation of diffs with individual parents
 of a merge.</p></div>
 <div class="paragraph"><p>A <em>combined diff</em> format looks like this:</p></div>
@@ -2042,13 +2074,13 @@
 <li>
 <p>
 It is preceded with a "git diff" header, that looks like
-     this (when <em>-c</em> option is used):
+     this (when <code>-c</code> option is used):
 </p>
 <div class="literalblock">
 <div class="content">
 <pre><code>diff --combined file</code></pre>
 </div></div>
-<div class="paragraph"><p>or like this (when <em>--cc</em> option is used):</p></div>
+<div class="paragraph"><p>or like this (when <code>--cc</code> option is used):</p></div>
 <div class="literalblock">
 <div class="content">
 <pre><code>diff --cc file</code></pre>
@@ -2116,7 +2148,7 @@
 <div class="paragraph"><p>In the above example output, the function signature was changed
 from both files (hence two <code>-</code> removals from both file1 and
 file2, plus <code>++</code> to mean one line that was added does not appear
-in either file1 nor file2).  Also eight other lines are the same
+in either file1 or file2).  Also eight other lines are the same
 from file1 but do not appear in file2 (hence prefixed with <code>+</code>).</p></div>
 <div class="paragraph"><p>When shown by <code>git diff-tree -c</code>, it compares the parents of a
 merge commit with the merge result (i.e. file1..fileN are the
# install git-diff-files.html /usr/share/doc/git-doc/git-diff-files.html
--- /usr/share/doc/git-doc/git-diff-index.html	2016-03-21 09:24:28.000000000 -0600
+++ git-diff-index.html	2016-10-15 00:43:31.360074375 -0600
@@ -779,7 +779,6 @@
 <dd>
 <p>
         Generate patch (see section on generating patches).
-        
 </p>
 </dd>
 <dt class="hdlist1">
@@ -812,8 +811,8 @@
 </dt>
 <dd>
 <p>
-        Generate the raw format.
-         This is the default.
+        Generate the diff in raw format.
+        This is the default.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -825,6 +824,20 @@
 </p>
 </dd>
 <dt class="hdlist1">
+--compaction-heuristic
+</dt>
+<dt class="hdlist1">
+--no-compaction-heuristic
+</dt>
+<dd>
+<p>
+        These are to help debugging and tuning an experimental
+        heuristic (which is off by default) that shifts the hunk
+        boundary in an attempt to make the resulting patch easier
+        to read.
+</p>
+</dd>
+<dt class="hdlist1">
 --minimal
 </dt>
 <dd>
@@ -1176,8 +1189,10 @@
 expression to make sure that it matches all non-whitespace characters.
 A match that contains a newline is silently truncated(!) at the
 newline.</p></div>
+<div class="paragraph"><p>For example, <code>--word-diff-regex=.</code> will treat each character as a word
+and, correspondingly, show differences character by character.</p></div>
 <div class="paragraph"><p>The regex can also be set via a diff driver or configuration option, see
-<a href="gitattributes.html">gitattributes(1)</a> or <a href="git-config.html">git-config(1)</a>.  Giving it explicitly
+<a href="gitattributes.html">gitattributes(5)</a> or <a href="git-config.html">git-config(1)</a>.  Giving it explicitly
 overrides any diff driver or configuration setting.  Diff drivers
 override configuration settings.</p></div>
 </dd>
@@ -1204,8 +1219,8 @@
 </dt>
 <dd>
 <p>
-        Warn if changes introduce whitespace errors.  What are
-        considered whitespace errors is controlled by <code>core.whitespace</code>
+        Warn if changes introduce conflict markers or whitespace errors.
+        What are considered whitespace errors is controlled by <code>core.whitespace</code>
         configuration.  By default, trailing whitespaces (including
         lines that solely consist of whitespaces) and a space character
         that is immediately followed by a tab character inside the
@@ -1215,6 +1230,20 @@
 </p>
 </dd>
 <dt class="hdlist1">
+--ws-error-highlight=&lt;kind&gt;
+</dt>
+<dd>
+<p>
+        Highlight whitespace errors on lines specified by &lt;kind&gt;
+        in the color specified by <code>color.diff.whitespace</code>.  &lt;kind&gt;
+        is a comma separated list of <code>old</code>, <code>new</code>, <code>context</code>.  When
+        this option is not given, only whitespace errors in <code>new</code>
+        lines are highlighted.  E.g. <code>--ws-error-highlight=new,old</code>
+        highlights whitespace errors on both deleted and added lines.
+        <code>all</code> can be used as a short-hand for <code>old,new,context</code>.
+</p>
+</dd>
+<dt class="hdlist1">
 --full-index
 </dt>
 <dd>
@@ -1330,7 +1359,7 @@
 <p>
         Omit the preimage for deletes, i.e. print only the header but not
         the diff between the preimage and <code>/dev/null</code>. The resulting patch
-        is not meant to be applied with <code>patch</code> nor <code>git apply</code>; this is
+        is not meant to be applied with <code>patch</code> or <code>git apply</code>; this is
         solely for people who want to just concentrate on reviewing the
         text after the change. In addition, the output obviously lack
         enough information to apply such a patch in reverse, even manually,
@@ -1367,6 +1396,8 @@
         other criteria in the comparison; if there is no file
         that matches other criteria, nothing is selected.
 </p>
+<div class="paragraph"><p>Also, these upper-case letters can be downcased to exclude.  E.g.
+<code>--diff-filter=ad</code> excludes added and deleted paths.</p></div>
 </dd>
 <dt class="hdlist1">
 -S&lt;string&gt;
@@ -1432,8 +1463,8 @@
 <p>
         Output the patch in the order specified in the
         &lt;orderfile&gt;, which has one shell glob pattern per line.
-        This overrides the <code>diff.orderfile</code> configuration variable
-        (see <a href="git-config.html">git-config(1)</a>).  To cancel <code>diff.orderfile</code>,
+        This overrides the <code>diff.orderFile</code> configuration variable
+        (see <a href="git-config.html">git-config(1)</a>).  To cancel <code>diff.orderFile</code>,
         use <code>-O/dev/null</code>.
 </p>
 </dd>
@@ -1770,7 +1801,7 @@
 </li>
 <li>
 <p>
-a tab or a NUL when <em>-z</em> option is used.
+a tab or a NUL when <code>-z</code> option is used.
 </p>
 </li>
 <li>
@@ -1780,7 +1811,7 @@
 </li>
 <li>
 <p>
-a tab or a NUL when <em>-z</em> option is used; only exists for C or R.
+a tab or a NUL when <code>-z</code> option is used; only exists for C or R.
 </p>
 </li>
 <li>
@@ -1790,7 +1821,7 @@
 </li>
 <li>
 <p>
-an LF or a NUL when <em>-z</em> option is used, to terminate the record.
+an LF or a NUL when <code>-z</code> option is used, to terminate the record.
 </p>
 </li>
 </ol></div>
@@ -1840,7 +1871,8 @@
 </ul></div>
 <div class="paragraph"><p>Status letters C and R are always followed by a score (denoting the
 percentage of similarity between the source and target of the move or
-copy), and are the only ones to be so.</p></div>
+copy).  Status letter M may be followed by a score (denoting the
+percentage of dissimilarity) for file rewrites.</p></div>
 <div class="paragraph"><p>&lt;sha1&gt; is shown as all 0&#8217;s if a file is new on the filesystem
 and it is out of sync with the index.</p></div>
 <div class="paragraph"><p>Example:</p></div>
@@ -1857,7 +1889,7 @@
 <h2 id="_diff_format_for_merges">diff format for merges</h2>
 <div class="sectionbody">
 <div class="paragraph"><p>"git-diff-tree", "git-diff-files" and "git-diff --raw"
-can take <em>-c</em> or <em>--cc</em> option
+can take <code>-c</code> or <code>--cc</code> option
 to generate diff output also for merge commits.  The output differs
 from the format described above in the following way:</p></div>
 <div class="olist arabic"><ol class="arabic">
@@ -1900,11 +1932,11 @@
 <h2 id="_generating_patches_with_p">Generating patches with -p</h2>
 <div class="sectionbody">
 <div class="paragraph"><p>When "git-diff-index", "git-diff-tree", or "git-diff-files" are run
-with a <em>-p</em> option, "git diff" without the <em>--raw</em> option, or
+with a <code>-p</code> option, "git diff" without the <code>--raw</code> option, or
 "git log" with the "-p" option, they
 do not produce the output described above; instead they produce a
 patch file.  You can customize the creation of such patches via the
-GIT_EXTERNAL_DIFF and the GIT_DIFF_OPTS environment variables.</p></div>
+<code>GIT_EXTERNAL_DIFF</code> and the <code>GIT_DIFF_OPTS</code> environment variables.</p></div>
 <div class="paragraph"><p>What the -p option produces is slightly different from the traditional
 diff format:</p></div>
 <div class="olist arabic"><ol class="arabic">
@@ -1985,10 +2017,10 @@
 <div class="sect1">
 <h2 id="_combined_diff_format">combined diff format</h2>
 <div class="sectionbody">
-<div class="paragraph"><p>Any diff-generating command can take the &#8216;-c` or <code>--cc</code> option to
+<div class="paragraph"><p>Any diff-generating command can take the <code>-c</code> or <code>--cc</code> option to
 produce a <em>combined diff</em> when showing a merge. This is the default
 format when showing merges with <a href="git-diff.html">git-diff(1)</a> or
-<a href="git-show.html">git-show(1)</a>. Note also that you can give the `-m&#8217; option to any
+<a href="git-show.html">git-show(1)</a>. Note also that you can give the <code>-m</code> option to any
 of these commands to force generation of diffs with individual parents
 of a merge.</p></div>
 <div class="paragraph"><p>A <em>combined diff</em> format looks like this:</p></div>
@@ -2026,13 +2058,13 @@
 <li>
 <p>
 It is preceded with a "git diff" header, that looks like
-     this (when <em>-c</em> option is used):
+     this (when <code>-c</code> option is used):
 </p>
 <div class="literalblock">
 <div class="content">
 <pre><code>diff --combined file</code></pre>
 </div></div>
-<div class="paragraph"><p>or like this (when <em>--cc</em> option is used):</p></div>
+<div class="paragraph"><p>or like this (when <code>--cc</code> option is used):</p></div>
 <div class="literalblock">
 <div class="content">
 <pre><code>diff --cc file</code></pre>
@@ -2100,7 +2132,7 @@
 <div class="paragraph"><p>In the above example output, the function signature was changed
 from both files (hence two <code>-</code> removals from both file1 and
 file2, plus <code>++</code> to mean one line that was added does not appear
-in either file1 nor file2).  Also eight other lines are the same
+in either file1 or file2).  Also eight other lines are the same
 from file1 but do not appear in file2 (hence prefixed with <code>+</code>).</p></div>
 <div class="paragraph"><p>When shown by <code>git diff-tree -c</code>, it compares the parents of a
 merge commit with the merge result (i.e. file1..fileN are the
@@ -2231,7 +2263,7 @@
 <h2 id="_operating_modes">Operating Modes</h2>
 <div class="sectionbody">
 <div class="paragraph"><p>You can choose whether you want to trust the index file entirely
-(using the <em>--cached</em> flag) or ask the diff logic to show any files
+(using the <code>--cached</code> flag) or ask the diff logic to show any files
 that don&#8217;t match the stat state as being "tentatively changed".  Both
 of these operations are very useful indeed.</p></div>
 </div>
@@ -2239,7 +2271,7 @@
 <div class="sect1">
 <h2 id="_cached_mode">Cached Mode</h2>
 <div class="sectionbody">
-<div class="paragraph"><p>If <em>--cached</em> is specified, it allows you to ask:</p></div>
+<div class="paragraph"><p>If <code>--cached</code> is specified, it allows you to ask:</p></div>
 <div class="literalblock">
 <div class="content">
 <pre><code>show me the differences between HEAD and the current index
# install git-diff-index.html /usr/share/doc/git-doc/git-diff-index.html
--- /usr/share/doc/git-doc/git-diff-tree.html	2016-03-21 09:24:28.000000000 -0600
+++ git-diff-tree.html	2016-10-15 00:43:32.992074406 -0600
@@ -780,7 +780,6 @@
 <dd>
 <p>
         Generate patch (see section on generating patches).
-        
 </p>
 </dd>
 <dt class="hdlist1">
@@ -813,8 +812,8 @@
 </dt>
 <dd>
 <p>
-        Generate the raw format.
-         This is the default.
+        Generate the diff in raw format.
+        This is the default.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -826,6 +825,20 @@
 </p>
 </dd>
 <dt class="hdlist1">
+--compaction-heuristic
+</dt>
+<dt class="hdlist1">
+--no-compaction-heuristic
+</dt>
+<dd>
+<p>
+        These are to help debugging and tuning an experimental
+        heuristic (which is off by default) that shifts the hunk
+        boundary in an attempt to make the resulting patch easier
+        to read.
+</p>
+</dd>
+<dt class="hdlist1">
 --minimal
 </dt>
 <dd>
@@ -1177,8 +1190,10 @@
 expression to make sure that it matches all non-whitespace characters.
 A match that contains a newline is silently truncated(!) at the
 newline.</p></div>
+<div class="paragraph"><p>For example, <code>--word-diff-regex=.</code> will treat each character as a word
+and, correspondingly, show differences character by character.</p></div>
 <div class="paragraph"><p>The regex can also be set via a diff driver or configuration option, see
-<a href="gitattributes.html">gitattributes(1)</a> or <a href="git-config.html">git-config(1)</a>.  Giving it explicitly
+<a href="gitattributes.html">gitattributes(5)</a> or <a href="git-config.html">git-config(1)</a>.  Giving it explicitly
 overrides any diff driver or configuration setting.  Diff drivers
 override configuration settings.</p></div>
 </dd>
@@ -1205,8 +1220,8 @@
 </dt>
 <dd>
 <p>
-        Warn if changes introduce whitespace errors.  What are
-        considered whitespace errors is controlled by <code>core.whitespace</code>
+        Warn if changes introduce conflict markers or whitespace errors.
+        What are considered whitespace errors is controlled by <code>core.whitespace</code>
         configuration.  By default, trailing whitespaces (including
         lines that solely consist of whitespaces) and a space character
         that is immediately followed by a tab character inside the
@@ -1216,6 +1231,20 @@
 </p>
 </dd>
 <dt class="hdlist1">
+--ws-error-highlight=&lt;kind&gt;
+</dt>
+<dd>
+<p>
+        Highlight whitespace errors on lines specified by &lt;kind&gt;
+        in the color specified by <code>color.diff.whitespace</code>.  &lt;kind&gt;
+        is a comma separated list of <code>old</code>, <code>new</code>, <code>context</code>.  When
+        this option is not given, only whitespace errors in <code>new</code>
+        lines are highlighted.  E.g. <code>--ws-error-highlight=new,old</code>
+        highlights whitespace errors on both deleted and added lines.
+        <code>all</code> can be used as a short-hand for <code>old,new,context</code>.
+</p>
+</dd>
+<dt class="hdlist1">
 --full-index
 </dt>
 <dd>
@@ -1331,7 +1360,7 @@
 <p>
         Omit the preimage for deletes, i.e. print only the header but not
         the diff between the preimage and <code>/dev/null</code>. The resulting patch
-        is not meant to be applied with <code>patch</code> nor <code>git apply</code>; this is
+        is not meant to be applied with <code>patch</code> or <code>git apply</code>; this is
         solely for people who want to just concentrate on reviewing the
         text after the change. In addition, the output obviously lack
         enough information to apply such a patch in reverse, even manually,
@@ -1368,6 +1397,8 @@
         other criteria in the comparison; if there is no file
         that matches other criteria, nothing is selected.
 </p>
+<div class="paragraph"><p>Also, these upper-case letters can be downcased to exclude.  E.g.
+<code>--diff-filter=ad</code> excludes added and deleted paths.</p></div>
 </dd>
 <dt class="hdlist1">
 -S&lt;string&gt;
@@ -1433,8 +1464,8 @@
 <p>
         Output the patch in the order specified in the
         &lt;orderfile&gt;, which has one shell glob pattern per line.
-        This overrides the <code>diff.orderfile</code> configuration variable
-        (see <a href="git-config.html">git-config(1)</a>).  To cancel <code>diff.orderfile</code>,
+        This overrides the <code>diff.orderFile</code> configuration variable
+        (see <a href="git-config.html">git-config(1)</a>).  To cancel <code>diff.orderFile</code>,
         use <code>-O/dev/null</code>.
 </p>
 </dd>
@@ -1674,7 +1705,7 @@
 </dt>
 <dd>
 <p>
-        When <em>--root</em> is specified the initial commit will be shown as a big
+        When <code>--root</code> is specified the initial commit will be shown as a big
         creation event. This is equivalent to a diff against the NULL tree.
 </p>
 </dd>
@@ -1683,7 +1714,7 @@
 </dt>
 <dd>
 <p>
-        When <em>--stdin</em> is specified, the command does not take
+        When <code>--stdin</code> is specified, the command does not take
         &lt;tree-ish&gt; arguments from the command line.  Instead, it
         reads lines containing either two &lt;tree&gt;, one &lt;commit&gt;, or a
         list of &lt;commit&gt; from its standard input.  (Use a single space
@@ -1708,7 +1739,7 @@
         By default, <em>git diff-tree --stdin</em> does not show
         differences for merge commits.  With this flag, it shows
         differences to that commit from all of its parents. See
-        also <em>-c</em>.
+        also <code>-c</code>.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1717,9 +1748,9 @@
 <dd>
 <p>
         By default, <em>git diff-tree --stdin</em> shows differences,
-        either in machine-readable form (without <em>-p</em>) or in patch
-        form (with <em>-p</em>).  This output can be suppressed.  It is
-        only useful with <em>-v</em> flag.
+        either in machine-readable form (without <code>-p</code>) or in patch
+        form (with <code>-p</code>).  This output can be suppressed.  It is
+        only useful with <code>-v</code> flag.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1741,10 +1772,13 @@
 <p>
         Pretty-print the contents of the commit logs in a given format,
         where <em>&lt;format&gt;</em> can be one of <em>oneline</em>, <em>short</em>, <em>medium</em>,
-        <em>full</em>, <em>fuller</em>, <em>email</em>, <em>raw</em> and <em>format:&lt;string&gt;</em>.  See
-        the "PRETTY FORMATS" section for some additional details for each
-        format.  When omitted, the format defaults to <em>medium</em>.
+        <em>full</em>, <em>fuller</em>, <em>email</em>, <em>raw</em>, <em>format:&lt;string&gt;</em>
+        and <em>tformat:&lt;string&gt;</em>.  When <em>&lt;format&gt;</em> is none of the above,
+        and has <em>%placeholder</em> in it, it acts as if
+        <em>--pretty=tformat:&lt;format&gt;</em> were given.
 </p>
+<div class="paragraph"><p>See the "PRETTY FORMATS" section for some additional details for each
+format.  When <em>=&lt;format&gt;</em> part is omitted, it defaults to <em>medium</em>.</p></div>
 <div class="paragraph"><p>Note: you can specify the default pretty format in the repository
 configuration (see <a href="git-config.html">git-config(1)</a>).</p></div>
 </dd>
@@ -1768,7 +1802,7 @@
 <p>
         Show the full 40-byte hexadecimal commit object name. This negates
         <code>--abbrev-commit</code> and those options which imply it such as
-        "--oneline". It also overrides the <em>log.abbrevCommit</em> variable.
+        "--oneline". It also overrides the <code>log.abbrevCommit</code> variable.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1789,26 +1823,52 @@
         in their encoding header; this option can be used to tell the
         command to re-code the commit log message in the encoding
         preferred by the user.  For non plumbing commands this
-        defaults to UTF-8.
+        defaults to UTF-8. Note that if an object claims to be encoded
+        in <code>X</code> and we are outputting in <code>X</code>, we will output the object
+        verbatim; this means that invalid sequences in the original
+        commit may be copied to the output.
+</p>
+</dd>
+<dt class="hdlist1">
+--expand-tabs=&lt;n&gt;
+</dt>
+<dt class="hdlist1">
+--expand-tabs
+</dt>
+<dt class="hdlist1">
+--no-expand-tabs
+</dt>
+<dd>
+<p>
+        Perform a tab expansion (replace each tab with enough spaces
+        to fill to the next display column that is multiple of <em>&lt;n&gt;</em>)
+        in the log message before showing it in the output.
+        <code>--expand-tabs</code> is a short-hand for <code>--expand-tabs=8</code>, and
+        <code>--no-expand-tabs</code> is a short-hand for <code>--expand-tabs=0</code>,
+        which disables tab expansion.
 </p>
+<div class="paragraph"><p>By default, tabs are expanded in pretty formats that indent the log
+message by 4 spaces (i.e.  <em>medium</em>, which is the default, <em>full</em>,
+and <em>fuller</em>).</p></div>
 </dd>
 <dt class="hdlist1">
---notes[=&lt;ref&gt;]
+--notes[=&lt;treeish&gt;]
 </dt>
 <dd>
 <p>
         Show the notes (see <a href="git-notes.html">git-notes(1)</a>) that annotate the
         commit, when showing the commit log message.  This is the default
         for <code>git log</code>, <code>git show</code> and <code>git whatchanged</code> commands when
-        there is no <code>--pretty</code>, <code>--format</code> nor <code>--oneline</code> option given
+        there is no <code>--pretty</code>, <code>--format</code>, or <code>--oneline</code> option given
         on the command line.
 </p>
 <div class="paragraph"><p>By default, the notes shown are from the notes refs listed in the
-<em>core.notesRef</em> and <em>notes.displayRef</em> variables (or corresponding
+<code>core.notesRef</code> and <code>notes.displayRef</code> variables (or corresponding
 environment overrides). See <a href="git-config.html">git-config(1)</a> for more details.</p></div>
-<div class="paragraph"><p>With an optional <em>&lt;ref&gt;</em> argument, show this notes ref instead of the
-default notes ref(s). The ref is taken to be in <code>refs/notes/</code> if it
-is not qualified.</p></div>
+<div class="paragraph"><p>With an optional <em>&lt;treeish&gt;</em> argument, use the treeish to find the notes
+to display.  The treeish can specify the full refname when it begins
+with <code>refs/notes/</code>; when it begins with <code>notes/</code>, <code>refs/</code> and otherwise
+<code>refs/notes/</code> is prefixed to form a full name of the ref.</p></div>
 <div class="paragraph"><p>Multiple --notes options can be combined to control which notes are
 being displayed. Examples: "--notes=foo" will show only notes from
 "refs/notes/foo"; "--notes=foo --notes" will show both notes from
@@ -1827,7 +1887,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
---show-notes[=&lt;ref&gt;]
+--show-notes[=&lt;treeish&gt;]
 </dt>
 <dt class="hdlist1">
 --[no-]standard-notes
@@ -1863,10 +1923,10 @@
 <p>
         This flag changes the way a merge commit is displayed
         (which means it is useful only when the command is given
-        one &lt;tree-ish&gt;, or <em>--stdin</em>).  It shows the differences
+        one &lt;tree-ish&gt;, or <code>--stdin</code>).  It shows the differences
         from each of the parents to the merge result simultaneously
         instead of showing pairwise diff between a parent and the
-        result one at a time (which is what the <em>-m</em> option does).
+        result one at a time (which is what the <code>-m</code> option does).
         Furthermore, it lists only files which were modified
         from all parents.
 </p>
@@ -1877,8 +1937,8 @@
 <dd>
 <p>
         This flag changes the way a merge commit patch is displayed,
-        in a similar way to the <em>-c</em> option. It implies the <em>-c</em>
-        and <em>-p</em> options and further compresses the patch output
+        in a similar way to the <code>-c</code> option. It implies the <code>-c</code>
+        and <code>-p</code> options and further compresses the patch output
         by omitting uninteresting hunks whose the contents in the parents
         have only two variants and the merge result picks one of them
         without modification.  When all hunks are uninteresting, the commit
@@ -2024,8 +2084,11 @@
 stored in the commit object.  Notably, the SHA-1s are
 displayed in full, regardless of whether --abbrev or
 --no-abbrev are used, and <em>parents</em> information show the
-true parent commits, without taking grafts nor history
-simplification into account.</p></div>
+true parent commits, without taking grafts or history
+simplification into account. Note that this format affects the way
+commits are displayed, but not the way the diff is shown e.g. with
+<code>git log --raw</code>. To get full object names in a raw diff format,
+use <code>--no-abbrev</code>.</p></div>
 </li>
 <li>
 <p>
@@ -2118,7 +2181,12 @@
 </li>
 <li>
 <p>
-<em>%ai</em>: author date, ISO 8601 format
+<em>%ai</em>: author date, ISO 8601-like format
+</p>
+</li>
+<li>
+<p>
+<em>%aI</em>: author date, strict ISO 8601 format
 </p>
 </li>
 <li>
@@ -2145,7 +2213,7 @@
 </li>
 <li>
 <p>
-<em>%cd</em>: committer date
+<em>%cd</em>: committer date (format respects --date= option)
 </p>
 </li>
 <li>
@@ -2165,7 +2233,12 @@
 </li>
 <li>
 <p>
-<em>%ci</em>: committer date, ISO 8601 format
+<em>%ci</em>: committer date, ISO 8601-like format
+</p>
+</li>
+<li>
+<p>
+<em>%cI</em>: committer date, strict ISO 8601 format
 </p>
 </li>
 <li>
@@ -2175,6 +2248,11 @@
 </li>
 <li>
 <p>
+<em>%D</em>: ref names without the " (", ")" wrapping.
+</p>
+</li>
+<li>
+<p>
 <em>%e</em>: encoding
 </p>
 </li>
@@ -2210,8 +2288,8 @@
 </li>
 <li>
 <p>
-<em>%G?</em>: show "G" for a Good signature, "B" for a Bad signature, "U" for a good,
-  untrusted signature and "N" for no signature
+<em>%G?</em>: show "G" for a good (valid) signature, "B" for a bad signature,
+  "U" for a good signature with unknown validity and "N" for no signature
 </p>
 </li>
 <li>
@@ -2226,12 +2304,18 @@
 </li>
 <li>
 <p>
-<em>%gD</em>: reflog selector, e.g., <code>refs/stash@{1}</code>
+<em>%gD</em>: reflog selector, e.g., <code>refs/stash@{1}</code> or
+  <code>refs/stash@{2 minutes ago</code>}; the format follows the rules described
+  for the <code>-g</code> option. The portion before the <code>@</code> is the refname as
+  given on the command line (so <code>git log -g refs/heads/master</code> would
+  yield <code>refs/heads/master@{0}</code>).
 </p>
 </li>
 <li>
 <p>
-<em>%gd</em>: shortened reflog selector, e.g., <code>stash@{1}</code>
+<em>%gd</em>: shortened reflog selector; same as <code>%gD</code>, but the refname
+  portion is shortened for human readability (so <code>refs/heads/master</code>
+  becomes just <code>master</code>).
 </p>
 </li>
 <li>
@@ -2293,7 +2377,7 @@
 </li>
 <li>
 <p>
-<em>%m</em>: left, right or boundary mark
+<em>%m</em>: left (<code>&lt;</code>), right (<code>&gt;</code>) or boundary (<code>-</code>) mark
 </p>
 </li>
 <li>
@@ -2362,8 +2446,9 @@
 <td class="content">Some placeholders may depend on other options given to the
 revision traversal engine. For example, the <code>%g*</code> reflog options will
 insert an empty string unless we are traversing reflog entries (e.g., by
-<code>git log -g</code>). The <code>%d</code> placeholder will use the "short" decoration
-format if <code>--decorate</code> was not already provided on the command line.</td>
+<code>git log -g</code>). The <code>%d</code> and <code>%D</code> placeholders will use the "short"
+decoration format if <code>--decorate</code> was not already provided on the command
+line.</td>
 </tr></table>
 </div>
 <div class="paragraph"><p>If you add a <code>+</code> (plus sign) after <em>%</em> of a placeholder, a line-feed
@@ -2563,7 +2648,7 @@
 </li>
 <li>
 <p>
-a tab or a NUL when <em>-z</em> option is used.
+a tab or a NUL when <code>-z</code> option is used.
 </p>
 </li>
 <li>
@@ -2573,7 +2658,7 @@
 </li>
 <li>
 <p>
-a tab or a NUL when <em>-z</em> option is used; only exists for C or R.
+a tab or a NUL when <code>-z</code> option is used; only exists for C or R.
 </p>
 </li>
 <li>
@@ -2583,7 +2668,7 @@
 </li>
 <li>
 <p>
-an LF or a NUL when <em>-z</em> option is used, to terminate the record.
+an LF or a NUL when <code>-z</code> option is used, to terminate the record.
 </p>
 </li>
 </ol></div>
@@ -2633,7 +2718,8 @@
 </ul></div>
 <div class="paragraph"><p>Status letters C and R are always followed by a score (denoting the
 percentage of similarity between the source and target of the move or
-copy), and are the only ones to be so.</p></div>
+copy).  Status letter M may be followed by a score (denoting the
+percentage of dissimilarity) for file rewrites.</p></div>
 <div class="paragraph"><p>&lt;sha1&gt; is shown as all 0&#8217;s if a file is new on the filesystem
 and it is out of sync with the index.</p></div>
 <div class="paragraph"><p>Example:</p></div>
@@ -2650,7 +2736,7 @@
 <h2 id="_diff_format_for_merges">diff format for merges</h2>
 <div class="sectionbody">
 <div class="paragraph"><p>"git-diff-tree", "git-diff-files" and "git-diff --raw"
-can take <em>-c</em> or <em>--cc</em> option
+can take <code>-c</code> or <code>--cc</code> option
 to generate diff output also for merge commits.  The output differs
 from the format described above in the following way:</p></div>
 <div class="olist arabic"><ol class="arabic">
@@ -2693,11 +2779,11 @@
 <h2 id="_generating_patches_with_p">Generating patches with -p</h2>
 <div class="sectionbody">
 <div class="paragraph"><p>When "git-diff-index", "git-diff-tree", or "git-diff-files" are run
-with a <em>-p</em> option, "git diff" without the <em>--raw</em> option, or
+with a <code>-p</code> option, "git diff" without the <code>--raw</code> option, or
 "git log" with the "-p" option, they
 do not produce the output described above; instead they produce a
 patch file.  You can customize the creation of such patches via the
-GIT_EXTERNAL_DIFF and the GIT_DIFF_OPTS environment variables.</p></div>
+<code>GIT_EXTERNAL_DIFF</code> and the <code>GIT_DIFF_OPTS</code> environment variables.</p></div>
 <div class="paragraph"><p>What the -p option produces is slightly different from the traditional
 diff format:</p></div>
 <div class="olist arabic"><ol class="arabic">
@@ -2778,10 +2864,10 @@
 <div class="sect1">
 <h2 id="_combined_diff_format">combined diff format</h2>
 <div class="sectionbody">
-<div class="paragraph"><p>Any diff-generating command can take the &#8216;-c` or <code>--cc</code> option to
+<div class="paragraph"><p>Any diff-generating command can take the <code>-c</code> or <code>--cc</code> option to
 produce a <em>combined diff</em> when showing a merge. This is the default
 format when showing merges with <a href="git-diff.html">git-diff(1)</a> or
-<a href="git-show.html">git-show(1)</a>. Note also that you can give the `-m&#8217; option to any
+<a href="git-show.html">git-show(1)</a>. Note also that you can give the <code>-m</code> option to any
 of these commands to force generation of diffs with individual parents
 of a merge.</p></div>
 <div class="paragraph"><p>A <em>combined diff</em> format looks like this:</p></div>
@@ -2819,13 +2905,13 @@
 <li>
 <p>
 It is preceded with a "git diff" header, that looks like
-     this (when <em>-c</em> option is used):
+     this (when <code>-c</code> option is used):
 </p>
 <div class="literalblock">
 <div class="content">
 <pre><code>diff --combined file</code></pre>
 </div></div>
-<div class="paragraph"><p>or like this (when <em>--cc</em> option is used):</p></div>
+<div class="paragraph"><p>or like this (when <code>--cc</code> option is used):</p></div>
 <div class="literalblock">
 <div class="content">
 <pre><code>diff --cc file</code></pre>
@@ -2893,7 +2979,7 @@
 <div class="paragraph"><p>In the above example output, the function signature was changed
 from both files (hence two <code>-</code> removals from both file1 and
 file2, plus <code>++</code> to mean one line that was added does not appear
-in either file1 nor file2).  Also eight other lines are the same
+in either file1 or file2).  Also eight other lines are the same
 from file1 but do not appear in file2 (hence prefixed with <code>+</code>).</p></div>
 <div class="paragraph"><p>When shown by <code>git diff-tree -c</code>, it compares the parents of a
 merge commit with the merge result (i.e. file1..fileN are the
# install git-diff-tree.html /usr/share/doc/git-doc/git-diff-tree.html
--- /usr/share/doc/git-doc/git-diff.html	2016-03-21 09:24:28.000000000 -0600
+++ git-diff.html	2016-10-15 00:43:34.068074426 -0600
@@ -886,7 +886,7 @@
 <dd>
 <p>
         Generate patch (see section on generating patches).
-         This is the default.
+        This is the default.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -919,8 +919,7 @@
 </dt>
 <dd>
 <p>
-        Generate the raw format.
-        
+        Generate the diff in raw format.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -932,6 +931,20 @@
 </p>
 </dd>
 <dt class="hdlist1">
+--compaction-heuristic
+</dt>
+<dt class="hdlist1">
+--no-compaction-heuristic
+</dt>
+<dd>
+<p>
+        These are to help debugging and tuning an experimental
+        heuristic (which is off by default) that shifts the hunk
+        boundary in an attempt to make the resulting patch easier
+        to read.
+</p>
+</dd>
+<dt class="hdlist1">
 --minimal
 </dt>
 <dd>
@@ -1286,8 +1299,10 @@
 expression to make sure that it matches all non-whitespace characters.
 A match that contains a newline is silently truncated(!) at the
 newline.</p></div>
+<div class="paragraph"><p>For example, <code>--word-diff-regex=.</code> will treat each character as a word
+and, correspondingly, show differences character by character.</p></div>
 <div class="paragraph"><p>The regex can also be set via a diff driver or configuration option, see
-<a href="gitattributes.html">gitattributes(1)</a> or <a href="git-config.html">git-config(1)</a>.  Giving it explicitly
+<a href="gitattributes.html">gitattributes(5)</a> or <a href="git-config.html">git-config(1)</a>.  Giving it explicitly
 overrides any diff driver or configuration setting.  Diff drivers
 override configuration settings.</p></div>
 </dd>
@@ -1314,8 +1329,8 @@
 </dt>
 <dd>
 <p>
-        Warn if changes introduce whitespace errors.  What are
-        considered whitespace errors is controlled by <code>core.whitespace</code>
+        Warn if changes introduce conflict markers or whitespace errors.
+        What are considered whitespace errors is controlled by <code>core.whitespace</code>
         configuration.  By default, trailing whitespaces (including
         lines that solely consist of whitespaces) and a space character
         that is immediately followed by a tab character inside the
@@ -1325,6 +1340,20 @@
 </p>
 </dd>
 <dt class="hdlist1">
+--ws-error-highlight=&lt;kind&gt;
+</dt>
+<dd>
+<p>
+        Highlight whitespace errors on lines specified by &lt;kind&gt;
+        in the color specified by <code>color.diff.whitespace</code>.  &lt;kind&gt;
+        is a comma separated list of <code>old</code>, <code>new</code>, <code>context</code>.  When
+        this option is not given, only whitespace errors in <code>new</code>
+        lines are highlighted.  E.g. <code>--ws-error-highlight=new,old</code>
+        highlights whitespace errors on both deleted and added lines.
+        <code>all</code> can be used as a short-hand for <code>old,new,context</code>.
+</p>
+</dd>
+<dt class="hdlist1">
 --full-index
 </dt>
 <dd>
@@ -1440,7 +1469,7 @@
 <p>
         Omit the preimage for deletes, i.e. print only the header but not
         the diff between the preimage and <code>/dev/null</code>. The resulting patch
-        is not meant to be applied with <code>patch</code> nor <code>git apply</code>; this is
+        is not meant to be applied with <code>patch</code> or <code>git apply</code>; this is
         solely for people who want to just concentrate on reviewing the
         text after the change. In addition, the output obviously lack
         enough information to apply such a patch in reverse, even manually,
@@ -1477,6 +1506,8 @@
         other criteria in the comparison; if there is no file
         that matches other criteria, nothing is selected.
 </p>
+<div class="paragraph"><p>Also, these upper-case letters can be downcased to exclude.  E.g.
+<code>--diff-filter=ad</code> excludes added and deleted paths.</p></div>
 </dd>
 <dt class="hdlist1">
 -S&lt;string&gt;
@@ -1542,8 +1573,8 @@
 <p>
         Output the patch in the order specified in the
         &lt;orderfile&gt;, which has one shell glob pattern per line.
-        This overrides the <code>diff.orderfile</code> configuration variable
-        (see <a href="git-config.html">git-config(1)</a>).  To cancel <code>diff.orderfile</code>,
+        This overrides the <code>diff.orderFile</code> configuration variable
+        (see <a href="git-config.html">git-config(1)</a>).  To cancel <code>diff.orderFile</code>,
         use <code>-O/dev/null</code>.
 </p>
 </dd>
@@ -1863,7 +1894,7 @@
 </li>
 <li>
 <p>
-a tab or a NUL when <em>-z</em> option is used.
+a tab or a NUL when <code>-z</code> option is used.
 </p>
 </li>
 <li>
@@ -1873,7 +1904,7 @@
 </li>
 <li>
 <p>
-a tab or a NUL when <em>-z</em> option is used; only exists for C or R.
+a tab or a NUL when <code>-z</code> option is used; only exists for C or R.
 </p>
 </li>
 <li>
@@ -1883,7 +1914,7 @@
 </li>
 <li>
 <p>
-an LF or a NUL when <em>-z</em> option is used, to terminate the record.
+an LF or a NUL when <code>-z</code> option is used, to terminate the record.
 </p>
 </li>
 </ol></div>
@@ -1933,7 +1964,8 @@
 </ul></div>
 <div class="paragraph"><p>Status letters C and R are always followed by a score (denoting the
 percentage of similarity between the source and target of the move or
-copy), and are the only ones to be so.</p></div>
+copy).  Status letter M may be followed by a score (denoting the
+percentage of dissimilarity) for file rewrites.</p></div>
 <div class="paragraph"><p>&lt;sha1&gt; is shown as all 0&#8217;s if a file is new on the filesystem
 and it is out of sync with the index.</p></div>
 <div class="paragraph"><p>Example:</p></div>
@@ -1950,7 +1982,7 @@
 <h2 id="_diff_format_for_merges">diff format for merges</h2>
 <div class="sectionbody">
 <div class="paragraph"><p>"git-diff-tree", "git-diff-files" and "git-diff --raw"
-can take <em>-c</em> or <em>--cc</em> option
+can take <code>-c</code> or <code>--cc</code> option
 to generate diff output also for merge commits.  The output differs
 from the format described above in the following way:</p></div>
 <div class="olist arabic"><ol class="arabic">
@@ -1993,11 +2025,11 @@
 <h2 id="_generating_patches_with_p">Generating patches with -p</h2>
 <div class="sectionbody">
 <div class="paragraph"><p>When "git-diff-index", "git-diff-tree", or "git-diff-files" are run
-with a <em>-p</em> option, "git diff" without the <em>--raw</em> option, or
+with a <code>-p</code> option, "git diff" without the <code>--raw</code> option, or
 "git log" with the "-p" option, they
 do not produce the output described above; instead they produce a
 patch file.  You can customize the creation of such patches via the
-GIT_EXTERNAL_DIFF and the GIT_DIFF_OPTS environment variables.</p></div>
+<code>GIT_EXTERNAL_DIFF</code> and the <code>GIT_DIFF_OPTS</code> environment variables.</p></div>
 <div class="paragraph"><p>What the -p option produces is slightly different from the traditional
 diff format:</p></div>
 <div class="olist arabic"><ol class="arabic">
@@ -2078,10 +2110,10 @@
 <div class="sect1">
 <h2 id="_combined_diff_format">combined diff format</h2>
 <div class="sectionbody">
-<div class="paragraph"><p>Any diff-generating command can take the &#8216;-c` or <code>--cc</code> option to
+<div class="paragraph"><p>Any diff-generating command can take the <code>-c</code> or <code>--cc</code> option to
 produce a <em>combined diff</em> when showing a merge. This is the default
 format when showing merges with <a href="git-diff.html">git-diff(1)</a> or
-<a href="git-show.html">git-show(1)</a>. Note also that you can give the `-m&#8217; option to any
+<a href="git-show.html">git-show(1)</a>. Note also that you can give the <code>-m</code> option to any
 of these commands to force generation of diffs with individual parents
 of a merge.</p></div>
 <div class="paragraph"><p>A <em>combined diff</em> format looks like this:</p></div>
@@ -2119,13 +2151,13 @@
 <li>
 <p>
 It is preceded with a "git diff" header, that looks like
-     this (when <em>-c</em> option is used):
+     this (when <code>-c</code> option is used):
 </p>
 <div class="literalblock">
 <div class="content">
 <pre><code>diff --combined file</code></pre>
 </div></div>
-<div class="paragraph"><p>or like this (when <em>--cc</em> option is used):</p></div>
+<div class="paragraph"><p>or like this (when <code>--cc</code> option is used):</p></div>
 <div class="literalblock">
 <div class="content">
 <pre><code>diff --cc file</code></pre>
@@ -2193,7 +2225,7 @@
 <div class="paragraph"><p>In the above example output, the function signature was changed
 from both files (hence two <code>-</code> removals from both file1 and
 file2, plus <code>++</code> to mean one line that was added does not appear
-in either file1 nor file2).  Also eight other lines are the same
+in either file1 or file2).  Also eight other lines are the same
 from file1 but do not appear in file2 (hence prefixed with <code>+</code>).</p></div>
 <div class="paragraph"><p>When shown by <code>git diff-tree -c</code>, it compares the parents of a
 merge commit with the merge result (i.e. file1..fileN are the
@@ -2427,8 +2459,8 @@
 <div class="colist arabic"><ol>
 <li>
 <p>
-Show only modification, rename and copy, but not addition
-nor deletion.
+Show only modification, rename, and copy, but not addition
+or deletion.
 </p>
 </li>
 <li>
# install git-diff.html /usr/share/doc/git-doc/git-diff.html
--- /usr/share/doc/git-doc/git-difftool.html	2016-03-21 09:24:28.000000000 -0600
+++ git-difftool.html	2016-10-15 00:43:31.684074381 -0600
@@ -883,6 +883,19 @@
         <code>diff.guitool</code> variable instead of <code>diff.tool</code>.
 </p>
 </dd>
+<dt class="hdlist1">
+--[no-]trust-exit-code
+</dt>
+<dd>
+<p>
+        <em>git-difftool</em> invokes a diff tool individually on each file.
+        Errors reported by the diff tool are ignored by default.
+        Use <code>--trust-exit-code</code> to make <em>git-difftool</em> exit when an
+        invoked diff tool returns a non-zero exit code.
+</p>
+<div class="paragraph"><p><em>git-difftool</em> will forward the exit code of the invoked tool when
+<code>--trust-exit-code</code> is used.</p></div>
+</dd>
 </dl></div>
 <div class="paragraph"><p>See <a href="git-diff.html">git-diff(1)</a> for the full list of supported options.</p></div>
 </div>
@@ -935,6 +948,15 @@
         Prompt before each invocation of the diff tool.
 </p>
 </dd>
+<dt class="hdlist1">
+difftool.trustExitCode
+</dt>
+<dd>
+<p>
+        Exit difftool if the invoked diff tool returns a non-zero exit status.
+</p>
+<div class="paragraph"><p>See the <code>--trust-exit-code</code> option above for more details.</p></div>
+</dd>
 </dl></div>
 </div>
 </div>
# install git-difftool.html /usr/share/doc/git-doc/git-difftool.html
--- /usr/share/doc/git-doc/git-fast-export.html	2016-03-21 09:24:28.000000000 -0600
+++ git-fast-export.html	2016-10-15 00:43:34.404074432 -0600
@@ -898,6 +898,25 @@
 </p>
 </dd>
 <dt class="hdlist1">
+--anonymize
+</dt>
+<dd>
+<p>
+        Anonymize the contents of the repository while still retaining
+        the shape of the history and stored tree.  See the section on
+        <code>ANONYMIZING</code> below.
+</p>
+</dd>
+<dt class="hdlist1">
+--refspec
+</dt>
+<dd>
+<p>
+        Apply the specified refspec to each ref exported. Multiple of them can
+        be specified.
+</p>
+</dd>
+<dt class="hdlist1">
 [&lt;git-rev-list-args&gt;&#8230;]
 </dt>
 <dd>
@@ -936,6 +955,57 @@
 </div>
 </div>
 <div class="sect1">
+<h2 id="_anonymizing">ANONYMIZING</h2>
+<div class="sectionbody">
+<div class="paragraph"><p>If the <code>--anonymize</code> option is given, git will attempt to remove all
+identifying information from the repository while still retaining enough
+of the original tree and history patterns to reproduce some bugs. The
+goal is that a git bug which is found on a private repository will
+persist in the anonymized repository, and the latter can be shared with
+git developers to help solve the bug.</p></div>
+<div class="paragraph"><p>With this option, git will replace all refnames, paths, blob contents,
+commit and tag messages, names, and email addresses in the output with
+anonymized data.  Two instances of the same string will be replaced
+equivalently (e.g., two commits with the same author will have the same
+anonymized author in the output, but bear no resemblance to the original
+author string). The relationship between commits, branches, and tags is
+retained, as well as the commit timestamps (but the commit messages and
+refnames bear no resemblance to the originals). The relative makeup of
+the tree is retained (e.g., if you have a root tree with 10 files and 3
+trees, so will the output), but their names and the contents of the
+files will be replaced.</p></div>
+<div class="paragraph"><p>If you think you have found a git bug, you can start by exporting an
+anonymized stream of the whole repository:</p></div>
+<div class="listingblock">
+<div class="content">
+<pre><code>$ git fast-export --anonymize --all &gt;anon-stream</code></pre>
+</div></div>
+<div class="paragraph"><p>Then confirm that the bug persists in a repository created from that
+stream (many bugs will not, as they really do depend on the exact
+repository contents):</p></div>
+<div class="listingblock">
+<div class="content">
+<pre><code>$ git init anon-repo
+$ cd anon-repo
+$ git fast-import &lt;../anon-stream
+$ ... test your bug ...</code></pre>
+</div></div>
+<div class="paragraph"><p>If the anonymized repository shows the bug, it may be worth sharing
+<code>anon-stream</code> along with a regular bug report. Note that the anonymized
+stream compresses very well, so gzipping it is encouraged. If you want
+to examine the stream to see that it does not contain any private data,
+you can peruse it directly before sending. You may also want to try:</p></div>
+<div class="listingblock">
+<div class="content">
+<pre><code>$ perl -pe 's/\d+/X/g' &lt;anon-stream | sort -u | less</code></pre>
+</div></div>
+<div class="paragraph"><p>which shows all of the unique lines (with numbers converted to "X", to
+collapse "User 0", "User 1", etc into "User X"). This produces a much
+smaller output, and it is usually easy to quickly confirm that there is
+no private data in the stream.</p></div>
+</div>
+</div>
+<div class="sect1">
 <h2 id="_limitations">Limitations</h2>
 <div class="sectionbody">
 <div class="paragraph"><p>Since <em>git fast-import</em> cannot tag trees, you will not be
@@ -944,6 +1014,12 @@
 </div>
 </div>
 <div class="sect1">
+<h2 id="_see_also">SEE ALSO</h2>
+<div class="sectionbody">
+<div class="paragraph"><p><a href="git-fast-import.html">git-fast-import(1)</a></p></div>
+</div>
+</div>
+<div class="sect1">
 <h2 id="_git">GIT</h2>
 <div class="sectionbody">
 <div class="paragraph"><p>Part of the <a href="git.html">git(1)</a> suite</p></div>
# install git-fast-export.html /usr/share/doc/git-doc/git-fast-export.html
--- /usr/share/doc/git-doc/git-fast-import.html	2016-03-21 09:24:28.000000000 -0600
+++ git-fast-import.html	2016-10-15 00:43:35.676074456 -0600
@@ -816,7 +816,7 @@
 </dt>
 <dd>
 <p>
-        Write responses to <code>cat-blob</code> and <code>ls</code> queries to the
+        Write responses to <code>get-mark</code>, <code>cat-blob</code>, and <code>ls</code> queries to the
         file descriptor &lt;fd&gt; instead of <code>stdout</code>.  Allows <code>progress</code>
         output intended for the end-user to be separated from other
         output.
@@ -957,6 +957,14 @@
         The default is unlimited.
 </p>
 </dd>
+<dt class="hdlist1">
+fastimport.unpackLimit
+</dt>
+<dd>
+<p>
+        See <a href="git-config.html">git-config(1)</a>
+</p>
+</dd>
 </dl></div>
 </div>
 </div>
@@ -1055,7 +1063,7 @@
 <h3 id="_date_formats">Date Formats</h3>
 <div class="paragraph"><p>The following date formats are supported.  A frontend should select
 the format it will use for this import by passing the format name
-in the --date-format=&lt;fmt&gt; command line option.</p></div>
+in the --date-format=&lt;fmt&gt; command-line option.</p></div>
 <div class="dlist"><dl>
 <dt class="hdlist1">
 <code>raw</code>
@@ -1211,7 +1219,17 @@
 <p>
         Marks the end of the stream. This command is optional
         unless the <code>done</code> feature was requested using the
-        <code>--done</code> command line option or <code>feature done</code> command.
+        <code>--done</code> command-line option or <code>feature done</code> command.
+</p>
+</dd>
+<dt class="hdlist1">
+<code>get-mark</code>
+</dt>
+<dd>
+<p>
+        Causes fast-import to print the SHA-1 corresponding to a mark
+        to the file descriptor set with <code>--cat-blob-fd</code>, or <code>stdout</code> if
+        unspecified.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1315,7 +1333,7 @@
 <code>&lt;name&gt;</code> and <code>&lt;email&gt;</code> are free-form and may contain any sequence
 of bytes, except <code>LT</code>, <code>GT</code> and <code>LF</code>.  <code>&lt;name&gt;</code> is typically UTF-8 encoded.</p></div>
 <div class="paragraph"><p>The time of the change is specified by <code>&lt;when&gt;</code> using the date format
-that was selected by the --date-format=&lt;fmt&gt; command line option.
+that was selected by the --date-format=&lt;fmt&gt; command-line option.
 See &#8220;Date Formats&#8221; above for the set of supported formats, and
 their syntax.</p></div>
 </div>
@@ -1368,6 +1386,12 @@
   &#8220;SPECIFYING REVISIONS&#8221; in <a href="gitrevisions.html">gitrevisions(7)</a> for details.
 </p>
 </li>
+<li>
+<p>
+The special null SHA-1 (40 zeros) specifies that the branch is to be
+  removed.
+</p>
+</li>
 </ul></div>
 <div class="paragraph"><p>The special case of restarting an incremental import from the
 current branch value should be written as:</p></div>
@@ -1390,11 +1414,7 @@
 omitted when creating a new branch, the first <code>merge</code> commit will be
 the first ancestor of the current commit, and the branch will start
 out with no files.  An unlimited number of <code>merge</code> commands per
-commit are permitted by fast-import, thereby establishing an n-way merge.
-However Git&#8217;s other tools never create commits with more than 15
-additional ancestors (forming a 16-way merge).  For this reason
-it is suggested that frontends do not use more than 15 <code>merge</code>
-commands per commit; 16, if starting a new, empty branch.</p></div>
+commit are permitted by fast-import, thereby establishing an n-way merge.</p></div>
 <div class="paragraph"><p>Here <code>&lt;commit-ish&gt;</code> is any of the commit specification expressions
 also accepted by <code>from</code> (see above).</p></div>
 </div>
@@ -1854,6 +1874,23 @@
 can safely access the refs that fast-import updated.</p></div>
 </div>
 <div class="sect2">
+<h3 id="_code_get_mark_code"><code>get-mark</code></h3>
+<div class="paragraph"><p>Causes fast-import to print the SHA-1 corresponding to a mark to
+stdout or to the file descriptor previously arranged with the
+<code>--cat-blob-fd</code> argument. The command otherwise has no impact on the
+current import; its purpose is to retrieve SHA-1s that later commits
+might want to refer to in their commit messages.</p></div>
+<div class="literalblock">
+<div class="content">
+<pre><code>        'get-mark' SP ':' &lt;idnum&gt; LF</code></pre>
+</div></div>
+<div class="paragraph"><p>This command can be used anywhere in the stream that comments are
+accepted.  In particular, the <code>get-mark</code> command can be used in the
+middle of a commit but not in the middle of a <code>data</code> command.</p></div>
+<div class="paragraph"><p>See &#8220;Responses To Commands&#8221; below for details about how to read
+this output safely.</p></div>
+</div>
+<div class="sect2">
 <h3 id="_code_cat_blob_code"><code>cat-blob</code></h3>
 <div class="paragraph"><p>Causes fast-import to print a blob to a file descriptor previously
 arranged with the <code>--cat-blob-fd</code> argument.  The command otherwise
@@ -1933,7 +1970,8 @@
 </div></div>
 </div></div>
 <div class="paragraph"><p>The &lt;dataref&gt; represents the blob, tree, or commit object at &lt;path&gt;
-and can be used in later <em>cat-blob</em>, <em>filemodify</em>, or <em>ls</em> commands.</p></div>
+and can be used in later <em>get-mark</em>, <em>cat-blob</em>, <em>filemodify</em>, or
+<em>ls</em> commands.</p></div>
 <div class="paragraph"><p>If there is no file or subtree at that path, <em>git fast-import</em> will
 instead report</p></div>
 <div class="exampleblock">
@@ -1974,7 +2012,7 @@
 <dd>
 <p>
         Act as though the corresponding command-line option with
-        a leading <em>--</em> was passed on the command line
+        a leading <code>--</code> was passed on the command line
         (see OPTIONS, above).
 </p>
 </dd>
@@ -1996,6 +2034,9 @@
 </p>
 </dd>
 <dt class="hdlist1">
+get-mark
+</dt>
+<dt class="hdlist1">
 cat-blob
 </dt>
 <dt class="hdlist1">
@@ -2003,7 +2044,8 @@
 </dt>
 <dd>
 <p>
-        Require that the backend support the <em>cat-blob</em> or <em>ls</em> command.
+        Require that the backend support the <em>get-mark</em>, <em>cat-blob</em>,
+        or <em>ls</em> command respectively.
         Versions of fast-import not supporting the specified command
         will exit with a message indicating so.
         This lets the import error out early with a clear message,
@@ -2049,11 +2091,11 @@
 </div></div>
 <div class="paragraph"><p>The <code>&lt;option&gt;</code> part of the command may contain any of the options
 listed in the OPTIONS section that do not change import semantics,
-without the leading <em>--</em> and is treated in the same way.</p></div>
+without the leading <code>--</code> and is treated in the same way.</p></div>
 <div class="paragraph"><p>Option commands must be the first commands on the input (not counting
 feature commands), to give an option command after any non-option
 command is an error.</p></div>
-<div class="paragraph"><p>The following commandline options change import semantics and may therefore
+<div class="paragraph"><p>The following command-line options change import semantics and may therefore
 not be passed as option:</p></div>
 <div class="ulist"><ul>
 <li>
@@ -2087,7 +2129,7 @@
 <h3 id="_code_done_code"><code>done</code></h3>
 <div class="paragraph"><p>If the <code>done</code> feature is not in use, treated as if EOF was read.
 This can be used to tell fast-import to finish early.</p></div>
-<div class="paragraph"><p>If the <code>--done</code> command line option or <code>feature done</code> command is
+<div class="paragraph"><p>If the <code>--done</code> command-line option or <code>feature done</code> command is
 in use, the <code>done</code> command is mandatory and marks the end of the
 stream.</p></div>
 </div>
@@ -2117,10 +2159,10 @@
 git fast-import &gt;fast-import-output</code></pre>
 </div></div>
 </div></div>
-<div class="paragraph"><p>A frontend set up this way can use <code>progress</code>, <code>ls</code>, and <code>cat-blob</code>
-commands to read information from the import in progress.</p></div>
+<div class="paragraph"><p>A frontend set up this way can use <code>progress</code>, <code>get-mark</code>, <code>ls</code>, and
+<code>cat-blob</code> commands to read information from the import in progress.</p></div>
 <div class="paragraph"><p>To avoid deadlock, such frontends must completely consume any
-pending output from <code>progress</code>, <code>ls</code>, and <code>cat-blob</code> before
+pending output from <code>progress</code>, <code>ls</code>, <code>get-mark</code>, and <code>cat-blob</code> before
 performing writes to fast-import that might block.</p></div>
 </div>
 </div>
@@ -2437,6 +2479,12 @@
 </div>
 </div>
 <div class="sect1">
+<h2 id="_see_also">SEE ALSO</h2>
+<div class="sectionbody">
+<div class="paragraph"><p><a href="git-fast-export.html">git-fast-export(1)</a></p></div>
+</div>
+</div>
+<div class="sect1">
 <h2 id="_git">GIT</h2>
 <div class="sectionbody">
 <div class="paragraph"><p>Part of the <a href="git.html">git(1)</a> suite</p></div>
# install git-fast-import.html /usr/share/doc/git-doc/git-fast-import.html
--- /usr/share/doc/git-doc/git-fetch-pack.html	2016-03-21 09:24:28.000000000 -0600
+++ git-fetch-pack.html	2016-10-15 00:43:35.952074461 -0600
@@ -793,7 +793,7 @@
         option, then the refs from stdin are processed after those
         on the command line.
 </p>
-<div class="paragraph"><p>If <em>--stateless-rpc</em> is specified together with this option then
+<div class="paragraph"><p>If <code>--stateless-rpc</code> is specified together with this option then
 the list of refs must be in packet format (pkt-line). Each ref must
 be in a separate packet, and the list must end with a flush packet.</p></div>
 </dd>
@@ -805,7 +805,7 @@
 </dt>
 <dd>
 <p>
-        Pass <em>-q</em> flag to <em>git unpack-objects</em>; this makes the
+        Pass <code>-q</code> flag to <em>git unpack-objects</em>; this makes the
         cloning process less verbose.
 </p>
 </dd>
@@ -920,6 +920,9 @@
         $GIT_DIR (e.g. "HEAD", "refs/heads/master").  When
         unspecified, update from all heads the remote side has.
 </p>
+<div class="paragraph"><p>If the remote has enabled the options <code>uploadpack.allowTipSHA1InWant</code> or
+<code>uploadpack.allowReachableSHA1InWant</code>, they may alternatively be 40-hex
+sha1s present on the remote.</p></div>
 </dd>
 </dl></div>
 </div>
# install git-fetch-pack.html /usr/share/doc/git-doc/git-fetch-pack.html
--- /usr/share/doc/git-doc/git-fetch.html	2016-03-21 09:24:28.000000000 -0600
+++ git-fetch.html	2016-10-15 00:43:36.580074473 -0600
@@ -759,24 +759,26 @@
 <div class="sect1">
 <h2 id="_description">DESCRIPTION</h2>
 <div class="sectionbody">
-<div class="paragraph"><p>Fetches named heads or tags from one or more other repositories,
-along with the objects necessary to complete them.</p></div>
-<div class="paragraph"><p>The ref names and their object names of fetched refs are stored
-in <code>.git/FETCH_HEAD</code>.  This information is left for a later merge
-operation done by <em>git merge</em>.</p></div>
-<div class="paragraph"><p>By default, tags are auto-followed.  This means that when fetching
-from a remote, any tags on the remote that point to objects that exist
-in the local repository are fetched.  The effect is to fetch tags that
+<div class="paragraph"><p>Fetch branches and/or tags (collectively, "refs") from one or more
+other repositories, along with the objects necessary to complete their
+histories.  Remote-tracking branches are updated (see the description
+of &lt;refspec&gt; below for ways to control this behavior).</p></div>
+<div class="paragraph"><p>By default, any tag that points into the histories being fetched is
+also fetched; the effect is to fetch tags that
 point at branches that you are interested in.  This default behavior
-can be changed by using the --tags or --no-tags options, by
-configuring remote.&lt;name&gt;.tagopt, or by using a refspec that fetches
-tags explicitly.</p></div>
-<div class="paragraph"><p><em>git fetch</em> can fetch from either a single named repository,
+can be changed by using the --tags or --no-tags options or by
+configuring remote.&lt;name&gt;.tagOpt.  By using a refspec that fetches tags
+explicitly, you can fetch tags that do not point into branches you
+are interested in as well.</p></div>
+<div class="paragraph"><p><em>git fetch</em> can fetch from either a single named repository or URL,
 or from several repositories at once if &lt;group&gt; is given and
 there is a remotes.&lt;group&gt; entry in the configuration file.
 (See <a href="git-config.html">git-config(1)</a>).</p></div>
 <div class="paragraph"><p>When no remote is specified, by default the <code>origin</code> remote will be used,
 unless there&#8217;s an upstream branch configured for the current branch.</p></div>
+<div class="paragraph"><p>The names of refs that are fetched, together with the object names
+they point at, are written to <code>.git/FETCH_HEAD</code>.  This information
+may be used by scripts or other git commands, such as <a href="git-pull.html">git-pull(1)</a>.</p></div>
 </div>
 </div>
 <div class="sect1">
@@ -809,10 +811,11 @@
 </dt>
 <dd>
 <p>
-        Deepen or shorten the history of a <em>shallow</em> repository created by
-        <code>git clone</code> with <code>--depth=&lt;depth&gt;</code> option (see <a href="git-clone.html">git-clone(1)</a>)
-        to the specified number of commits from the tip of each remote
-        branch history. Tags for the deepened commits are not fetched.
+        Limit fetching to the specified number of commits from the tip of
+        each remote branch history. If fetching to a <em>shallow</em> repository
+        created by <code>git clone</code> with <code>--depth=&lt;depth&gt;</code> option (see
+        <a href="git-clone.html">git-clone(1)</a>), deepen or shorten the history to the specified
+        number of commits. Tags for the deepened commits are not fetched.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -889,7 +892,7 @@
 </dt>
 <dd>
 <p>
-        After fetching, remove any remote-tracking references that no
+        Before fetching, remove any remote-tracking references that no
         longer exist on the remote.  Tags are not subject to pruning
         if they are fetched only because of the default tag
         auto-following or due to a --tags option.  However, if tags
@@ -910,11 +913,24 @@
         By default, tags that point at objects that are downloaded
         from the remote repository are fetched and stored locally.
         This option disables this automatic tag following. The default
-        behavior for a remote may be specified with the remote.&lt;name&gt;.tagopt
+        behavior for a remote may be specified with the remote.&lt;name&gt;.tagOpt
         setting. See <a href="git-config.html">git-config(1)</a>.
 </p>
 </dd>
 <dt class="hdlist1">
+--refmap=&lt;refspec&gt;
+</dt>
+<dd>
+<p>
+        When fetching refs listed on the command line, use the
+        specified refspec (can be given more than once) to map the
+        refs to remote-tracking branches, instead of the values of
+        <code>remote.*.fetch</code> configuration variables for the remote
+        repository.  See section on "Configured Remote-tracking
+        Branches" for details.
+</p>
+</dd>
+<dt class="hdlist1">
 -t
 </dt>
 <dt class="hdlist1">
@@ -927,7 +943,7 @@
         to whatever else would otherwise be fetched.  Using this
         option alone does not subject tags to pruning, even if --prune
         is used (though tags may be pruned anyway if they are also the
-        destination of an explicit refspec; see <em>--prune</em>).
+        destination of an explicit refspec; see <code>--prune</code>).
 </p>
 </dd>
 <dt class="hdlist1">
@@ -947,12 +963,26 @@
 </p>
 </dd>
 <dt class="hdlist1">
+-j
+</dt>
+<dt class="hdlist1">
+--jobs=&lt;n&gt;
+</dt>
+<dd>
+<p>
+        Number of parallel children to be used for fetching submodules.
+        Each will fetch from different submodules, such that fetching many
+        submodules will be faster. By default submodules will be fetched
+        one at a time.
+</p>
+</dd>
+<dt class="hdlist1">
 --no-recurse-submodules
 </dt>
 <dd>
 <p>
         Disable recursive fetching of submodules (this has the same effect as
-        using the <em>--recurse-submodules=no</em> option).
+        using the <code>--recurse-submodules=no</code> option).
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1000,7 +1030,7 @@
 <dd>
 <p>
         When given, and the repository to fetch from is handled
-        by <em>git fetch-pack</em>, <em>--exec=&lt;upload-pack&gt;</em> is passed to
+        by <em>git fetch-pack</em>, <code>--exec=&lt;upload-pack&gt;</code> is passed to
         the command to specify non-default path for the command
         run on the other end.
 </p>
@@ -1041,6 +1071,28 @@
 </p>
 </dd>
 <dt class="hdlist1">
+-4
+</dt>
+<dt class="hdlist1">
+--ipv4
+</dt>
+<dd>
+<p>
+        Use IPv4 addresses only, ignoring IPv6 addresses.
+</p>
+</dd>
+<dt class="hdlist1">
+-6
+</dt>
+<dt class="hdlist1">
+--ipv6
+</dt>
+<dd>
+<p>
+        Use IPv6 addresses only, ignoring IPv4 addresses.
+</p>
+</dd>
+<dt class="hdlist1">
 &lt;repository&gt;
 </dt>
 <dd>
@@ -1066,10 +1118,17 @@
 </dt>
 <dd>
 <p>
-        The format of a &lt;refspec&gt; parameter is an optional plus
-        <code>+</code>, followed by the source ref &lt;src&gt;, followed
-        by a colon <code>:</code>, followed by the destination ref &lt;dst&gt;.
-</p>
+        Specifies which refs to fetch and which local refs to update.
+        When no &lt;refspec&gt;s appear on the command line, the refs to fetch
+        are read from <code>remote.&lt;repository&gt;.fetch</code> variables instead
+        (see <a href="#CRTB">CONFIGURED REMOTE-TRACKING BRANCHES</a> below).
+</p>
+<div class="paragraph"><p>The format of a &lt;refspec&gt; parameter is an optional plus
+<code>+</code>, followed by the source ref &lt;src&gt;, followed
+by a colon <code>:</code>, followed by the destination ref &lt;dst&gt;.
+The colon can be omitted when &lt;dst&gt; is empty.</p></div>
+<div class="paragraph"><p><code>tag &lt;tag&gt;</code> means the same as <code>refs/tags/&lt;tag&gt;:refs/tags/&lt;tag&gt;</code>;
+it requests fetching everything up to the given tag.</p></div>
 <div class="paragraph"><p>The remote ref that matches &lt;src&gt;
 is fetched, and if &lt;dst&gt; is not empty string, the local
 ref that matches it is fast-forwarded using &lt;src&gt;.
@@ -1081,72 +1140,18 @@
 <td class="icon">
 <div class="title">Note</div>
 </td>
-<td class="content">If the remote branch from which you want to pull is
-modified in non-linear ways such as being rewound and
-rebased frequently, then a pull will attempt a merge with
-an older version of itself, likely conflict, and fail.
-It is under these conditions that you would want to use
-the <code>+</code> sign to indicate non-fast-forward updates will
-be needed.  There is currently no easy way to determine
-or declare that a branch will be made available in a
-repository with this behavior; the pulling user simply
+<td class="content">When the remote branch you want to fetch is known to
+be rewound and rebased regularly, it is expected that
+its new tip will not be descendant of its previous tip
+(as stored in your remote-tracking branch the last time
+you fetched).  You would want
+to use the <code>+</code> sign to indicate non-fast-forward updates
+will be needed for such branches.  There is no way to
+determine or declare that a branch will be made available
+in a repository with this behavior; the pulling user simply
 must know this is the expected usage pattern for a branch.</td>
 </tr></table>
 </div>
-<div class="admonitionblock">
-<table><tr>
-<td class="icon">
-<div class="title">Note</div>
-</td>
-<td class="content">You never do your own development on branches that appear
-on the right hand side of a &lt;refspec&gt; colon on <code>Pull:</code> lines;
-they are to be updated by <em>git fetch</em>.  If you intend to do
-development derived from a remote branch <code>B</code>, have a <code>Pull:</code>
-line to track it (i.e. <code>Pull: B:remote-B</code>), and have a separate
-branch <code>my-B</code> to do your development on top of it.  The latter
-is created by <code>git branch my-B remote-B</code> (or its equivalent <code>git
-checkout -b my-B remote-B</code>).  Run <code>git fetch</code> to keep track of
-the progress of the remote side, and when you see something new
-on the remote branch, merge it into your development branch with
-<code>git pull . remote-B</code>, while you are on <code>my-B</code> branch.</td>
-</tr></table>
-</div>
-<div class="admonitionblock">
-<table><tr>
-<td class="icon">
-<div class="title">Note</div>
-</td>
-<td class="content">There is a difference between listing multiple &lt;refspec&gt;
-directly on <em>git pull</em> command line and having multiple
-<code>Pull:</code> &lt;refspec&gt; lines for a &lt;repository&gt; and running
-<em>git pull</em> command without any explicit &lt;refspec&gt; parameters.
-&lt;refspec&gt; listed explicitly on the command line are always
-merged into the current branch after fetching.  In other words,
-if you list more than one remote refs, you would be making
-an Octopus.  While <em>git pull</em> run without any explicit &lt;refspec&gt;
-parameter takes default &lt;refspec&gt;s from <code>Pull:</code> lines, it
-merges only the first &lt;refspec&gt; found into the current branch,
-after fetching all the remote refs.  This is because making an
-Octopus from remote refs is rarely done, while keeping track
-of multiple remote heads in one-go by fetching more than one
-is often useful.</td>
-</tr></table>
-</div>
-<div class="paragraph"><p>Some short-cut notations are also supported.</p></div>
-<div class="ulist"><ul>
-<li>
-<p>
-<code>tag &lt;tag&gt;</code> means the same as <code>refs/tags/&lt;tag&gt;:refs/tags/&lt;tag&gt;</code>;
-  it requests fetching everything up to the given tag.
-</p>
-</li>
-<li>
-<p>
-A parameter &lt;ref&gt; without a colon fetches that ref into FETCH_HEAD,
-  and updates the remote-tracking branches (if any).
-</p>
-</li>
-</ul></div>
 </dd>
 </dl></div>
 </div>
@@ -1159,9 +1164,8 @@
 Depending on the transport protocol, some of this information may be
 absent.</p></div>
 <div class="paragraph"><p>Git supports ssh, git, http, and https protocols (in addition, ftp,
-and ftps can be used for fetching and rsync can be used for fetching
-and pushing, but these are inefficient and deprecated; do not use
-them).</p></div>
+and ftps can be used for fetching, but this is inefficient and
+deprecated; do not use it).</p></div>
 <div class="paragraph"><p>The native transport (i.e. git:// URL) does no authentication and
 should be used with caution on unsecured networks.</p></div>
 <div class="paragraph"><p>The following syntaxes may be used with them:</p></div>
@@ -1186,11 +1190,6 @@
 ftp&#91;s&#93;://host.xz&#91;:port&#93;/path/to/repo.git/
 </p>
 </li>
-<li>
-<p>
-rsync://host.xz/path/to/repo.git/
-</p>
-</li>
 </ul></div>
 <div class="paragraph"><p>An alternative scp-like syntax may also be used with the ssh protocol:</p></div>
 <div class="ulist"><ul>
@@ -1382,6 +1381,188 @@
 </div>
 </div>
 <div class="sect1">
+<h2 id="_configured_remote_tracking_branches_a_id_crtb_a">CONFIGURED REMOTE-TRACKING BRANCHES<a id="CRTB"></a></h2>
+<div class="sectionbody">
+<div class="paragraph"><p>You often interact with the same remote repository by
+regularly and repeatedly fetching from it.  In order to keep track
+of the progress of such a remote repository, <code>git fetch</code> allows you
+to configure <code>remote.&lt;repository&gt;.fetch</code> configuration variables.</p></div>
+<div class="paragraph"><p>Typically such a variable may look like this:</p></div>
+<div class="listingblock">
+<div class="content">
+<pre><code>[remote "origin"]
+        fetch = +refs/heads/*:refs/remotes/origin/*</code></pre>
+</div></div>
+<div class="paragraph"><p>This configuration is used in two ways:</p></div>
+<div class="ulist"><ul>
+<li>
+<p>
+When <code>git fetch</code> is run without specifying what branches
+  and/or tags to fetch on the command line, e.g. <code>git fetch origin</code>
+  or <code>git fetch</code>, <code>remote.&lt;repository&gt;.fetch</code> values are used as
+  the refspecs&#8212;they specify which refs to fetch and which local refs
+  to update.  The example above will fetch
+  all branches that exist in the <code>origin</code> (i.e. any ref that matches
+  the left-hand side of the value, <code>refs/heads/*</code>) and update the
+  corresponding remote-tracking branches in the <code>refs/remotes/origin/*</code>
+  hierarchy.
+</p>
+</li>
+<li>
+<p>
+When <code>git fetch</code> is run with explicit branches and/or tags
+  to fetch on the command line, e.g. <code>git fetch origin master</code>, the
+  &lt;refspec&gt;s given on the command line determine what are to be
+  fetched (e.g. <code>master</code> in the example,
+  which is a short-hand for <code>master:</code>, which in turn means
+  "fetch the <em>master</em> branch but I do not explicitly say what
+  remote-tracking branch to update with it from the command line"),
+  and the example command will
+  fetch <em>only</em> the <em>master</em> branch.  The <code>remote.&lt;repository&gt;.fetch</code>
+  values determine which
+  remote-tracking branch, if any, is updated.  When used in this
+  way, the <code>remote.&lt;repository&gt;.fetch</code> values do not have any
+  effect in deciding <em>what</em> gets fetched (i.e. the values are not
+  used as refspecs when the command-line lists refspecs); they are
+  only used to decide <em>where</em> the refs that are fetched are stored
+  by acting as a mapping.
+</p>
+</li>
+</ul></div>
+<div class="paragraph"><p>The latter use of the <code>remote.&lt;repository&gt;.fetch</code> values can be
+overridden by giving the <code>--refmap=&lt;refspec&gt;</code> parameter(s) on the
+command line.</p></div>
+</div>
+</div>
+<div class="sect1">
+<h2 id="_output">OUTPUT</h2>
+<div class="sectionbody">
+<div class="paragraph"><p>The output of "git fetch" depends on the transport method used; this
+section describes the output when fetching over the Git protocol
+(either locally or via ssh) and Smart HTTP protocol.</p></div>
+<div class="paragraph"><p>The status of the fetch is output in tabular form, with each line
+representing the status of a single ref. Each line is of the form:</p></div>
+<div class="listingblock">
+<div class="content">
+<pre><code> &lt;flag&gt; &lt;summary&gt; &lt;from&gt; -&gt; &lt;to&gt; [&lt;reason&gt;]</code></pre>
+</div></div>
+<div class="paragraph"><p>The status of up-to-date refs is shown only if the --verbose option is
+used.</p></div>
+<div class="paragraph"><p>In compact output mode, specified with configuration variable
+fetch.output, if either entire <code>&lt;from&gt;</code> or <code>&lt;to&gt;</code> is found in the
+other string, it will be substituted with <code>*</code> in the other string. For
+example, <code>master -&gt; origin/master</code> becomes <code>master -&gt; origin/*</code>.</p></div>
+<div class="dlist"><dl>
+<dt class="hdlist1">
+flag
+</dt>
+<dd>
+<p>
+        A single character indicating the status of the ref:
+</p>
+<div class="dlist"><dl>
+<dt class="hdlist1">
+(space)
+</dt>
+<dd>
+<p>
+for a successfully fetched fast-forward;
+</p>
+</dd>
+<dt class="hdlist1">
+<code>+</code>
+</dt>
+<dd>
+<p>
+for a successful forced update;
+</p>
+</dd>
+<dt class="hdlist1">
+<code>-</code>
+</dt>
+<dd>
+<p>
+for a successfully pruned ref;
+</p>
+</dd>
+<dt class="hdlist1">
+<code>t</code>
+</dt>
+<dd>
+<p>
+for a successful tag update;
+</p>
+</dd>
+<dt class="hdlist1">
+<code>*</code>
+</dt>
+<dd>
+<p>
+for a successfully fetched new ref;
+</p>
+</dd>
+<dt class="hdlist1">
+<code>!</code>
+</dt>
+<dd>
+<p>
+for a ref that was rejected or failed to update; and
+</p>
+</dd>
+<dt class="hdlist1">
+<code>=</code>
+</dt>
+<dd>
+<p>
+for a ref that was up to date and did not need fetching.
+</p>
+</dd>
+</dl></div>
+</dd>
+<dt class="hdlist1">
+summary
+</dt>
+<dd>
+<p>
+        For a successfully fetched ref, the summary shows the old and new
+        values of the ref in a form suitable for using as an argument to
+        <code>git log</code> (this is <code>&lt;old&gt;..&lt;new&gt;</code> in most cases, and
+        <code>&lt;old&gt;...&lt;new&gt;</code> for forced non-fast-forward updates).
+</p>
+</dd>
+<dt class="hdlist1">
+from
+</dt>
+<dd>
+<p>
+        The name of the remote ref being fetched from, minus its
+        <code>refs/&lt;type&gt;/</code> prefix. In the case of deletion, the name of
+        the remote ref is "(none)".
+</p>
+</dd>
+<dt class="hdlist1">
+to
+</dt>
+<dd>
+<p>
+        The name of the local ref being updated, minus its
+        <code>refs/&lt;type&gt;/</code> prefix.
+</p>
+</dd>
+<dt class="hdlist1">
+reason
+</dt>
+<dd>
+<p>
+        A human-readable explanation. In the case of successfully fetched
+        refs, no explanation is needed. For a failed ref, the reason for
+        failure is described.
+</p>
+</dd>
+</dl></div>
+</div>
+</div>
+<div class="sect1">
 <h2 id="_examples">EXAMPLES</h2>
 <div class="sectionbody">
 <div class="ulist"><ul>
@@ -1412,6 +1593,22 @@
 <div class="paragraph"><p>The <code>pu</code> branch will be updated even if it is does not fast-forward,
 because it is prefixed with a plus sign; <code>tmp</code> will not be.</p></div>
 </li>
+<li>
+<p>
+Peek at a remote&#8217;s branch, without configuring the remote in your local
+repository:
+</p>
+<div class="listingblock">
+<div class="content">
+<pre><code>$ git fetch git://git.kernel.org/pub/scm/git/git.git maint
+$ git log FETCH_HEAD</code></pre>
+</div></div>
+<div class="paragraph"><p>The first command fetches the <code>maint</code> branch from the repository at
+<code>git://git.kernel.org/pub/scm/git/git.git</code> and the second command uses
+<code>FETCH_HEAD</code> to examine the branch with <a href="git-log.html">git-log(1)</a>.  The fetched
+objects will eventually be removed by git&#8217;s built-in housekeeping (see
+<a href="git-gc.html">git-gc(1)</a>).</p></div>
+</li>
 </ul></div>
 </div>
 </div>
# install git-fetch.html /usr/share/doc/git-doc/git-fetch.html
--- /usr/share/doc/git-doc/git-filter-branch.html	2016-03-21 09:24:28.000000000 -0600
+++ git-filter-branch.html	2016-10-15 00:43:37.068074482 -0600
@@ -791,13 +791,13 @@
 <em>refs/original/</em>.</p></div>
 <div class="paragraph"><p>Note that since this operation is very I/O expensive, it might
 be a good idea to redirect the temporary directory off-disk with the
-<em>-d</em> option, e.g. on tmpfs.  Reportedly the speedup is very noticeable.</p></div>
+<code>-d</code> option, e.g. on tmpfs.  Reportedly the speedup is very noticeable.</p></div>
 <div class="sect2">
 <h3 id="_filters">Filters</h3>
 <div class="paragraph"><p>The filters are applied in the order as listed below.  The &lt;command&gt;
 argument is always evaluated in the shell context using the <em>eval</em> command
 (with the notable exception of the commit filter, for technical reasons).
-Prior to that, the $GIT_COMMIT environment variable will be set to contain
+Prior to that, the <code>$GIT_COMMIT</code> environment variable will be set to contain
 the id of the commit being rewritten.  Also, GIT_AUTHOR_NAME,
 GIT_AUTHOR_EMAIL, GIT_AUTHOR_DATE, GIT_COMMITTER_NAME, GIT_COMMITTER_EMAIL,
 and GIT_COMMITTER_DATE are taken from the current commit and exported to
@@ -946,7 +946,7 @@
         untouched.  This switch allow git-filter-branch to ignore such
         commits.  Though, this switch only applies for commits that have one
         and only one parent, it will hence keep merges points. Also, this
-        option is not compatible with the use of <em>--commit-filter</em>. Though you
+        option is not compatible with the use of <code>--commit-filter</code>. Though you
         just need to use the function <em>git_commit_non_empty_tree "$@"</em> instead
         of the <code>git commit-tree "$@"</code> idiom in your commit filter to make that
         happen.
@@ -994,14 +994,14 @@
 <p>
         Arguments for <em>git rev-list</em>.  All positive refs included by
         these options are rewritten.  You may also specify options
-        such as <em>--all</em>, but you must use <em>--</em> to separate them from
+        such as <code>--all</code>, but you must use <code>--</code> to separate them from
         the <em>git filter-branch</em> options. Implies <a href="#Remap_to_ancestor">[Remap_to_ancestor]</a>.
 </p>
 </dd>
 </dl></div>
 <div class="sect2">
 <h3 id="Remap_to_ancestor">Remap to ancestor</h3>
-<div class="paragraph"><p>By using <a href="rev-list.html">rev-list(1)</a> arguments, e.g., path limiters, you can limit the
+<div class="paragraph"><p>By using <a href="git-rev-list.html">git-rev-list(1)</a> arguments, e.g., path limiters, you can limit the
 set of revisions which get rewritten. However, positive refs on the command
 line are distinguished: we don&#8217;t let them be excluded by such limiters. For
 this purpose, they are instead rewritten to point at the nearest ancestor that
@@ -1255,8 +1255,8 @@
 <p>
 By default The BFG takes full advantage of multi-core machines,
   cleansing commit file-trees in parallel. git-filter-branch cleans
-  commits sequentially (ie in a single-threaded manner), though it
-  <em>is</em> possible to write filters that include their own parallellism,
+  commits sequentially (i.e. in a single-threaded manner), though it
+  <em>is</em> possible to write filters that include their own parallelism,
   in the scripts executed against each commit.
 </p>
 </li>
# install git-filter-branch.html /usr/share/doc/git-doc/git-filter-branch.html
--- /usr/share/doc/git-doc/git-fmt-merge-msg.html	2016-03-21 09:24:28.000000000 -0600
+++ git-fmt-merge-msg.html	2016-10-15 00:43:37.324074487 -0600
@@ -748,7 +748,7 @@
 <h2 id="_synopsis">SYNOPSIS</h2>
 <div class="sectionbody">
 <div class="verseblock">
-<pre class="content"><em>git fmt-merge-msg</em> [-m &lt;message&gt;] [--log[=&lt;n&gt;] | --no-log] &lt;$GIT_DIR/FETCH_HEAD
+<pre class="content"><em>git fmt-merge-msg</em> [-m &lt;message&gt;] [--log[=&lt;n&gt;] | --no-log]
 <em>git fmt-merge-msg</em> [-m &lt;message&gt;] [--log[=&lt;n&gt;] | --no-log] -F &lt;file&gt;</pre>
 <div class="attribution">
 </div></div>
@@ -863,6 +863,18 @@
 </div>
 </div>
 <div class="sect1">
+<h2 id="_example">EXAMPLE</h2>
+<div class="sectionbody">
+<div class="openblock">
+<div class="content">
+<div class="paragraph"><p>$ git fetch origin master
+$ git fmt-merge-msg --log &lt;$GIT_DIR/FETCH_HEAD</p></div>
+</div></div>
+<div class="paragraph"><p>Print a log message describing a merge of the "master" branch from
+the "origin" remote.</p></div>
+</div>
+</div>
+<div class="sect1">
 <h2 id="_see_also">SEE ALSO</h2>
 <div class="sectionbody">
 <div class="paragraph"><p><a href="git-merge.html">git-merge(1)</a></p></div>
# install git-fmt-merge-msg.html /usr/share/doc/git-doc/git-fmt-merge-msg.html
--- /usr/share/doc/git-doc/git-for-each-ref.html	2016-03-21 09:24:28.000000000 -0600
+++ git-for-each-ref.html	2016-10-15 00:43:37.684074494 -0600
@@ -749,7 +749,9 @@
 <div class="sectionbody">
 <div class="verseblock">
 <pre class="content"><em>git for-each-ref</em> [--count=&lt;count&gt;] [--shell|--perl|--python|--tcl]
-                   [(--sort=&lt;key&gt;)&#8230;] [--format=&lt;format&gt;] [&lt;pattern&gt;&#8230;]</pre>
+                   [(--sort=&lt;key&gt;)&#8230;] [--format=&lt;format&gt;] [&lt;pattern&gt;&#8230;]
+                   [--points-at &lt;object&gt;] [(--merged | --no-merged) [&lt;object&gt;]]
+                   [--contains [&lt;object&gt;]]</pre>
 <div class="attribution">
 </div></div>
 </div>
@@ -839,6 +841,41 @@
         a scriptlet that can directly be `eval`ed.
 </p>
 </dd>
+<dt class="hdlist1">
+--points-at &lt;object&gt;
+</dt>
+<dd>
+<p>
+        Only list refs which points at the given object.
+</p>
+</dd>
+<dt class="hdlist1">
+--merged [&lt;object&gt;]
+</dt>
+<dd>
+<p>
+        Only list refs whose tips are reachable from the
+        specified commit (HEAD if not specified).
+</p>
+</dd>
+<dt class="hdlist1">
+--no-merged [&lt;object&gt;]
+</dt>
+<dd>
+<p>
+        Only list refs whose tips are not reachable from the
+        specified commit (HEAD if not specified).
+</p>
+</dd>
+<dt class="hdlist1">
+--contains [&lt;object&gt;]
+</dt>
+<dd>
+<p>
+        Only list refs which contain the specified commit (HEAD if not
+        specified).
+</p>
+</dd>
 </dl></div>
 </div>
 </div>
@@ -858,7 +895,11 @@
         The name of the ref (the part after $GIT_DIR/).
         For a non-ambiguous short name of the ref append <code>:short</code>.
         The option core.warnAmbiguousRefs is used to select the strict
-        abbreviation mode.
+        abbreviation mode. If <code>strip=&lt;N&gt;</code> is appended, strips <code>&lt;N&gt;</code>
+        slash-separated path components from the front of the refname
+        (e.g., <code>%(refname:strip=2)</code> turns <code>refs/tags/foo</code> into <code>foo</code>.
+        <code>&lt;N&gt;</code> must be a positive integer.  If a displayed ref has fewer
+        components than <code>&lt;N&gt;</code>, the command aborts with an error.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -901,6 +942,17 @@
 </p>
 </dd>
 <dt class="hdlist1">
+push
+</dt>
+<dd>
+<p>
+        The name of a local ref which represents the <code>@{push}</code> location
+        for the displayed ref. Respects <code>:short</code>, <code>:track</code>, and
+        <code>:trackshort</code> options as <code>upstream</code> does. Produces an empty
+        string if no <code>@{push}</code> ref is configured.
+</p>
+</dd>
+<dt class="hdlist1">
 HEAD
 </dt>
 <dd>
@@ -918,10 +970,34 @@
         are described in <code>color.branch.*</code>.
 </p>
 </dd>
+<dt class="hdlist1">
+align
+</dt>
+<dd>
+<p>
+        Left-, middle-, or right-align the content between
+        %(align:&#8230;) and %(end). The "align:" is followed by
+        <code>width=&lt;width&gt;</code> and <code>position=&lt;position&gt;</code> in any order
+        separated by a comma, where the <code>&lt;position&gt;</code> is either left,
+        right or middle, default being left and <code>&lt;width&gt;</code> is the total
+        length of the content with alignment. For brevity, the
+        "width=" and/or "position=" prefixes may be omitted, and bare
+        &lt;width&gt; and &lt;position&gt; used instead.  For instance,
+        <code>%(align:&lt;width&gt;,&lt;position&gt;)</code>. If the contents length is more
+        than the width then no alignment is performed. If used with
+        <code>--quote</code> everything in between %(align:&#8230;) and %(end) is
+        quoted, but if nested then only the topmost level performs
+        quoting.
+</p>
+</dd>
 </dl></div>
 <div class="paragraph"><p>In addition to the above, for commit and tag objects, the header
 field names (<code>tree</code>, <code>parent</code>, <code>object</code>, <code>type</code>, and <code>tag</code>) can
 be used to specify the value in the header field.</p></div>
+<div class="paragraph"><p>For commit and tag objects, the special <code>creatordate</code> and <code>creator</code>
+fields will correspond to the appropriate date or name-email-date tuple
+from the <code>committer</code> or <code>tagger</code> fields depending on the object type.
+These are intended for working on a mix of annotated and lightweight tags.</p></div>
 <div class="paragraph"><p>Fields that have name-email-date tuple as its value (<code>author</code>,
 <code>committer</code>, and <code>tagger</code>) can be suffixed with <code>name</code>, <code>email</code>,
 and <code>date</code> to extract the named component.</p></div>
@@ -929,17 +1005,19 @@
 Its first line is <code>contents:subject</code>, where subject is the concatenation
 of all lines of the commit message up to the first blank line.  The next
 line is <em>contents:body</em>, where body is all of the lines after the first
-blank line.  Finally, the optional GPG signature is <code>contents:signature</code>.</p></div>
-<div class="paragraph"><p>For sorting purposes, fields with numeric values sort in numeric
-order (<code>objectsize</code>, <code>authordate</code>, <code>committerdate</code>, <code>taggerdate</code>).
+blank line.  The optional GPG signature is <code>contents:signature</code>.  The
+first <code>N</code> lines of the message is obtained using <code>contents:lines=N</code>.</p></div>
+<div class="paragraph"><p>For sorting purposes, fields with numeric values sort in numeric order
+(<code>objectsize</code>, <code>authordate</code>, <code>committerdate</code>, <code>creatordate</code>, <code>taggerdate</code>).
 All other fields are used to sort in their byte-value order.</p></div>
+<div class="paragraph"><p>There is also an option to sort by versions, this can be done by using
+the fieldname <code>version:refname</code> or its alias <code>v:refname</code>.</p></div>
 <div class="paragraph"><p>In any case, a field name that refers to a field inapplicable to
 the object referred by the ref does not cause an error.  It
 returns an empty string instead.</p></div>
 <div class="paragraph"><p>As a special case for the date-type fields, you may specify a format for
-the date by adding one of <code>:default</code>, <code>:relative</code>, <code>:short</code>, <code>:local</code>,
-<code>:iso8601</code>, <code>:rfc2822</code> or <code>:raw</code> to the end of the fieldname; e.g.
-<code>%(taggerdate:relative)</code>.</p></div>
+the date by adding <code>:</code> followed by date format name (see the
+values the <code>--date</code> option to <a href="git-rev-list.html">git-rev-list(1)</a> takes).</p></div>
 </div>
 </div>
 <div class="sect1">
# install git-for-each-ref.html /usr/share/doc/git-doc/git-for-each-ref.html
--- /usr/share/doc/git-doc/git-format-patch.html	2016-03-21 09:24:28.000000000 -0600
+++ git-format-patch.html	2016-10-15 00:43:38.600074511 -0600
@@ -753,6 +753,7 @@
                    [(--attach|--inline)[=&lt;boundary&gt;] | --no-attach]
                    [-s | --signoff]
                    [--signature=&lt;signature&gt; | --no-signature]
+                   [--signature-file=&lt;file&gt;]
                    [-n | --numbered | -N | --no-numbered]
                    [--start-number &lt;n&gt;] [--numbered-files]
                    [--in-reply-to=Message-Id] [--suffix=.&lt;sfx&gt;]
@@ -802,7 +803,11 @@
 The names of the output files are printed to standard
 output, unless the <code>--stdout</code> option is specified.</p></div>
 <div class="paragraph"><p>If <code>-o</code> is specified, output files are created in &lt;dir&gt;.  Otherwise
-they are created in the current working directory.</p></div>
+they are created in the current working directory. The default path
+can be set with the <code>format.outputDirectory</code> configuration option.
+The <code>-o</code> option takes precedence over <code>format.outputDirectory</code>.
+To store patches in the current working directory even when
+<code>format.outputDirectory</code> points elsewhere, use <code>-o .</code>.</p></div>
 <div class="paragraph"><p>By default, the subject of a single patch is "[PATCH] " followed by
 the concatenation of lines from the commit message up to the first blank
 line (see the DISCUSSION section of <a href="git-commit.html">git-commit(1)</a>).</p></div>
@@ -831,27 +836,29 @@
 </p>
 </dd>
 <dt class="hdlist1">
--s
+-U&lt;n&gt;
 </dt>
 <dt class="hdlist1">
---no-patch
+--unified=&lt;n&gt;
 </dt>
 <dd>
 <p>
-        Suppress diff output. Useful for commands like <code>git show</code> that
-        show the patch by default, or to cancel the effect of <code>--patch</code>.
+        Generate diffs with &lt;n&gt; lines of context instead of
+        the usual three.
 </p>
 </dd>
 <dt class="hdlist1">
--U&lt;n&gt;
+--compaction-heuristic
 </dt>
 <dt class="hdlist1">
---unified=&lt;n&gt;
+--no-compaction-heuristic
 </dt>
 <dd>
 <p>
-        Generate diffs with &lt;n&gt; lines of context instead of
-        the usual three.
+        These are to help debugging and tuning an experimental
+        heuristic (which is off by default) that shifts the hunk
+        boundary in an attempt to make the resulting patch easier
+        to read.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1187,7 +1194,7 @@
 <p>
         Omit the preimage for deletes, i.e. print only the header but not
         the diff between the preimage and <code>/dev/null</code>. The resulting patch
-        is not meant to be applied with <code>patch</code> nor <code>git apply</code>; this is
+        is not meant to be applied with <code>patch</code> or <code>git apply</code>; this is
         solely for people who want to just concentrate on reviewing the
         text after the change. In addition, the output obviously lack
         enough information to apply such a patch in reverse, even manually,
@@ -1215,8 +1222,8 @@
 <p>
         Output the patch in the order specified in the
         &lt;orderfile&gt;, which has one shell glob pattern per line.
-        This overrides the <code>diff.orderfile</code> configuration variable
-        (see <a href="git-config.html">git-config(1)</a>).  To cancel <code>diff.orderfile</code>,
+        This overrides the <code>diff.orderFile</code> configuration variable
+        (see <a href="git-config.html">git-config(1)</a>).  To cancel <code>diff.orderFile</code>,
         use <code>-O/dev/null</code>.
 </p>
 </dd>
@@ -1456,6 +1463,7 @@
 <p>
         Add <code>Signed-off-by:</code> line to the commit message, using
         the committer identity of yourself.
+        See the signoff option in <a href="git-commit.html">git-commit(1)</a> for more information.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1514,9 +1522,9 @@
 series, where the head is chosen from the cover letter, the
 <code>--in-reply-to</code>, and the first patch mail, in this order.  <em>deep</em>
 threading makes every mail a reply to the previous one.</p></div>
-<div class="paragraph"><p>The default is <code>--no-thread</code>, unless the <em>format.thread</em> configuration
+<div class="paragraph"><p>The default is <code>--no-thread</code>, unless the <code>format.thread</code> configuration
 is set.  If <code>--thread</code> is specified without a style, it defaults to the
-style specified by <em>format.thread</em> if any, or else <code>shallow</code>.</p></div>
+style specified by <code>format.thread</code> if any, or else <code>shallow</code>.</p></div>
 <div class="paragraph"><p>Beware that the default for <em>git send-email</em> is to thread emails
 itself.  If you want <code>git format-patch</code> to take care of threading, you
 will want to ensure that threading is disabled for <code>git send-email</code>.</p></div>
@@ -1563,7 +1571,7 @@
 <dd>
 <p>
         Mark the series as the &lt;n&gt;-th iteration of the topic. The
-        output filenames have <code>v&lt;n&gt;</code> pretended to them, and the
+        output filenames have <code>v&lt;n&gt;</code> prepended to them, and the
         subject prefix ("PATCH" by default, but configurable via the
         <code>--subject-prefix</code> option) has ` v&lt;n&gt;` appended to it.  E.g.
         <code>--reroll-count=4</code> may produce <code>v4-0001-add-makefile.patch</code>
@@ -1632,7 +1640,7 @@
 <dd>
 <p>
         In addition to the patches, generate a cover letter file
-        containing the shortlog and the overall diffstat.  You can
+        containing the branch description, shortlog and the overall diffstat.  You can
         fill in a description in the file before sending it out.
 </p>
 </dd>
@@ -1664,6 +1672,14 @@
 </p>
 </dd>
 <dt class="hdlist1">
+--signature-file=&lt;file&gt;
+</dt>
+<dd>
+<p>
+        Works just like --signature except the signature is read from a file.
+</p>
+</dd>
+<dt class="hdlist1">
 --suffix=.&lt;sfx&gt;
 </dt>
 <dd>
@@ -1699,6 +1715,25 @@
 </p>
 </dd>
 <dt class="hdlist1">
+--zero-commit
+</dt>
+<dd>
+<p>
+  Output an all-zero hash in each patch&#8217;s From header instead
+  of the hash of the commit.
+</p>
+</dd>
+<dt class="hdlist1">
+--base=&lt;commit&gt;
+</dt>
+<dd>
+<p>
+        Record the base tree information to identify the state the
+        patch series applies to.  See the BASE TREE INFORMATION section
+        below for details.
+</p>
+</dd>
+<dt class="hdlist1">
 --root
 </dt>
 <dd>
@@ -1724,13 +1759,13 @@
 <div class="content">
 <pre><code>[format]
         headers = "Organization: git-foo\n"
-        subjectprefix = CHANGE
+        subjectPrefix = CHANGE
         suffix = .txt
         numbered = auto
         to = &lt;email&gt;
         cc = &lt;email&gt;
         attach [ = mime-boundary-string ]
-        signoff = true
+        signOff = true
         coverletter = auto</code></pre>
 </div></div>
 </div>
@@ -2028,6 +2063,57 @@
 </div>
 </div>
 <div class="sect1">
+<h2 id="_base_tree_information">BASE TREE INFORMATION</h2>
+<div class="sectionbody">
+<div class="paragraph"><p>The base tree information block is used for maintainers or third party
+testers to know the exact state the patch series applies to. It consists
+of the <em>base commit</em>, which is a well-known commit that is part of the
+stable part of the project history everybody else works off of, and zero
+or more <em>prerequisite patches</em>, which are well-known patches in flight
+that is not yet part of the <em>base commit</em> that need to be applied on top
+of <em>base commit</em> in topological order before the patches can be applied.</p></div>
+<div class="paragraph"><p>The <em>base commit</em> is shown as "base-commit: " followed by the 40-hex of
+the commit object name.  A <em>prerequisite patch</em> is shown as
+"prerequisite-patch-id: " followed by the 40-hex <em>patch id</em>, which can
+be obtained by passing the patch through the <code>git patch-id --stable</code>
+command.</p></div>
+<div class="paragraph"><p>Imagine that on top of the public commit P, you applied well-known
+patches X, Y and Z from somebody else, and then built your three-patch
+series A, B, C, the history would be like:</p></div>
+<div class="literalblock">
+<div class="content">
+<pre><code>---P---X---Y---Z---A---B---C</code></pre>
+</div></div>
+<div class="paragraph"><p>With <code>git format-patch --base=P -3 C</code> (or variants thereof, e.g. with
+<code>--cover-letter</code> of using <code>Z..C</code> instead of <code>-3 C</code> to specify the
+range), the base tree information block is shown at the end of the
+first message the command outputs (either the first patch, or the
+cover letter), like this:</p></div>
+<div class="listingblock">
+<div class="content">
+<pre><code>base-commit: P
+prerequisite-patch-id: X
+prerequisite-patch-id: Y
+prerequisite-patch-id: Z</code></pre>
+</div></div>
+<div class="paragraph"><p>For non-linear topology, such as</p></div>
+<div class="literalblock">
+<div class="content">
+<pre><code>---P---X---A---M---C
+    \         /
+     Y---Z---B</code></pre>
+</div></div>
+<div class="paragraph"><p>You can also use <code>git format-patch --base=P -3 C</code> to generate patches
+for A, B and C, and the identifiers for P, X, Y, Z are appended at the
+end of the first message.</p></div>
+<div class="paragraph"><p>If set <code>--base=auto</code> in cmdline, it will track base commit automatically,
+the base commit will be the merge base of tip commit of the remote-tracking
+branch and revision-range specified in cmdline.
+For a local branch, you need to track a remote branch by <code>git branch
+--set-upstream-to</code> before using this option.</p></div>
+</div>
+</div>
+<div class="sect1">
 <h2 id="_examples">EXAMPLES</h2>
 <div class="sectionbody">
 <div class="ulist"><ul>
# install git-format-patch.html /usr/share/doc/git-doc/git-format-patch.html
--- /usr/share/doc/git-doc/git-fsck.html	2016-03-21 09:24:28.000000000 -0600
+++ git-fsck.html	2016-10-15 00:43:39.108074520 -0600
@@ -750,7 +750,8 @@
 <div class="verseblock">
 <pre class="content"><em>git fsck</em> [--tags] [--root] [--unreachable] [--cache] [--no-reflogs]
          [--[no-]full] [--strict] [--verbose] [--lost-found]
-         [--[no-]dangling] [--[no-]progress] [&lt;object&gt;*]</pre>
+         [--[no-]dangling] [--[no-]progress] [--connectivity-only]
+         [--[no-]name-objects] [&lt;object&gt;*]</pre>
 <div class="attribution">
 </div></div>
 </div>
@@ -846,6 +847,16 @@
 </p>
 </dd>
 <dt class="hdlist1">
+--connectivity-only
+</dt>
+<dd>
+<p>
+        Check only the connectivity of tags, commits and tree objects. By
+        avoiding to unpack blobs, this speeds up the operation, at the
+        expense of missing corrupt objects or other problematic issues.
+</p>
+</dd>
+<dt class="hdlist1">
 --strict
 </dt>
 <dd>
@@ -878,6 +889,17 @@
 </p>
 </dd>
 <dt class="hdlist1">
+--name-objects
+</dt>
+<dd>
+<p>
+        When displaying names of reachable objects, in addition to the
+        SHA-1 also display a name that describes <strong>how</strong> they are reachable,
+        compatible with <a href="git-rev-parse.html">git-rev-parse(1)</a>, e.g.
+        <code>HEAD@{1234567890}~25^2:src/</code>.
+</p>
+</dd>
+<dt class="hdlist1">
 --[no-]progress
 </dt>
 <dd>
@@ -898,7 +920,7 @@
 <div class="paragraph"><p>git-fsck tests SHA-1 and general object sanity, and it does full tracking
 of the resulting reachability and everything else. It prints out any
 corruption it finds (missing or bad objects), and if you use the
-<em>--unreachable</em> flag it will also print out objects that exist but that
+<code>--unreachable</code> flag it will also print out objects that exist but that
 aren&#8217;t reachable from any of the specified head nodes (or the default
 set, as mentioned above).</p></div>
 <div class="paragraph"><p>Any corrupt objects you will have to find in backups or other archives
# install git-fsck.html /usr/share/doc/git-doc/git-fsck.html
--- /usr/share/doc/git-doc/git-gc.html	2016-03-21 09:24:28.000000000 -0600
+++ git-gc.html	2016-10-15 00:43:39.408074526 -0600
@@ -805,10 +805,10 @@
 all loose objects are combined into a single pack using
 <code>git repack -d -l</code>.  Setting the value of <code>gc.auto</code> to 0
 disables automatic packing of loose objects.</p></div>
-<div class="paragraph"><p>If the number of packs exceeds the value of <code>gc.autopacklimit</code>,
+<div class="paragraph"><p>If the number of packs exceeds the value of <code>gc.autoPackLimit</code>,
 then existing packs (except those marked with a <code>.keep</code> file)
 are consolidated into a single pack by using the <code>-A</code> option of
-<em>git repack</em>. Setting <code>gc.autopacklimit</code> to 0 disables
+<em>git repack</em>. Setting <code>gc.autoPackLimit</code> to 0 disables
 automatic consolidation of packs.</p></div>
 </dd>
 <dt class="hdlist1">
@@ -818,8 +818,11 @@
 <p>
         Prune loose objects older than date (default is 2 weeks ago,
         overridable by the config variable <code>gc.pruneExpire</code>).
-        --prune=all prunes loose objects regardless of their age.
-        --prune is on by default.
+        --prune=all prunes loose objects regardless of their age (do
+        not use --prune=all unless you know exactly what you are doing.
+        Unless the repository is quiescent, you will lose newly created
+        objects that haven&#8217;t been anchored with the refs and end up
+        corrupting your repository).  --prune is on by default.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -853,12 +856,12 @@
 <div class="sect1">
 <h2 id="_configuration">Configuration</h2>
 <div class="sectionbody">
-<div class="paragraph"><p>The optional configuration variable <em>gc.reflogExpire</em> can be
+<div class="paragraph"><p>The optional configuration variable <code>gc.reflogExpire</code> can be
 set to indicate how long historical entries within each branch&#8217;s
 reflog should remain available in this repository.  The setting is
 expressed as a length of time, for example <em>90 days</em> or <em>3 months</em>.
 It defaults to <em>90 days</em>.</p></div>
-<div class="paragraph"><p>The optional configuration variable <em>gc.reflogExpireUnreachable</em>
+<div class="paragraph"><p>The optional configuration variable <code>gc.reflogExpireUnreachable</code>
 can be set to indicate how long historical reflog entries which
 are not part of the current branch should remain available in
 this repository.  These types of entries are generally created as
@@ -873,25 +876,27 @@
 <div class="content">
 <pre><code>[gc "refs/remotes/*"]
         reflogExpire = never
-        reflogexpireUnreachable = 3 days</code></pre>
+        reflogExpireUnreachable = 3 days</code></pre>
 </div></div>
-<div class="paragraph"><p>The optional configuration variable <em>gc.rerereresolved</em> indicates
+<div class="paragraph"><p>The optional configuration variable <code>gc.rerereResolved</code> indicates
 how long records of conflicted merge you resolved earlier are
 kept.  This defaults to 60 days.</p></div>
-<div class="paragraph"><p>The optional configuration variable <em>gc.rerereunresolved</em> indicates
+<div class="paragraph"><p>The optional configuration variable <code>gc.rerereUnresolved</code> indicates
 how long records of conflicted merge you have not resolved are
 kept.  This defaults to 15 days.</p></div>
-<div class="paragraph"><p>The optional configuration variable <em>gc.packrefs</em> determines if
+<div class="paragraph"><p>The optional configuration variable <code>gc.packRefs</code> determines if
 <em>git gc</em> runs <em>git pack-refs</em>. This can be set to "notbare" to enable
 it within all non-bare repos or it can be set to a boolean value.
 This defaults to true.</p></div>
-<div class="paragraph"><p>The optional configuration variable <em>gc.aggressiveWindow</em> controls how
+<div class="paragraph"><p>The optional configuration variable &#8216;gc.aggressiveWindow` controls how
 much time is spent optimizing the delta compression of the objects in
 the repository when the --aggressive option is specified.  The larger
 the value, the more time is spent optimizing the delta compression.  See
-the documentation for the --window' option in <a href="git-repack.html">git-repack(1)</a> for
+the documentation for the --window&#8217; option in <a href="git-repack.html">git-repack(1)</a> for
 more details.  This defaults to 250.</p></div>
-<div class="paragraph"><p>The optional configuration variable <em>gc.pruneExpire</em> controls how old
+<div class="paragraph"><p>Similarly, the optional configuration variable <code>gc.aggressiveDepth</code>
+controls --depth option in <a href="git-repack.html">git-repack(1)</a>. This defaults to 250.</p></div>
+<div class="paragraph"><p>The optional configuration variable <code>gc.pruneExpire</code> controls how old
 the unreferenced loose objects have to be before they are pruned.  The
 default is "2 weeks ago".</p></div>
 </div>
# install git-gc.html /usr/share/doc/git-doc/git-gc.html
--- /usr/share/doc/git-doc/git-get-tar-commit-id.html	2016-03-21 09:24:28.000000000 -0600
+++ git-get-tar-commit-id.html	2016-10-15 00:43:39.604074530 -0600
@@ -748,7 +748,7 @@
 <h2 id="_synopsis">SYNOPSIS</h2>
 <div class="sectionbody">
 <div class="verseblock">
-<pre class="content"><em>git get-tar-commit-id</em> &lt; &lt;tarfile&gt;</pre>
+<pre class="content"><em>git get-tar-commit-id</em></pre>
 <div class="attribution">
 </div></div>
 </div>
@@ -756,11 +756,12 @@
 <div class="sect1">
 <h2 id="_description">DESCRIPTION</h2>
 <div class="sectionbody">
-<div class="paragraph"><p>Acts as a filter, extracting the commit ID stored in archives created by
-<em>git archive</em>.  It reads only the first 1024 bytes of input, thus its
-runtime is not influenced by the size of &lt;tarfile&gt; very much.</p></div>
+<div class="paragraph"><p>Read a tar archive created by <em>git archive</em> from the standard input
+and extract the commit ID stored in it.  It reads only the first
+1024 bytes of input, thus its runtime is not influenced by the size
+of the tar archive very much.</p></div>
 <div class="paragraph"><p>If no commit ID is found, <em>git get-tar-commit-id</em> quietly exists with a
-return code of 1.  This can happen if &lt;tarfile&gt; had not been created
+return code of 1.  This can happen if the archive had not been created
 using <em>git archive</em> or if the first parameter of <em>git archive</em> had been
 a tree ID instead of a commit ID or tag.</p></div>
 </div>
# install git-get-tar-commit-id.html /usr/share/doc/git-doc/git-get-tar-commit-id.html
--- /usr/share/doc/git-doc/git-grep.html	2016-03-21 09:24:28.000000000 -0600
+++ git-grep.html	2016-10-15 00:43:40.068074538 -0600
@@ -762,6 +762,7 @@
            [--break] [--heading] [-p | --show-function]
            [-A &lt;post-context&gt;] [-B &lt;pre-context&gt;] [-C &lt;context&gt;]
            [-W | --function-context]
+           [--threads &lt;num&gt;]
            [-f &lt;file&gt;] [-e] &lt;pattern&gt;
            [--and|--or|--not|(|)|-e &lt;pattern&gt;&#8230;]
            [ [--[no-]exclude-standard] [--cached | --no-index | --untracked] | &lt;tree&gt;&#8230;]
@@ -788,7 +789,7 @@
 </dt>
 <dd>
 <p>
-        If set to true, enable <em>-n</em> option by default.
+        If set to true, enable <code>-n</code> option by default.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -797,8 +798,8 @@
 <dd>
 <p>
         Set the default matching behavior. Using a value of <em>basic</em>, <em>extended</em>,
-        <em>fixed</em>, or <em>perl</em> will enable the <em>--basic-regexp</em>, <em>--extended-regexp</em>,
-        <em>--fixed-strings</em>, or <em>--perl-regexp</em> option accordingly, while the
+        <em>fixed</em>, or <em>perl</em> will enable the <code>--basic-regexp</code>, <code>--extended-regexp</code>,
+        <code>--fixed-strings</code>, or <code>--perl-regexp</code> option accordingly, while the
         value <em>default</em> will return to the default matching behavior.
 </p>
 </dd>
@@ -807,11 +808,37 @@
 </dt>
 <dd>
 <p>
-        If set to true, enable <em>--extended-regexp</em> option by default. This
-        option is ignored when the <em>grep.patternType</em> option is set to a value
+        If set to true, enable <code>--extended-regexp</code> option by default. This
+        option is ignored when the <code>grep.patternType</code> option is set to a value
         other than <em>default</em>.
 </p>
 </dd>
+<dt class="hdlist1">
+grep.threads
+</dt>
+<dd>
+<p>
+        Number of grep worker threads to use.  If unset (or set to 0),
+        8 threads are used by default (for now).
+</p>
+</dd>
+<dt class="hdlist1">
+grep.fullName
+</dt>
+<dd>
+<p>
+        If set to true, enable <code>--full-name</code> option by default.
+</p>
+</dd>
+<dt class="hdlist1">
+grep.fallbackToNoIndex
+</dt>
+<dd>
+<p>
+        If set to true, fall back to git grep --no-index if git grep
+        is executed outside of a git repository.  Defaults to false.
+</p>
+</dd>
 </dl></div>
 </div>
 </div>
@@ -1051,17 +1078,20 @@
 </p>
 </dd>
 <dt class="hdlist1">
--O [&lt;pager&gt;]
+-O[&lt;pager&gt;]
 </dt>
 <dt class="hdlist1">
---open-files-in-pager [&lt;pager&gt;]
+--open-files-in-pager[=&lt;pager&gt;]
 </dt>
 <dd>
 <p>
         Open the matching files in the pager (not the output of <em>grep</em>).
         If the pager happens to be "less" or "vi", and the user
         specified only one pattern, the first file is positioned at
-        the first match automatically.
+        the first match automatically. The <code>pager</code> argument is
+        optional; if specified, it must be stuck to the option
+        without a space. If <code>pager</code> is unspecified, the default pager
+        will be used (see <code>core.pager</code> in <a href="git-config.html">git-config(1)</a>).
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1193,6 +1223,15 @@
 </p>
 </dd>
 <dt class="hdlist1">
+--threads &lt;num&gt;
+</dt>
+<dd>
+<p>
+        Number of grep worker threads to use.
+        See <code>grep.threads</code> in <em>CONFIGURATION</em> for more information.
+</p>
+</dd>
+<dt class="hdlist1">
 -f &lt;file&gt;
 </dt>
 <dd>
# install git-grep.html /usr/share/doc/git-doc/git-grep.html
--- /usr/share/doc/git-doc/git-gui.html	2016-03-21 09:24:28.000000000 -0600
+++ git-gui.html	2016-10-15 00:43:40.356074544 -0600
@@ -789,7 +789,7 @@
 <dd>
 <p>
         Start a tree browser showing all files in the specified
-        commit (or <em>HEAD</em> by default).  Files selected through the
+        commit (or <code>HEAD</code> by default).  Files selected through the
         browser are opened in the blame viewer.
 </p>
 </dd>
# install git-gui.html /usr/share/doc/git-doc/git-gui.html
--- /usr/share/doc/git-doc/git-hash-object.html	2016-03-21 09:24:28.000000000 -0600
+++ git-hash-object.html	2016-10-15 00:43:40.584074548 -0600
@@ -748,8 +748,8 @@
 <h2 id="_synopsis">SYNOPSIS</h2>
 <div class="sectionbody">
 <div class="verseblock">
-<pre class="content"><em>git hash-object</em> [-t &lt;type&gt;] [-w] [--path=&lt;file&gt;|--no-filters] [--stdin] [--] &lt;file&gt;&#8230;
-<em>git hash-object</em> [-t &lt;type&gt;] [-w] --stdin-paths [--no-filters] &lt; &lt;list-of-paths&gt;</pre>
+<pre class="content"><em>git hash-object</em> [-t &lt;type&gt;] [-w] [--path=&lt;file&gt;|--no-filters] [--stdin [--literally]] [--] &lt;file&gt;&#8230;
+<em>git hash-object</em> [-t &lt;type&gt;] [-w] --stdin-paths [--no-filters]</pre>
 <div class="attribution">
 </div></div>
 </div>
@@ -799,7 +799,8 @@
 </dt>
 <dd>
 <p>
-        Read file names from stdin instead of from the command-line.
+        Read file names from the standard input, one per line, instead
+        of from the command-line.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -825,7 +826,18 @@
         Hash the contents as is, ignoring any input filter that would
         have been chosen by the attributes mechanism, including the end-of-line
         conversion. If the file is read from standard input then this
-        is always implied, unless the --path option is given.
+        is always implied, unless the <code>--path</code> option is given.
+</p>
+</dd>
+<dt class="hdlist1">
+--literally
+</dt>
+<dd>
+<p>
+        Allow <code>--stdin</code> to hash any garbage into a loose object which might not
+        otherwise pass standard object parsing or git-fsck checks. Useful for
+        stress-testing Git itself or reproducing characteristics of corrupt or
+        bogus objects encountered in the wild.
 </p>
 </dd>
 </dl></div>
# install git-hash-object.html /usr/share/doc/git-doc/git-hash-object.html
--- /usr/share/doc/git-doc/git-help.html	2016-03-21 09:24:28.000000000 -0600
+++ git-help.html	2016-10-15 00:43:40.916074554 -0600
@@ -760,9 +760,9 @@
 <div class="paragraph"><p>With no options and no COMMAND or GUIDE given, the synopsis of the <em>git</em>
 command and a list of the most commonly used Git commands are printed
 on the standard output.</p></div>
-<div class="paragraph"><p>If the option <em>--all</em> or <em>-a</em> is given, all available commands are
+<div class="paragraph"><p>If the option <code>--all</code> or <code>-a</code> is given, all available commands are
 printed on the standard output.</p></div>
-<div class="paragraph"><p>If the option <em>--guide</em> or <em>-g</em> is given, a list of the useful
+<div class="paragraph"><p>If the option <code>--guide</code> or <code>-g</code> is given, a list of the useful
 Git guides is also printed on the standard output.</p></div>
 <div class="paragraph"><p>If a command, or a guide, is given, a manual page for that command or
 guide is brought up. The <em>man</em> program is used by default for this
@@ -824,10 +824,10 @@
 <p>
         Display manual page for the command in the <em>man</em> format. This
         option may be used to override a value set in the
-        <em>help.format</em> configuration variable.
+        <code>help.format</code> configuration variable.
 </p>
 <div class="paragraph"><p>By default the <em>man</em> program will be used to display the manual page,
-but the <em>man.viewer</em> configuration variable may be used to choose
+but the <code>man.viewer</code> configuration variable may be used to choose
 other display programs (see below).</p></div>
 </dd>
 <dt class="hdlist1">
@@ -842,7 +842,7 @@
         format. A web browser will be used for that purpose.
 </p>
 <div class="paragraph"><p>The web browser can be specified using the configuration variable
-<em>help.browser</em>, or <em>web.browser</em> if the former is not set. If none of
+<code>help.browser</code>, or <code>web.browser</code> if the former is not set. If none of
 these config variables is set, the <em>git web&#45;&#45;browse</em> helper script
 (called by <em>git help</em>) will pick a suitable default. See
 <a href="git-web&#45;&#45;browse.html">git-web&#45;&#45;browse(1)</a> for more information about this.</p></div>
@@ -855,9 +855,9 @@
 <div class="sectionbody">
 <div class="sect2">
 <h3 id="_help_format">help.format</h3>
-<div class="paragraph"><p>If no command line option is passed, the <em>help.format</em> configuration
+<div class="paragraph"><p>If no command-line option is passed, the <code>help.format</code> configuration
 variable will be checked. The following values are supported for this
-variable; they make <em>git help</em> behave as their corresponding command
+variable; they make <em>git help</em> behave as their corresponding command-
 line option:</p></div>
 <div class="ulist"><ul>
 <li>
@@ -879,15 +879,15 @@
 </div>
 <div class="sect2">
 <h3 id="_help_browser_web_browser_and_browser_lt_tool_gt_path">help.browser, web.browser and browser.&lt;tool&gt;.path</h3>
-<div class="paragraph"><p>The <em>help.browser</em>, <em>web.browser</em> and <em>browser.&lt;tool&gt;.path</em> will also
-be checked if the <em>web</em> format is chosen (either by command line
+<div class="paragraph"><p>The <code>help.browser</code>, <code>web.browser</code> and <code>browser.&lt;tool&gt;.path</code> will also
+be checked if the <em>web</em> format is chosen (either by command-line
 option or configuration variable). See <em>-w|--web</em> in the OPTIONS
 section above and <a href="git-web&#45;&#45;browse.html">git-web&#45;&#45;browse(1)</a>.</p></div>
 </div>
 <div class="sect2">
 <h3 id="_man_viewer">man.viewer</h3>
-<div class="paragraph"><p>The <em>man.viewer</em> config variable will be checked if the <em>man</em> format
-is chosen. The following values are currently supported:</p></div>
+<div class="paragraph"><p>The <code>man.viewer</code> configuration variable will be checked if the <em>man</em>
+format is chosen. The following values are currently supported:</p></div>
 <div class="ulist"><ul>
 <li>
 <p>
@@ -908,8 +908,8 @@
 </li>
 </ul></div>
 <div class="paragraph"><p>Values for other tools can be used if there is a corresponding
-<em>man.&lt;tool&gt;.cmd</em> configuration entry (see below).</p></div>
-<div class="paragraph"><p>Multiple values may be given to the <em>man.viewer</em> configuration
+<code>man.&lt;tool&gt;.cmd</code> configuration entry (see below).</p></div>
+<div class="paragraph"><p>Multiple values may be given to the <code>man.viewer</code> configuration
 variable. Their corresponding programs will be tried in the order
 listed in the configuration file.</p></div>
 <div class="paragraph"><p>For example, this configuration:</p></div>
@@ -919,32 +919,32 @@
                 viewer = konqueror
                 viewer = woman</code></pre>
 </div></div>
-<div class="paragraph"><p>will try to use konqueror first. But this may fail (for example if
+<div class="paragraph"><p>will try to use konqueror first. But this may fail (for example, if
 DISPLAY is not set) and in that case emacs' woman mode will be tried.</p></div>
 <div class="paragraph"><p>If everything fails, or if no viewer is configured, the viewer specified
-in the GIT_MAN_VIEWER environment variable will be tried.  If that
+in the <code>GIT_MAN_VIEWER</code> environment variable will be tried.  If that
 fails too, the <em>man</em> program will be tried anyway.</p></div>
 </div>
 <div class="sect2">
 <h3 id="_man_lt_tool_gt_path">man.&lt;tool&gt;.path</h3>
 <div class="paragraph"><p>You can explicitly provide a full path to your preferred man viewer by
-setting the configuration variable <em>man.&lt;tool&gt;.path</em>. For example, you
+setting the configuration variable <code>man.&lt;tool&gt;.path</code>. For example, you
 can configure the absolute path to konqueror by setting
 <em>man.konqueror.path</em>. Otherwise, <em>git help</em> assumes the tool is
 available in PATH.</p></div>
 </div>
 <div class="sect2">
 <h3 id="_man_lt_tool_gt_cmd">man.&lt;tool&gt;.cmd</h3>
-<div class="paragraph"><p>When the man viewer, specified by the <em>man.viewer</em> configuration
+<div class="paragraph"><p>When the man viewer, specified by the <code>man.viewer</code> configuration
 variables, is not among the supported ones, then the corresponding
-<em>man.&lt;tool&gt;.cmd</em> configuration variable will be looked up. If this
+<code>man.&lt;tool&gt;.cmd</code> configuration variable will be looked up. If this
 variable exists then the specified tool will be treated as a custom
 command and a shell eval will be used to run the command with the man
 page passed as arguments.</p></div>
 </div>
 <div class="sect2">
 <h3 id="_note_about_konqueror">Note about konqueror</h3>
-<div class="paragraph"><p>When <em>konqueror</em> is specified in the <em>man.viewer</em> configuration
+<div class="paragraph"><p>When <em>konqueror</em> is specified in the <code>man.viewer</code> configuration
 variable, we launch <em>kfmclient</em> to try to open the man page on an
 already opened konqueror in a new tab if possible.</p></div>
 <div class="paragraph"><p>For consistency, we also try such a trick if <em>man.konqueror.path</em> is
@@ -964,7 +964,7 @@
 <div class="sect2">
 <h3 id="_note_about_git_config_global">Note about git config --global</h3>
 <div class="paragraph"><p>Note that all these configuration variables should probably be set
-using the <em>--global</em> flag, for example like this:</p></div>
+using the <code>--global</code> flag, for example like this:</p></div>
 <div class="listingblock">
 <div class="content">
 <pre><code>$ git config --global help.format web
# install git-help.html /usr/share/doc/git-doc/git-help.html
--- /usr/share/doc/git-doc/git-http-backend.html	2016-03-21 09:24:28.000000000 -0600
+++ git-http-backend.html	2016-10-15 00:43:41.264074561 -0600
@@ -764,7 +764,7 @@
 <div class="paragraph"><p>It verifies that the directory has the magic file
 "git-daemon-export-ok", and it will refuse to export any Git directory
 that hasn&#8217;t explicitly been marked for export this way (unless the
-GIT_HTTP_EXPORT_ALL environmental variable is set).</p></div>
+<code>GIT_HTTP_EXPORT_ALL</code> environmental variable is set).</p></div>
 <div class="paragraph"><p>By default, only the <code>upload-pack</code> service is enabled, which serves
 <em>git fetch-pack</em> and <em>git ls-remote</em> clients, which are invoked from
 <em>git fetch</em>, <em>git pull</em>, and <em>git clone</em>.  If the client is authenticated,
@@ -830,8 +830,8 @@
 <div class="sect1">
 <h2 id="_examples">EXAMPLES</h2>
 <div class="sectionbody">
-<div class="paragraph"><p>All of the following examples map <em>http://$hostname/git/foo/bar.git</em>
-to <em>/var/www/git/foo/bar.git</em>.</p></div>
+<div class="paragraph"><p>All of the following examples map <code>http://$hostname/git/foo/bar.git</code>
+to <code>/var/www/git/foo/bar.git</code>.</p></div>
 <div class="dlist"><dl>
 <dt class="hdlist1">
 Apache 2.x
@@ -963,7 +963,7 @@
 </dt>
 <dd>
 <p>
-        Ensure that <code>mod_cgi</code>, <code>mod_alias, `mod_auth</code>, <code>mod_setenv</code> are
+        Ensure that <code>mod_cgi</code>, <code>mod_alias</code>, <code>mod_auth</code>, <code>mod_setenv</code> are
         loaded, then set <code>GIT_PROJECT_ROOT</code> appropriately and redirect
         all requests to the CGI:
 </p>
@@ -1014,7 +1014,7 @@
 <div class="sect1">
 <h2 id="_environment">ENVIRONMENT</h2>
 <div class="sectionbody">
-<div class="paragraph"><p><em>git http-backend</em> relies upon the CGI environment variables set
+<div class="paragraph"><p><em>git http-backend</em> relies upon the <code>CGI</code> environment variables set
 by the invoking web server, including:</p></div>
 <div class="ulist"><ul>
 <li>
@@ -1048,14 +1048,22 @@
 </p>
 </li>
 </ul></div>
-<div class="paragraph"><p>The GIT_HTTP_EXPORT_ALL environmental variable may be passed to
+<div class="paragraph"><p>The <code>GIT_HTTP_EXPORT_ALL</code> environmental variable may be passed to
 <em>git-http-backend</em> to bypass the check for the "git-daemon-export-ok"
 file in each repository before allowing export of that repository.</p></div>
+<div class="paragraph"><p>The <code>GIT_HTTP_MAX_REQUEST_BUFFER</code> environment variable (or the
+<code>http.maxRequestBuffer</code> config variable) may be set to change the
+largest ref negotiation request that git will handle during a fetch; any
+fetch requiring a larger buffer will not succeed.  This value should not
+normally need to be changed, but may be helpful if you are fetching from
+a repository with an extremely large number of refs.  The value can be
+specified with a unit (e.g., <code>100M</code> for 100 megabytes). The default is
+10 megabytes.</p></div>
 <div class="paragraph"><p>The backend process sets GIT_COMMITTER_NAME to <em>$REMOTE_USER</em> and
 GIT_COMMITTER_EMAIL to <em>${REMOTE_USER}@http.${REMOTE_ADDR}</em>,
 ensuring that any reflogs created by <em>git-receive-pack</em> contain some
 identifying information of the remote user who performed the push.</p></div>
-<div class="paragraph"><p>All CGI environment variables are available to each of the hooks
+<div class="paragraph"><p>All <code>CGI</code> environment variables are available to each of the hooks
 invoked by the <em>git-receive-pack</em>.</p></div>
 </div>
 </div>
# install git-http-backend.html /usr/share/doc/git-doc/git-http-backend.html
--- /usr/share/doc/git-doc/git-http-push.html	2016-03-21 09:24:28.000000000 -0600
+++ git-http-push.html	2016-10-15 00:43:41.760074570 -0600
@@ -887,12 +887,12 @@
 </ul></div>
 </li>
 </ul></div>
-<div class="paragraph"><p>Without <em>--force</em>, the &lt;src&gt; ref is stored at the remote only if
+<div class="paragraph"><p>Without &#8216;--force`, the &lt;src&gt; ref is stored at the remote only if
 &lt;dst&gt; does not exist, or &lt;dst&gt; is a proper subset (i.e. an
 ancestor) of &lt;src&gt;.  This check, known as "fast-forward check",
 is performed in order to avoid accidentally overwriting the
-remote ref and lose other peoples' commits from there.</p></div>
-<div class="paragraph"><p>With <em>--force</em>, the fast-forward check is disabled for all refs.</p></div>
+remote ref and lose other peoples&#8217; commits from there.</p></div>
+<div class="paragraph"><p>With <code>--force</code>, the fast-forward check is disabled for all refs.</p></div>
 <div class="paragraph"><p>Optionally, a &lt;ref&gt; parameter can be prefixed with a plus <em>+</em> sign
 to disable the fast-forward check only on that ref.</p></div>
 </div>
# install git-http-push.html /usr/share/doc/git-doc/git-http-push.html
--- /usr/share/doc/git-doc/git-imap-send.html	2016-03-21 09:24:28.000000000 -0600
+++ git-imap-send.html	2016-10-15 00:43:42.076074576 -0600
@@ -748,7 +748,7 @@
 <h2 id="_synopsis">SYNOPSIS</h2>
 <div class="sectionbody">
 <div class="verseblock">
-<pre class="content"><em>git imap-send</em></pre>
+<pre class="content"><em>git imap-send</em> [-v] [-q] [--[no-]curl]</pre>
 <div class="attribution">
 </div></div>
 </div>
@@ -767,6 +767,55 @@
 </div>
 </div>
 <div class="sect1">
+<h2 id="_options">OPTIONS</h2>
+<div class="sectionbody">
+<div class="dlist"><dl>
+<dt class="hdlist1">
+-v
+</dt>
+<dt class="hdlist1">
+--verbose
+</dt>
+<dd>
+<p>
+        Be verbose.
+</p>
+</dd>
+<dt class="hdlist1">
+-q
+</dt>
+<dt class="hdlist1">
+--quiet
+</dt>
+<dd>
+<p>
+        Be quiet.
+</p>
+</dd>
+<dt class="hdlist1">
+--curl
+</dt>
+<dd>
+<p>
+        Use libcurl to communicate with the IMAP server, unless tunneling
+        into it.  Ignored if Git was built without the USE_CURL_FOR_IMAP_SEND
+        option set.
+</p>
+</dd>
+<dt class="hdlist1">
+--no-curl
+</dt>
+<dd>
+<p>
+        Talk to the IMAP server using git&#8217;s own IMAP routines instead of
+        using libcurl.  Ignored if Git was built with the NO_OPENSSL option
+        set.
+</p>
+</dd>
+</dl></div>
+</div>
+</div>
+<div class="sect1">
 <h2 id="_configuration">CONFIGURATION</h2>
 <div class="sectionbody">
 <div class="paragraph"><p>To use the tool, imap.folder and either imap.tunnel or imap.host must be set
@@ -781,7 +830,7 @@
 <p>
         The folder to drop the mails into, which is typically the Drafts
         folder. For example: "INBOX.Drafts", "INBOX/Drafts" or
-        "[Gmail]/Drafts". Required to use imap-send.
+        "[Gmail]/Drafts". Required.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -791,7 +840,7 @@
 <p>
         Command used to setup a tunnel to the IMAP server through which
         commands will be piped instead of using a direct network connection
-        to the server. Required when imap.host is not set to use imap-send.
+        to the server. Required when imap.host is not set.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -801,8 +850,7 @@
 <p>
         A URL identifying the server. Use a <code>imap://</code> prefix for non-secure
         connections and a <code>imaps://</code> prefix for secure connections.
-        Ignored when imap.tunnel is set, but required to use imap-send
-        otherwise.
+        Ignored when imap.tunnel is set, but required otherwise.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -859,7 +907,10 @@
 <dd>
 <p>
         Specify authenticate method for authentication with IMAP server.
-        Current supported method is <em>CRAM-MD5</em> only.
+        If Git was built with the NO_CURL option, or if your curl version is older
+        than 7.34.0, or if you&#8217;re running git-imap-send with the <code>--no-curl</code>
+        option, the only supported method is <em>CRAM-MD5</em>. If this is not set
+        then <em>git imap-send</em> uses the basic IMAP plaintext LOGIN command.
 </p>
 </dd>
 </dl></div>
# install git-imap-send.html /usr/share/doc/git-doc/git-imap-send.html
--- /usr/share/doc/git-doc/git-init.html	2016-03-21 09:24:28.000000000 -0600
+++ git-init.html	2016-10-15 00:43:42.872074591 -0600
@@ -788,7 +788,7 @@
 </dt>
 <dd>
 <p>
-Only print error and warning messages, all other output will be suppressed.
+Only print error and warning messages; all other output will be suppressed.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -796,7 +796,7 @@
 </dt>
 <dd>
 <p>
-Create a bare repository. If GIT_DIR environment is not set, it is set to the
+Create a bare repository. If <code>GIT_DIR</code> environment is not set, it is set to the
 current working directory.
 </p>
 </dd>
@@ -814,13 +814,12 @@
 </dt>
 <dd>
 <p>
-Instead of initializing the repository where it is supposed to be,
-place a filesytem-agnostic Git symbolic link there, pointing to the
-specified path, and initialize a Git repository at the path. The
-result is Git repository can be separated from working tree. If this
-is reinitialization, the repository will be moved to the specified
-path.
+Instead of initializing the repository as a directory to either <code>$GIT_DIR</code> or
+<code>./.git/</code>, create a text file there containing the path to the actual
+repository.  This file acts as filesystem-agnostic Git symbolic link to the
+repository.
 </p>
+<div class="paragraph"><p>If this is reinitialization, the repository will be moved to the specified path.</p></div>
 </dd>
 <dt class="hdlist1">
 --shared[=(false|true|umask|group|all|world|everybody|0xxx)]
@@ -834,50 +833,62 @@
 requested permissions.  When not specified, Git will use permissions reported
 by umask(2).
 </p>
-</dd>
-</dl></div>
 <div class="paragraph"><p>The option can have the following values, defaulting to <em>group</em> if no value
 is given:</p></div>
-<div class="ulist"><ul>
-<li>
+<div class="openblock">
+<div class="content">
+<div class="dlist"><dl>
+<dt class="hdlist1">
+<em>umask</em> (or <em>false</em>)
+</dt>
+<dd>
 <p>
-<em>umask</em> (or <em>false</em>): Use permissions reported by umask(2). The default,
-   when <code>--shared</code> is not specified.
+Use permissions reported by umask(2). The default, when <code>--shared</code> is not
+specified.
 </p>
-</li>
-<li>
+</dd>
+<dt class="hdlist1">
+<em>group</em> (or <em>true</em>)
+</dt>
+<dd>
 <p>
-<em>group</em> (or <em>true</em>): Make the repository group-writable, (and g+sx, since
-   the git group may be not the primary group of all users).
-   This is used to loosen the permissions of an otherwise safe umask(2) value.
-   Note that the umask still applies to the other permission bits (e.g. if
-   umask is <em>0022</em>, using <em>group</em> will not remove read privileges from other
-   (non-group) users). See <em>0xxx</em> for how to exactly specify the repository
-   permissions.
+Make the repository group-writable, (and g+sx, since the git group may be not
+the primary group of all users). This is used to loosen the permissions of an
+otherwise safe umask(2) value. Note that the umask still applies to the other
+permission bits (e.g. if umask is <em>0022</em>, using <em>group</em> will not remove read
+privileges from other (non-group) users). See <em>0xxx</em> for how to exactly specify
+the repository permissions.
 </p>
-</li>
-<li>
+</dd>
+<dt class="hdlist1">
+<em>all</em> (or <em>world</em> or <em>everybody</em>)
+</dt>
+<dd>
 <p>
-<em>all</em> (or <em>world</em> or <em>everybody</em>): Same as <em>group</em>, but make the repository
-   readable by all users.
+Same as <em>group</em>, but make the repository readable by all users.
 </p>
-</li>
-<li>
+</dd>
+<dt class="hdlist1">
+<em>0xxx</em>
+</dt>
+<dd>
 <p>
-<em>0xxx</em>: <em>0xxx</em> is an octal number and each file will have mode <em>0xxx</em>.
-   <em>0xxx</em> will override users' umask(2) value (and not only loosen permissions
-   as <em>group</em> and <em>all</em> does). <em>0640</em> will create a repository which is
-   group-readable, but not group-writable or accessible to others. <em>0660</em> will
-   create a repo that is readable and writable to the current user and group,
-   but inaccessible to others.
+<em>0xxx</em> is an octal number and each file will have mode <em>0xxx</em>. <em>0xxx</em> will
+override users' umask(2) value (and not only loosen permissions as <em>group</em> and
+<em>all</em> does). <em>0640</em> will create a repository which is group-readable, but not
+group-writable or accessible to others. <em>0660</em> will create a repo that is
+readable and writable to the current user and group, but inaccessible to others.
 </p>
-</li>
-</ul></div>
-<div class="paragraph"><p>By default, the configuration flag receive.denyNonFastForwards is enabled
+</dd>
+</dl></div>
+</div></div>
+</dd>
+</dl></div>
+<div class="paragraph"><p>By default, the configuration flag <code>receive.denyNonFastForwards</code> is enabled
 in shared repositories, so that you cannot force a non fast-forwarding push
 into it.</p></div>
-<div class="paragraph"><p>If you name a (possibly non-existent) directory at the end of the command
-line, the command is run inside the directory (possibly after creating it).</p></div>
+<div class="paragraph"><p>If you provide a <em>directory</em>, the command is run inside it. If this directory
+does not exist, it will be created.</p></div>
 </div></div>
 </div>
 </div>
@@ -886,32 +897,34 @@
 <div class="sectionbody">
 <div class="paragraph"><p>The template directory contains files and directories that will be copied to
 the <code>$GIT_DIR</code> after it is created.</p></div>
-<div class="paragraph"><p>The template directory used will (in order):</p></div>
+<div class="paragraph"><p>The template directory will be one of the following (in order):</p></div>
 <div class="ulist"><ul>
 <li>
 <p>
-The argument given with the <code>--template</code> option.
+the argument given with the <code>--template</code> option;
 </p>
 </li>
 <li>
 <p>
-The contents of the <code>$GIT_TEMPLATE_DIR</code> environment variable.
+the contents of the <code>$GIT_TEMPLATE_DIR</code> environment variable;
 </p>
 </li>
 <li>
 <p>
-The <code>init.templatedir</code> configuration variable.
+the <code>init.templateDir</code> configuration variable; or
 </p>
 </li>
 <li>
 <p>
-The default template directory: <code>/usr/share/git-core/templates</code>.
+the default template directory: <code>/usr/share/git-core/templates</code>.
 </p>
 </li>
 </ul></div>
-<div class="paragraph"><p>The default template directory includes some directory structure, some
-suggested "exclude patterns", and copies of sample "hook" files.
-The suggested patterns and hook files are all modifiable and extensible.</p></div>
+<div class="paragraph"><p>The default template directory includes some directory structure, suggested
+"exclude patterns" (see <a href="gitignore.html">gitignore(5)</a>), and sample hook files.</p></div>
+<div class="paragraph"><p>The sample hooks are all disabled by default, To enable one of the
+sample hooks rename it by removing its <code>.sample</code> suffix.</p></div>
+<div class="paragraph"><p>See <a href="githooks.html">githooks(5)</a> for more general info on hook execution.</p></div>
 </div>
 </div>
 <div class="sect1">
@@ -926,17 +939,23 @@
 <div class="content">
 <pre><code>$ cd /path/to/my/codebase
 $ git init      <b>&lt;1&gt;</b>
-$ git add .     <b>&lt;2&gt;</b></code></pre>
+$ git add .     <b>&lt;2&gt;</b>
+$ git commit    <b>&lt;3&gt;</b></code></pre>
 </div></div>
 <div class="colist arabic"><ol>
 <li>
 <p>
-prepare /path/to/my/codebase/.git directory
+Create a /path/to/my/codebase/.git directory.
+</p>
+</li>
+<li>
+<p>
+Add all existing files to the index.
 </p>
 </li>
 <li>
 <p>
-add all existing file to the index
+Record the pristine state as the first commit in the history.
 </p>
 </li>
 </ol></div>
# install git-init.html /usr/share/doc/git-doc/git-init.html
--- /usr/share/doc/git-doc/git-instaweb.html	2016-03-21 09:24:28.000000000 -0600
+++ git-instaweb.html	2016-10-15 00:43:43.144074596 -0600
@@ -881,10 +881,10 @@
         httpd = apache2 -f
         port = 4321
         browser = konqueror
-        modulepath = /usr/lib/apache2/modules</code></pre>
+        modulePath = /usr/lib/apache2/modules</code></pre>
 </div></div>
-<div class="paragraph"><p>If the configuration variable <em>instaweb.browser</em> is not set,
-<em>web.browser</em> will be used instead if it is defined. See
+<div class="paragraph"><p>If the configuration variable <code>instaweb.browser</code> is not set,
+<code>web.browser</code> will be used instead if it is defined. See
 <a href="git-web&#45;&#45;browse.html">git-web&#45;&#45;browse(1)</a> for more information about this.</p></div>
 </div>
 </div>
# install git-instaweb.html /usr/share/doc/git-doc/git-instaweb.html
# install git-interpret-trailers.html /usr/share/doc/git-doc/git-interpret-trailers.html
--- /usr/share/doc/git-doc/git-log.html	2016-03-21 09:24:28.000000000 -0600
+++ git-log.html	2016-10-15 00:43:45.428074639 -0600
@@ -780,15 +780,17 @@
 --no-decorate
 </dt>
 <dt class="hdlist1">
---decorate[=short|full|no]
+--decorate[=short|full|auto|no]
 </dt>
 <dd>
 <p>
         Print out the ref names of any commits that are shown. If <em>short</em> is
         specified, the ref name prefixes <em>refs/heads/</em>, <em>refs/tags/</em> and
         <em>refs/remotes/</em> will not be printed. If <em>full</em> is specified, the
-        full ref name (including prefix) will be printed. The default option
-        is <em>short</em>.
+        full ref name (including prefix) will be printed. If <em>auto</em> is
+        specified, then if the output is going to a terminal, the ref names
+        are shown as if <em>short</em> were given, otherwise no ref names are
+        shown. The default option is <em>short</em>.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -839,12 +841,12 @@
 -L &lt;start&gt;,&lt;end&gt;:&lt;file&gt;
 </dt>
 <dt class="hdlist1">
--L :&lt;regex&gt;:&lt;file&gt;
+-L :&lt;funcname&gt;:&lt;file&gt;
 </dt>
 <dd>
 <p>
         Trace the evolution of the line range given by "&lt;start&gt;,&lt;end&gt;"
-        (or the funcname regex &lt;regex&gt;) within the &lt;file&gt;.  You may
+        (or the function name regex &lt;funcname&gt;) within the &lt;file&gt;.  You may
         not give any pathspec limiters.  This is currently limited to
         a walk starting from a single revision, i.e., you may only
         give zero or one positive revision arguments.
@@ -878,11 +880,12 @@
 of lines before or after the line given by &lt;start&gt;.</p></div>
 </li>
 </ul></div>
-<div class="paragraph"><p>If &#8220;:&lt;regex&gt;&#8221; is given in place of &lt;start&gt; and &lt;end&gt;, it denotes the range
-from the first funcname line that matches &lt;regex&gt;, up to the next
-funcname line. &#8220;:&lt;regex&gt;&#8221; searches from the end of the previous <code>-L</code> range,
-if any, otherwise from the start of file.
-&#8220;^:&lt;regex&gt;&#8221; searches from the start of file.</p></div>
+<div class="paragraph"><p>If &#8220;:&lt;funcname&gt;&#8221; is given in place of &lt;start&gt; and &lt;end&gt;, it is a
+regular expression that denotes the range from the first funcname line
+that matches &lt;funcname&gt;, up to the next funcname line. &#8220;:&lt;funcname&gt;&#8221;
+searches from the end of the previous <code>-L</code> range, if any, otherwise
+from the start of file. &#8220;^:&lt;funcname&gt;&#8221; searches from the start of
+file.</p></div>
 </dd>
 <dt class="hdlist1">
 &lt;revision range&gt;
@@ -1008,8 +1011,8 @@
         matches any of the given patterns are chosen (but see
         <code>--all-match</code>).
 </p>
-<div class="paragraph"><p>When <code>--show-notes</code> is in effect, the message from the notes as
-if it is part of the log message.</p></div>
+<div class="paragraph"><p>When <code>--show-notes</code> is in effect, the message from the notes is
+matched as if it were part of the log message.</p></div>
 </dd>
 <dt class="hdlist1">
 --all-match
@@ -1021,6 +1024,15 @@
 </p>
 </dd>
 <dt class="hdlist1">
+--invert-grep
+</dt>
+<dd>
+<p>
+        Limit the commits output to ones with log message that do not
+        match the pattern specified with <code>--grep=&lt;pattern&gt;</code>.
+</p>
+</dd>
+<dt class="hdlist1">
 -i
 </dt>
 <dt class="hdlist1">
@@ -1133,7 +1145,8 @@
         because merges into a topic branch tend to be only about
         adjusting to updated upstream from time to time, and
         this option allows you to ignore the individual commits
-        brought in to your history by such a merge.
+        brought in to your history by such a merge. Cannot be
+        combined with --bisect.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1208,7 +1221,7 @@
         consider. Repetitions of this option accumulate exclusion patterns
         up to the next <code>--all</code>, <code>--branches</code>, <code>--tags</code>, <code>--remotes</code>, or
         <code>--glob</code> option (other options or arguments do not clear
-        accumlated patterns).
+        accumulated patterns).
 </p>
 <div class="paragraph"><p>The patterns given should not begin with <code>refs/heads</code>, <code>refs/tags</code>, or
 <code>refs/remotes</code> when applied to <code>--branches</code>, <code>--tags</code>, or <code>--remotes</code>,
@@ -1217,6 +1230,15 @@
 explicitly.</p></div>
 </dd>
 <dt class="hdlist1">
+--reflog
+</dt>
+<dd>
+<p>
+        Pretend as if all objects mentioned by reflogs are listed on the
+        command line as <code>&lt;commit&gt;</code>.
+</p>
+</dd>
+<dt class="hdlist1">
 --ignore-missing
 </dt>
 <dd>
@@ -1233,7 +1255,7 @@
         Pretend as if the bad bisection ref <code>refs/bisect/bad</code>
         was listed and as if it was followed by <code>--not</code> and the good
         bisection refs <code>refs/bisect/good-*</code> on the command
-        line.
+        line. Cannot be combined with --first-parent.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1242,7 +1264,7 @@
 <dd>
 <p>
         In addition to the <em>&lt;commit&gt;</em> listed on the command
-        line, read them from the standard input. If a <em>--</em> separator is
+        line, read them from the standard input. If a <code>--</code> separator is
         seen, stop reading commits and start reading paths to limit the
         result.
 </p>
@@ -1281,7 +1303,7 @@
 </dt>
 <dd>
 <p>
-        List only commits on the respective side of a symmetric range,
+        List only commits on the respective side of a symmetric difference,
         i.e. only those which would be marked <code>&lt;</code> resp. <code>&gt;</code> by
         <code>--left-right</code>.
 </p>
@@ -1315,14 +1337,43 @@
         reflog entries from the most recent one to older ones.
         When this option is used you cannot specify commits to
         exclude (that is, <em>&#94;commit</em>, <em>commit1..commit2</em>,
-        nor <em>commit1...commit2</em> notations cannot be used).
+        and <em>commit1...commit2</em> notations cannot be used).
 </p>
 <div class="paragraph"><p>With <code>--pretty</code> format other than <code>oneline</code> (for obvious reasons),
 this causes the output to have two extra lines of information
-taken from the reflog.  By default, <em>commit@{Nth}</em> notation is
-used in the output.  When the starting commit is specified as
-<em>commit@{now}</em>, output also uses <em>commit@{timestamp}</em> notation
-instead.  Under <code>--pretty=oneline</code>, the commit message is
+taken from the reflog.  The reflog designator in the output may be shown
+as <code>ref@{Nth}</code> (where <code>Nth</code> is the reverse-chronological index in the
+reflog) or as <code>ref@{timestamp}</code> (with the timestamp for that entry),
+depending on a few rules:</p></div>
+<div class="openblock">
+<div class="content">
+<div class="olist arabic"><ol class="arabic">
+<li>
+<p>
+If the starting point is specified as <code>ref@{Nth}</code>, show the index
+format.
+</p>
+</li>
+<li>
+<p>
+If the starting point was specified as <code>ref@{now}</code>, show the
+timestamp format.
+</p>
+</li>
+<li>
+<p>
+If neither was used, but <code>--date</code> was given on the command line, show
+the timestamp in the format requested by <code>--date</code>.
+</p>
+</li>
+<li>
+<p>
+Otherwise, show the index format.
+</p>
+</li>
+</ol></div>
+</div></div>
+<div class="paragraph"><p>Under <code>--pretty=oneline</code>, the commit message is
 prefixed with this information on the same line.
 This option cannot be combined with <code>--reverse</code>.
 See also <a href="git-reflog.html">git-reflog(1)</a>.</p></div>
@@ -1783,38 +1834,6 @@
 <div class="paragraph"><p>These options are mostly targeted for packing of Git repositories.</p></div>
 <div class="dlist"><dl>
 <dt class="hdlist1">
---objects
-</dt>
-<dd>
-<p>
-        Print the object IDs of any object referenced by the listed
-        commits.  <code>--objects foo ^bar</code> thus means &#8220;send me
-        all object IDs which I need to download if I have the commit
-        object <em>bar</em> but not <em>foo</em>&#8221;.
-</p>
-</dd>
-<dt class="hdlist1">
---objects-edge
-</dt>
-<dd>
-<p>
-        Similar to <code>--objects</code>, but also print the IDs of excluded
-        commits prefixed with a &#8220;-&#8221; character.  This is used by
-        <a href="git-pack-objects.html">git-pack-objects(1)</a> to build &#8220;thin&#8221; pack, which records
-        objects in deltified form based on objects contained in these
-        excluded commits to reduce network traffic.
-</p>
-</dd>
-<dt class="hdlist1">
---unpacked
-</dt>
-<dd>
-<p>
-        Only useful with <code>--objects</code>; print the object IDs that are not
-        in packs.
-</p>
-</dd>
-<dt class="hdlist1">
 --no-walk[=(sorted|unsorted)]
 </dt>
 <dd>
@@ -1825,6 +1844,7 @@
         given on the command line. Otherwise (if <code>sorted</code> or no argument
         was given), the commits are shown in reverse chronological order
         by commit time.
+        Cannot be combined with <code>--graph</code>.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1850,10 +1870,13 @@
 <p>
         Pretty-print the contents of the commit logs in a given format,
         where <em>&lt;format&gt;</em> can be one of <em>oneline</em>, <em>short</em>, <em>medium</em>,
-        <em>full</em>, <em>fuller</em>, <em>email</em>, <em>raw</em> and <em>format:&lt;string&gt;</em>.  See
-        the "PRETTY FORMATS" section for some additional details for each
-        format.  When omitted, the format defaults to <em>medium</em>.
+        <em>full</em>, <em>fuller</em>, <em>email</em>, <em>raw</em>, <em>format:&lt;string&gt;</em>
+        and <em>tformat:&lt;string&gt;</em>.  When <em>&lt;format&gt;</em> is none of the above,
+        and has <em>%placeholder</em> in it, it acts as if
+        <em>--pretty=tformat:&lt;format&gt;</em> were given.
 </p>
+<div class="paragraph"><p>See the "PRETTY FORMATS" section for some additional details for each
+format.  When <em>=&lt;format&gt;</em> part is omitted, it defaults to <em>medium</em>.</p></div>
 <div class="paragraph"><p>Note: you can specify the default pretty format in the repository
 configuration (see <a href="git-config.html">git-config(1)</a>).</p></div>
 </dd>
@@ -1877,7 +1900,7 @@
 <p>
         Show the full 40-byte hexadecimal commit object name. This negates
         <code>--abbrev-commit</code> and those options which imply it such as
-        "--oneline". It also overrides the <em>log.abbrevCommit</em> variable.
+        "--oneline". It also overrides the <code>log.abbrevCommit</code> variable.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1898,26 +1921,52 @@
         in their encoding header; this option can be used to tell the
         command to re-code the commit log message in the encoding
         preferred by the user.  For non plumbing commands this
-        defaults to UTF-8.
+        defaults to UTF-8. Note that if an object claims to be encoded
+        in <code>X</code> and we are outputting in <code>X</code>, we will output the object
+        verbatim; this means that invalid sequences in the original
+        commit may be copied to the output.
 </p>
 </dd>
 <dt class="hdlist1">
---notes[=&lt;ref&gt;]
+--expand-tabs=&lt;n&gt;
+</dt>
+<dt class="hdlist1">
+--expand-tabs
+</dt>
+<dt class="hdlist1">
+--no-expand-tabs
+</dt>
+<dd>
+<p>
+        Perform a tab expansion (replace each tab with enough spaces
+        to fill to the next display column that is multiple of <em>&lt;n&gt;</em>)
+        in the log message before showing it in the output.
+        <code>--expand-tabs</code> is a short-hand for <code>--expand-tabs=8</code>, and
+        <code>--no-expand-tabs</code> is a short-hand for <code>--expand-tabs=0</code>,
+        which disables tab expansion.
+</p>
+<div class="paragraph"><p>By default, tabs are expanded in pretty formats that indent the log
+message by 4 spaces (i.e.  <em>medium</em>, which is the default, <em>full</em>,
+and <em>fuller</em>).</p></div>
+</dd>
+<dt class="hdlist1">
+--notes[=&lt;treeish&gt;]
 </dt>
 <dd>
 <p>
         Show the notes (see <a href="git-notes.html">git-notes(1)</a>) that annotate the
         commit, when showing the commit log message.  This is the default
         for <code>git log</code>, <code>git show</code> and <code>git whatchanged</code> commands when
-        there is no <code>--pretty</code>, <code>--format</code> nor <code>--oneline</code> option given
+        there is no <code>--pretty</code>, <code>--format</code>, or <code>--oneline</code> option given
         on the command line.
 </p>
 <div class="paragraph"><p>By default, the notes shown are from the notes refs listed in the
-<em>core.notesRef</em> and <em>notes.displayRef</em> variables (or corresponding
+<code>core.notesRef</code> and <code>notes.displayRef</code> variables (or corresponding
 environment overrides). See <a href="git-config.html">git-config(1)</a> for more details.</p></div>
-<div class="paragraph"><p>With an optional <em>&lt;ref&gt;</em> argument, show this notes ref instead of the
-default notes ref(s). The ref is taken to be in <code>refs/notes/</code> if it
-is not qualified.</p></div>
+<div class="paragraph"><p>With an optional <em>&lt;treeish&gt;</em> argument, use the treeish to find the notes
+to display.  The treeish can specify the full refname when it begins
+with <code>refs/notes/</code>; when it begins with <code>notes/</code>, <code>refs/</code> and otherwise
+<code>refs/notes/</code> is prefixed to form a full name of the ref.</p></div>
 <div class="paragraph"><p>Multiple --notes options can be combined to control which notes are
 being displayed. Examples: "--notes=foo" will show only notes from
 "refs/notes/foo"; "--notes=foo --notes" will show both notes from
@@ -1936,7 +1985,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
---show-notes[=&lt;ref&gt;]
+--show-notes[=&lt;treeish&gt;]
 </dt>
 <dt class="hdlist1">
 --[no-]standard-notes
@@ -1965,24 +2014,75 @@
 </p>
 </dd>
 <dt class="hdlist1">
---date=(relative|local|default|iso|rfc|short|raw)
+--date=&lt;format&gt;
 </dt>
 <dd>
 <p>
         Only takes effect for dates shown in human-readable format, such
         as when using <code>--pretty</code>. <code>log.date</code> config variable sets a default
-        value for the log command&#8217;s <code>--date</code> option.
+        value for the log command&#8217;s <code>--date</code> option. By default, dates
+        are shown in the original time zone (either committer&#8217;s or
+        author&#8217;s). If <code>-local</code> is appended to the format (e.g.,
+        <code>iso-local</code>), the user&#8217;s local time zone is used instead.
 </p>
 <div class="paragraph"><p><code>--date=relative</code> shows dates relative to the current time,
-e.g. &#8220;2 hours ago&#8221;.</p></div>
-<div class="paragraph"><p><code>--date=local</code> shows timestamps in user&#8217;s local time zone.</p></div>
-<div class="paragraph"><p><code>--date=iso</code> (or <code>--date=iso8601</code>) shows timestamps in ISO 8601 format.</p></div>
+e.g. &#8220;2 hours ago&#8221;. The <code>-local</code> option has no effect for
+<code>--date=relative</code>.</p></div>
+<div class="paragraph"><p><code>--date=local</code> is an alias for <code>--date=default-local</code>.</p></div>
+<div class="paragraph"><p><code>--date=iso</code> (or <code>--date=iso8601</code>) shows timestamps in a ISO 8601-like format.
+The differences to the strict ISO 8601 format are:</p></div>
+<div class="ulist"><ul>
+<li>
+<p>
+a space instead of the <code>T</code> date/time delimiter
+</p>
+</li>
+<li>
+<p>
+a space between time and time zone
+</p>
+</li>
+<li>
+<p>
+no colon between hours and minutes of the time zone
+</p>
+</li>
+</ul></div>
+<div class="paragraph"><p><code>--date=iso-strict</code> (or <code>--date=iso8601-strict</code>) shows timestamps in strict
+ISO 8601 format.</p></div>
 <div class="paragraph"><p><code>--date=rfc</code> (or <code>--date=rfc2822</code>) shows timestamps in RFC 2822
 format, often found in email messages.</p></div>
 <div class="paragraph"><p><code>--date=short</code> shows only the date, but not the time, in <code>YYYY-MM-DD</code> format.</p></div>
-<div class="paragraph"><p><code>--date=raw</code> shows the date in the internal raw Git format <code>%s %z</code> format.</p></div>
-<div class="paragraph"><p><code>--date=default</code> shows timestamps in the original time zone
-(either committer&#8217;s or author&#8217;s).</p></div>
+<div class="paragraph"><p><code>--date=raw</code> shows the date as seconds since the epoch (1970-01-01
+00:00:00 UTC), followed by a space, and then the timezone as an offset
+from UTC (a <code>+</code> or <code>-</code> with four digits; the first two are hours, and
+the second two are minutes). I.e., as if the timestamp were formatted
+with <code>strftime("%s %z")</code>).
+Note that the <code>-local</code> option does not affect the seconds-since-epoch
+value (which is always measured in UTC), but does switch the accompanying
+timezone value.</p></div>
+<div class="paragraph"><p><code>--date=unix</code> shows the date as a Unix epoch timestamp (seconds since
+1970).  As with <code>--raw</code>, this is always in UTC and therefore <code>-local</code>
+has no effect.</p></div>
+<div class="paragraph"><p><code>--date=format:...</code> feeds the format <code>...</code> to your system <code>strftime</code>.
+Use <code>--date=format:%c</code> to show the date in your system locale&#8217;s
+preferred format.  See the <code>strftime</code> manual for a complete list of
+format placeholders. When using <code>-local</code>, the correct syntax is
+<code>--date=format-local:...</code>.</p></div>
+<div class="paragraph"><p><code>--date=default</code> is the default format, and is similar to
+<code>--date=rfc2822</code>, with a few exceptions:</p></div>
+<div class="ulist"><ul>
+<li>
+<p>
+there is no comma after the day-of-week
+</p>
+</li>
+<li>
+<p>
+the time zone is omitted when the local time zone is used
+</p>
+</li>
+</ul></div>
 </dd>
 <dt class="hdlist1">
 --parents
@@ -2007,7 +2107,7 @@
 </dt>
 <dd>
 <p>
-        Mark which side of a symmetric diff a commit is reachable from.
+        Mark which side of a symmetric difference a commit is reachable from.
         Commits from the left side are prefixed with <code>&lt;</code> and those from
         the right with <code>&gt;</code>.  If combined with <code>--boundary</code>, those
         commits are prefixed with <code>-</code>.
@@ -2043,11 +2143,24 @@
         on the left hand side of the output.  This may cause extra lines
         to be printed in between commits, in order for the graph history
         to be drawn properly.
+        Cannot be combined with <code>--no-walk</code>.
 </p>
 <div class="paragraph"><p>This enables parent rewriting, see <em>History Simplification</em> below.</p></div>
 <div class="paragraph"><p>This implies the <code>--topo-order</code> option by default, but the
 <code>--date-order</code> option may also be specified.</p></div>
 </dd>
+<dt class="hdlist1">
+--show-linear-break[=&lt;barrier&gt;]
+</dt>
+<dd>
+<p>
+        When --graph is not used, all history branches are flattened
+        which can make it hard to see that the two consecutive commits
+        do not belong to a linear branch. This option puts a barrier
+        in between them in that case. If <code>&lt;barrier&gt;</code> is specified, it
+        is the string that will be shown instead of the default one.
+</p>
+</dd>
 </dl></div>
 </div>
 <div class="sect2">
@@ -2238,8 +2351,11 @@
 stored in the commit object.  Notably, the SHA-1s are
 displayed in full, regardless of whether --abbrev or
 --no-abbrev are used, and <em>parents</em> information show the
-true parent commits, without taking grafts nor history
-simplification into account.</p></div>
+true parent commits, without taking grafts or history
+simplification into account. Note that this format affects the way
+commits are displayed, but not the way the diff is shown e.g. with
+<code>git log --raw</code>. To get full object names in a raw diff format,
+use <code>--no-abbrev</code>.</p></div>
 </li>
 <li>
 <p>
@@ -2332,7 +2448,12 @@
 </li>
 <li>
 <p>
-<em>%ai</em>: author date, ISO 8601 format
+<em>%ai</em>: author date, ISO 8601-like format
+</p>
+</li>
+<li>
+<p>
+<em>%aI</em>: author date, strict ISO 8601 format
 </p>
 </li>
 <li>
@@ -2359,7 +2480,7 @@
 </li>
 <li>
 <p>
-<em>%cd</em>: committer date
+<em>%cd</em>: committer date (format respects --date= option)
 </p>
 </li>
 <li>
@@ -2379,7 +2500,12 @@
 </li>
 <li>
 <p>
-<em>%ci</em>: committer date, ISO 8601 format
+<em>%ci</em>: committer date, ISO 8601-like format
+</p>
+</li>
+<li>
+<p>
+<em>%cI</em>: committer date, strict ISO 8601 format
 </p>
 </li>
 <li>
@@ -2389,6 +2515,11 @@
 </li>
 <li>
 <p>
+<em>%D</em>: ref names without the " (", ")" wrapping.
+</p>
+</li>
+<li>
+<p>
 <em>%e</em>: encoding
 </p>
 </li>
@@ -2424,8 +2555,8 @@
 </li>
 <li>
 <p>
-<em>%G?</em>: show "G" for a Good signature, "B" for a Bad signature, "U" for a good,
-  untrusted signature and "N" for no signature
+<em>%G?</em>: show "G" for a good (valid) signature, "B" for a bad signature,
+  "U" for a good signature with unknown validity and "N" for no signature
 </p>
 </li>
 <li>
@@ -2440,12 +2571,18 @@
 </li>
 <li>
 <p>
-<em>%gD</em>: reflog selector, e.g., <code>refs/stash@{1}</code>
+<em>%gD</em>: reflog selector, e.g., <code>refs/stash@{1}</code> or
+  <code>refs/stash@{2 minutes ago</code>}; the format follows the rules described
+  for the <code>-g</code> option. The portion before the <code>@</code> is the refname as
+  given on the command line (so <code>git log -g refs/heads/master</code> would
+  yield <code>refs/heads/master@{0}</code>).
 </p>
 </li>
 <li>
 <p>
-<em>%gd</em>: shortened reflog selector, e.g., <code>stash@{1}</code>
+<em>%gd</em>: shortened reflog selector; same as <code>%gD</code>, but the refname
+  portion is shortened for human readability (so <code>refs/heads/master</code>
+  becomes just <code>master</code>).
 </p>
 </li>
 <li>
@@ -2507,7 +2644,7 @@
 </li>
 <li>
 <p>
-<em>%m</em>: left, right or boundary mark
+<em>%m</em>: left (<code>&lt;</code>), right (<code>&gt;</code>) or boundary (<code>-</code>) mark
 </p>
 </li>
 <li>
@@ -2576,8 +2713,9 @@
 <td class="content">Some placeholders may depend on other options given to the
 revision traversal engine. For example, the <code>%g*</code> reflog options will
 insert an empty string unless we are traversing reflog entries (e.g., by
-<code>git log -g</code>). The <code>%d</code> placeholder will use the "short" decoration
-format if <code>--decorate</code> was not already provided on the command line.</td>
+<code>git log -g</code>). The <code>%d</code> and <code>%D</code> placeholders will use the "short"
+decoration format if <code>--decorate</code> was not already provided on the command
+line.</td>
 </tr></table>
 </div>
 <div class="paragraph"><p>If you add a <code>+</code> (plus sign) after <em>%</em> of a placeholder, a line-feed
@@ -2641,7 +2779,6 @@
 <dd>
 <p>
         Generate patch (see section on generating patches).
-        
 </p>
 </dd>
 <dt class="hdlist1">
@@ -2674,8 +2811,11 @@
 </dt>
 <dd>
 <p>
-        Generate the raw format.
-        
+        For each commit, show a summary of changes using the raw diff
+        format. See the "RAW OUTPUT FORMAT" section of
+        <a href="git-diff.html">git-diff(1)</a>. This is different from showing the log
+        itself in raw format, which you can achieve with
+        <code>--format=raw</code>.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -2687,6 +2827,20 @@
 </p>
 </dd>
 <dt class="hdlist1">
+--compaction-heuristic
+</dt>
+<dt class="hdlist1">
+--no-compaction-heuristic
+</dt>
+<dd>
+<p>
+        These are to help debugging and tuning an experimental
+        heuristic (which is off by default) that shifts the hunk
+        boundary in an attempt to make the resulting patch easier
+        to read.
+</p>
+</dd>
+<dt class="hdlist1">
 --minimal
 </dt>
 <dd>
@@ -3039,8 +3193,10 @@
 expression to make sure that it matches all non-whitespace characters.
 A match that contains a newline is silently truncated(!) at the
 newline.</p></div>
+<div class="paragraph"><p>For example, <code>--word-diff-regex=.</code> will treat each character as a word
+and, correspondingly, show differences character by character.</p></div>
 <div class="paragraph"><p>The regex can also be set via a diff driver or configuration option, see
-<a href="gitattributes.html">gitattributes(1)</a> or <a href="git-config.html">git-config(1)</a>.  Giving it explicitly
+<a href="gitattributes.html">gitattributes(5)</a> or <a href="git-config.html">git-config(1)</a>.  Giving it explicitly
 overrides any diff driver or configuration setting.  Diff drivers
 override configuration settings.</p></div>
 </dd>
@@ -3067,8 +3223,8 @@
 </dt>
 <dd>
 <p>
-        Warn if changes introduce whitespace errors.  What are
-        considered whitespace errors is controlled by <code>core.whitespace</code>
+        Warn if changes introduce conflict markers or whitespace errors.
+        What are considered whitespace errors is controlled by <code>core.whitespace</code>
         configuration.  By default, trailing whitespaces (including
         lines that solely consist of whitespaces) and a space character
         that is immediately followed by a tab character inside the
@@ -3078,6 +3234,20 @@
 </p>
 </dd>
 <dt class="hdlist1">
+--ws-error-highlight=&lt;kind&gt;
+</dt>
+<dd>
+<p>
+        Highlight whitespace errors on lines specified by &lt;kind&gt;
+        in the color specified by <code>color.diff.whitespace</code>.  &lt;kind&gt;
+        is a comma separated list of <code>old</code>, <code>new</code>, <code>context</code>.  When
+        this option is not given, only whitespace errors in <code>new</code>
+        lines are highlighted.  E.g. <code>--ws-error-highlight=new,old</code>
+        highlights whitespace errors on both deleted and added lines.
+        <code>all</code> can be used as a short-hand for <code>old,new,context</code>.
+</p>
+</dd>
+<dt class="hdlist1">
 --full-index
 </dt>
 <dd>
@@ -3195,7 +3365,7 @@
 <p>
         Omit the preimage for deletes, i.e. print only the header but not
         the diff between the preimage and <code>/dev/null</code>. The resulting patch
-        is not meant to be applied with <code>patch</code> nor <code>git apply</code>; this is
+        is not meant to be applied with <code>patch</code> or <code>git apply</code>; this is
         solely for people who want to just concentrate on reviewing the
         text after the change. In addition, the output obviously lack
         enough information to apply such a patch in reverse, even manually,
@@ -3232,6 +3402,8 @@
         other criteria in the comparison; if there is no file
         that matches other criteria, nothing is selected.
 </p>
+<div class="paragraph"><p>Also, these upper-case letters can be downcased to exclude.  E.g.
+<code>--diff-filter=ad</code> excludes added and deleted paths.</p></div>
 </dd>
 <dt class="hdlist1">
 -S&lt;string&gt;
@@ -3297,8 +3469,8 @@
 <p>
         Output the patch in the order specified in the
         &lt;orderfile&gt;, which has one shell glob pattern per line.
-        This overrides the <code>diff.orderfile</code> configuration variable
-        (see <a href="git-config.html">git-config(1)</a>).  To cancel <code>diff.orderfile</code>,
+        This overrides the <code>diff.orderFile</code> configuration variable
+        (see <a href="git-config.html">git-config(1)</a>).  To cancel <code>diff.orderFile</code>,
         use <code>-O/dev/null</code>.
 </p>
 </dd>
@@ -3484,11 +3656,11 @@
 <h2 id="_generating_patches_with_p">Generating patches with -p</h2>
 <div class="sectionbody">
 <div class="paragraph"><p>When "git-diff-index", "git-diff-tree", or "git-diff-files" are run
-with a <em>-p</em> option, "git diff" without the <em>--raw</em> option, or
+with a <code>-p</code> option, "git diff" without the <code>--raw</code> option, or
 "git log" with the "-p" option, they
 do not produce the output described above; instead they produce a
 patch file.  You can customize the creation of such patches via the
-GIT_EXTERNAL_DIFF and the GIT_DIFF_OPTS environment variables.</p></div>
+<code>GIT_EXTERNAL_DIFF</code> and the <code>GIT_DIFF_OPTS</code> environment variables.</p></div>
 <div class="paragraph"><p>What the -p option produces is slightly different from the traditional
 diff format:</p></div>
 <div class="olist arabic"><ol class="arabic">
@@ -3569,10 +3741,10 @@
 <div class="sect1">
 <h2 id="_combined_diff_format">combined diff format</h2>
 <div class="sectionbody">
-<div class="paragraph"><p>Any diff-generating command can take the &#8216;-c` or <code>--cc</code> option to
+<div class="paragraph"><p>Any diff-generating command can take the <code>-c</code> or <code>--cc</code> option to
 produce a <em>combined diff</em> when showing a merge. This is the default
 format when showing merges with <a href="git-diff.html">git-diff(1)</a> or
-<a href="git-show.html">git-show(1)</a>. Note also that you can give the `-m&#8217; option to any
+<a href="git-show.html">git-show(1)</a>. Note also that you can give the <code>-m</code> option to any
 of these commands to force generation of diffs with individual parents
 of a merge.</p></div>
 <div class="paragraph"><p>A <em>combined diff</em> format looks like this:</p></div>
@@ -3610,13 +3782,13 @@
 <li>
 <p>
 It is preceded with a "git diff" header, that looks like
-     this (when <em>-c</em> option is used):
+     this (when <code>-c</code> option is used):
 </p>
 <div class="literalblock">
 <div class="content">
 <pre><code>diff --combined file</code></pre>
 </div></div>
-<div class="paragraph"><p>or like this (when <em>--cc</em> option is used):</p></div>
+<div class="paragraph"><p>or like this (when <code>--cc</code> option is used):</p></div>
 <div class="literalblock">
 <div class="content">
 <pre><code>diff --cc file</code></pre>
@@ -3684,7 +3856,7 @@
 <div class="paragraph"><p>In the above example output, the function signature was changed
 from both files (hence two <code>-</code> removals from both file1 and
 file2, plus <code>++</code> to mean one line that was added does not appear
-in either file1 nor file2).  Also eight other lines are the same
+in either file1 or file2).  Also eight other lines are the same
 from file1 but do not appear in file2 (hence prefixed with <code>+</code>).</p></div>
 <div class="paragraph"><p>When shown by <code>git diff-tree -c</code>, it compares the parents of a
 merge commit with the merge result (i.e. file1..fileN are the
@@ -3799,20 +3971,10 @@
 <div class="sect1">
 <h2 id="_discussion">DISCUSSION</h2>
 <div class="sectionbody">
-<div class="paragraph"><p>At the core level, Git is character encoding agnostic.</p></div>
+<div class="paragraph"><p>Git is to some extent character encoding agnostic.</p></div>
 <div class="ulist"><ul>
 <li>
 <p>
-The pathnames recorded in the index and in the tree objects
-   are treated as uninterpreted sequences of non-NUL bytes.
-   What readdir(2) returns are what are recorded and compared
-   with the data Git keeps track of, which in turn are expected
-   to be what lstat(2) and creat(2) accepts.  There is no such
-   thing as pathname encoding translation.
-</p>
-</li>
-<li>
-<p>
 The contents of the blob objects are uninterpreted sequences
    of bytes.  There is no encoding translation at the core
    level.
@@ -3820,8 +3982,30 @@
 </li>
 <li>
 <p>
-The commit log messages are uninterpreted sequences of non-NUL
-   bytes.
+Path names are encoded in UTF-8 normalization form C. This
+   applies to tree objects, the index file, ref names, as well as
+   path names in command line arguments, environment variables
+   and config files (<code>.git/config</code> (see <a href="git-config.html">git-config(1)</a>),
+   <a href="gitignore.html">gitignore(5)</a>, <a href="gitattributes.html">gitattributes(5)</a> and
+   <a href="gitmodules.html">gitmodules(5)</a>).
+</p>
+<div class="paragraph"><p>Note that Git at the core level treats path names simply as
+sequences of non-NUL bytes, there are no path name encoding
+conversions (except on Mac and Windows). Therefore, using
+non-ASCII path names will mostly work even on platforms and file
+systems that use legacy extended ASCII encodings. However,
+repositories created on such systems will not work properly on
+UTF-8-based systems (e.g. Linux, Mac, Windows) and vice versa.
+Additionally, many Git-based tools simply assume path names to
+be UTF-8 and will fail to display other encodings correctly.</p></div>
+</li>
+<li>
+<p>
+Commit log messages are typically encoded in UTF-8, but other
+   extended ASCII encodings are also supported. This includes
+   ISO-8859-x, CP125x and many others, but <em>not</em> UTF-16/32,
+   EBCDIC and CJK multi-byte encodings (GBK, Shift-JIS, Big5,
+   EUC-x, CP9xx etc.).
 </p>
 </li>
 </ul></div>
@@ -3909,7 +4093,18 @@
 </p>
 </dd>
 <dt class="hdlist1">
-log.showroot
+log.follow
+</dt>
+<dd>
+<p>
+        If <code>true</code>, <code>git log</code> will act as if the <code>--follow</code> option was used when
+        a single &lt;path&gt; is given.  This has the same limitations as <code>--follow</code>,
+        i.e. it cannot be used to follow multiple files and does not work well
+        on non-linear history.
+</p>
+</dd>
+<dt class="hdlist1">
+log.showRoot
 </dt>
 <dd>
 <p>
@@ -3920,6 +4115,15 @@
 </p>
 </dd>
 <dt class="hdlist1">
+log.showSignature
+</dt>
+<dd>
+<p>
+        If <code>true</code>, <code>git log</code> and related commands will act as if the
+        <code>--show-signature</code> option was passed to them.
+</p>
+</dd>
+<dt class="hdlist1">
 mailmap.*
 </dt>
 <dd>
@@ -3933,7 +4137,7 @@
 <dd>
 <p>
         Which refs, in addition to the default set by <code>core.notesRef</code>
-        or <em>GIT_NOTES_REF</em>, to read notes from when showing commit
+        or <code>GIT_NOTES_REF</code>, to read notes from when showing commit
         messages with the <code>log</code> family of commands.  See
         <a href="git-notes.html">git-notes(1)</a>.
 </p>
@@ -3941,7 +4145,7 @@
 multiple times.  A warning will be issued for refs that do not exist,
 but a glob that does not match any refs is silently ignored.</p></div>
 <div class="paragraph"><p>This setting can be disabled by the <code>--no-notes</code> option,
-overridden by the <em>GIT_NOTES_DISPLAY_REF</em> environment variable,
+overridden by the <code>GIT_NOTES_DISPLAY_REF</code> environment variable,
 and overridden by the <code>--notes=&lt;ref&gt;</code> option.</p></div>
 </dd>
 </dl></div>
# install git-log.html /usr/share/doc/git-doc/git-log.html
--- /usr/share/doc/git-doc/git-ls-files.html	2016-03-21 09:24:28.000000000 -0600
+++ git-ls-files.html	2016-10-15 00:43:45.824074646 -0600
@@ -751,6 +751,7 @@
 <pre class="content"><em>git ls-files</em> [-z] [-t] [-v]
                 (--[cached|deleted|others|ignored|stage|unmerged|killed|modified])*
                 (-[c|d|o|i|s|u|k|m])*
+                [--eol]
                 [-x &lt;pattern&gt;|--exclude=&lt;pattern&gt;]
                 [-X &lt;file&gt;|--exclude-from=&lt;file&gt;]
                 [--exclude-per-directory=&lt;file&gt;]
@@ -1070,6 +1071,25 @@
 </p>
 </dd>
 <dt class="hdlist1">
+--eol
+</dt>
+<dd>
+<p>
+        Show &lt;eolinfo&gt; and &lt;eolattr&gt; of files.
+        &lt;eolinfo&gt; is the file content identification used by Git when
+        the "text" attribute is "auto" (or not set and core.autocrlf is not false).
+        &lt;eolinfo&gt; is either "-text", "none", "lf", "crlf", "mixed" or "".
+</p>
+<div class="paragraph"><p>"" means the file is not a regular file, it is not in the index or
+not accessible in the working tree.</p></div>
+<div class="paragraph"><p>&lt;eolattr&gt; is the attribute that is used when checking out or committing,
+it is either "", "-text", "text", "text=auto", "text eol=lf", "text eol=crlf".
+Since Git 2.10 "text=auto eol=lf" and "text=auto eol=crlf" are supported.</p></div>
+<div class="paragraph"><p>Both the &lt;eolinfo&gt; in the index ("i/&lt;eolinfo&gt;")
+and in the working tree ("w/&lt;eolinfo&gt;") are shown for regular files,
+followed by the  ("attr/&lt;eolattr&gt;").</p></div>
+</dd>
+<dt class="hdlist1">
 --
 </dt>
 <dd>
@@ -1092,12 +1112,14 @@
 <div class="sect1">
 <h2 id="_output">Output</h2>
 <div class="sectionbody">
-<div class="paragraph"><p><em>git ls-files</em> just outputs the filenames unless <em>--stage</em> is specified in
+<div class="paragraph"><p><em>git ls-files</em> just outputs the filenames unless <code>--stage</code> is specified in
 which case it outputs:</p></div>
 <div class="literalblock">
 <div class="content">
 <pre><code>[&lt;tag&gt; ]&lt;mode&gt; &lt;object&gt; &lt;stage&gt; &lt;file&gt;</code></pre>
 </div></div>
+<div class="paragraph"><p><em>git ls-files --eol</em> will show
+        i/&lt;eolinfo&gt;&lt;SPACES&gt;w/&lt;eolinfo&gt;&lt;SPACES&gt;attr/&lt;eolattr&gt;&lt;SPACE*&gt;&lt;TAB&gt;&lt;file&gt;</p></div>
 <div class="paragraph"><p><em>git ls-files --unmerged</em> and <em>git ls-files --stage</em> can be used to examine
 detailed information on unmerged paths.</p></div>
 <div class="paragraph"><p>For an unmerged path, instead of recording a single mode/SHA-1 pair,
@@ -1121,21 +1143,21 @@
 <div class="olist arabic"><ol class="arabic">
 <li>
 <p>
-The command line flag --exclude=&lt;pattern&gt; specifies a
+The command-line flag --exclude=&lt;pattern&gt; specifies a
      single pattern.  Patterns are ordered in the same order
      they appear in the command line.
 </p>
 </li>
 <li>
 <p>
-The command line flag --exclude-from=&lt;file&gt; specifies a
+The command-line flag --exclude-from=&lt;file&gt; specifies a
      file containing a list of patterns.  Patterns are ordered
      in the same order they appear in the file.
 </p>
 </li>
 <li>
 <p>
-The command line flag --exclude-per-directory=&lt;name&gt; specifies
+The command-line flag --exclude-per-directory=&lt;name&gt; specifies
      a name of the file in each directory <em>git ls-files</em>
      examines, normally <code>.gitignore</code>.  Files in deeper
      directories take precedence.  Patterns are ordered in the
# install git-ls-files.html /usr/share/doc/git-doc/git-ls-files.html
--- /usr/share/doc/git-doc/git-ls-remote.html	2016-03-21 09:24:28.000000000 -0600
+++ git-ls-remote.html	2016-10-15 00:43:46.084074651 -0600
@@ -748,8 +748,9 @@
 <h2 id="_synopsis">SYNOPSIS</h2>
 <div class="sectionbody">
 <div class="verseblock">
-<pre class="content"><em>git ls-remote</em> [--heads] [--tags]  [-u &lt;exec&gt; | --upload-pack &lt;exec&gt;]
-              [--exit-code] &lt;repository&gt; [&lt;refs&gt;&#8230;]</pre>
+<pre class="content"><em>git ls-remote</em> [--heads] [--tags] [--refs] [--upload-pack=&lt;exec&gt;]
+              [-q | --quiet] [--exit-code] [--get-url]
+              [--symref] [&lt;repository&gt; [&lt;refs&gt;&#8230;]]</pre>
 <div class="attribution">
 </div></div>
 </div>
@@ -786,8 +787,24 @@
 </p>
 </dd>
 <dt class="hdlist1">
--u &lt;exec&gt;
+--refs
 </dt>
+<dd>
+<p>
+        Do not show peeled tags or pseudorefs like HEAD in the output.
+</p>
+</dd>
+<dt class="hdlist1">
+-q
+</dt>
+<dt class="hdlist1">
+--quiet
+</dt>
+<dd>
+<p>
+        Do not print remote URL to stderr.
+</p>
+</dd>
 <dt class="hdlist1">
 --upload-pack=&lt;exec&gt;
 </dt>
@@ -821,6 +838,17 @@
 </p>
 </dd>
 <dt class="hdlist1">
+--symref
+</dt>
+<dd>
+<p>
+        In addition to the object pointed by it, show the underlying
+        ref pointed by it when showing a symbolic ref.  Currently,
+        upload-pack only shows the symref HEAD, so it will be the only
+        one shown by ls-remote.
+</p>
+</dd>
+<dt class="hdlist1">
 &lt;repository&gt;
 </dt>
 <dd>
# install git-ls-remote.html /usr/share/doc/git-doc/git-ls-remote.html
--- /usr/share/doc/git-doc/git-ls-tree.html	2016-03-21 09:24:28.000000000 -0600
+++ git-ls-tree.html	2016-10-15 00:43:46.352074656 -0600
@@ -765,7 +765,7 @@
 <p>
 the behaviour is slightly different from that of "/bin/ls" in that the
    <em>&lt;path&gt;</em> denotes just a list of patterns to match, e.g. so specifying
-   directory name (without <em>-r</em>) will behave differently, and order of the
+   directory name (without <code>-r</code>) will behave differently, and order of the
    arguments does not matter.
 </p>
 </li>
@@ -775,9 +775,9 @@
    taken as relative to the current working directory.  E.g. when you are
    in a directory <em>sub</em> that has a directory <em>dir</em>, you can run <em>git
    ls-tree -r HEAD dir</em> to list the contents of the tree (that is
-   <em>sub/dir</em> in <em>HEAD</em>).  You don&#8217;t want to give a tree that is not at the
+   <em>sub/dir</em> in <code>HEAD</code>).  You don&#8217;t want to give a tree that is not at the
    root level (e.g. <code>git ls-tree -r HEAD:sub dir</code>) in this case, as that
-   would result in asking for <em>sub/sub/dir</em> in the <em>HEAD</em> commit.
+   would result in asking for <em>sub/sub/dir</em> in the <code>HEAD</code> commit.
    However, the current working directory can be ignored by passing
    --full-tree option.
 </p>
@@ -819,7 +819,7 @@
 <dd>
 <p>
         Show tree entries even when going to recurse them. Has no effect
-        if <em>-r</em> was not passed. <em>-d</em> implies <em>-t</em>.
+        if <code>-r</code> was not passed. <code>-d</code> implies <code>-t</code>.
 </p>
 </dd>
 <dt class="hdlist1">
# install git-ls-tree.html /usr/share/doc/git-doc/git-ls-tree.html
--- /usr/share/doc/git-doc/git-mailinfo.html	2016-03-21 09:24:28.000000000 -0600
+++ git-mailinfo.html	2016-10-15 00:43:46.636074662 -0600
@@ -845,6 +845,18 @@
 </p>
 </dd>
 <dt class="hdlist1">
+-m
+</dt>
+<dt class="hdlist1">
+--message-id
+</dt>
+<dd>
+<p>
+        Copy the Message-ID header at the end of the commit message.  This
+        is useful in order to associate commits with mailing list discussions.
+</p>
+</dd>
+<dt class="hdlist1">
 --scissors
 </dt>
 <dd>
@@ -861,7 +873,7 @@
 with comments and suggestions on the message you are responding to, and to
 conclude it with a patch submission, separating the discussion and the
 beginning of the proposed commit log message with a scissors line.</p></div>
-<div class="paragraph"><p>This can enabled by default with the configuration option mailinfo.scissors.</p></div>
+<div class="paragraph"><p>This can be enabled by default with the configuration option mailinfo.scissors.</p></div>
 </dd>
 <dt class="hdlist1">
 --no-scissors
# install git-mailinfo.html /usr/share/doc/git-doc/git-mailinfo.html
--- /usr/share/doc/git-doc/git-mailsplit.html	2016-03-21 09:24:28.000000000 -0600
+++ git-mailsplit.html	2016-10-15 00:43:46.868074666 -0600
@@ -748,7 +748,8 @@
 <h2 id="_synopsis">SYNOPSIS</h2>
 <div class="sectionbody">
 <div class="verseblock">
-<pre class="content"><em>git mailsplit</em> [-b] [-f&lt;nn&gt;] [-d&lt;prec&gt;] [--keep-cr] -o&lt;directory&gt; [--] [(&lt;mbox&gt;|&lt;Maildir&gt;)&#8230;]</pre>
+<pre class="content"><em>git mailsplit</em> [-b] [-f&lt;nn&gt;] [-d&lt;prec&gt;] [--keep-cr] [--mboxrd]
+                -o&lt;directory&gt; [--] [(&lt;mbox&gt;|&lt;Maildir&gt;)&#8230;]</pre>
 <div class="attribution">
 </div></div>
 </div>
@@ -835,6 +836,15 @@
         Do not remove <code>\r</code> from lines ending with <code>\r\n</code>.
 </p>
 </dd>
+<dt class="hdlist1">
+--mboxrd
+</dt>
+<dd>
+<p>
+        Input is of the "mboxrd" format and "^&gt;+From " line escaping is
+        reversed.
+</p>
+</dd>
 </dl></div>
 </div>
 </div>
# install git-mailsplit.html /usr/share/doc/git-doc/git-mailsplit.html
--- /usr/share/doc/git-doc/git-merge-file.html	2016-03-21 09:24:28.000000000 -0600
+++ git-merge-file.html	2016-10-15 00:43:47.456074677 -0600
@@ -782,7 +782,8 @@
 lines from <code>&lt;other-file&gt;</code>, or lines from both respectively.  The length of the
 conflict markers can be given with the <code>--marker-size</code> option.</p></div>
 <div class="paragraph"><p>The exit value of this program is negative on error, and the number of
-conflicts otherwise. If the merge was clean, the exit value is 0.</p></div>
+conflicts otherwise (truncated to 127 if there are more than that many
+conflicts). If the merge was clean, the exit value is 0.</p></div>
 <div class="paragraph"><p><em>git merge-file</em> is designed to be a minimal clone of RCS <em>merge</em>; that is, it
 implements all of RCS <em>merge</em>'s functionality which is needed by
 <a href="git.html">git(1)</a>.</p></div>
# install git-merge-file.html /usr/share/doc/git-doc/git-merge-file.html
--- /usr/share/doc/git-doc/git-merge.html	2016-03-21 09:24:28.000000000 -0600
+++ git-merge.html	2016-10-15 00:43:49.324074712 -0600
@@ -750,6 +750,7 @@
 <div class="verseblock">
 <pre class="content"><em>git merge</em> [-n] [--stat] [--no-commit] [--squash] [--[no-]edit]
         [-s &lt;strategy&gt;] [-X &lt;strategy-option&gt;] [-S[&lt;keyid&gt;]]
+        [--[no-]allow-unrelated-histories]
         [--[no-]rerere-autoupdate] [-m &lt;msg&gt;] [&lt;commit&gt;&#8230;]
 <em>git merge</em> &lt;msg&gt; HEAD &lt;commit&gt;&#8230;
 <em>git merge</em> --abort</pre>
@@ -914,14 +915,13 @@
 </dt>
 <dd>
 <p>
-        Produce the working tree and index state as if a real
-        merge happened (except for the merge information),
-        but do not actually make a commit or
-        move the <code>HEAD</code>, nor record <code>$GIT_DIR/MERGE_HEAD</code> to
-        cause the next <code>git commit</code> command to create a merge
-        commit.  This allows you to create a single commit on
-        top of the current branch whose effect is the same as
-        merging another branch (or more in case of an octopus).
+        Produce the working tree and index state as if a real merge
+        happened (except for the merge information), but do not actually
+        make a commit, move the <code>HEAD</code>, or record <code>$GIT_DIR/MERGE_HEAD</code>
+        (to cause the next <code>git commit</code> command to create a merge
+        commit).  This allows you to create a single commit on top of
+        the current branch whose effect is the same as merging another
+        branch (or more in case of an octopus).
 </p>
 <div class="paragraph"><p>With --no-squash perform the merge and commit the result. This
 option can be used to override --squash.</p></div>
@@ -961,8 +961,11 @@
 </dt>
 <dd>
 <p>
-        Verify that the commits being merged have good and trusted GPG signatures
-        and abort the merge in case they do not.
+        Verify that the tip commit of the side branch being merged is
+        signed with a valid key, i.e. a key that has a valid uid: in the
+        default trust model, this means the signing key has been signed by
+        a trusted key.  If the tip commit of the side branch is not signed
+        with a valid key, the merge is aborted.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1014,6 +1017,19 @@
 </p>
 </dd>
 <dt class="hdlist1">
+--allow-unrelated-histories
+</dt>
+<dd>
+<p>
+        By default, <code>git merge</code> command refuses to merge histories
+        that do not share a common ancestor.  This option can be
+        used to override this safety when merging histories of two
+        projects that started their lives independently. As that is
+        a very rare occasion, no configuration variable to enable
+        this by default exists and will not be added.
+</p>
+</dd>
+<dt class="hdlist1">
 -S[&lt;keyid&gt;]
 </dt>
 <dt class="hdlist1">
@@ -1021,7 +1037,9 @@
 </dt>
 <dd>
 <p>
-        GPG-sign the resulting merge commit.
+        GPG-sign the resulting merge commit. The <code>keyid</code> argument is
+        optional and defaults to the committer identity; if specified,
+        it must be stuck to the option without a space.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1036,7 +1054,7 @@
 will be appended to the specified message.</p></div>
 <div class="paragraph"><p>The <em>git fmt-merge-msg</em> command can be
 used to give a good default for automated <em>git merge</em>
-invocations.</p></div>
+invocations. The automated message can include the branch description.</p></div>
 </dd>
 <dt class="hdlist1">
 --[no-]rerere-autoupdate
@@ -1071,10 +1089,12 @@
         Specifying more than one commit will create a merge with
         more than two parents (affectionately called an Octopus merge).
 </p>
-<div class="paragraph"><p>If no commit is given from the command line, and if <code>merge.defaultToUpstream</code>
-configuration variable is set, merge the remote-tracking branches
-that the current branch is configured to use as its upstream.
+<div class="paragraph"><p>If no commit is given from the command line, merge the remote-tracking
+branches that the current branch is configured to use as its upstream.
 See also the configuration section of this manual page.</p></div>
+<div class="paragraph"><p>When <code>FETCH_HEAD</code> (and no other commit) is specified, the branches
+recorded in the <code>.git/FETCH_HEAD</code> file by the previous invocation
+of <code>git fetch</code> for merging are merged to the current branch.</p></div>
 </dd>
 </dl></div>
 </div>
@@ -1217,7 +1237,7 @@
 Barbie&#8217;s remark on your side.  The only thing you can tell is that your
 side wants to say it is hard and you&#8217;d prefer to go shopping, while the
 other side wants to claim it is easy.</p></div>
-<div class="paragraph"><p>An alternative style can be used by setting the "merge.conflictstyle"
+<div class="paragraph"><p>An alternative style can be used by setting the "merge.conflictStyle"
 configuration variable to "diff3".  In "diff3" style, the above conflict
 may look like this:</p></div>
 <div class="listingblock">
@@ -1341,10 +1361,10 @@
 <div class="sect1">
 <h2 id="_merge_strategies">MERGE STRATEGIES</h2>
 <div class="sectionbody">
-<div class="paragraph"><p>The merge mechanism (<em>git-merge</em> and <em>git-pull</em> commands) allows the
+<div class="paragraph"><p>The merge mechanism (<code>git merge</code> and <code>git pull</code> commands) allows the
 backend <em>merge strategies</em> to be chosen with <code>-s</code> option.  Some strategies
 can also take their own options, which can be passed by giving <code>-X&lt;option&gt;</code>
-arguments to <em>git-merge</em> and/or <em>git-pull</em>.</p></div>
+arguments to <code>git merge</code> and/or <code>git pull</code>.</p></div>
 <div class="dlist"><dl>
 <dt class="hdlist1">
 resolve
@@ -1369,7 +1389,7 @@
         merged tree of the common ancestors and uses that as
         the reference tree for the 3-way merge.  This has been
         reported to result in fewer merge conflicts without
-        causing mis-merges by tests done on actual merge commits
+        causing mismerges by tests done on actual merge commits
         taken from Linux 2.6 kernel development history.
         Additionally this can detect and handle merges involving
         renames.  This is the default merge strategy when
@@ -1482,12 +1502,30 @@
 </p>
 </dd>
 <dt class="hdlist1">
+no-renames
+</dt>
+<dd>
+<p>
+        Turn off rename detection.
+        See also <a href="git-diff.html">git-diff(1)</a> <code>--no-renames</code>.
+</p>
+</dd>
+<dt class="hdlist1">
+find-renames[=&lt;n&gt;]
+</dt>
+<dd>
+<p>
+        Turn on rename detection, optionally setting the similarity
+        threshold.  This is the default.
+        See also <a href="git-diff.html">git-diff(1)</a> <code>--find-renames</code>.
+</p>
+</dd>
+<dt class="hdlist1">
 rename-threshold=&lt;n&gt;
 </dt>
 <dd>
 <p>
-        Controls the similarity threshold used for rename detection.
-        See also <a href="git-diff.html">git-diff(1)</a> <code>-M</code>.
+        Deprecated synonym for <code>find-renames=&lt;n&gt;</code>.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1556,7 +1594,7 @@
 <div class="sectionbody">
 <div class="dlist"><dl>
 <dt class="hdlist1">
-merge.conflictstyle
+merge.conflictStyle
 </dt>
 <dd>
 <p>
@@ -1599,6 +1637,16 @@
 </p>
 </dd>
 <dt class="hdlist1">
+merge.branchdesc
+</dt>
+<dd>
+<p>
+        In addition to branch names, populate the log message with
+        the branch description text associated with them.  Defaults
+        to false.
+</p>
+</dd>
+<dt class="hdlist1">
 merge.log
 </dt>
 <dd>
@@ -1661,6 +1709,11 @@
 </li>
 <li>
 <p>
+bc
+</p>
+</li>
+<li>
+<p>
 bc3
 </p>
 </li>
@@ -1696,6 +1749,11 @@
 </li>
 <li>
 <p>
+examdiff
+</p>
+</li>
+<li>
+<p>
 gvimdiff
 </p>
 </li>
@@ -1706,6 +1764,11 @@
 </li>
 <li>
 <p>
+gvimdiff3
+</p>
+</li>
+<li>
+<p>
 kdiff3
 </p>
 </li>
@@ -1746,6 +1809,16 @@
 </li>
 <li>
 <p>
+vimdiff3
+</p>
+</li>
+<li>
+<p>
+winmerge
+</p>
+</li>
+<li>
+<p>
 xxdiff
 </p>
 </li>
@@ -1761,7 +1834,7 @@
         message if conflicts were detected. Level 1 outputs only
         conflicts, 2 outputs conflicts and file changes.  Level 5 and
         above outputs debugging information.  The default is level 2.
-        Can be overridden by the <em>GIT_MERGE_VERBOSITY</em> environment variable.
+        Can be overridden by the <code>GIT_MERGE_VERBOSITY</code> environment variable.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1793,7 +1866,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
-branch.&lt;name&gt;.mergeoptions
+branch.&lt;name&gt;.mergeOptions
 </dt>
 <dd>
 <p>
# install git-merge.html /usr/share/doc/git-doc/git-merge.html
--- /usr/share/doc/git-doc/git-mergetool.html	2016-03-21 09:24:28.000000000 -0600
+++ git-mergetool.html	2016-10-15 00:43:48.404074695 -0600
@@ -829,6 +829,9 @@
 <p>
         Don&#8217;t prompt before each invocation of the merge resolution
         program.
+        This is the default if the merge resolution program is
+        explicitly specified with the <code>--tool</code> option or with the
+        <code>merge.tool</code> configuration variable.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -836,9 +839,8 @@
 </dt>
 <dd>
 <p>
-        Prompt before each invocation of the merge resolution program.
-        This is the default behaviour; the option is provided to
-        override any configuration settings.
+        Prompt before each invocation of the merge resolution program
+        to give the user a chance to skip the path.
 </p>
 </dd>
 </dl></div>
# install git-mergetool.html /usr/share/doc/git-doc/git-mergetool.html
--- /usr/share/doc/git-doc/git-mktag.html	2016-03-21 09:24:28.000000000 -0600
+++ git-mktag.html	2016-10-15 00:43:49.528074716 -0600
@@ -748,7 +748,7 @@
 <h2 id="_synopsis">SYNOPSIS</h2>
 <div class="sectionbody">
 <div class="verseblock">
-<pre class="content"><em>git mktag</em> &lt; signature_file</pre>
+<pre class="content"><em>git mktag</em></pre>
 <div class="attribution">
 </div></div>
 </div>
@@ -764,7 +764,8 @@
 <div class="sect1">
 <h2 id="_tag_format">Tag Format</h2>
 <div class="sectionbody">
-<div class="paragraph"><p>A tag signature file has a very simple fixed format: four lines of</p></div>
+<div class="paragraph"><p>A tag signature file, to be fed to this command&#8217;s standard input,
+has a very simple fixed format: four lines of</p></div>
 <div class="literalblock">
 <div class="content">
 <pre><code>object &lt;sha1&gt;
# install git-mktag.html /usr/share/doc/git-doc/git-mktag.html
--- /usr/share/doc/git-doc/git-mktree.html	2016-03-21 09:24:28.000000000 -0600
+++ git-mktree.html	2016-10-15 00:43:49.736074720 -0600
@@ -792,7 +792,7 @@
 <p>
         Allow building of more than one tree object before exiting.  Each
         tree is separated by as single blank line. The final new-line is
-        optional.  Note - if the <em>-z</em> option is used, lines are terminated
+        optional.  Note - if the <code>-z</code> option is used, lines are terminated
         with NUL.
 </p>
 </dd>
# install git-mktree.html /usr/share/doc/git-doc/git-mktree.html
--- /usr/share/doc/git-doc/git-mv.html	2016-03-21 09:24:28.000000000 -0600
+++ git-mv.html	2016-10-15 00:43:49.968074724 -0600
@@ -793,7 +793,7 @@
         Skip move or rename actions which would lead to an error
         condition. An error happens when a source is neither existing nor
         controlled by Git, or when it would overwrite an existing
-        file unless <em>-f</em> is given.
+        file unless <code>-f</code> is given.
 </p>
 </dd>
 <dt class="hdlist1">
# install git-mv.html /usr/share/doc/git-doc/git-mv.html
--- /usr/share/doc/git-doc/git-notes.html	2016-03-21 09:24:28.000000000 -0600
+++ git-notes.html	2016-10-15 00:43:50.708074738 -0600
@@ -749,12 +749,12 @@
 <div class="sectionbody">
 <div class="verseblock">
 <pre class="content"><em>git notes</em> [list [&lt;object&gt;]]
-<em>git notes</em> add [-f] [-F &lt;file&gt; | -m &lt;msg&gt; | (-c | -C) &lt;object&gt;] [&lt;object&gt;]
+<em>git notes</em> add [-f] [--allow-empty] [-F &lt;file&gt; | -m &lt;msg&gt; | (-c | -C) &lt;object&gt;] [&lt;object&gt;]
 <em>git notes</em> copy [-f] ( --stdin | &lt;from-object&gt; &lt;to-object&gt; )
-<em>git notes</em> append [-F &lt;file&gt; | -m &lt;msg&gt; | (-c | -C) &lt;object&gt;] [&lt;object&gt;]
-<em>git notes</em> edit [&lt;object&gt;]
+<em>git notes</em> append [--allow-empty] [-F &lt;file&gt; | -m &lt;msg&gt; | (-c | -C) &lt;object&gt;] [&lt;object&gt;]
+<em>git notes</em> edit [--allow-empty] [&lt;object&gt;]
 <em>git notes</em> show [&lt;object&gt;]
-<em>git notes</em> merge [-v | -q] [-s &lt;strategy&gt; ] &lt;notes_ref&gt;
+<em>git notes</em> merge [-v | -q] [-s &lt;strategy&gt; ] &lt;notes-ref&gt;
 <em>git notes</em> merge --commit [-v | -q]
 <em>git notes</em> merge --abort [-v | -q]
 <em>git notes</em> remove [--ignore-missing] [--stdin] [&lt;object&gt;&#8230;]
@@ -872,7 +872,7 @@
         any) into the current notes ref (called "local").
 </p>
 <div class="paragraph"><p>If conflicts arise and a strategy for automatically resolving
-conflicting notes (see the -s/--strategy option) is not given,
+conflicting notes (see the "NOTES MERGE STRATEGIES" section) is not given,
 the "manual" resolver is used. This resolver checks out the
 conflicting notes in a special worktree (<code>.git/NOTES_MERGE_WORKTREE</code>),
 and instructs the user to manually resolve the conflicts there.
@@ -977,18 +977,29 @@
 </dt>
 <dd>
 <p>
-        Like <em>-C</em>, but with <em>-c</em> the editor is invoked, so that
+        Like <em>-C</em>, but with <code>-c</code> the editor is invoked, so that
         the user can further edit the note message.
 </p>
 </dd>
 <dt class="hdlist1">
+--allow-empty
+</dt>
+<dd>
+<p>
+        Allow an empty note object to be stored. The default behavior is
+        to automatically remove empty notes.
+</p>
+</dd>
+<dt class="hdlist1">
 --ref &lt;ref&gt;
 </dt>
 <dd>
 <p>
         Manipulate the notes tree in &lt;ref&gt;.  This overrides
-        <em>GIT_NOTES_REF</em> and the "core.notesRef" configuration.  The ref
-        is taken to be in <code>refs/notes/</code> if it is not qualified.
+        <code>GIT_NOTES_REF</code> and the "core.notesRef" configuration.  The ref
+        specifies the full refname when it begins with <code>refs/notes/</code>; when it
+        begins with <code>notes/</code>, <code>refs/</code> and otherwise <code>refs/notes/</code> is prefixed
+        to form a full name of the ref.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1033,6 +1044,7 @@
         When merging notes, resolve notes conflicts using the given
         strategy. The following strategies are recognized: "manual"
         (default), "ours", "theirs", "union" and "cat_sort_uniq".
+        This option overrides the "notes.mergeStrategy" configuration setting.
         See the "NOTES MERGE STRATEGIES" section below for more
         information on each notes merge strategy.
 </p>
@@ -1121,6 +1133,8 @@
 When done, the user can either finalize the merge with
 <em>git notes merge --commit</em>, or abort the merge with
 <em>git notes merge --abort</em>.</p></div>
+<div class="paragraph"><p>Users may select an automated merge strategy from among the following using
+either -s/--strategy option or configuring notes.mergeStrategy accordingly:</p></div>
 <div class="paragraph"><p>"ours" automatically resolves conflicting notes in favor of the local
 version (i.e. the current notes ref).</p></div>
 <div class="paragraph"><p>"theirs" automatically resolves notes conflicts in favor of the remote
@@ -1161,7 +1175,7 @@
 <div class="content">
 <pre><code>$ cc *.c
 $ blob=$(git hash-object -w a.out)
-$ git notes --ref=built add -C "$blob" HEAD</code></pre>
+$ git notes --ref=built add --allow-empty -C "$blob" HEAD</code></pre>
 </div></div>
 <div class="paragraph"><p>(You cannot simply use <code>git notes --ref=built add -F a.out HEAD</code>
 because that is not binary-safe.)
@@ -1186,16 +1200,39 @@
 </p>
 </dd>
 <dt class="hdlist1">
+notes.mergeStrategy
+</dt>
+<dd>
+<p>
+        Which merge strategy to choose by default when resolving notes
+        conflicts.  Must be one of <code>manual</code>, <code>ours</code>, <code>theirs</code>, <code>union</code>, or
+        <code>cat_sort_uniq</code>.  Defaults to <code>manual</code>.  See "NOTES MERGE STRATEGIES"
+        section above for more information on each strategy.
+</p>
+<div class="paragraph"><p>This setting can be overridden by passing the <code>--strategy</code> option.</p></div>
+</dd>
+<dt class="hdlist1">
+notes.&lt;name&gt;.mergeStrategy
+</dt>
+<dd>
+<p>
+        Which merge strategy to choose when doing a notes merge into
+        refs/notes/&lt;name&gt;.  This overrides the more general
+        "notes.mergeStrategy".  See the "NOTES MERGE STRATEGIES" section above
+        for more information on each available strategy.
+</p>
+</dd>
+<dt class="hdlist1">
 notes.displayRef
 </dt>
 <dd>
 <p>
         Which ref (or refs, if a glob or specified more than once), in
         addition to the default set by <code>core.notesRef</code> or
-        <em>GIT_NOTES_REF</em>, to read notes from when showing commit
+        <code>GIT_NOTES_REF</code>, to read notes from when showing commit
         messages with the <em>git log</em> family of commands.
         This setting can be overridden on the command line or by the
-        <em>GIT_NOTES_DISPLAY_REF</em> environment variable.
+        <code>GIT_NOTES_DISPLAY_REF</code> environment variable.
         See <a href="git-log.html">git-log(1)</a>.
 </p>
 </dd>
@@ -1209,7 +1246,7 @@
         notes from the original to the rewritten commit.  Defaults to
         <code>true</code>.  See also "<code>notes.rewriteRef</code>" below.
 </p>
-<div class="paragraph"><p>This setting can be overridden by the <em>GIT_NOTES_REWRITE_REF</em>
+<div class="paragraph"><p>This setting can be overridden by the <code>GIT_NOTES_REWRITE_REF</code>
 environment variable.</p></div>
 </dd>
 <dt class="hdlist1">
@@ -1219,7 +1256,8 @@
 <p>
         When copying notes during a rewrite, what to do if the target
         commit already has a note.  Must be one of <code>overwrite</code>,
-        <code>concatenate</code>, and <code>ignore</code>.  Defaults to <code>concatenate</code>.
+        <code>concatenate</code>, <code>cat_sort_uniq</code>, or <code>ignore</code>.  Defaults to
+        <code>concatenate</code>.
 </p>
 <div class="paragraph"><p>This setting can be overridden with the <code>GIT_NOTES_REWRITE_MODE</code>
 environment variable.</p></div>
@@ -1236,7 +1274,7 @@
 </p>
 <div class="paragraph"><p>Does not have a default value; you must configure this variable to
 enable note rewriting.</p></div>
-<div class="paragraph"><p>Can be overridden with the <em>GIT_NOTES_REWRITE_REF</em> environment variable.</p></div>
+<div class="paragraph"><p>Can be overridden with the <code>GIT_NOTES_REWRITE_REF</code> environment variable.</p></div>
 </dd>
 </dl></div>
 </div>
@@ -1246,7 +1284,7 @@
 <div class="sectionbody">
 <div class="dlist"><dl>
 <dt class="hdlist1">
-<em>GIT_NOTES_REF</em>
+<code>GIT_NOTES_REF</code>
 </dt>
 <dd>
 <p>
@@ -1255,13 +1293,13 @@
 </p>
 </dd>
 <dt class="hdlist1">
-<em>GIT_NOTES_DISPLAY_REF</em>
+<code>GIT_NOTES_DISPLAY_REF</code>
 </dt>
 <dd>
 <p>
         Colon-delimited list of refs or globs indicating which refs,
         in addition to the default from <code>core.notesRef</code> or
-        <em>GIT_NOTES_REF</em>, to read notes from when showing commit
+        <code>GIT_NOTES_REF</code>, to read notes from when showing commit
         messages.
         This overrides the <code>notes.displayRef</code> setting.
 </p>
@@ -1269,18 +1307,18 @@
 does not match any refs is silently ignored.</p></div>
 </dd>
 <dt class="hdlist1">
-<em>GIT_NOTES_REWRITE_MODE</em>
+<code>GIT_NOTES_REWRITE_MODE</code>
 </dt>
 <dd>
 <p>
         When copying notes during a rewrite, what to do if the target
         commit already has a note.
-        Must be one of <code>overwrite</code>, <code>concatenate</code>, and <code>ignore</code>.
+        Must be one of <code>overwrite</code>, <code>concatenate</code>, <code>cat_sort_uniq</code>, or <code>ignore</code>.
         This overrides the <code>core.rewriteMode</code> setting.
 </p>
 </dd>
 <dt class="hdlist1">
-<em>GIT_NOTES_REWRITE_REF</em>
+<code>GIT_NOTES_REWRITE_REF</code>
 </dt>
 <dd>
 <p>
@@ -1297,7 +1335,7 @@
 <div class="sect1">
 <h2 id="_git">GIT</h2>
 <div class="sectionbody">
-<div class="paragraph"><p>Part of the <a href="git.html">git(7)</a> suite</p></div>
+<div class="paragraph"><p>Part of the <a href="git.html">git(1)</a> suite</p></div>
 </div>
 </div>
 </div>
# install git-notes.html /usr/share/doc/git-doc/git-notes.html
--- /usr/share/doc/git-doc/git-p4.html	2016-03-21 09:24:28.000000000 -0600
+++ git-p4.html	2016-10-15 00:43:51.424074752 -0600
@@ -873,7 +873,7 @@
 </div></div>
 <div class="paragraph"><p>This imports the specified depot into
 <em>refs/remotes/p4/master</em> in an existing Git repository.  The
-<em>--branch</em> option can be used to specify a different branch to
+<code>--branch</code> option can be used to specify a different branch to
 be used for the p4 content.</p></div>
 <div class="paragraph"><p>If a Git repository includes branches <em>refs/remotes/origin/p4</em>, these
 will be fetched and consulted first during a <em>git p4 sync</em>.  Since
@@ -881,7 +881,7 @@
 from a Git remote, this can be useful in a multi-developer environment.</p></div>
 <div class="paragraph"><p>If there are multiple branches, doing <em>git p4 sync</em> will automatically
 use the "BRANCH DETECTION" algorithm to try to partition new changes
-into the right branch.  This can be overridden with the <em>--branch</em>
+into the right branch.  This can be overridden with the <code>--branch</code>
 option to specify just a single branch to update.</p></div>
 </div>
 <div class="sect2">
@@ -900,7 +900,7 @@
 <h3 id="_submit">Submit</h3>
 <div class="paragraph"><p>Submitting changes from a Git repository back to the p4 repository
 requires a separate p4 client workspace.  This should be specified
-using the <em>P4CLIENT</em> environment variable or the Git configuration
+using the <code>P4CLIENT</code> environment variable or the Git configuration
 variable <em>git-p4.client</em>.  The p4 client must exist, but the client root
 will be created and populated if it does not already exist.</p></div>
 <div class="paragraph"><p>To submit all changes that are in the current Git branch but not in
@@ -915,9 +915,9 @@
 <pre><code>$ git p4 submit topicbranch</code></pre>
 </div></div>
 <div class="paragraph"><p>The upstream reference is generally <em>refs/remotes/p4/master</em>, but can
-be overridden using the <em>--origin=</em> command-line option.</p></div>
+be overridden using the <code>--origin=</code> command-line option.</p></div>
 <div class="paragraph"><p>The p4 changes will be created as the user invoking <em>git p4 submit</em>. The
-<em>--preserve-user</em> option will cause ownership to be modified
+<code>--preserve-user</code> option will cause ownership to be modified
 according to the author of the Git commit.  This option requires admin
 privileges in p4, which can be granted using <em>p4 protect</em>.</p></div>
 </div>
@@ -935,7 +935,7 @@
 </dt>
 <dd>
 <p>
-        Set the <em>GIT_DIR</em> environment variable.  See <a href="git.html">git(1)</a>.
+        Set the <code>GIT_DIR</code> environment variable.  See <a href="git.html">git(1)</a>.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1031,7 +1031,7 @@
         where they will be treated as remote-tracking branches by
         <a href="git-branch.html">git-branch(1)</a> and other commands.  This option instead
         puts p4 branches in <em>refs/heads/p4/</em>.  Note that future
-        sync operations must specify <em>--import-local</em> as well so that
+        sync operations must specify <code>--import-local</code> as well so that
         they can find the p4 branches in refs/heads.
 </p>
 </dd>
@@ -1040,9 +1040,25 @@
 </dt>
 <dd>
 <p>
-        Limit the number of imported changes to <em>n</em>.  Useful to
-        limit the amount of history when using the <em>@all</em> p4 revision
-        specifier.
+        Import at most <em>n</em> changes, rather than the entire range of
+        changes included in the given revision specifier. A typical
+        usage would be use <em>@all</em> as the revision specifier, but then
+        to use <em>--max-changes 1000</em> to import only the last 1000
+        revisions rather than the entire revision history.
+</p>
+</dd>
+<dt class="hdlist1">
+--changes-block-size &lt;n&gt;
+</dt>
+<dd>
+<p>
+        The internal block size to use when converting a revision
+        specifier such as <em>@all</em> into a list of specific change
+        numbers. Instead of using a single call to <em>p4 changes</em> to
+        find the full list of changes for the conversion, there are a
+        sequence of calls to <em>p4 changes -m</em>, each of which requests
+        one block of changes of the given size. The default block size
+        is 500, which should usually be suitable.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1054,7 +1070,7 @@
         default, involves removing the entire depot path.  With this
         option, the full p4 depot path is retained in Git.  For example,
         path <em>//depot/main/foo/bar.c</em>, when imported from
-        <em>//depot/main/</em>, becomes <em>foo/bar.c</em>.  With <em>--keep-path</em>, the
+        <em>//depot/main/</em>, becomes <em>foo/bar.c</em>.  With <code>--keep-path</code>, the
         Git path is instead <em>depot/main/foo/bar.c</em>.
 </p>
 </dd>
@@ -1067,6 +1083,14 @@
         See the "CLIENT SPEC" section below.
 </p>
 </dd>
+<dt class="hdlist1">
+-/ &lt;path&gt;
+</dt>
+<dd>
+<p>
+        Exclude selected depot paths when cloning or syncing.
+</p>
+</dd>
 </dl></div>
 </div>
 <div class="sect2">
@@ -1092,14 +1116,6 @@
         Perform a bare clone.  See <a href="git-clone.html">git-clone(1)</a>.
 </p>
 </dd>
-<dt class="hdlist1">
--/ &lt;path&gt;
-</dt>
-<dd>
-<p>
-        Exclude selected depot paths when cloning.
-</p>
-</dd>
 </dl></div>
 </div>
 <div class="sect2">
@@ -1113,7 +1129,7 @@
 <p>
         Upstream location from which commits are identified to submit to
         p4.  By default, this is the most recent p4 commit reachable
-        from <em>HEAD</em>.
+        from <code>HEAD</code>.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1248,7 +1264,7 @@
     Import all changes from both named depot paths into a single
     repository.  Only files below these directories are included.
     There is not a subdirectory in Git for each "proj1" and "proj2".
-    You must use the <em>--destination</em> option when specifying more
+    You must use the <code>--destination</code> option when specifying more
     than one depot path.  The revision specifier must be specified
     identically on each depot path.  If there are files in the
     depot paths with the same name, the path with the most recently
@@ -1265,7 +1281,7 @@
 <div class="paragraph"><p>The p4 client specification is maintained with the <em>p4 client</em> command
 and contains among other fields, a View that specifies how the depot
 is mapped into the client repository.  The <em>clone</em> and <em>sync</em> commands
-can consult the client spec when given the <em>--use-client-spec</em> option or
+can consult the client spec when given the <code>--use-client-spec</code> option or
 when the useClientSpec variable is true.  After <em>git p4 clone</em>, the
 useClientSpec variable is automatically set in the repository
 configuration file.  This allows future <em>git p4 submit</em> commands to
@@ -1297,7 +1313,7 @@
 different areas in the tree, and indicate related content.  <em>git p4</em>
 can use these mappings to determine branch relationships.</p></div>
 <div class="paragraph"><p>If you have a repository where all the branches of interest exist as
-subdirectories of a single depot path, you can use <em>--detect-branches</em>
+subdirectories of a single depot path, you can use <code>--detect-branches</code>
 when cloning or syncing to have <em>git p4</em> automatically find
 subdirectories in p4, and to generate these as branches in Git.</p></div>
 <div class="paragraph"><p>For example, if the P4 repository structure is:</p></div>
@@ -1478,10 +1494,101 @@
 <p>
         Specify that the p4 client spec should be used to identify p4
         depot paths of interest.  This is equivalent to specifying the
-        option <em>--use-client-spec</em>.  See the "CLIENT SPEC" section above.
+        option <code>--use-client-spec</code>.  See the "CLIENT SPEC" section above.
         This variable is a boolean, not the name of a p4 client.
 </p>
 </dd>
+<dt class="hdlist1">
+git-p4.pathEncoding
+</dt>
+<dd>
+<p>
+        Perforce keeps the encoding of a path as given by the originating OS.
+        Git expects paths encoded as UTF-8. Use this config to tell git-p4
+        what encoding Perforce had used for the paths. This encoding is used
+        to transcode the paths to UTF-8. As an example, Perforce on Windows
+        often uses "cp1252" to encode path names.
+</p>
+</dd>
+<dt class="hdlist1">
+git-p4.largeFileSystem
+</dt>
+<dd>
+<p>
+        Specify the system that is used for large (binary) files. Please note
+        that large file systems do not support the <em>git p4 submit</em> command.
+        Only Git LFS is implemented right now (see <a href="https://git-lfs.github.com/">https://git-lfs.github.com/</a>
+        for more information). Download and install the Git LFS command line
+        extension to use this option and configure it like this:
+</p>
+<div class="listingblock">
+<div class="content">
+<pre><code>git config       git-p4.largeFileSystem GitLFS</code></pre>
+</div></div>
+</dd>
+<dt class="hdlist1">
+git-p4.largeFileExtensions
+</dt>
+<dd>
+<p>
+        All files matching a file extension in the list will be processed
+        by the large file system. Do not prefix the extensions with <em>.</em>.
+</p>
+</dd>
+<dt class="hdlist1">
+git-p4.largeFileThreshold
+</dt>
+<dd>
+<p>
+        All files with an uncompressed size exceeding the threshold will be
+        processed by the large file system. By default the threshold is
+        defined in bytes. Add the suffix k, m, or g to change the unit.
+</p>
+</dd>
+<dt class="hdlist1">
+git-p4.largeFileCompressedThreshold
+</dt>
+<dd>
+<p>
+        All files with a compressed size exceeding the threshold will be
+        processed by the large file system. This option might slow down
+        your clone/sync process. By default the threshold is defined in
+        bytes. Add the suffix k, m, or g to change the unit.
+</p>
+</dd>
+<dt class="hdlist1">
+git-p4.largeFilePush
+</dt>
+<dd>
+<p>
+        Boolean variable which defines if large files are automatically
+        pushed to a server.
+</p>
+</dd>
+<dt class="hdlist1">
+git-p4.keepEmptyCommits
+</dt>
+<dd>
+<p>
+        A changelist that contains only excluded files will be imported
+        as an empty commit if this boolean option is set to true.
+</p>
+</dd>
+<dt class="hdlist1">
+git-p4.mapUser
+</dt>
+<dd>
+<p>
+        Map a P4 user to a name and email address in Git. Use a string
+        with the following format to create a mapping:
+</p>
+<div class="listingblock">
+<div class="content">
+<pre><code>git config --add git-p4.mapUser "p4user = First Last &lt;mail@address.com&gt;"</code></pre>
+</div></div>
+<div class="paragraph"><p>A mapping will override any user information from P4. Mappings for
+multiple P4 user can be defined.</p></div>
+</dd>
 </dl></div>
 </div>
 <div class="sect2">
# install git-p4.html /usr/share/doc/git-doc/git-p4.html
--- /usr/share/doc/git-doc/git-pack-objects.html	2016-03-21 09:24:28.000000000 -0600
+++ git-pack-objects.html	2016-10-15 00:43:51.776074758 -0600
@@ -752,7 +752,7 @@
         [--no-reuse-delta] [--delta-base-offset] [--non-empty]
         [--local] [--incremental] [--window=&lt;n&gt;] [--depth=&lt;n&gt;]
         [--revs [--unpacked | --all]] [--stdout | base-name]
-        [--keep-true-parents] &lt; object-list</pre>
+        [--shallow] [--keep-true-parents] &lt; object-list</pre>
 <div class="attribution">
 </div></div>
 </div>
@@ -818,6 +818,8 @@
         the same way as <em>git rev-list</em> with the <code>--objects</code> flag
         uses its <code>commit</code> arguments to build the list of objects it
         outputs.  The objects on the resulting list are packed.
+        Besides revisions, <code>--not</code> or <code>--shallow &lt;SHA-1&gt;</code> lines are
+        also accepted.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -883,8 +885,8 @@
         out of memory with a large window, but still be able to take
         advantage of the large window for the smaller objects.  The
         size can be suffixed with "k", "m", or "g".
-        <code>--window-memory=0</code> makes memory usage unlimited, which is the
-        default.
+        <code>--window-memory=0</code> makes memory usage unlimited.  The default
+        is taken from the <code>pack.windowMemory</code> configuration variable.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -894,7 +896,8 @@
 <p>
         Maximum size of each output pack file. The size can be suffixed with
         "k", "m", or "g". The minimum size allowed is limited to 1 MiB.
-        If specified,  multiple packfiles may be created.
+        If specified, multiple packfiles may be created, which also
+        prevents the creation of a bitmap index.
         The default is unlimited, unless the config variable
         <code>pack.packSizeLimit</code> is set.
 </p>
@@ -1035,6 +1038,16 @@
 (see <a href="git-index-pack.html">git-index-pack(1)</a>) to restore the self-contained property.</p></div>
 </dd>
 <dt class="hdlist1">
+--shallow
+</dt>
+<dd>
+<p>
+        Optimize a pack that will be provided to a client with a shallow
+        repository.  This option, combined with --thin, can result in a
+        smaller pack at the cost of speed.
+</p>
+</dd>
+<dt class="hdlist1">
 --delta-base-offset
 </dt>
 <dd>
# install git-pack-objects.html /usr/share/doc/git-doc/git-pack-objects.html
--- /usr/share/doc/git-doc/git-patch-id.html	2016-03-21 09:24:28.000000000 -0600
+++ git-patch-id.html	2016-10-15 00:43:52.652074775 -0600
@@ -748,7 +748,7 @@
 <h2 id="_synopsis">SYNOPSIS</h2>
 <div class="sectionbody">
 <div class="verseblock">
-<pre class="content"><em>git patch-id</em> &lt; &lt;patch&gt;</pre>
+<pre class="content"><em>git patch-id</em> [--stable | --unstable]</pre>
 <div class="attribution">
 </div></div>
 </div>
@@ -756,10 +756,11 @@
 <div class="sect1">
 <h2 id="_description">DESCRIPTION</h2>
 <div class="sectionbody">
-<div class="paragraph"><p>A "patch ID" is nothing but a SHA-1 of the diff associated with a patch, with
-whitespace and line numbers ignored.  As such, it&#8217;s "reasonably stable", but at
-the same time also reasonably unique, i.e., two patches that have the same "patch
-ID" are almost guaranteed to be the same thing.</p></div>
+<div class="paragraph"><p>Read a patch from the standard input and compute the patch ID for it.</p></div>
+<div class="paragraph"><p>A "patch ID" is nothing but a sum of SHA-1 of the file diffs associated with a
+patch, with whitespace and line numbers ignored.  As such, it&#8217;s "reasonably
+stable", but at the same time also reasonably unique, i.e., two patches that
+have the same "patch ID" are almost guaranteed to be the same thing.</p></div>
 <div class="paragraph"><p>IOW, you can use this thing to look for likely duplicate commits.</p></div>
 <div class="paragraph"><p>When dealing with <em>git diff-tree</em> output, it takes advantage of
 the fact that the patch is prefixed with the object name of the
@@ -773,6 +774,55 @@
 <div class="sectionbody">
 <div class="dlist"><dl>
 <dt class="hdlist1">
+--stable
+</dt>
+<dd>
+<p>
+        Use a "stable" sum of hashes as the patch ID. With this option:
+</p>
+<div class="ulist"><ul>
+<li>
+<p>
+Reordering file diffs that make up a patch does not affect the ID.
+           In particular, two patches produced by comparing the same two trees
+           with two different settings for "-O&lt;orderfile&gt;" result in the same
+           patch ID signature, thereby allowing the computed result to be used
+           as a key to index some meta-information about the change between
+           the two trees;
+</p>
+</li>
+<li>
+<p>
+Result is different from the value produced by git 1.9 and older
+           or produced when an "unstable" hash (see --unstable below) is
+           configured - even when used on a diff output taken without any use
+           of "-O&lt;orderfile&gt;", thereby making existing databases storing such
+           "unstable" or historical patch-ids unusable.
+</p>
+<div class="literalblock">
+<div class="content">
+<pre><code>This is the default if patchid.stable is set to true.</code></pre>
+</div></div>
+</li>
+</ul></div>
+</dd>
+<dt class="hdlist1">
+--unstable
+</dt>
+<dd>
+<p>
+        Use an "unstable" hash as the patch ID. With this option,
+        the result produced is compatible with the patch-id value produced
+        by git 1.9 and older.  Users with pre-existing databases storing
+        patch-ids produced by git 1.9 and older (who do not deal with reordered
+        patches) may want to use this option.
+</p>
+<div class="literalblock">
+<div class="content">
+<pre><code>This is the default.</code></pre>
+</div></div>
+</dd>
+<dt class="hdlist1">
 &lt;patch&gt;
 </dt>
 <dd>
# install git-patch-id.html /usr/share/doc/git-doc/git-patch-id.html
--- /usr/share/doc/git-doc/git-prune.html	2016-03-21 09:24:28.000000000 -0600
+++ git-prune.html	2016-10-15 00:43:53.128074784 -0600
@@ -837,7 +837,7 @@
 <div class="sect1">
 <h2 id="_example">EXAMPLE</h2>
 <div class="sectionbody">
-<div class="paragraph"><p>To prune objects not used by your repository nor another that
+<div class="paragraph"><p>To prune objects not used by your repository or another that
 borrows from your repository via its
 <code>.git/objects/info/alternates</code>:</p></div>
 <div class="listingblock">
# install git-prune.html /usr/share/doc/git-doc/git-prune.html
--- /usr/share/doc/git-doc/git-pull.html	2016-03-21 09:24:28.000000000 -0600
+++ git-pull.html	2016-10-15 00:43:53.932074799 -0600
@@ -808,8 +808,6 @@
 <div class="sect1">
 <h2 id="_options">OPTIONS</h2>
 <div class="sectionbody">
-<div class="paragraph"><p>Options meant for <em>git pull</em> itself and the underlying <em>git merge</em>
-must be given before the options meant for <em>git fetch</em>.</p></div>
 <div class="dlist"><dl>
 <dt class="hdlist1">
 -q
@@ -961,14 +959,13 @@
 </dt>
 <dd>
 <p>
-        Produce the working tree and index state as if a real
-        merge happened (except for the merge information),
-        but do not actually make a commit or
-        move the <code>HEAD</code>, nor record <code>$GIT_DIR/MERGE_HEAD</code> to
-        cause the next <code>git commit</code> command to create a merge
-        commit.  This allows you to create a single commit on
-        top of the current branch whose effect is the same as
-        merging another branch (or more in case of an octopus).
+        Produce the working tree and index state as if a real merge
+        happened (except for the merge information), but do not actually
+        make a commit, move the <code>HEAD</code>, or record <code>$GIT_DIR/MERGE_HEAD</code>
+        (to cause the next <code>git commit</code> command to create a merge
+        commit).  This allows you to create a single commit on top of
+        the current branch whose effect is the same as merging another
+        branch (or more in case of an octopus).
 </p>
 <div class="paragraph"><p>With --no-squash perform the merge and commit the result. This
 option can be used to override --squash.</p></div>
@@ -1008,8 +1005,11 @@
 </dt>
 <dd>
 <p>
-        Verify that the commits being merged have good and trusted GPG signatures
-        and abort the merge in case they do not.
+        Verify that the tip commit of the side branch being merged is
+        signed with a valid key, i.e. a key that has a valid uid: in the
+        default trust model, this means the signing key has been signed by
+        a trusted key.  If the tip commit of the side branch is not signed
+        with a valid key, the merge is aborted.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1025,10 +1025,23 @@
 </p>
 </dd>
 <dt class="hdlist1">
+--allow-unrelated-histories
+</dt>
+<dd>
+<p>
+        By default, <code>git merge</code> command refuses to merge histories
+        that do not share a common ancestor.  This option can be
+        used to override this safety when merging histories of two
+        projects that started their lives independently. As that is
+        a very rare occasion, no configuration variable to enable
+        this by default exists and will not be added.
+</p>
+</dd>
+<dt class="hdlist1">
 -r
 </dt>
 <dt class="hdlist1">
---rebase[=false|true|preserve]
+--rebase[=false|true|preserve|interactive]
 </dt>
 <dd>
 <p>
@@ -1038,11 +1051,11 @@
         was rebased since last fetched, the rebase uses that information
         to avoid rebasing non-local changes.
 </p>
-<div class="paragraph"><p>When preserve, also rebase the current branch on top of the upstream
-branch, but pass <code>--preserve-merges</code> along to <code>git rebase</code> so that
-locally created merge commits will not be flattened.</p></div>
+<div class="paragraph"><p>When set to preserve, rebase with the <code>--preserve-merges</code> option passed
+to <code>git rebase</code> so that locally created merge commits will not be flattened.</p></div>
 <div class="paragraph"><p>When false, merge the current branch into the upstream branch.</p></div>
-<div class="paragraph"><p>See <code>pull.rebase</code>, <code>branch.&lt;name&gt;.rebase</code> and <code>branch.autosetuprebase</code> in
+<div class="paragraph"><p>When <code>interactive</code>, enable the interactive mode of rebase.</p></div>
+<div class="paragraph"><p>See <code>pull.rebase</code>, <code>branch.&lt;name&gt;.rebase</code> and <code>branch.autoSetupRebase</code> in
 <a href="git-config.html">git-config(1)</a> if you want to make <code>git pull</code> always use
 <code>--rebase</code> instead of merging.</p></div>
 <div class="admonitionblock">
@@ -1065,6 +1078,21 @@
         Override earlier --rebase.
 </p>
 </dd>
+<dt class="hdlist1">
+--autostash
+</dt>
+<dt class="hdlist1">
+--no-autostash
+</dt>
+<dd>
+<p>
+        Before starting rebase, stash local modifications away (see
+        <a href="git-stash.html">git-stash(1)</a>) if needed, and apply the stash when
+        done. <code>--no-autostash</code> is useful to override the <code>rebase.autoStash</code>
+        configuration variable (see <a href="git-config.html">git-config(1)</a>).
+</p>
+<div class="paragraph"><p>This option is only valid when "--rebase" is used.</p></div>
+</dd>
 </dl></div>
 </div>
 <div class="sect2">
@@ -1096,10 +1124,11 @@
 </dt>
 <dd>
 <p>
-        Deepen or shorten the history of a <em>shallow</em> repository created by
-        <code>git clone</code> with <code>--depth=&lt;depth&gt;</code> option (see <a href="git-clone.html">git-clone(1)</a>)
-        to the specified number of commits from the tip of each remote
-        branch history. Tags for the deepened commits are not fetched.
+        Limit fetching to the specified number of commits from the tip of
+        each remote branch history. If fetching to a <em>shallow</em> repository
+        created by <code>git clone</code> with <code>--depth=&lt;depth&gt;</code> option (see
+        <a href="git-clone.html">git-clone(1)</a>), deepen or shorten the history to the specified
+        number of commits. Tags for the deepened commits are not fetched.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1159,7 +1188,7 @@
         By default, tags that point at objects that are downloaded
         from the remote repository are fetched and stored locally.
         This option disables this automatic tag following. The default
-        behavior for a remote may be specified with the remote.&lt;name&gt;.tagopt
+        behavior for a remote may be specified with the remote.&lt;name&gt;.tagOpt
         setting. See <a href="git-config.html">git-config(1)</a>.
 </p>
 </dd>
@@ -1185,7 +1214,7 @@
 <dd>
 <p>
         When given, and the repository to fetch from is handled
-        by <em>git fetch-pack</em>, <em>--exec=&lt;upload-pack&gt;</em> is passed to
+        by <em>git fetch-pack</em>, <code>--exec=&lt;upload-pack&gt;</code> is passed to
         the command to specify non-default path for the command
         run on the other end.
 </p>
@@ -1202,6 +1231,28 @@
 </p>
 </dd>
 <dt class="hdlist1">
+-4
+</dt>
+<dt class="hdlist1">
+--ipv4
+</dt>
+<dd>
+<p>
+        Use IPv4 addresses only, ignoring IPv6 addresses.
+</p>
+</dd>
+<dt class="hdlist1">
+-6
+</dt>
+<dt class="hdlist1">
+--ipv6
+</dt>
+<dd>
+<p>
+        Use IPv6 addresses only, ignoring IPv4 addresses.
+</p>
+</dd>
+<dt class="hdlist1">
 &lt;repository&gt;
 </dt>
 <dd>
@@ -1217,10 +1268,17 @@
 </dt>
 <dd>
 <p>
-        The format of a &lt;refspec&gt; parameter is an optional plus
-        <code>+</code>, followed by the source ref &lt;src&gt;, followed
-        by a colon <code>:</code>, followed by the destination ref &lt;dst&gt;.
-</p>
+        Specifies which refs to fetch and which local refs to update.
+        When no &lt;refspec&gt;s appear on the command line, the refs to fetch
+        are read from <code>remote.&lt;repository&gt;.fetch</code> variables instead
+        (see <a href="git-fetch.html">git-fetch(1)</a>).
+</p>
+<div class="paragraph"><p>The format of a &lt;refspec&gt; parameter is an optional plus
+<code>+</code>, followed by the source ref &lt;src&gt;, followed
+by a colon <code>:</code>, followed by the destination ref &lt;dst&gt;.
+The colon can be omitted when &lt;dst&gt; is empty.</p></div>
+<div class="paragraph"><p><code>tag &lt;tag&gt;</code> means the same as <code>refs/tags/&lt;tag&gt;:refs/tags/&lt;tag&gt;</code>;
+it requests fetching everything up to the given tag.</p></div>
 <div class="paragraph"><p>The remote ref that matches &lt;src&gt;
 is fetched, and if &lt;dst&gt; is not empty string, the local
 ref that matches it is fast-forwarded using &lt;src&gt;.
@@ -1232,15 +1290,15 @@
 <td class="icon">
 <div class="title">Note</div>
 </td>
-<td class="content">If the remote branch from which you want to pull is
-modified in non-linear ways such as being rewound and
-rebased frequently, then a pull will attempt a merge with
-an older version of itself, likely conflict, and fail.
-It is under these conditions that you would want to use
-the <code>+</code> sign to indicate non-fast-forward updates will
-be needed.  There is currently no easy way to determine
-or declare that a branch will be made available in a
-repository with this behavior; the pulling user simply
+<td class="content">When the remote branch you want to fetch is known to
+be rewound and rebased regularly, it is expected that
+its new tip will not be descendant of its previous tip
+(as stored in your remote-tracking branch the last time
+you fetched).  You would want
+to use the <code>+</code> sign to indicate non-fast-forward updates
+will be needed for such branches.  There is no way to
+determine or declare that a branch will be made available
+in a repository with this behavior; the pulling user simply
 must know this is the expected usage pattern for a branch.</td>
 </tr></table>
 </div>
@@ -1249,56 +1307,25 @@
 <td class="icon">
 <div class="title">Note</div>
 </td>
-<td class="content">You never do your own development on branches that appear
-on the right hand side of a &lt;refspec&gt; colon on <code>Pull:</code> lines;
-they are to be updated by <em>git fetch</em>.  If you intend to do
-development derived from a remote branch <code>B</code>, have a <code>Pull:</code>
-line to track it (i.e. <code>Pull: B:remote-B</code>), and have a separate
-branch <code>my-B</code> to do your development on top of it.  The latter
-is created by <code>git branch my-B remote-B</code> (or its equivalent <code>git
-checkout -b my-B remote-B</code>).  Run <code>git fetch</code> to keep track of
-the progress of the remote side, and when you see something new
-on the remote branch, merge it into your development branch with
-<code>git pull . remote-B</code>, while you are on <code>my-B</code> branch.</td>
-</tr></table>
-</div>
-<div class="admonitionblock">
-<table><tr>
-<td class="icon">
-<div class="title">Note</div>
-</td>
 <td class="content">There is a difference between listing multiple &lt;refspec&gt;
 directly on <em>git pull</em> command line and having multiple
-<code>Pull:</code> &lt;refspec&gt; lines for a &lt;repository&gt; and running
+<code>remote.&lt;repository&gt;.fetch</code> entries in your configuration
+for a &lt;repository&gt; and running a
 <em>git pull</em> command without any explicit &lt;refspec&gt; parameters.
-&lt;refspec&gt; listed explicitly on the command line are always
+&lt;refspec&gt;s listed explicitly on the command line are always
 merged into the current branch after fetching.  In other words,
-if you list more than one remote refs, you would be making
-an Octopus.  While <em>git pull</em> run without any explicit &lt;refspec&gt;
-parameter takes default &lt;refspec&gt;s from <code>Pull:</code> lines, it
-merges only the first &lt;refspec&gt; found into the current branch,
-after fetching all the remote refs.  This is because making an
+if you list more than one remote ref, <em>git pull</em> will create
+an Octopus merge.  On the other hand, if you do not list any
+explicit &lt;refspec&gt; parameter on the command line, <em>git pull</em>
+will fetch all the &lt;refspec&gt;s it finds in the
+<code>remote.&lt;repository&gt;.fetch</code> configuration and merge
+only the first &lt;refspec&gt; found into the current branch.
+This is because making an
 Octopus from remote refs is rarely done, while keeping track
 of multiple remote heads in one-go by fetching more than one
 is often useful.</td>
 </tr></table>
 </div>
-<div class="paragraph"><p>Some short-cut notations are also supported.</p></div>
-<div class="ulist"><ul>
-<li>
-<p>
-<code>tag &lt;tag&gt;</code> means the same as <code>refs/tags/&lt;tag&gt;:refs/tags/&lt;tag&gt;</code>;
-  it requests fetching everything up to the given tag.
-</p>
-</li>
-<li>
-<p>
-A parameter &lt;ref&gt; without a colon merges &lt;ref&gt; into the current
-  branch,
-  and updates the remote-tracking branches (if any).
-</p>
-</li>
-</ul></div>
 </dd>
 </dl></div>
 </div>
@@ -1312,9 +1339,8 @@
 Depending on the transport protocol, some of this information may be
 absent.</p></div>
 <div class="paragraph"><p>Git supports ssh, git, http, and https protocols (in addition, ftp,
-and ftps can be used for fetching and rsync can be used for fetching
-and pushing, but these are inefficient and deprecated; do not use
-them).</p></div>
+and ftps can be used for fetching, but this is inefficient and
+deprecated; do not use it).</p></div>
 <div class="paragraph"><p>The native transport (i.e. git:// URL) does no authentication and
 should be used with caution on unsecured networks.</p></div>
 <div class="paragraph"><p>The following syntaxes may be used with them:</p></div>
@@ -1339,11 +1365,6 @@
 ftp&#91;s&#93;://host.xz&#91;:port&#93;/path/to/repo.git/
 </p>
 </li>
-<li>
-<p>
-rsync://host.xz/path/to/repo.git/
-</p>
-</li>
 </ul></div>
 <div class="paragraph"><p>An alternative scp-like syntax may also be used with the ssh protocol:</p></div>
 <div class="ulist"><ul>
@@ -1537,10 +1558,10 @@
 <div class="sect1">
 <h2 id="_merge_strategies">MERGE STRATEGIES</h2>
 <div class="sectionbody">
-<div class="paragraph"><p>The merge mechanism (<em>git-merge</em> and <em>git-pull</em> commands) allows the
+<div class="paragraph"><p>The merge mechanism (<code>git merge</code> and <code>git pull</code> commands) allows the
 backend <em>merge strategies</em> to be chosen with <code>-s</code> option.  Some strategies
 can also take their own options, which can be passed by giving <code>-X&lt;option&gt;</code>
-arguments to <em>git-merge</em> and/or <em>git-pull</em>.</p></div>
+arguments to <code>git merge</code> and/or <code>git pull</code>.</p></div>
 <div class="dlist"><dl>
 <dt class="hdlist1">
 resolve
@@ -1565,7 +1586,7 @@
         merged tree of the common ancestors and uses that as
         the reference tree for the 3-way merge.  This has been
         reported to result in fewer merge conflicts without
-        causing mis-merges by tests done on actual merge commits
+        causing mismerges by tests done on actual merge commits
         taken from Linux 2.6 kernel development history.
         Additionally this can detect and handle merges involving
         renames.  This is the default merge strategy when
@@ -1678,12 +1699,30 @@
 </p>
 </dd>
 <dt class="hdlist1">
+no-renames
+</dt>
+<dd>
+<p>
+        Turn off rename detection.
+        See also <a href="git-diff.html">git-diff(1)</a> <code>--no-renames</code>.
+</p>
+</dd>
+<dt class="hdlist1">
+find-renames[=&lt;n&gt;]
+</dt>
+<dd>
+<p>
+        Turn on rename detection, optionally setting the similarity
+        threshold.  This is the default.
+        See also <a href="git-diff.html">git-diff(1)</a> <code>--find-renames</code>.
+</p>
+</dd>
+<dt class="hdlist1">
 rename-threshold=&lt;n&gt;
 </dt>
 <dd>
 <p>
-        Controls the similarity threshold used for rename detection.
-        See also <a href="git-diff.html">git-diff(1)</a> <code>-M</code>.
+        Deprecated synonym for <code>find-renames=&lt;n&gt;</code>.
 </p>
 </dd>
 <dt class="hdlist1">
# install git-pull.html /usr/share/doc/git-doc/git-pull.html
--- /usr/share/doc/git-doc/git-push.html	2016-03-21 09:24:28.000000000 -0600
+++ git-push.html	2016-10-15 00:43:54.688074813 -0600
@@ -748,8 +748,10 @@
 <h2 id="_synopsis">SYNOPSIS</h2>
 <div class="sectionbody">
 <div class="verseblock">
-<pre class="content"><em>git push</em> [--all | --mirror | --tags] [--follow-tags] [-n | --dry-run] [--receive-pack=&lt;git-receive-pack&gt;]
-           [--repo=&lt;repository&gt;] [-f | --force] [--prune] [-v | --verbose] [-u | --set-upstream]
+<pre class="content"><em>git push</em> [--all | --mirror | --tags] [--follow-tags] [--atomic] [-n | --dry-run] [--receive-pack=&lt;git-receive-pack&gt;]
+           [--repo=&lt;repository&gt;] [-f | --force] [-d | --delete] [--prune] [-v | --verbose]
+           [-u | --set-upstream] [--push-option=&lt;string&gt;]
+           [--[no-]signed|--sign=(true|false|if-asked)]
            [--force-with-lease[=&lt;refname&gt;[:&lt;expect&gt;]]]
            [--no-verify] [&lt;repository&gt; [&lt;refspec&gt;&#8230;]]</pre>
 <div class="attribution">
@@ -772,7 +774,13 @@
 arguments or <code>--all</code>, <code>--mirror</code>, <code>--tags</code> options, the command finds
 the default <code>&lt;refspec&gt;</code> by consulting <code>remote.*.push</code> configuration,
 and if it is not found, honors <code>push.default</code> configuration to decide
-what to push (See gitlink:git-config[1] for the meaning of <code>push.default</code>).</p></div>
+what to push (See <a href="git-config.html">git-config(1)</a> for the meaning of <code>push.default</code>).</p></div>
+<div class="paragraph"><p>When neither the command-line nor the configuration specify what to
+push, the default behavior is used, which corresponds to the <code>simple</code>
+value for <code>push.default</code>: the current branch is pushed to the
+corresponding upstream branch, but as a safety measure, the push is
+aborted if the upstream branch does not have the same name as the
+local one.</p></div>
 </div>
 </div>
 <div class="sect1">
@@ -809,7 +817,7 @@
 If <code>git push [&lt;repository&gt;]</code> without any <code>&lt;refspec&gt;</code> argument is set to
 update some ref at the destination with <code>&lt;src&gt;</code> with
 <code>remote.&lt;repository&gt;.push</code> configuration variable, <code>:&lt;dst&gt;</code> part can
-be omitted---such a push will update a ref that <code>&lt;src&gt;</code> normally updates
+be omitted&#8212;such a push will update a ref that <code>&lt;src&gt;</code> normally updates
 without any <code>&lt;refspec&gt;</code> on the command line.  Otherwise, missing
 <code>:&lt;dst&gt;</code> means to update the same ref as the <code>&lt;src&gt;</code>.</p></div>
 <div class="paragraph"><p>The object referenced by &lt;src&gt; is used to update the &lt;dst&gt; reference
@@ -832,8 +840,8 @@
 </dt>
 <dd>
 <p>
-        Instead of naming each ref to push, specifies that all
-        refs under <code>refs/heads/</code> be pushed.
+        Push all branches (i.e. refs under <code>refs/heads/</code>); cannot be
+        used with other &lt;refspec&gt;.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -913,7 +921,50 @@
         Push all the refs that would be pushed without this option,
         and also push annotated tags in <code>refs/tags</code> that are missing
         from the remote but are pointing at commit-ish that are
-        reachable from the refs being pushed.
+        reachable from the refs being pushed.  This can also be specified
+        with configuration variable <code>push.followTags</code>.  For more
+        information, see <code>push.followTags</code> in <a href="git-config.html">git-config(1)</a>.
+</p>
+</dd>
+<dt class="hdlist1">
+--[no-]signed
+</dt>
+<dt class="hdlist1">
+--sign=(true|false|if-asked)
+</dt>
+<dd>
+<p>
+        GPG-sign the push request to update refs on the receiving
+        side, to allow it to be checked by the hooks and/or be
+        logged.  If <code>false</code> or <code>--no-signed</code>, no signing will be
+        attempted.  If <code>true</code> or <code>--signed</code>, the push will fail if the
+        server does not support signed pushes.  If set to <code>if-asked</code>,
+        sign if and only if the server supports signed pushes.  The push
+        will also fail if the actual call to <code>gpg --sign</code> fails.  See
+        <a href="git-receive-pack.html">git-receive-pack(1)</a> for the details on the receiving end.
+</p>
+</dd>
+<dt class="hdlist1">
+--[no-]atomic
+</dt>
+<dd>
+<p>
+        Use an atomic transaction on the remote side if available.
+        Either all refs are updated, or on error, no refs are updated.
+        If the server does not support atomic pushes the push will fail.
+</p>
+</dd>
+<dt class="hdlist1">
+-o
+</dt>
+<dt class="hdlist1">
+--push-option
+</dt>
+<dd>
+<p>
+        Transmit the given string to the server, which passes them to
+        the pre-receive as well as the post-receive hook. The given string
+        must not contain a NUL or LF character.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -944,9 +995,8 @@
         Usually, "git push" refuses to update a remote ref that is
         not an ancestor of the local ref used to overwrite it.
 </p>
-<div class="paragraph"><p>This option bypasses the check, but instead requires that the
-current value of the ref to be the expected value.  "git push"
-fails otherwise.</p></div>
+<div class="paragraph"><p>This option overrides this restriction if the current value of the
+remote ref is the expected value.  "git push" fails otherwise.</p></div>
 <div class="paragraph"><p>Imagine that you have to rebase what you have already published.
 You will have to bypass the "must fast-forward" rule in order to
 replace the history you originally published with the rebased history.
@@ -956,24 +1006,24 @@
 <div class="paragraph"><p>This option allows you to say that you expect the history you are
 updating is what you rebased and want to replace. If the remote ref
 still points at the commit you specified, you can be sure that no
-other people did anything to the ref (it is like taking a "lease" on
-the ref without explicitly locking it, and you update the ref while
-making sure that your earlier "lease" is still valid).</p></div>
+other people did anything to the ref. It is like taking a "lease" on
+the ref without explicitly locking it, and the remote ref is updated
+only if the "lease" is still valid.</p></div>
 <div class="paragraph"><p><code>--force-with-lease</code> alone, without specifying the details, will protect
 all remote refs that are going to be updated by requiring their
 current value to be the same as the remote-tracking branch we have
-for them, unless specified with a <code>--force-with-lease=&lt;refname&gt;:&lt;expect&gt;</code>
-option that explicitly states what the expected value is.</p></div>
+for them.</p></div>
 <div class="paragraph"><p><code>--force-with-lease=&lt;refname&gt;</code>, without specifying the expected value, will
 protect the named ref (alone), if it is going to be updated, by
 requiring its current value to be the same as the remote-tracking
 branch we have for it.</p></div>
 <div class="paragraph"><p><code>--force-with-lease=&lt;refname&gt;:&lt;expect&gt;</code> will protect the named ref (alone),
 if it is going to be updated, by requiring its current value to be
-the same as the specified value &lt;expect&gt; (which is allowed to be
+the same as the specified value <code>&lt;expect&gt;</code> (which is allowed to be
 different from the remote-tracking branch we have for the refname,
 or we do not even have to have such a remote-tracking branch when
-this form is used).</p></div>
+this form is used).  If <code>&lt;expect&gt;</code> is the empty string, then the named ref
+must not already exist.</p></div>
 <div class="paragraph"><p>Note that all forms other than <code>--force-with-lease=&lt;refname&gt;:&lt;expect&gt;</code>
 that specifies the expected current value of the ref explicitly are
 still experimental and their semantics may change as we gain experience
@@ -1011,22 +1061,9 @@
 </dt>
 <dd>
 <p>
-        This option is only relevant if no &lt;repository&gt; argument is
-        passed in the invocation. In this case, <em>git push</em> derives the
-        remote name from the current branch: If it tracks a remote
-        branch, then that remote repository is pushed to. Otherwise,
-        the name "origin" is used. For this latter case, this option
-        can be used to override the name "origin". In other words,
-        the difference between these two commands
+        This option is equivalent to the &lt;repository&gt; argument. If both
+        are specified, the command-line argument takes precedence.
 </p>
-<div class="listingblock">
-<div class="content">
-<pre><code>git push public         #1
-git push --repo=public  #2</code></pre>
-</div></div>
-<div class="paragraph"><p>is that #1 always pushes to "public" whereas #2 pushes to "public"
-only if the current branch does not track a remote branch. This is
-useful if you write an alias or script around <em>git push</em>.</p></div>
 </dd>
 <dt class="hdlist1">
 -u
@@ -1039,7 +1076,7 @@
         For every branch that is up to date or successfully pushed, add
         upstream (tracking) reference, used by argument-less
         <a href="git-pull.html">git-pull(1)</a> and other commands. For more information,
-        see <em>branch.&lt;name&gt;.merge</em> in <a href="git-config.html">git-config(1)</a>.
+        see <code>branch.&lt;name&gt;.merge</code> in <a href="git-config.html">git-config(1)</a>.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1089,19 +1126,25 @@
 </p>
 </dd>
 <dt class="hdlist1">
---recurse-submodules=check|on-demand
+--no-recurse-submodules
+</dt>
+<dt class="hdlist1">
+--recurse-submodules=check|on-demand|no
 </dt>
 <dd>
 <p>
-        Make sure all submodule commits used by the revisions to be
-        pushed are available on a remote-tracking branch. If <em>check</em> is
-        used Git will verify that all submodule commits that changed in
-        the revisions to be pushed are available on at least one remote
-        of the submodule. If any commits are missing the push will be
-        aborted and exit with non-zero status. If <em>on-demand</em> is used
-        all submodules that changed in the revisions to be pushed will
-        be pushed. If on-demand was not able to push all necessary
-        revisions it will also be aborted and exit with non-zero status.
+        May be used to make sure all submodule commits used by the
+        revisions to be pushed are available on a remote-tracking branch.
+        If <em>check</em> is used Git will verify that all submodule commits that
+        changed in the revisions to be pushed are available on at least one
+        remote of the submodule. If any commits are missing the push will
+        be aborted and exit with non-zero status. If <em>on-demand</em> is used
+        all submodules that changed in the revisions to be pushed will be
+        pushed. If on-demand was not able to push all necessary revisions
+        it will also be aborted and exit with non-zero status. A value of
+        <em>no</em> or using <code>--no-recurse-submodules</code> can be used to override the
+        push.recurseSubmodules configuration variable when no submodule
+        recursion is required.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1114,6 +1157,28 @@
         push.  With --no-verify, the hook is bypassed completely.
 </p>
 </dd>
+<dt class="hdlist1">
+-4
+</dt>
+<dt class="hdlist1">
+--ipv4
+</dt>
+<dd>
+<p>
+        Use IPv4 addresses only, ignoring IPv6 addresses.
+</p>
+</dd>
+<dt class="hdlist1">
+-6
+</dt>
+<dt class="hdlist1">
+--ipv6
+</dt>
+<dd>
+<p>
+        Use IPv6 addresses only, ignoring IPv4 addresses.
+</p>
+</dd>
 </dl></div>
 </div>
 </div>
@@ -1125,9 +1190,8 @@
 Depending on the transport protocol, some of this information may be
 absent.</p></div>
 <div class="paragraph"><p>Git supports ssh, git, http, and https protocols (in addition, ftp,
-and ftps can be used for fetching and rsync can be used for fetching
-and pushing, but these are inefficient and deprecated; do not use
-them).</p></div>
+and ftps can be used for fetching, but this is inefficient and
+deprecated; do not use it).</p></div>
 <div class="paragraph"><p>The native transport (i.e. git:// URL) does no authentication and
 should be used with caution on unsecured networks.</p></div>
 <div class="paragraph"><p>The following syntaxes may be used with them:</p></div>
@@ -1152,11 +1216,6 @@
 ftp&#91;s&#93;://host.xz&#91;:port&#93;/path/to/repo.git/
 </p>
 </li>
-<li>
-<p>
-rsync://host.xz/path/to/repo.git/
-</p>
-</li>
 </ul></div>
 <div class="paragraph"><p>An alternative scp-like syntax may also be used with the ssh protocol:</p></div>
 <div class="ulist"><ul>
@@ -1537,7 +1596,7 @@
 will now start building on top of B.</p></div>
 <div class="paragraph"><p>The command by default does not allow an update that is not a fast-forward
 to prevent such loss of history.</p></div>
-<div class="paragraph"><p>If you do not want to lose your work (history from X to B) nor the work by
+<div class="paragraph"><p>If you do not want to lose your work (history from X to B) or the work by
 the other person (history from X to A), you would need to first fetch the
 history from the repository, create a history that contains changes done
 by both parties, and push the result back.</p></div>
@@ -1595,8 +1654,10 @@
 </dt>
 <dd>
 <p>
-        Without additional configuration, works like
-        <code>git push origin :</code>.
+        Without additional configuration, pushes the current branch to
+        the configured upstream (<code>remote.origin.merge</code> configuration
+        variable) if it has the same name as the current branch, and
+        errors out without pushing otherwise.
 </p>
 <div class="paragraph"><p>The default behavior of this command when no &lt;refspec&gt; is given can be
 configured by setting the <code>push</code> option of the remote, or the <code>push.default</code>
# install git-push.html /usr/share/doc/git-doc/git-push.html
--- /usr/share/doc/git-doc/git-quiltimport.html	2016-03-21 09:24:28.000000000 -0600
+++ git-quiltimport.html	2016-10-15 00:43:54.912074817 -0600
@@ -748,7 +748,8 @@
 <h2 id="_synopsis">SYNOPSIS</h2>
 <div class="sectionbody">
 <div class="verseblock">
-<pre class="content"><em>git quiltimport</em> [--dry-run | -n] [--author &lt;author&gt;] [--patches &lt;dir&gt;]</pre>
+<pre class="content"><em>git quiltimport</em> [--dry-run | -n] [--author &lt;author&gt;] [--patches &lt;dir&gt;]
+                [--series &lt;file&gt;]</pre>
 <div class="attribution">
 </div></div>
 </div>
@@ -800,11 +801,21 @@
 </dt>
 <dd>
 <p>
-        The directory to find the quilt patches and the
-        quilt series file.
+        The directory to find the quilt patches.
 </p>
 <div class="paragraph"><p>The default for the patch directory is patches
-or the value of the $QUILT_PATCHES environment
+or the value of the <code>$QUILT_PATCHES</code> environment
+variable.</p></div>
+</dd>
+<dt class="hdlist1">
+--series &lt;file&gt;
+</dt>
+<dd>
+<p>
+        The quilt series file.
+</p>
+<div class="paragraph"><p>The default for the series file is &lt;patches&gt;/series
+or the value of the <code>$QUILT_SERIES</code> environment
 variable.</p></div>
 </dd>
 </dl></div>
# install git-quiltimport.html /usr/share/doc/git-doc/git-quiltimport.html
--- /usr/share/doc/git-doc/git-read-tree.html	2016-03-21 09:24:29.000000000 -0600
+++ git-read-tree.html	2016-10-15 00:43:55.396074826 -0600
@@ -826,7 +826,7 @@
 <dd>
 <p>
         Check if the command would error out, without updating the index
-        nor the files in the working tree for real.
+        or the files in the working tree for real.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1127,7 +1127,7 @@
 "merged"), the original tree (stage 1, aka "orig"), and the two trees
 you are trying to merge (stage 2 and 3 respectively).</p></div>
 <div class="paragraph"><p>The order of stages 1, 2 and 3 (hence the order of three
-&lt;tree-ish&gt; command line arguments) are significant when you
+&lt;tree-ish&gt; command-line arguments) are significant when you
 start a 3-way merge with an index file that is already
 populated.  Here is an outline of how the algorithm works:</p></div>
 <div class="ulist"><ul>
# install git-read-tree.html /usr/share/doc/git-doc/git-read-tree.html
--- /usr/share/doc/git-doc/git-rebase.html	2016-03-21 09:24:29.000000000 -0600
+++ git-rebase.html	2016-10-15 00:43:56.312074843 -0600
@@ -739,7 +739,7 @@
 <h2>NAME</h2>
 <div class="sectionbody">
 <p>git-rebase -
-   Forward-port local commits to the updated upstream head
+   Reapply commits on top of another base tip
 </p>
 </div>
 </div>
@@ -749,7 +749,7 @@
 <div class="sectionbody">
 <div class="verseblock">
 <pre class="content"><em>git rebase</em> [-i | --interactive] [options] [--exec &lt;cmd&gt;] [--onto &lt;newbase&gt;]
-        [&lt;upstream&gt;] [&lt;branch&gt;]
+        [&lt;upstream&gt; [&lt;branch&gt;]]
 <em>git rebase</em> [-i | --interactive] [options] [--exec &lt;cmd&gt;] [--onto &lt;newbase&gt;]
         --root [&lt;branch&gt;]
 <em>git rebase</em> --continue | --skip | --abort | --edit-todo</pre>
@@ -764,14 +764,16 @@
 <code>git checkout &lt;branch&gt;</code> before doing anything else.  Otherwise
 it remains on the current branch.</p></div>
 <div class="paragraph"><p>If &lt;upstream&gt; is not specified, the upstream configured in
-branch.&lt;name&gt;.remote and branch.&lt;name&gt;.merge options will be used; see
-<a href="git-config.html">git-config(1)</a> for details.  If you are currently not on any
-branch or if the current branch does not have a configured upstream,
-the rebase will abort.</p></div>
+branch.&lt;name&gt;.remote and branch.&lt;name&gt;.merge options will be used (see
+<a href="git-config.html">git-config(1)</a> for details) and the <code>--fork-point</code> option is
+assumed.  If you are currently not on any branch or if the current
+branch does not have a configured upstream, the rebase will abort.</p></div>
 <div class="paragraph"><p>All changes made by commits in the current branch but that are not
 in &lt;upstream&gt; are saved to a temporary area.  This is the same set
-of commits that would be shown by <code>git log &lt;upstream&gt;..HEAD</code> (or
-<code>git log HEAD</code>, if --root is specified).</p></div>
+of commits that would be shown by <code>git log &lt;upstream&gt;..HEAD</code>; or by
+<code>git log 'fork_point'..HEAD</code>, if <code>--fork-point</code> is active (see the
+description on <code>--fork-point</code> below); or by <code>git log HEAD</code>, if the
+<code>--root</code> option is specified.</p></div>
 <div class="paragraph"><p>The current branch is reset to &lt;upstream&gt;, or &lt;newbase&gt; if the
 --onto option was supplied.  This has the exact same effect as
 <code>git reset --hard &lt;upstream&gt;</code> (or &lt;newbase&gt;).  ORIG_HEAD is set
@@ -812,8 +814,8 @@
 remain the checked-out branch.</p></div>
 <div class="paragraph"><p>If the upstream branch already contains a change you have made (e.g.,
 because you mailed a patch which was applied upstream), then that commit
-will be skipped. For example, running &#8216;git rebase master` on the
-following history (in which A&#8217; and A introduce the same set of changes,
+will be skipped. For example, running <code>git rebase master</code> on the
+following history (in which <code>A'</code> and <code>A</code> introduce the same set of changes,
 but have different committer information):</p></div>
 <div class="listingblock">
 <div class="content">
@@ -938,19 +940,38 @@
 </p>
 </dd>
 <dt class="hdlist1">
-rebase.autosquash
+rebase.autoSquash
 </dt>
 <dd>
 <p>
-        If set to true enable <em>--autosquash</em> option by default.
+        If set to true enable <code>--autosquash</code> option by default.
 </p>
 </dd>
 <dt class="hdlist1">
-rebase.autostash
+rebase.autoStash
 </dt>
 <dd>
 <p>
-        If set to true enable <em>--autostash</em> option by default.
+        If set to true enable <code>--autostash</code> option by default.
+</p>
+</dd>
+<dt class="hdlist1">
+rebase.missingCommitsCheck
+</dt>
+<dd>
+<p>
+        If set to "warn", print warnings about removed commits in
+        interactive mode. If set to "error", print the warnings and
+        stop the rebase. If set to "ignore", no checking is
+        done. "ignore" by default.
+</p>
+</dd>
+<dt class="hdlist1">
+rebase.instructionFormat
+</dt>
+<dd>
+<p>
+        Custom commit list format to use during an <code>--interactive</code> rebase.
 </p>
 </dd>
 </dl></div>
@@ -1087,6 +1108,19 @@
 </p>
 </dd>
 <dt class="hdlist1">
+-S[&lt;keyid&gt;]
+</dt>
+<dt class="hdlist1">
+--gpg-sign[=&lt;keyid&gt;]
+</dt>
+<dd>
+<p>
+        GPG-sign commits. The <code>keyid</code> argument is optional and
+        defaults to the committer identity; if specified, it must be
+        stuck to the option without a space.
+</p>
+</dd>
+<dt class="hdlist1">
 -q
 </dt>
 <dt class="hdlist1">
@@ -1164,11 +1198,8 @@
 </dt>
 <dd>
 <p>
-        Force the rebase even if the current branch is a descendant
-        of the commit you are rebasing onto.  Normally non-interactive rebase will
-        exit with the message "Current branch is up to date" in such a
-        situation.
-        Incompatible with the --interactive option.
+        Force a rebase even if the current branch is up-to-date and
+        the command without <code>--force</code> would return without doing anything.
 </p>
 <div class="paragraph"><p>You may find this (or --no-ff with an interactive rebase) helpful after
 reverting a topic branch merge, as this option recreates the topic branch with
@@ -1184,13 +1215,17 @@
 </dt>
 <dd>
 <p>
-        Use <em>git merge-base --fork-point</em> to find a better common ancestor
-        between <code>upstream</code> and <code>branch</code> when calculating which commits have
-        have been introduced by <code>branch</code> (see <a href="git-merge-base.html">git-merge-base(1)</a>).
-</p>
-<div class="paragraph"><p>If no non-option arguments are given on the command line, then the default is
-<code>--fork-point @{u}</code> otherwise the <code>upstream</code> argument is interpreted literally
-unless the <code>--fork-point</code> option is specified.</p></div>
+        Use reflog to find a better common ancestor between &lt;upstream&gt;
+        and &lt;branch&gt; when calculating which commits have been
+        introduced by &lt;branch&gt;.
+</p>
+<div class="paragraph"><p>When --fork-point is active, <em>fork_point</em> will be used instead of
+&lt;upstream&gt; to calculate the set of commits to rebase, where
+<em>fork_point</em> is the result of <code>git merge-base --fork-point &lt;upstream&gt;
+&lt;branch&gt;</code> command (see <a href="git-merge-base.html">git-merge-base(1)</a>).  If <em>fork_point</em>
+ends up being empty, the &lt;upstream&gt; will be used as a fallback.</p></div>
+<div class="paragraph"><p>If either &lt;upstream&gt; or --root is given on the command line, then the
+default is <code>--no-fork-point</code>, otherwise the default is <code>--fork-point</code>.</p></div>
 </dd>
 <dt class="hdlist1">
 --ignore-whitespace
@@ -1230,6 +1265,9 @@
         user edit that list before rebasing.  This mode can also be used to
         split commits (see SPLITTING COMMITS below).
 </p>
+<div class="paragraph"><p>The commit list format can be changed by setting the configuration option
+rebase.instructionFormat.  A customized instruction format will automatically
+have the long commit hash prepended to the format.</p></div>
 </dd>
 <dt class="hdlist1">
 -p
@@ -1239,7 +1277,9 @@
 </dt>
 <dd>
 <p>
-        Instead of ignoring merges, try to recreate them.
+        Recreate merge commits instead of flattening the history by replaying
+        commits a merge commit introduces. Merge conflict resolutions or manual
+        amendments to merge commits are not preserved.
 </p>
 <div class="paragraph"><p>This uses the <code>--interactive</code> machinery internally, but combining it
 with the <code>--interactive</code> option explicitly is generally not a good
@@ -1257,8 +1297,6 @@
         final history. &lt;cmd&gt; will be interpreted as one or more shell
         commands.
 </p>
-<div class="paragraph"><p>This option can only be used with the <code>--interactive</code> option
-(see INTERACTIVE MODE below).</p></div>
 <div class="paragraph"><p>You may execute several commands by either using one instance of <code>--exec</code>
 with several commands:</p></div>
 <div class="literalblock">
@@ -1273,6 +1311,8 @@
 <div class="paragraph"><p>If <code>--autosquash</code> is used, "exec" lines will not be appended for
 the intermediate commits, and will only appear at the end of each
 squash/fixup series.</p></div>
+<div class="paragraph"><p>This uses the <code>--interactive</code> machinery internally, but it can be run
+without an explicit <code>--interactive</code>.</p></div>
 </dd>
 <dt class="hdlist1">
 --root
@@ -1306,13 +1346,16 @@
         "fixup! " or "squash! " after the first, in case you referred to an
         earlier fixup/squash with <code>git commit --fixup/--squash</code>.
 </p>
-<div class="paragraph"><p>This option is only valid when the <em>--interactive</em> option is used.</p></div>
-<div class="paragraph"><p>If the <em>--autosquash</em> option is enabled by default using the
-configuration variable <code>rebase.autosquash</code>, this option can be
+<div class="paragraph"><p>This option is only valid when the <code>--interactive</code> option is used.</p></div>
+<div class="paragraph"><p>If the <code>--autosquash</code> option is enabled by default using the
+configuration variable <code>rebase.autoSquash</code>, this option can be
 used to override and disable this setting.</p></div>
 </dd>
 <dt class="hdlist1">
---[no-]autostash
+--autostash
+</dt>
+<dt class="hdlist1">
+--no-autostash
 </dt>
 <dd>
 <p>
@@ -1344,10 +1387,10 @@
 <div class="sect1">
 <h2 id="_merge_strategies">MERGE STRATEGIES</h2>
 <div class="sectionbody">
-<div class="paragraph"><p>The merge mechanism (<em>git-merge</em> and <em>git-pull</em> commands) allows the
+<div class="paragraph"><p>The merge mechanism (<code>git merge</code> and <code>git pull</code> commands) allows the
 backend <em>merge strategies</em> to be chosen with <code>-s</code> option.  Some strategies
 can also take their own options, which can be passed by giving <code>-X&lt;option&gt;</code>
-arguments to <em>git-merge</em> and/or <em>git-pull</em>.</p></div>
+arguments to <code>git merge</code> and/or <code>git pull</code>.</p></div>
 <div class="dlist"><dl>
 <dt class="hdlist1">
 resolve
@@ -1372,7 +1415,7 @@
         merged tree of the common ancestors and uses that as
         the reference tree for the 3-way merge.  This has been
         reported to result in fewer merge conflicts without
-        causing mis-merges by tests done on actual merge commits
+        causing mismerges by tests done on actual merge commits
         taken from Linux 2.6 kernel development history.
         Additionally this can detect and handle merges involving
         renames.  This is the default merge strategy when
@@ -1485,12 +1528,30 @@
 </p>
 </dd>
 <dt class="hdlist1">
+no-renames
+</dt>
+<dd>
+<p>
+        Turn off rename detection.
+        See also <a href="git-diff.html">git-diff(1)</a> <code>--no-renames</code>.
+</p>
+</dd>
+<dt class="hdlist1">
+find-renames[=&lt;n&gt;]
+</dt>
+<dd>
+<p>
+        Turn on rename detection, optionally setting the similarity
+        threshold.  This is the default.
+        See also <a href="git-diff.html">git-diff(1)</a> <code>--find-renames</code>.
+</p>
+</dd>
+<dt class="hdlist1">
 rename-threshold=&lt;n&gt;
 </dt>
 <dd>
 <p>
-        Controls the similarity threshold used for rename detection.
-        See also <a href="git-diff.html">git-diff(1)</a> <code>-M</code>.
+        Deprecated synonym for <code>find-renames=&lt;n&gt;</code>.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1657,6 +1718,8 @@
 rebasing.</p></div>
 <div class="paragraph"><p>If you just want to edit the commit message for a commit, replace the
 command "pick" with the command "reword".</p></div>
+<div class="paragraph"><p>To drop a commit, replace the command "pick" with "drop", or just
+delete the matching line.</p></div>
 <div class="paragraph"><p>If you want to fold two or more commits into one, replace the command
 "pick" for the second and subsequent commits with "squash" or "fixup".
 If the commits had different authors, the folded commit will be
# install git-rebase.html /usr/share/doc/git-doc/git-rebase.html
--- /usr/share/doc/git-doc/git-receive-pack.html	2016-03-21 09:24:29.000000000 -0600
+++ git-receive-pack.html	2016-10-15 00:43:56.660074850 -0600
@@ -804,6 +804,117 @@
 the update.  Refs to be created will have sha1-old equal to 0{40},
 while refs to be deleted will have sha1-new equal to 0{40}, otherwise
 sha1-old and sha1-new should be valid objects in the repository.</p></div>
+<div class="paragraph"><p>When accepting a signed push (see <a href="git-push.html">git-push(1)</a>), the signed
+push certificate is stored in a blob and an environment variable
+<code>GIT_PUSH_CERT</code> can be consulted for its object name.  See the
+description of <code>post-receive</code> hook for an example.  In addition, the
+certificate is verified using GPG and the result is exported with
+the following environment variables:</p></div>
+<div class="dlist"><dl>
+<dt class="hdlist1">
+<code>GIT_PUSH_CERT_SIGNER</code>
+</dt>
+<dd>
+<p>
+        The name and the e-mail address of the owner of the key that
+        signed the push certificate.
+</p>
+</dd>
+<dt class="hdlist1">
+<code>GIT_PUSH_CERT_KEY</code>
+</dt>
+<dd>
+<p>
+        The GPG key ID of the key that signed the push certificate.
+</p>
+</dd>
+<dt class="hdlist1">
+<code>GIT_PUSH_CERT_STATUS</code>
+</dt>
+<dd>
+<p>
+        The status of GPG verification of the push certificate,
+        using the same mnemonic as used in <code>%G?</code> format of <code>git log</code>
+        family of commands (see <a href="git-log.html">git-log(1)</a>).
+</p>
+</dd>
+<dt class="hdlist1">
+<code>GIT_PUSH_CERT_NONCE</code>
+</dt>
+<dd>
+<p>
+        The nonce string the process asked the signer to include
+        in the push certificate.  If this does not match the value
+        recorded on the "nonce" header in the push certificate, it
+        may indicate that the certificate is a valid one that is
+        being replayed from a separate "git push" session.
+</p>
+</dd>
+<dt class="hdlist1">
+<code>GIT_PUSH_CERT_NONCE_STATUS</code>
+</dt>
+<dd>
+<div class="dlist"><dl>
+<dt class="hdlist1">
+<code>UNSOLICITED</code>
+</dt>
+<dd>
+<p>
+        "git push --signed" sent a nonce when we did not ask it to
+        send one.
+</p>
+</dd>
+<dt class="hdlist1">
+<code>MISSING</code>
+</dt>
+<dd>
+<p>
+        "git push --signed" did not send any nonce header.
+</p>
+</dd>
+<dt class="hdlist1">
+<code>BAD</code>
+</dt>
+<dd>
+<p>
+        "git push --signed" sent a bogus nonce.
+</p>
+</dd>
+<dt class="hdlist1">
+<code>OK</code>
+</dt>
+<dd>
+<p>
+        "git push --signed" sent the nonce we asked it to send.
+</p>
+</dd>
+<dt class="hdlist1">
+<code>SLOP</code>
+</dt>
+<dd>
+<p>
+        "git push --signed" sent a nonce different from what we
+        asked it to send now, but in a previous session.  See
+        <code>GIT_PUSH_CERT_NONCE_SLOP</code> environment variable.
+</p>
+</dd>
+</dl></div>
+</dd>
+<dt class="hdlist1">
+<code>GIT_PUSH_CERT_NONCE_SLOP</code>
+</dt>
+<dd>
+<p>
+        "git push --signed" sent a nonce different from what we
+        asked it to send now, but in a different session whose
+        starting time is different by this many seconds from the
+        current session.  Only meaningful when
+        <code>GIT_PUSH_CERT_NONCE_STATUS</code> says <code>SLOP</code>.
+        Also read about <code>receive.certNonceSlop</code> variable in
+        <a href="git-config.html">git-config(1)</a>.
+</p>
+</dd>
+</dl></div>
 <div class="paragraph"><p>This hook is called before any refname is updated and before any
 fast-forward checks are performed.</p></div>
 <div class="paragraph"><p>If the pre-receive hook exits with a non-zero exit status no updates
@@ -854,9 +965,13 @@
 0{40}, while refs that were deleted will have sha1-new equal to
 0{40}, otherwise sha1-old and sha1-new should be valid objects in
 the repository.</p></div>
+<div class="paragraph"><p>The <code>GIT_PUSH_CERT*</code> environment variables can be inspected, just as
+in <code>pre-receive</code> hook, after accepting a signed push.</p></div>
 <div class="paragraph"><p>Using this hook, it is easy to generate mails describing the updates
 to the repository.  This example script sends one mail message per
-ref listing the commits pushed to the repository:</p></div>
+ref listing the commits pushed to the repository, and logs the push
+certificates of signed pushes with good signatures to a logger
+service:</p></div>
 <div class="literalblock">
 <div class="content">
 <pre><code>#!/bin/sh
@@ -873,6 +988,14 @@
         fi |
         mail -s "Changes to ref $ref" commit-list@mydomain
 done
+# log signed push certificate, if any
+if test -n "${GIT_PUSH_CERT-}" &amp;&amp; test ${GIT_PUSH_CERT_STATUS} = G
+then
+        (
+                echo expected nonce is ${GIT_PUSH_NONCE}
+                git cat-file blob ${GIT_PUSH_CERT}
+        ) | mail -s "push certificate from $GIT_PUSH_CERT_SIGNER" push-log@mydomain
+fi
 exit 0</code></pre>
 </div></div>
 <div class="paragraph"><p>The exit code from this hook invocation is ignored, however a
# install git-receive-pack.html /usr/share/doc/git-doc/git-receive-pack.html
--- /usr/share/doc/git-doc/git-reflog.html	2016-03-21 09:24:29.000000000 -0600
+++ git-reflog.html	2016-10-15 00:43:56.936074855 -0600
@@ -759,65 +759,72 @@
 <div class="paragraph"><p>The command takes various subcommands, and different options
 depending on the subcommand:</p></div>
 <div class="verseblock">
-<pre class="content"><em>git reflog expire</em> [--dry-run] [--stale-fix] [--verbose]
-        [--expire=&lt;time&gt;] [--expire-unreachable=&lt;time&gt;] [--all] &lt;refs&gt;&#8230;
-<em>git reflog delete</em> ref@{specifier}&#8230;
-<em>git reflog</em> [<em>show</em>] [log-options] [&lt;ref&gt;]</pre>
+<pre class="content"><em>git reflog</em> [<em>show</em>] [log-options] [&lt;ref&gt;]
+<em>git reflog expire</em> [--expire=&lt;time&gt;] [--expire-unreachable=&lt;time&gt;]
+        [--rewrite] [--updateref] [--stale-fix]
+        [--dry-run] [--verbose] [--all | &lt;refs&gt;&#8230;]
+<em>git reflog delete</em> [--rewrite] [--updateref]
+        [--dry-run] [--verbose] ref@{specifier}&#8230;
+<em>git reflog exists</em> &lt;ref&gt;</pre>
 <div class="attribution">
 </div></div>
-<div class="paragraph"><p>Reflog is a mechanism to record when the tip of branches are
-updated.  This command is to manage the information recorded in it.</p></div>
-<div class="paragraph"><p>The subcommand "expire" is used to prune older reflog entries.
-Entries older than <code>expire</code> time, or entries older than
-<code>expire-unreachable</code> time and not reachable from the current
-tip, are removed from the reflog.  This is typically not used
-directly by the end users&#8201;&#8212;&#8201;instead, see <a href="git-gc.html">git-gc(1)</a>.</p></div>
-<div class="paragraph"><p>The subcommand "show" (which is also the default, in the absence of any
-subcommands) will take all the normal log options, and show the log of
-the reference provided in the command-line (or <code>HEAD</code>, by default).
-The reflog will cover all recent actions (HEAD reflog records branch switching
-as well).  It is an alias for <code>git log -g --abbrev-commit --pretty=oneline</code>;
-see <a href="git-log.html">git-log(1)</a>.</p></div>
-<div class="paragraph"><p>The reflog is useful in various Git commands, to specify the old value
-of a reference. For example, <code>HEAD@{2}</code> means "where HEAD used to be
-two moves ago", <code>master@{one.week.ago}</code> means "where master used to
-point to one week ago", and so on. See <a href="gitrevisions.html">gitrevisions(7)</a> for
-more details.</p></div>
-<div class="paragraph"><p>To delete single entries from the reflog, use the subcommand "delete"
-and specify the <em>exact</em> entry (e.g. "<code>git reflog delete master@{2}</code>").</p></div>
+<div class="paragraph"><p>Reference logs, or "reflogs", record when the tips of branches and
+other references were updated in the local repository. Reflogs are
+useful in various Git commands, to specify the old value of a
+reference. For example, <code>HEAD@{2}</code> means "where HEAD used to be two
+moves ago", <code>master@{one.week.ago}</code> means "where master used to point
+to one week ago in this local repository", and so on. See
+<a href="gitrevisions.html">gitrevisions(7)</a> for more details.</p></div>
+<div class="paragraph"><p>This command manages the information recorded in the reflogs.</p></div>
+<div class="paragraph"><p>The "show" subcommand (which is also the default, in the absence of
+any subcommands) shows the log of the reference provided in the
+command-line (or <code>HEAD</code>, by default). The reflog covers all recent
+actions, and in addition the <code>HEAD</code> reflog records branch switching.
+<code>git reflog show</code> is an alias for <code>git log -g --abbrev-commit
+--pretty=oneline</code>; see <a href="git-log.html">git-log(1)</a> for more information.</p></div>
+<div class="paragraph"><p>The "expire" subcommand prunes older reflog entries. Entries older
+than <code>expire</code> time, or entries older than <code>expire-unreachable</code> time
+and not reachable from the current tip, are removed from the reflog.
+This is typically not used directly by end users&#8201;&#8212;&#8201;instead, see
+<a href="git-gc.html">git-gc(1)</a>.</p></div>
+<div class="paragraph"><p>The "delete" subcommand deletes single entries from the reflog. Its
+argument must be an <em>exact</em> entry (e.g. "<code>git reflog delete
+master@{2}</code>"). This subcommand is also typically not used directly by
+end users.</p></div>
+<div class="paragraph"><p>The "exists" subcommand checks whether a ref has a reflog.  It exits
+with zero status if the reflog exists, and non-zero status if it does
+not.</p></div>
 </div>
 </div>
 <div class="sect1">
 <h2 id="_options">OPTIONS</h2>
 <div class="sectionbody">
+<div class="sect2">
+<h3 id="_options_for_code_show_code">Options for <code>show</code></h3>
+<div class="paragraph"><p><code>git reflog show</code> accepts any of the options accepted by <code>git log</code>.</p></div>
+</div>
+<div class="sect2">
+<h3 id="_options_for_code_expire_code">Options for <code>expire</code></h3>
 <div class="dlist"><dl>
 <dt class="hdlist1">
---stale-fix
+--all
 </dt>
 <dd>
 <p>
-        This revamps the logic&#8201;&#8212;&#8201;the definition of "broken commit"
-        becomes: a commit that is not reachable from any of the refs and
-        there is a missing object among the commit, tree, or blob
-        objects reachable from it that is not reachable from any of the
-        refs.
+        Process the reflogs of all references.
 </p>
-<div class="paragraph"><p>This computation involves traversing all the reachable objects, i.e. it
-has the same cost as <em>git prune</em>.  Fortunately, once this is run, we
-should not have to ever worry about missing objects, because the current
-prune and pack-objects know about reflogs and protect objects referred by
-them.</p></div>
 </dd>
 <dt class="hdlist1">
 --expire=&lt;time&gt;
 </dt>
 <dd>
 <p>
-        Entries older than this time are pruned.  Without the
-        option it is taken from configuration <code>gc.reflogExpire</code>,
-        which in turn defaults to 90 days.  --expire=all prunes
-        entries regardless of their age; --expire=never turns off
-        pruning of reachable entries (but see --expire-unreachable).
+        Prune entries older than the specified time. If this option is
+        not specified, the expiration time is taken from the
+        configuration setting <code>gc.reflogExpire</code>, which in turn
+        defaults to 90 days. <code>--expire=all</code> prunes entries regardless
+        of their age; <code>--expire=never</code> turns off pruning of reachable
+        entries (but see <code>--expire-unreachable</code>).
 </p>
 </dd>
 <dt class="hdlist1">
@@ -825,41 +832,61 @@
 </dt>
 <dd>
 <p>
-        Entries older than this time and not reachable from
-        the current tip of the branch are pruned.  Without the
-        option it is taken from configuration
-        <code>gc.reflogExpireUnreachable</code>, which in turn defaults to
-        30 days.  --expire-unreachable=all prunes unreachable
-        entries regardless of their age; --expire-unreachable=never
+        Prune entries older than <code>&lt;time&gt;</code> that are not reachable from
+        the current tip of the branch. If this option is not
+        specified, the expiration time is taken from the configuration
+        setting <code>gc.reflogExpireUnreachable</code>, which in turn defaults
+        to 30 days. <code>--expire-unreachable=all</code> prunes unreachable
+        entries regardless of their age; <code>--expire-unreachable=never</code>
         turns off early pruning of unreachable entries (but see
-        --expire).
+        <code>--expire</code>).
 </p>
 </dd>
 <dt class="hdlist1">
---all
+--updateref
 </dt>
 <dd>
 <p>
-        Instead of listing &lt;refs&gt; explicitly, prune all refs.
+        Update the reference to the value of the top reflog entry (i.e.
+        &lt;ref&gt;@{0}) if the previous top entry was pruned.  (This
+        option is ignored for symbolic references.)
 </p>
 </dd>
 <dt class="hdlist1">
---updateref
+--rewrite
 </dt>
 <dd>
 <p>
-        Update the ref with the sha1 of the top reflog entry (i.e.
-        &lt;ref&gt;@{0}) after expiring or deleting.
+        If a reflog entry&#8217;s predecessor is pruned, adjust its "old"
+        SHA-1 to be equal to the "new" SHA-1 field of the entry that
+        now precedes it.
 </p>
 </dd>
 <dt class="hdlist1">
---rewrite
+--stale-fix
 </dt>
 <dd>
 <p>
-        While expiring or deleting, adjust each reflog entry to ensure
-        that the <code>old</code> sha1 field points to the <code>new</code> sha1 field of the
-        previous entry.
+        Prune any reflog entries that point to "broken commits". A
+        broken commit is a commit that is not reachable from any of
+        the reference tips and that refers, directly or indirectly, to
+        a missing commit, tree, or blob object.
+</p>
+<div class="paragraph"><p>This computation involves traversing all the reachable objects, i.e. it
+has the same cost as <em>git prune</em>.  It is primarily intended to fix
+corruption caused by garbage collecting using older versions of Git,
+which didn&#8217;t protect objects referred to by reflogs.</p></div>
+</dd>
+<dt class="hdlist1">
+-n
+</dt>
+<dt class="hdlist1">
+--dry-run
+</dt>
+<dd>
+<p>
+        Do not actually prune any entries; just show what would have
+        been pruned.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -872,6 +899,13 @@
 </dd>
 </dl></div>
 </div>
+<div class="sect2">
+<h3 id="_options_for_code_delete_code">Options for <code>delete</code></h3>
+<div class="paragraph"><p><code>git reflog delete</code> accepts options <code>--updateref</code>, <code>--rewrite</code>, <code>-n</code>,
+<code>--dry-run</code>, and <code>--verbose</code>, with the same meanings as when they are
+used with <code>expire</code>.</p></div>
+</div>
+</div>
 </div>
 <div class="sect1">
 <h2 id="_git">GIT</h2>
# install git-reflog.html /usr/share/doc/git-doc/git-reflog.html
--- /usr/share/doc/git-doc/git-remote-ext.html	2016-03-21 09:24:29.000000000 -0600
+++ git-remote-ext.html	2016-10-15 00:43:57.424074864 -0600
@@ -946,6 +946,12 @@
 </div>
 </div>
 <div class="sect1">
+<h2 id="_see_also">SEE ALSO</h2>
+<div class="sectionbody">
+<div class="paragraph"><p><a href="gitremote-helpers.html">gitremote-helpers(1)</a></p></div>
+</div>
+</div>
+<div class="sect1">
 <h2 id="_git">GIT</h2>
 <div class="sectionbody">
 <div class="paragraph"><p>Part of the <a href="git.html">git(1)</a> suite</p></div>
# install git-remote-ext.html /usr/share/doc/git-doc/git-remote-ext.html
--- /usr/share/doc/git-doc/git-remote-fd.html	2016-03-21 09:24:29.000000000 -0600
+++ git-remote-fd.html	2016-10-15 00:43:57.656074869 -0600
@@ -758,7 +758,7 @@
 fetch, push or archive.</p></div>
 <div class="paragraph"><p>If only &lt;infd&gt; is given, it is assumed to be a bidirectional socket connected
 to remote Git server (git-upload-pack, git-receive-pack or
-git-upload-achive). If both &lt;infd&gt; and &lt;outfd&gt; are given, they are assumed
+git-upload-archive). If both &lt;infd&gt; and &lt;outfd&gt; are given, they are assumed
 to be pipes connected to a remote Git server (&lt;infd&gt; being the inbound pipe
 and &lt;outfd&gt; being the outbound pipe.</p></div>
 <div class="paragraph"><p>It is assumed that any handshaking procedures have already been completed
@@ -826,6 +826,12 @@
 </div>
 </div>
 <div class="sect1">
+<h2 id="_see_also">SEE ALSO</h2>
+<div class="sectionbody">
+<div class="paragraph"><p><a href="gitremote-helpers.html">gitremote-helpers(1)</a></p></div>
+</div>
+</div>
+<div class="sect1">
 <h2 id="_git">GIT</h2>
 <div class="sectionbody">
 <div class="paragraph"><p>Part of the <a href="git.html">git(1)</a> suite</p></div>
# install git-remote-fd.html /usr/share/doc/git-doc/git-remote-fd.html
--- /usr/share/doc/git-doc/git-remote.html	2016-03-21 09:24:29.000000000 -0600
+++ git-remote.html	2016-10-15 00:43:58.224074879 -0600
@@ -739,7 +739,7 @@
 <h2>NAME</h2>
 <div class="sectionbody">
 <p>git-remote -
-   manage set of tracked repositories
+   Manage set of tracked repositories
 </p>
 </div>
 </div>
@@ -754,6 +754,7 @@
 <em>git remote remove</em> &lt;name&gt;
 <em>git remote set-head</em> &lt;name&gt; (-a | --auto | -d | --delete | &lt;branch&gt;)
 <em>git remote set-branches</em> [--add] &lt;name&gt; &lt;branch&gt;&#8230;
+<em>git remote get-url</em> [--push] [--all] &lt;name&gt;
 <em>git remote set-url</em> [--push] &lt;name&gt; &lt;newurl&gt; [&lt;oldurl&gt;]
 <em>git remote set-url --add</em> [--push] &lt;name&gt; &lt;newurl&gt;
 <em>git remote set-url --delete</em> [--push] &lt;name&gt; &lt;url&gt;
@@ -810,6 +811,8 @@
 remote repository.</p></div>
 <div class="paragraph"><p>With <code>--no-tags</code> option, <code>git fetch &lt;name&gt;</code> does not import tags from
 the remote repository.</p></div>
+<div class="paragraph"><p>By default, only tags on fetched branches are imported
+(see <a href="git-fetch.html">git-fetch(1)</a>).</p></div>
 <div class="paragraph"><p>With <code>-t &lt;branch&gt;</code> option, instead of the default glob
 refspec for the remote to track all branches under
 the <code>refs/remotes/&lt;name&gt;/</code> namespace, a refspec to track only <code>&lt;branch&gt;</code>
@@ -889,19 +892,36 @@
 branches, adds to that list.</p></div>
 </dd>
 <dt class="hdlist1">
+<em>get-url</em>
+</dt>
+<dd>
+<p>
+Retrieves the URLs for a remote. Configurations for <code>insteadOf</code> and
+<code>pushInsteadOf</code> are expanded here. By default, only the first URL is listed.
+</p>
+<div class="paragraph"><p>With <code>--push</code>, push URLs are queried rather than fetch URLs.</p></div>
+<div class="paragraph"><p>With <code>--all</code>, all URLs for the remote will be listed.</p></div>
+</dd>
+<dt class="hdlist1">
 <em>set-url</em>
 </dt>
 <dd>
 <p>
-Changes URL remote points to. Sets first URL remote points to matching
+Changes URLs for the remote. Sets first URL for remote &lt;name&gt; that matches
 regex &lt;oldurl&gt; (first URL if no &lt;oldurl&gt; is given) to &lt;newurl&gt;. If
-&lt;oldurl&gt; doesn&#8217;t match any URL, error occurs and nothing is changed.
+&lt;oldurl&gt; doesn&#8217;t match any URL, an error occurs and nothing is changed.
 </p>
-<div class="paragraph"><p>With <em>--push</em>, push URLs are manipulated instead of fetch URLs.</p></div>
-<div class="paragraph"><p>With <em>--add</em>, instead of changing some URL, new URL is added.</p></div>
-<div class="paragraph"><p>With <em>--delete</em>, instead of changing some URL, all URLs matching
-regex &lt;url&gt; are deleted. Trying to delete all non-push URLs is an
-error.</p></div>
+<div class="paragraph"><p>With <code>--push</code>, push URLs are manipulated instead of fetch URLs.</p></div>
+<div class="paragraph"><p>With <code>--add</code>, instead of changing existing URLs, new URL is added.</p></div>
+<div class="paragraph"><p>With <code>--delete</code>, instead of changing existing URLs, all URLs matching
+regex &lt;url&gt; are deleted for remote &lt;name&gt;.  Trying to delete all
+non-push URLs is an error.</p></div>
+<div class="paragraph"><p>Note that the push URL and the fetch URL, even though they can
+be set differently, must still refer to the same place.  What you
+pushed to the push URL should be what you would see if you
+immediately fetched from the fetch URL.  If you are trying to
+fetch from one place (e.g. your upstream) and push to another (e.g.
+your publishing repository), use two separate remotes.</p></div>
 </dd>
 <dt class="hdlist1">
 <em>show</em>
# install git-remote.html /usr/share/doc/git-doc/git-remote.html
--- /usr/share/doc/git-doc/git-repack.html	2016-03-21 09:24:29.000000000 -0600
+++ git-repack.html	2016-10-15 00:43:58.524074885 -0600
@@ -748,7 +748,7 @@
 <h2 id="_synopsis">SYNOPSIS</h2>
 <div class="sectionbody">
 <div class="verseblock">
-<pre class="content"><em>git repack</em> [-a] [-A] [-d] [-f] [-F] [-l] [-n] [-q] [--window=&lt;n&gt;] [--depth=&lt;n&gt;]</pre>
+<pre class="content"><em>git repack</em> [-a] [-A] [-d] [-f] [-F] [-l] [-n] [-q] [-b] [--window=&lt;n&gt;] [--depth=&lt;n&gt;]</pre>
 <div class="attribution">
 </div></div>
 </div>
@@ -779,7 +779,7 @@
         pack everything referenced into a single pack.
         Especially useful when packing a repository that is used
         for private development. Use
-        with <em>-d</em>.  This will clean up the objects that <code>git prune</code>
+        with <code>-d</code>.  This will clean up the objects that <code>git prune</code>
         leaves behind, but <code>git fsck --full --dangling</code> shows as
         dangling.
 </p>
@@ -792,7 +792,7 @@
 </dt>
 <dd>
 <p>
-        Same as <code>-a</code>, unless <em>-d</em> is used.  Then any unreachable
+        Same as <code>-a</code>, unless <code>-d</code> is used.  Then any unreachable
         objects in a previous pack become loose, unpacked objects,
         instead of being left in the old pack.  Unreachable objects
         are never intentionally added to a pack, even when repacking.
@@ -892,8 +892,10 @@
         out of memory with a large window, but still be able to take
         advantage of the large window for the smaller objects.  The
         size can be suffixed with "k", "m", or "g".
-        <code>--window-memory=0</code> makes memory usage unlimited, which is the
-        default.
+        <code>--window-memory=0</code> makes memory usage unlimited.  The default
+        is taken from the <code>pack.windowMemory</code> configuration variable.
+        Note that the actual memory usage will be the limit multiplied
+        by the number of threads used by <a href="git-pack-objects.html">git-pack-objects(1)</a>.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -903,11 +905,66 @@
 <p>
         Maximum size of each output pack file. The size can be suffixed with
         "k", "m", or "g". The minimum size allowed is limited to 1 MiB.
-        If specified,  multiple packfiles may be created.
+        If specified, multiple packfiles may be created, which also
+        prevents the creation of a bitmap index.
         The default is unlimited, unless the config variable
         <code>pack.packSizeLimit</code> is set.
 </p>
 </dd>
+<dt class="hdlist1">
+-b
+</dt>
+<dt class="hdlist1">
+--write-bitmap-index
+</dt>
+<dd>
+<p>
+        Write a reachability bitmap index as part of the repack. This
+        only makes sense when used with <code>-a</code> or <code>-A</code>, as the bitmaps
+        must be able to refer to all reachable objects. This option
+        overrides the setting of <code>repack.writeBitmaps</code>.  This option
+        has no effect if multiple packfiles are created.
+</p>
+</dd>
+<dt class="hdlist1">
+--pack-kept-objects
+</dt>
+<dd>
+<p>
+        Include objects in <code>.keep</code> files when repacking.  Note that we
+        still do not delete <code>.keep</code> packs after <code>pack-objects</code> finishes.
+        This means that we may duplicate objects, but this makes the
+        option safe to use when there are concurrent pushes or fetches.
+        This option is generally only useful if you are writing bitmaps
+        with <code>-b</code> or <code>repack.writeBitmaps</code>, as it ensures that the
+        bitmapped packfile has the necessary objects.
+</p>
+</dd>
+<dt class="hdlist1">
+--unpack-unreachable=&lt;when&gt;
+</dt>
+<dd>
+<p>
+        When loosening unreachable objects, do not bother loosening any
+        objects older than <code>&lt;when&gt;</code>. This can be used to optimize out
+        the write of any objects that would be immediately pruned by
+        a follow-up <code>git prune</code>.
+</p>
+</dd>
+<dt class="hdlist1">
+-k
+</dt>
+<dt class="hdlist1">
+--keep-unreachable
+</dt>
+<dd>
+<p>
+        When used with <code>-ad</code>, any unreachable objects from existing
+        packs will be appended to the end of the packfile instead of
+        being removed. In addition, any unreachable loose objects will
+        be packed (and their loose counterparts removed).
+</p>
+</dd>
 </dl></div>
 </div>
 </div>
@@ -918,7 +975,7 @@
 <em>git pack-objects</em>; this typically results in slightly smaller packs,
 but the generated packs are incompatible with versions of Git older than
 version 1.4.4. If you need to share your repository with such ancient Git
-versions, either directly or via the dumb http or rsync protocol, then you
+versions, either directly or via the dumb http protocol, then you
 need to set the configuration variable <code>repack.UseDeltaBaseOffset</code> to
 "false" and repack. Access from old Git versions over the native protocol
 is unaffected by this option as the conversion is performed on the fly
# install git-repack.html /usr/share/doc/git-doc/git-repack.html
--- /usr/share/doc/git-doc/git-replace.html	2016-03-21 09:24:29.000000000 -0600
+++ git-replace.html	2016-10-15 00:43:58.892074892 -0600
@@ -749,6 +749,8 @@
 <div class="sectionbody">
 <div class="verseblock">
 <pre class="content"><em>git replace</em> [-f] &lt;object&gt; &lt;replacement&gt;
+<em>git replace</em> [-f] --edit &lt;object&gt;
+<em>git replace</em> [-f] --graft &lt;commit&gt; [&lt;parent&gt;&#8230;]
 <em>git replace</em> -d &lt;object&gt;&#8230;
 <em>git replace</em> [--format=&lt;format&gt;] [-l [&lt;pattern&gt;]]</pre>
 <div class="attribution">
@@ -783,7 +785,7 @@
 <pre><code>$ git cat-file commit foo</code></pre>
 </div></div>
 <div class="paragraph"><p>shows information about commit <em>bar</em>.</p></div>
-<div class="paragraph"><p>The <em>GIT_NO_REPLACE_OBJECTS</em> environment variable can be set to
+<div class="paragraph"><p>The <code>GIT_NO_REPLACE_OBJECTS</code> environment variable can be set to
 achieve the same effect as the <code>--no-replace-objects</code> option.</p></div>
 </div>
 </div>
@@ -815,6 +817,47 @@
 </p>
 </dd>
 <dt class="hdlist1">
+--edit &lt;object&gt;
+</dt>
+<dd>
+<p>
+        Edit an object&#8217;s content interactively. The existing content
+        for &lt;object&gt; is pretty-printed into a temporary file, an
+        editor is launched on the file, and the result is parsed to
+        create a new object of the same type as &lt;object&gt;. A
+        replacement ref is then created to replace &lt;object&gt; with the
+        newly created object. See <a href="git-var.html">git-var(1)</a> for details about
+        how the editor will be chosen.
+</p>
+</dd>
+<dt class="hdlist1">
+--raw
+</dt>
+<dd>
+<p>
+        When editing, provide the raw object contents rather than
+        pretty-printed ones. Currently this only affects trees, which
+        will be shown in their binary form. This is harder to work with,
+        but can help when repairing a tree that is so corrupted it
+        cannot be pretty-printed. Note that you may need to configure
+        your editor to cleanly read and write binary data.
+</p>
+</dd>
+<dt class="hdlist1">
+--graft &lt;commit&gt; [&lt;parent&gt;&#8230;]
+</dt>
+<dd>
+<p>
+        Create a graft commit. A new commit is created with the same
+        content as &lt;commit&gt; except that its parents will be
+        [&lt;parent&gt;&#8230;] instead of &lt;commit&gt;'s parents. A replacement ref
+        is then created to replace &lt;commit&gt; with the newly created
+        commit. See contrib/convert-grafts-to-replace-refs.sh for an
+        example script based on this option that can convert grafts to
+        replace refs.
+</p>
+</dd>
+<dt class="hdlist1">
 -l &lt;pattern&gt;
 </dt>
 <dt class="hdlist1">
@@ -872,7 +915,9 @@
 <div class="sectionbody">
 <div class="paragraph"><p><a href="git-filter-branch.html">git-filter-branch(1)</a>, <a href="git-hash-object.html">git-hash-object(1)</a> and
 <a href="git-rebase.html">git-rebase(1)</a>, among other git commands, can be used to create
-replacement objects from existing objects.</p></div>
+replacement objects from existing objects. The <code>--edit</code> option can
+also be used with <em>git replace</em> to create a replacement object by
+editing an existing object.</p></div>
 <div class="paragraph"><p>If you want to replace many blobs, trees or commits that are part of a
 string of commits, you may just want to create a replacement string of
 commits and then only replace the commit at the tip of the target
@@ -899,6 +944,8 @@
 <a href="git-rebase.html">git-rebase(1)</a>
 <a href="git-tag.html">git-tag(1)</a>
 <a href="git-branch.html">git-branch(1)</a>
+<a href="git-commit.html">git-commit(1)</a>
+<a href="git-var.html">git-var(1)</a>
 <a href="git.html">git(1)</a></p></div>
 </div>
 </div>
# install git-replace.html /usr/share/doc/git-doc/git-replace.html
--- /usr/share/doc/git-doc/git-request-pull.html	2016-03-21 09:24:29.000000000 -0600
+++ git-request-pull.html	2016-10-15 00:43:59.140074896 -0600
@@ -756,8 +756,14 @@
 <div class="sect1">
 <h2 id="_description">DESCRIPTION</h2>
 <div class="sectionbody">
-<div class="paragraph"><p>Summarizes the changes between two commits to the standard output, and includes
-the given URL in the generated summary.</p></div>
+<div class="paragraph"><p>Generate a request asking your upstream project to pull changes into
+their tree.  The request, printed to the standard output,
+begins with the branch description, summarizes
+the changes and indicates from where they can be pulled.</p></div>
+<div class="paragraph"><p>The upstream project is expected to have the commit named by
+<code>&lt;start&gt;</code> and the output asks it to integrate the changes you made
+since that commit, up to the commit named by <code>&lt;end&gt;</code>, by visiting
+the repository named by <code>&lt;url&gt;</code>.</p></div>
 </div>
 </div>
 <div class="sect1">
@@ -769,7 +775,7 @@
 </dt>
 <dd>
 <p>
-        Show patch text
+        Include patch text in the output.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -777,7 +783,8 @@
 </dt>
 <dd>
 <p>
-        Commit to start at.
+        Commit to start at.  This names a commit that is already in
+        the upstream history.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -785,7 +792,7 @@
 </dt>
 <dd>
 <p>
-        URL to include in the summary.
+        The repository URL to be pulled from.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -793,13 +800,50 @@
 </dt>
 <dd>
 <p>
-        Commit to end at; defaults to HEAD.
+        Commit to end at (defaults to HEAD).  This names the commit
+        at the tip of the history you are asking to be pulled.
 </p>
+<div class="paragraph"><p>When the repository named by <code>&lt;url&gt;</code> has the commit at a tip of a
+ref that is different from the ref you have locally, you can use the
+<code>&lt;local&gt;:&lt;remote&gt;</code> syntax, to have its local name, a colon <code>:</code>, and
+its remote name.</p></div>
 </dd>
 </dl></div>
 </div>
 </div>
 <div class="sect1">
+<h2 id="_example">EXAMPLE</h2>
+<div class="sectionbody">
+<div class="paragraph"><p>Imagine that you built your work on your <code>master</code> branch on top of
+the <code>v1.0</code> release, and want it to be integrated to the project.
+First you push that change to your public repository for others to
+see:</p></div>
+<div class="literalblock">
+<div class="content">
+<pre><code>git push https://git.ko.xz/project master</code></pre>
+</div></div>
+<div class="paragraph"><p>Then, you run this command:</p></div>
+<div class="literalblock">
+<div class="content">
+<pre><code>git request-pull v1.0 https://git.ko.xz/project master</code></pre>
+</div></div>
+<div class="paragraph"><p>which will produce a request to the upstream, summarizing the
+changes between the <code>v1.0</code> release and your <code>master</code>, to pull it
+from your public repository.</p></div>
+<div class="paragraph"><p>If you pushed your change to a branch whose name is different from
+the one you have locally, e.g.</p></div>
+<div class="literalblock">
+<div class="content">
+<pre><code>git push https://git.ko.xz/project master:for-linus</code></pre>
+</div></div>
+<div class="paragraph"><p>then you can ask that to be pulled with</p></div>
+<div class="literalblock">
+<div class="content">
+<pre><code>git request-pull v1.0 https://git.ko.xz/project master:for-linus</code></pre>
+</div></div>
+</div>
+</div>
+<div class="sect1">
 <h2 id="_git">GIT</h2>
 <div class="sectionbody">
 <div class="paragraph"><p>Part of the <a href="git.html">git(1)</a> suite</p></div>
# install git-request-pull.html /usr/share/doc/git-doc/git-request-pull.html
--- /usr/share/doc/git-doc/git-rerere.html	2016-03-21 09:24:29.000000000 -0600
+++ git-rerere.html	2016-10-15 00:43:59.440074902 -0600
@@ -839,7 +839,7 @@
 occurred a long time ago.  By default, unresolved conflicts older
 than 15 days and resolved conflicts older than 60
 days are pruned.  These defaults are controlled via the
-<code>gc.rerereunresolved</code> and <code>gc.rerereresolved</code> configuration
+<code>gc.rerereUnresolved</code> and <code>gc.rerereResolved</code> configuration
 variables respectively.
 </p>
 </dd>
# install git-rerere.html /usr/share/doc/git-doc/git-rerere.html
--- /usr/share/doc/git-doc/git-reset.html	2016-03-21 09:24:29.000000000 -0600
+++ git-reset.html	2016-10-15 00:43:59.912074911 -0600
@@ -750,7 +750,7 @@
 <div class="verseblock">
 <pre class="content"><em>git reset</em> [-q] [&lt;tree-ish&gt;] [--] &lt;paths&gt;&#8230;
 <em>git reset</em> (--patch | -p) [&lt;tree-ish&gt;] [--] [&lt;paths&gt;&#8230;]
-<em>git reset</em> [--soft | --mixed | --hard | --merge | --keep] [-q] [&lt;commit&gt;]</pre>
+<em>git reset</em> [--soft | --mixed [-N] | --hard | --merge | --keep] [-q] [&lt;commit&gt;]</pre>
 <div class="attribution">
 </div></div>
 </div>
@@ -769,7 +769,7 @@
 <dd>
 <p>
         This form resets the index entries for all &lt;paths&gt; to their
-        state at &lt;tree-ish&gt;.  (It does not affect the working tree, nor
+        state at &lt;tree-ish&gt;.  (It does not affect the working tree or
         the current branch.)
 </p>
 <div class="paragraph"><p>This means that <code>git reset &lt;paths&gt;</code> is the opposite of <code>git add
@@ -812,7 +812,7 @@
 </dt>
 <dd>
 <p>
-        Does not touch the index file nor the working tree at all (but
+        Does not touch the index file or the working tree at all (but
         resets the head to &lt;commit&gt;, just like all modes do). This leaves
         all your changed files "Changes to be committed", as <em>git status</em>
         would put it.
@@ -827,6 +827,8 @@
         are preserved but not marked for commit) and reports what has not
         been updated. This is the default action.
 </p>
+<div class="paragraph"><p>If <code>-N</code> is specified, removed paths are marked as intent-to-add (see
+<a href="git-add.html">git-add(1)</a>).</p></div>
 </dd>
 <dt class="hdlist1">
 --hard
@@ -923,7 +925,7 @@
 <p>
 However, you already dirtied the index (i.e. your index does
 not match the HEAD commit).  But you know the pull you are going
-to make does not affect frotz.c nor filfre.c, so you revert the
+to make does not affect frotz.c or filfre.c, so you revert the
 index changes for these two files.  Your changes in working tree
 remain there.
 </p>
# install git-reset.html /usr/share/doc/git-doc/git-reset.html
--- /usr/share/doc/git-doc/git-rev-list.html	2016-03-21 09:24:29.000000000 -0600
+++ git-rev-list.html	2016-10-15 00:44:01.412074939 -0600
@@ -784,8 +784,9 @@
              [ --regexp-ignore-case | -i ]
              [ --extended-regexp | -E ]
              [ --fixed-strings | -F ]
-             [ --date=(local|relative|default|iso|rfc|short) ]
-             [ [--objects | --objects-edge] [ --unpacked ] ]
+             [ --date=&lt;format&gt;]
+             [ [ --objects | --objects-edge | --objects-edge-aggressive ]
+               [ --unpacked ] ]
              [ --pretty | --header ]
              [ --bisect ]
              [ --bisect-vars ]
@@ -794,6 +795,8 @@
              [ --reverse ]
              [ --walk-reflogs ]
              [ --no-walk ] [ --do-walk ]
+             [ --count ]
+             [ --use-bitmap-index ]
              &lt;commit&gt;&#8230; [ -- &lt;paths&gt;&#8230; ]</pre>
 <div class="attribution">
 </div></div>
@@ -952,8 +955,6 @@
         matches any of the given patterns are chosen (but see
         <code>--all-match</code>).
 </p>
-<div class="paragraph"><p>When <code>--show-notes</code> is in effect, the message from the notes as
-if it is part of the log message.</p></div>
 </dd>
 <dt class="hdlist1">
 --all-match
@@ -965,6 +966,15 @@
 </p>
 </dd>
 <dt class="hdlist1">
+--invert-grep
+</dt>
+<dd>
+<p>
+        Limit the commits output to ones with log message that do not
+        match the pattern specified with <code>--grep=&lt;pattern&gt;</code>.
+</p>
+</dd>
+<dt class="hdlist1">
 -i
 </dt>
 <dt class="hdlist1">
@@ -1077,7 +1087,8 @@
         because merges into a topic branch tend to be only about
         adjusting to updated upstream from time to time, and
         this option allows you to ignore the individual commits
-        brought in to your history by such a merge.
+        brought in to your history by such a merge. Cannot be
+        combined with --bisect.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1152,7 +1163,7 @@
         consider. Repetitions of this option accumulate exclusion patterns
         up to the next <code>--all</code>, <code>--branches</code>, <code>--tags</code>, <code>--remotes</code>, or
         <code>--glob</code> option (other options or arguments do not clear
-        accumlated patterns).
+        accumulated patterns).
 </p>
 <div class="paragraph"><p>The patterns given should not begin with <code>refs/heads</code>, <code>refs/tags</code>, or
 <code>refs/remotes</code> when applied to <code>--branches</code>, <code>--tags</code>, or <code>--remotes</code>,
@@ -1161,6 +1172,15 @@
 explicitly.</p></div>
 </dd>
 <dt class="hdlist1">
+--reflog
+</dt>
+<dd>
+<p>
+        Pretend as if all objects mentioned by reflogs are listed on the
+        command line as <code>&lt;commit&gt;</code>.
+</p>
+</dd>
+<dt class="hdlist1">
 --ignore-missing
 </dt>
 <dd>
@@ -1175,7 +1195,7 @@
 <dd>
 <p>
         In addition to the <em>&lt;commit&gt;</em> listed on the command
-        line, read them from the standard input. If a <em>--</em> separator is
+        line, read them from the standard input. If a <code>--</code> separator is
         seen, stop reading commits and start reading paths to limit the
         result.
 </p>
@@ -1226,7 +1246,7 @@
 </dt>
 <dd>
 <p>
-        List only commits on the respective side of a symmetric range,
+        List only commits on the respective side of a symmetric difference,
         i.e. only those which would be marked <code>&lt;</code> resp. <code>&gt;</code> by
         <code>--left-right</code>.
 </p>
@@ -1260,14 +1280,43 @@
         reflog entries from the most recent one to older ones.
         When this option is used you cannot specify commits to
         exclude (that is, <em>&#94;commit</em>, <em>commit1..commit2</em>,
-        nor <em>commit1...commit2</em> notations cannot be used).
+        and <em>commit1...commit2</em> notations cannot be used).
 </p>
 <div class="paragraph"><p>With <code>--pretty</code> format other than <code>oneline</code> (for obvious reasons),
 this causes the output to have two extra lines of information
-taken from the reflog.  By default, <em>commit@{Nth}</em> notation is
-used in the output.  When the starting commit is specified as
-<em>commit@{now}</em>, output also uses <em>commit@{timestamp}</em> notation
-instead.  Under <code>--pretty=oneline</code>, the commit message is
+taken from the reflog.  The reflog designator in the output may be shown
+as <code>ref@{Nth}</code> (where <code>Nth</code> is the reverse-chronological index in the
+reflog) or as <code>ref@{timestamp}</code> (with the timestamp for that entry),
+depending on a few rules:</p></div>
+<div class="openblock">
+<div class="content">
+<div class="olist arabic"><ol class="arabic">
+<li>
+<p>
+If the starting point is specified as <code>ref@{Nth}</code>, show the index
+format.
+</p>
+</li>
+<li>
+<p>
+If the starting point was specified as <code>ref@{now}</code>, show the
+timestamp format.
+</p>
+</li>
+<li>
+<p>
+If neither was used, but <code>--date</code> was given on the command line, show
+the timestamp in the format requested by <code>--date</code>.
+</p>
+</li>
+<li>
+<p>
+Otherwise, show the index format.
+</p>
+</li>
+</ol></div>
+</div></div>
+<div class="paragraph"><p>Under <code>--pretty=oneline</code>, the commit message is
 prefixed with this information on the same line.
 This option cannot be combined with <code>--reverse</code>.
 See also <a href="git-reflog.html">git-reflog(1)</a>.</p></div>
@@ -1290,6 +1339,25 @@
         prefixed with <code>-</code>.
 </p>
 </dd>
+<dt class="hdlist1">
+--use-bitmap-index
+</dt>
+<dd>
+<p>
+        Try to speed up the traversal using the pack bitmap index (if
+        one is available). Note that when traversing with <code>--objects</code>,
+        trees and blobs will not have their associated path printed.
+</p>
+</dd>
+<dt class="hdlist1">
+--progress=&lt;header&gt;
+</dt>
+<dd>
+<p>
+        Show progress reports on stderr as objects are considered. The
+        <code>&lt;header&gt;</code> text will be printed with each progress update.
+</p>
+</dd>
 </dl></div>
 </div></div>
 </div>
@@ -1694,7 +1762,7 @@
 <div class="paragraph"><p>would be of roughly the same length.  Finding the change which
 introduces a regression is thus reduced to a binary search: repeatedly
 generate and test new 'midpoint&#8217;s until the commit chain is of length
-one.</p></div>
+one. Cannot be combined with --first-parent.</p></div>
 </dd>
 <dt class="hdlist1">
 --bisect-vars
@@ -1812,12 +1880,32 @@
 <p>
         Similar to <code>--objects</code>, but also print the IDs of excluded
         commits prefixed with a &#8220;-&#8221; character.  This is used by
-        <a href="git-pack-objects.html">git-pack-objects(1)</a> to build &#8220;thin&#8221; pack, which records
+        <a href="git-pack-objects.html">git-pack-objects(1)</a> to build a &#8220;thin&#8221; pack, which records
         objects in deltified form based on objects contained in these
         excluded commits to reduce network traffic.
 </p>
 </dd>
 <dt class="hdlist1">
+--objects-edge-aggressive
+</dt>
+<dd>
+<p>
+        Similar to <code>--objects-edge</code>, but it tries harder to find excluded
+        commits at the cost of increased time.  This is used instead of
+        <code>--objects-edge</code> to build &#8220;thin&#8221; packs for shallow repositories.
+</p>
+</dd>
+<dt class="hdlist1">
+--indexed-objects
+</dt>
+<dd>
+<p>
+        Pretend as if all trees and blobs used by the index are listed
+        on the command line.  Note that you probably want to use
+        <code>--objects</code>, too.
+</p>
+</dd>
+<dt class="hdlist1">
 --unpacked
 </dt>
 <dd>
@@ -1837,6 +1925,7 @@
         given on the command line. Otherwise (if <code>sorted</code> or no argument
         was given), the commits are shown in reverse chronological order
         by commit time.
+        Cannot be combined with <code>--graph</code>.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1865,10 +1954,13 @@
 <p>
         Pretty-print the contents of the commit logs in a given format,
         where <em>&lt;format&gt;</em> can be one of <em>oneline</em>, <em>short</em>, <em>medium</em>,
-        <em>full</em>, <em>fuller</em>, <em>email</em>, <em>raw</em> and <em>format:&lt;string&gt;</em>.  See
-        the "PRETTY FORMATS" section for some additional details for each
-        format.  When omitted, the format defaults to <em>medium</em>.
+        <em>full</em>, <em>fuller</em>, <em>email</em>, <em>raw</em>, <em>format:&lt;string&gt;</em>
+        and <em>tformat:&lt;string&gt;</em>.  When <em>&lt;format&gt;</em> is none of the above,
+        and has <em>%placeholder</em> in it, it acts as if
+        <em>--pretty=tformat:&lt;format&gt;</em> were given.
 </p>
+<div class="paragraph"><p>See the "PRETTY FORMATS" section for some additional details for each
+format.  When <em>=&lt;format&gt;</em> part is omitted, it defaults to <em>medium</em>.</p></div>
 <div class="paragraph"><p>Note: you can specify the default pretty format in the repository
 configuration (see <a href="git-config.html">git-config(1)</a>).</p></div>
 </dd>
@@ -1892,7 +1984,7 @@
 <p>
         Show the full 40-byte hexadecimal commit object name. This negates
         <code>--abbrev-commit</code> and those options which imply it such as
-        "--oneline". It also overrides the <em>log.abbrevCommit</em> variable.
+        "--oneline". It also overrides the <code>log.abbrevCommit</code> variable.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1913,54 +2005,33 @@
         in their encoding header; this option can be used to tell the
         command to re-code the commit log message in the encoding
         preferred by the user.  For non plumbing commands this
-        defaults to UTF-8.
+        defaults to UTF-8. Note that if an object claims to be encoded
+        in <code>X</code> and we are outputting in <code>X</code>, we will output the object
+        verbatim; this means that invalid sequences in the original
+        commit may be copied to the output.
 </p>
 </dd>
 <dt class="hdlist1">
---notes[=&lt;ref&gt;]
+--expand-tabs=&lt;n&gt;
 </dt>
-<dd>
-<p>
-        Show the notes (see <a href="git-notes.html">git-notes(1)</a>) that annotate the
-        commit, when showing the commit log message.  This is the default
-        for <code>git log</code>, <code>git show</code> and <code>git whatchanged</code> commands when
-        there is no <code>--pretty</code>, <code>--format</code> nor <code>--oneline</code> option given
-        on the command line.
-</p>
-<div class="paragraph"><p>By default, the notes shown are from the notes refs listed in the
-<em>core.notesRef</em> and <em>notes.displayRef</em> variables (or corresponding
-environment overrides). See <a href="git-config.html">git-config(1)</a> for more details.</p></div>
-<div class="paragraph"><p>With an optional <em>&lt;ref&gt;</em> argument, show this notes ref instead of the
-default notes ref(s). The ref is taken to be in <code>refs/notes/</code> if it
-is not qualified.</p></div>
-<div class="paragraph"><p>Multiple --notes options can be combined to control which notes are
-being displayed. Examples: "--notes=foo" will show only notes from
-"refs/notes/foo"; "--notes=foo --notes" will show both notes from
-"refs/notes/foo" and from the default notes ref(s).</p></div>
-</dd>
-<dt class="hdlist1">
---no-notes
-</dt>
-<dd>
-<p>
-        Do not show notes. This negates the above <code>--notes</code> option, by
-        resetting the list of notes refs from which notes are shown.
-        Options are parsed in the order given on the command line, so e.g.
-        "--notes --notes=foo --no-notes --notes=bar" will only show notes
-        from "refs/notes/bar".
-</p>
-</dd>
 <dt class="hdlist1">
---show-notes[=&lt;ref&gt;]
+--expand-tabs
 </dt>
 <dt class="hdlist1">
---[no-]standard-notes
+--no-expand-tabs
 </dt>
 <dd>
 <p>
-        These options are deprecated. Use the above --notes/--no-notes
-        options instead.
+        Perform a tab expansion (replace each tab with enough spaces
+        to fill to the next display column that is multiple of <em>&lt;n&gt;</em>)
+        in the log message before showing it in the output.
+        <code>--expand-tabs</code> is a short-hand for <code>--expand-tabs=8</code>, and
+        <code>--no-expand-tabs</code> is a short-hand for <code>--expand-tabs=0</code>,
+        which disables tab expansion.
 </p>
+<div class="paragraph"><p>By default, tabs are expanded in pretty formats that indent the log
+message by 4 spaces (i.e.  <em>medium</em>, which is the default, <em>full</em>,
+and <em>fuller</em>).</p></div>
 </dd>
 <dt class="hdlist1">
 --show-signature
@@ -1980,24 +2051,75 @@
 </p>
 </dd>
 <dt class="hdlist1">
---date=(relative|local|default|iso|rfc|short|raw)
+--date=&lt;format&gt;
 </dt>
 <dd>
 <p>
         Only takes effect for dates shown in human-readable format, such
         as when using <code>--pretty</code>. <code>log.date</code> config variable sets a default
-        value for the log command&#8217;s <code>--date</code> option.
+        value for the log command&#8217;s <code>--date</code> option. By default, dates
+        are shown in the original time zone (either committer&#8217;s or
+        author&#8217;s). If <code>-local</code> is appended to the format (e.g.,
+        <code>iso-local</code>), the user&#8217;s local time zone is used instead.
 </p>
 <div class="paragraph"><p><code>--date=relative</code> shows dates relative to the current time,
-e.g. &#8220;2 hours ago&#8221;.</p></div>
-<div class="paragraph"><p><code>--date=local</code> shows timestamps in user&#8217;s local time zone.</p></div>
-<div class="paragraph"><p><code>--date=iso</code> (or <code>--date=iso8601</code>) shows timestamps in ISO 8601 format.</p></div>
+e.g. &#8220;2 hours ago&#8221;. The <code>-local</code> option has no effect for
+<code>--date=relative</code>.</p></div>
+<div class="paragraph"><p><code>--date=local</code> is an alias for <code>--date=default-local</code>.</p></div>
+<div class="paragraph"><p><code>--date=iso</code> (or <code>--date=iso8601</code>) shows timestamps in a ISO 8601-like format.
+The differences to the strict ISO 8601 format are:</p></div>
+<div class="ulist"><ul>
+<li>
+<p>
+a space instead of the <code>T</code> date/time delimiter
+</p>
+</li>
+<li>
+<p>
+a space between time and time zone
+</p>
+</li>
+<li>
+<p>
+no colon between hours and minutes of the time zone
+</p>
+</li>
+</ul></div>
+<div class="paragraph"><p><code>--date=iso-strict</code> (or <code>--date=iso8601-strict</code>) shows timestamps in strict
+ISO 8601 format.</p></div>
 <div class="paragraph"><p><code>--date=rfc</code> (or <code>--date=rfc2822</code>) shows timestamps in RFC 2822
 format, often found in email messages.</p></div>
 <div class="paragraph"><p><code>--date=short</code> shows only the date, but not the time, in <code>YYYY-MM-DD</code> format.</p></div>
-<div class="paragraph"><p><code>--date=raw</code> shows the date in the internal raw Git format <code>%s %z</code> format.</p></div>
-<div class="paragraph"><p><code>--date=default</code> shows timestamps in the original time zone
-(either committer&#8217;s or author&#8217;s).</p></div>
+<div class="paragraph"><p><code>--date=raw</code> shows the date as seconds since the epoch (1970-01-01
+00:00:00 UTC), followed by a space, and then the timezone as an offset
+from UTC (a <code>+</code> or <code>-</code> with four digits; the first two are hours, and
+the second two are minutes). I.e., as if the timestamp were formatted
+with <code>strftime("%s %z")</code>).
+Note that the <code>-local</code> option does not affect the seconds-since-epoch
+value (which is always measured in UTC), but does switch the accompanying
+timezone value.</p></div>
+<div class="paragraph"><p><code>--date=unix</code> shows the date as a Unix epoch timestamp (seconds since
+1970).  As with <code>--raw</code>, this is always in UTC and therefore <code>-local</code>
+has no effect.</p></div>
+<div class="paragraph"><p><code>--date=format:...</code> feeds the format <code>...</code> to your system <code>strftime</code>.
+Use <code>--date=format:%c</code> to show the date in your system locale&#8217;s
+preferred format.  See the <code>strftime</code> manual for a complete list of
+format placeholders. When using <code>-local</code>, the correct syntax is
+<code>--date=format-local:...</code>.</p></div>
+<div class="paragraph"><p><code>--date=default</code> is the default format, and is similar to
+<code>--date=rfc2822</code>, with a few exceptions:</p></div>
+<div class="ulist"><ul>
+<li>
+<p>
+there is no comma after the day-of-week
+</p>
+</li>
+<li>
+<p>
+the time zone is omitted when the local time zone is used
+</p>
+</li>
+</ul></div>
 </dd>
 <dt class="hdlist1">
 --header
@@ -2039,7 +2161,7 @@
 </dt>
 <dd>
 <p>
-        Mark which side of a symmetric diff a commit is reachable from.
+        Mark which side of a symmetric difference a commit is reachable from.
         Commits from the left side are prefixed with <code>&lt;</code> and those from
         the right with <code>&gt;</code>.  If combined with <code>--boundary</code>, those
         commits are prefixed with <code>-</code>.
@@ -2075,12 +2197,25 @@
         on the left hand side of the output.  This may cause extra lines
         to be printed in between commits, in order for the graph history
         to be drawn properly.
+        Cannot be combined with <code>--no-walk</code>.
 </p>
 <div class="paragraph"><p>This enables parent rewriting, see <em>History Simplification</em> below.</p></div>
 <div class="paragraph"><p>This implies the <code>--topo-order</code> option by default, but the
 <code>--date-order</code> option may also be specified.</p></div>
 </dd>
 <dt class="hdlist1">
+--show-linear-break[=&lt;barrier&gt;]
+</dt>
+<dd>
+<p>
+        When --graph is not used, all history branches are flattened
+        which can make it hard to see that the two consecutive commits
+        do not belong to a linear branch. This option puts a barrier
+        in between them in that case. If <code>&lt;barrier&gt;</code> is specified, it
+        is the string that will be shown instead of the default one.
+</p>
+</dd>
+<dt class="hdlist1">
 --count
 </dt>
 <dd>
@@ -2224,8 +2359,11 @@
 stored in the commit object.  Notably, the SHA-1s are
 displayed in full, regardless of whether --abbrev or
 --no-abbrev are used, and <em>parents</em> information show the
-true parent commits, without taking grafts nor history
-simplification into account.</p></div>
+true parent commits, without taking grafts or history
+simplification into account. Note that this format affects the way
+commits are displayed, but not the way the diff is shown e.g. with
+<code>git log --raw</code>. To get full object names in a raw diff format,
+use <code>--no-abbrev</code>.</p></div>
 </li>
 <li>
 <p>
@@ -2318,7 +2456,12 @@
 </li>
 <li>
 <p>
-<em>%ai</em>: author date, ISO 8601 format
+<em>%ai</em>: author date, ISO 8601-like format
+</p>
+</li>
+<li>
+<p>
+<em>%aI</em>: author date, strict ISO 8601 format
 </p>
 </li>
 <li>
@@ -2345,7 +2488,7 @@
 </li>
 <li>
 <p>
-<em>%cd</em>: committer date
+<em>%cd</em>: committer date (format respects --date= option)
 </p>
 </li>
 <li>
@@ -2365,7 +2508,12 @@
 </li>
 <li>
 <p>
-<em>%ci</em>: committer date, ISO 8601 format
+<em>%ci</em>: committer date, ISO 8601-like format
+</p>
+</li>
+<li>
+<p>
+<em>%cI</em>: committer date, strict ISO 8601 format
 </p>
 </li>
 <li>
@@ -2375,6 +2523,11 @@
 </li>
 <li>
 <p>
+<em>%D</em>: ref names without the " (", ")" wrapping.
+</p>
+</li>
+<li>
+<p>
 <em>%e</em>: encoding
 </p>
 </li>
@@ -2400,18 +2553,13 @@
 </li>
 <li>
 <p>
-<em>%N</em>: commit notes
-</p>
-</li>
-<li>
-<p>
 <em>%GG</em>: raw verification message from GPG for a signed commit
 </p>
 </li>
 <li>
 <p>
-<em>%G?</em>: show "G" for a Good signature, "B" for a Bad signature, "U" for a good,
-  untrusted signature and "N" for no signature
+<em>%G?</em>: show "G" for a good (valid) signature, "B" for a bad signature,
+  "U" for a good signature with unknown validity and "N" for no signature
 </p>
 </li>
 <li>
@@ -2426,12 +2574,18 @@
 </li>
 <li>
 <p>
-<em>%gD</em>: reflog selector, e.g., <code>refs/stash@{1}</code>
+<em>%gD</em>: reflog selector, e.g., <code>refs/stash@{1}</code> or
+  <code>refs/stash@{2 minutes ago</code>}; the format follows the rules described
+  for the <code>-g</code> option. The portion before the <code>@</code> is the refname as
+  given on the command line (so <code>git log -g refs/heads/master</code> would
+  yield <code>refs/heads/master@{0}</code>).
 </p>
 </li>
 <li>
 <p>
-<em>%gd</em>: shortened reflog selector, e.g., <code>stash@{1}</code>
+<em>%gd</em>: shortened reflog selector; same as <code>%gD</code>, but the refname
+  portion is shortened for human readability (so <code>refs/heads/master</code>
+  becomes just <code>master</code>).
 </p>
 </li>
 <li>
@@ -2493,7 +2647,7 @@
 </li>
 <li>
 <p>
-<em>%m</em>: left, right or boundary mark
+<em>%m</em>: left (<code>&lt;</code>), right (<code>&gt;</code>) or boundary (<code>-</code>) mark
 </p>
 </li>
 <li>
@@ -2562,8 +2716,9 @@
 <td class="content">Some placeholders may depend on other options given to the
 revision traversal engine. For example, the <code>%g*</code> reflog options will
 insert an empty string unless we are traversing reflog entries (e.g., by
-<code>git log -g</code>). The <code>%d</code> placeholder will use the "short" decoration
-format if <code>--decorate</code> was not already provided on the command line.</td>
+<code>git log -g</code>). The <code>%d</code> and <code>%D</code> placeholders will use the "short"
+decoration format if <code>--decorate</code> was not already provided on the command
+line.</td>
 </tr></table>
 </div>
 <div class="paragraph"><p>If you add a <code>+</code> (plus sign) after <em>%</em> of a placeholder, a line-feed
# install git-rev-list.html /usr/share/doc/git-doc/git-rev-list.html
--- /usr/share/doc/git-doc/git-rev-parse.html	2016-03-21 09:24:29.000000000 -0600
+++ git-rev-parse.html	2016-10-15 00:44:02.188074954 -0600
@@ -907,6 +907,7 @@
 </p>
 <div class="paragraph"><p>If you want to make sure that the output actually names an object in
 your object database and/or can be used as a specific type of object
+you require, you can add the <code>^{type}</code> peeling operator to the parameter.
 For example, <code>git rev-parse "$VAR^{commit}"</code> will make sure <code>$VAR</code>
 names an existing object that is a commit-ish (i.e. a commit, or an
 annotated tag that points at a commit).  To make sure that <code>$VAR</code>
@@ -924,6 +925,7 @@
         Only meaningful in <code>--verify</code> mode. Do not output an error
         message if the first argument is not a valid object name;
         instead exit with non-zero status silently.
+        SHA-1s for valid object names are printed to stdout on success.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1050,7 +1052,7 @@
         consider. Repetitions of this option accumulate exclusion patterns
         up to the next <code>--all</code>, <code>--branches</code>, <code>--tags</code>, <code>--remotes</code>, or
         <code>--glob</code> option (other options or arguments do not clear
-        accumlated patterns).
+        accumulated patterns).
 </p>
 <div class="paragraph"><p>The patterns given should not begin with <code>refs/heads</code>, <code>refs/tags</code>, or
 <code>refs/remotes</code> when applied to <code>--branches</code>, <code>--tags</code>, or <code>--remotes</code>,
@@ -1099,6 +1101,14 @@
 print a message to stderr and exit with nonzero status.</p></div>
 </dd>
 <dt class="hdlist1">
+--git-common-dir
+</dt>
+<dd>
+<p>
+        Show <code>$GIT_COMMON_DIR</code> if defined, else <code>$GIT_DIR</code>.
+</p>
+</dd>
+<dt class="hdlist1">
 --is-inside-git-dir
 </dt>
 <dd>
@@ -1136,6 +1146,18 @@
 </p>
 </dd>
 <dt class="hdlist1">
+--git-path &lt;path&gt;
+</dt>
+<dd>
+<p>
+        Resolve "$GIT_DIR/&lt;path&gt;" and takes other path relocation
+        variables such as $GIT_OBJECT_DIRECTORY,
+        $GIT_INDEX_FILE&#8230; into account. For example, if
+        $GIT_OBJECT_DIRECTORY is set to /foo/bar then "git rev-parse
+        --git-path objects/abc" returns /foo/bar/abc.
+</p>
+</dd>
+<dt class="hdlist1">
 --show-cdup
 </dt>
 <dd>
@@ -1163,6 +1185,15 @@
         Show the absolute path of the top-level directory.
 </p>
 </dd>
+<dt class="hdlist1">
+--shared-index-path
+</dt>
+<dd>
+<p>
+        Show the path to the shared index file in split index mode, or
+        empty if not in split-index mode.
+</p>
+</dd>
 </dl></div>
 </div>
 <div class="sect2">
@@ -1251,8 +1282,8 @@
 <li>
 <p>
 If <em>$GIT_DIR/&lt;refname&gt;</em> exists, that is what you mean (this is usually
-    useful only for <em>HEAD</em>, <em>FETCH_HEAD</em>, <em>ORIG_HEAD</em>, <em>MERGE_HEAD</em>
-    and <em>CHERRY_PICK_HEAD</em>);
+    useful only for <code>HEAD</code>, <code>FETCH_HEAD</code>, <code>ORIG_HEAD</code>, <code>MERGE_HEAD</code>
+    and <code>CHERRY_PICK_HEAD</code>);
 </p>
 </li>
 <li>
@@ -1279,16 +1310,16 @@
 <p>
 otherwise, <em>refs/remotes/&lt;refname&gt;/HEAD</em> if it exists.
 </p>
-<div class="paragraph"><p><em>HEAD</em> names the commit on which you based the changes in the working tree.
-<em>FETCH_HEAD</em> records the branch which you fetched from a remote repository
+<div class="paragraph"><p><code>HEAD</code> names the commit on which you based the changes in the working tree.
+<code>FETCH_HEAD</code> records the branch which you fetched from a remote repository
 with your last <code>git fetch</code> invocation.
-<em>ORIG_HEAD</em> is created by commands that move your <em>HEAD</em> in a drastic
-way, to record the position of the <em>HEAD</em> before their operation, so that
+<code>ORIG_HEAD</code> is created by commands that move your <code>HEAD</code> in a drastic
+way, to record the position of the <code>HEAD</code> before their operation, so that
 you can easily change the tip of the branch back to the state before you ran
 them.
-<em>MERGE_HEAD</em> records the commit(s) which you are merging into your branch
+<code>MERGE_HEAD</code> records the commit(s) which you are merging into your branch
 when you run <code>git merge</code>.
-<em>CHERRY_PICK_HEAD</em> records the commit which you are cherry-picking
+<code>CHERRY_PICK_HEAD</code> records the commit which you are cherry-picking
 when you run <code>git cherry-pick</code>.</p></div>
 <div class="paragraph"><p>Note that any of the <em>refs/*</em> cases above may come either from
 the <em>$GIT_DIR/refs</em> directory or from the <em>$GIT_DIR/packed-refs</em> file.
@@ -1302,7 +1333,7 @@
 </dt>
 <dd>
 <p>
-  <em>@</em> alone is a shortcut for <em>HEAD</em>.
+  <em>@</em> alone is a shortcut for <code>HEAD</code>.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1319,7 +1350,7 @@
   existing log (<em>$GIT_DIR/logs/&lt;ref&gt;</em>). Note that this looks up the state
   of your <strong>local</strong> ref at a given time; e.g., what was in your local
   <em>master</em> branch last week. If you want to look at commits made during
-  certain times, see <em>--since</em> and <em>--until</em>.
+  certain times, see <code>--since</code> and <code>--until</code>.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1362,8 +1393,38 @@
 <p>
   The suffix <em>@{upstream}</em> to a branchname (short form <em>&lt;branchname&gt;@{u}</em>)
   refers to the branch that the branch specified by branchname is set to build on
-  top of.  A missing branchname defaults to the current one.
+  top of (configured with <code>branch.&lt;name&gt;.remote</code> and
+  <code>branch.&lt;name&gt;.merge</code>).  A missing branchname defaults to the
+  current one.
+</p>
+</dd>
+<dt class="hdlist1">
+<em>&lt;branchname&gt;@{push}</em>, e.g. <em>master@{push}</em>, <em>@{push}</em>
+</dt>
+<dd>
+<p>
+  The suffix <em>@{push}</em> reports the branch "where we would push to" if
+  <code>git push</code> were run while <code>branchname</code> was checked out (or the current
+  <code>HEAD</code> if no branchname is specified). Since our push destination is
+  in a remote repository, of course, we report the local tracking branch
+  that corresponds to that branch (i.e., something in <em>refs/remotes/</em>).
 </p>
+<div class="paragraph"><p>Here&#8217;s an example to make it more clear:</p></div>
+<div class="listingblock">
+<div class="content">
+<pre><code>$ git config push.default current
+$ git config remote.pushdefault myfork
+$ git checkout -b mybranch origin/master
+
+$ git rev-parse --symbolic-full-name @{upstream}
+refs/remotes/origin/master
+
+$ git rev-parse --symbolic-full-name @{push}
+refs/remotes/myfork/mybranch</code></pre>
+</div></div>
+<div class="paragraph"><p>Note in the example that we set up a triangular workflow, where we pull
+from one location and push to another. In a non-triangular workflow,
+<em>@{push}</em> is the same as <em>@{upstream}</em>, and there is no need for it.</p></div>
 </dd>
 <dt class="hdlist1">
 <em>&lt;rev&gt;&#94;</em>, e.g. <em>HEAD&#94;, v1.5.1&#94;0</em>
@@ -1445,11 +1506,12 @@
   A colon, followed by a slash, followed by a text, names
   a commit whose commit message matches the specified regular expression.
   This name returns the youngest matching commit which is
-  reachable from any ref.  If the commit message starts with a
-  <em>!</em> you have to repeat that;  the special sequence <em>:/!</em>,
-  followed by something else than <em>!</em>, is reserved for now.
-  The regular expression can match any part of the commit message. To
-  match messages starting with a string, one can use e.g. <em>:/^foo</em>.
+  reachable from any ref. The regular expression can match any part of the
+  commit message. To match messages starting with a string, one can use
+  e.g. <em>:/^foo</em>. The special sequence <em>:/!</em> is reserved for modifiers to what
+  is matched. <em>:/!-foo</em> performs a negative match, while <em>:/!!foo</em> matches a
+  literal <em>!</em> character, followed by <em>foo</em>. Any other sequence beginning with
+  <em>:/!</em> is reserved for now.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1519,42 +1581,88 @@
 <h2 id="_specifying_ranges">SPECIFYING RANGES</h2>
 <div class="sectionbody">
 <div class="paragraph"><p>History traversing commands such as <code>git log</code> operate on a set
-of commits, not just a single commit.  To these commands,
-specifying a single revision with the notation described in the
-previous section means the set of commits reachable from that
-commit, following the commit ancestry chain.</p></div>
-<div class="paragraph"><p>To exclude commits reachable from a commit, a prefix <em>&#94;</em>
-notation is used.  E.g. <em>&#94;r1 r2</em> means commits reachable
-from <em>r2</em> but exclude the ones reachable from <em>r1</em>.</p></div>
-<div class="paragraph"><p>This set operation appears so often that there is a shorthand
-for it.  When you have two commits <em>r1</em> and <em>r2</em> (named according
-to the syntax explained in SPECIFYING REVISIONS above), you can ask
-for commits that are reachable from r2 excluding those that are reachable
-from r1 by <em>&#94;r1 r2</em> and it can be written as <em>r1..r2</em>.</p></div>
-<div class="paragraph"><p>A similar notation <em>r1...r2</em> is called symmetric difference
-of <em>r1</em> and <em>r2</em> and is defined as
-<em>r1 r2 --not $(git merge-base --all r1 r2)</em>.
-It is the set of commits that are reachable from either one of
-<em>r1</em> or <em>r2</em> but not from both.</p></div>
-<div class="paragraph"><p>In these two shorthands, you can omit one end and let it default to HEAD.
+of commits, not just a single commit.</p></div>
+<div class="paragraph"><p>For these commands,
+specifying a single revision, using the notation described in the
+previous section, means the set of commits <code>reachable</code> from the given
+commit.</p></div>
+<div class="paragraph"><p>A commit&#8217;s reachable set is the commit itself and the commits in
+its ancestry chain.</p></div>
+<div class="sect2">
+<h3 id="_commit_exclusions">Commit Exclusions</h3>
+<div class="dlist"><dl>
+<dt class="hdlist1">
+<em>&#94;&lt;rev&gt;</em> (caret) Notation
+</dt>
+<dd>
+<p>
+ To exclude commits reachable from a commit, a prefix <em>&#94;</em>
+ notation is used.  E.g. <em>&#94;r1 r2</em> means commits reachable
+ from <em>r2</em> but exclude the ones reachable from <em>r1</em> (i.e. <em>r1</em> and
+ its ancestors).
+</p>
+</dd>
+</dl></div>
+</div>
+<div class="sect2">
+<h3 id="_dotted_range_notations">Dotted Range Notations</h3>
+<div class="dlist"><dl>
+<dt class="hdlist1">
+The <em>..</em> (two-dot) Range Notation
+</dt>
+<dd>
+<p>
+ The <em>&#94;r1 r2</em> set operation appears so often that there is a shorthand
+ for it.  When you have two commits <em>r1</em> and <em>r2</em> (named according
+ to the syntax explained in SPECIFYING REVISIONS above), you can ask
+ for commits that are reachable from r2 excluding those that are reachable
+ from r1 by <em>&#94;r1 r2</em> and it can be written as <em>r1..r2</em>.
+</p>
+</dd>
+<dt class="hdlist1">
+The <em>&#8230;</em> (three dot) Symmetric Difference Notation
+</dt>
+<dd>
+<p>
+ A similar notation <em>r1...r2</em> is called symmetric difference
+ of <em>r1</em> and <em>r2</em> and is defined as
+ <em>r1 r2 --not $(git merge-base --all r1 r2)</em>.
+ It is the set of commits that are reachable from either one of
+ <em>r1</em> (left side) or <em>r2</em> (right side) but not from both.
+</p>
+</dd>
+</dl></div>
+<div class="paragraph"><p>In these two shorthand notations, you can omit one end and let it default to HEAD.
 For example, <em>origin..</em> is a shorthand for <em>origin..HEAD</em> and asks "What
 did I do since I forked from the origin branch?"  Similarly, <em>..origin</em>
 is a shorthand for <em>HEAD..origin</em> and asks "What did the origin do since
 I forked from them?"  Note that <em>..</em> would mean <em>HEAD..HEAD</em> which is an
 empty range that is both reachable and unreachable from HEAD.</p></div>
-<div class="paragraph"><p>Two other shorthands for naming a set that is formed by a commit
-and its parent commits exist.  The <em>r1&#94;@</em> notation means all
-parents of <em>r1</em>.  <em>r1&#94;!</em> includes commit <em>r1</em> but excludes
-all of its parents.</p></div>
-<div class="paragraph"><p>To summarize:</p></div>
+</div>
+<div class="sect2">
+<h3 id="_other_lt_rev_gt_94_parent_shorthand_notations">Other &lt;rev&gt;&#94; Parent Shorthand Notations</h3>
+<div class="paragraph"><p>Two other shorthands exist, particularly useful for merge commits,
+for naming a set that is formed by a commit and its parent commits.</p></div>
+<div class="paragraph"><p>The <em>r1&#94;@</em> notation means all parents of <em>r1</em>.</p></div>
+<div class="paragraph"><p>The <em>r1&#94;!</em> notation includes commit <em>r1</em> but excludes all of its parents.
+By itself, this notation denotes the single commit <em>r1</em>.</p></div>
+<div class="paragraph"><p>While <em>&lt;rev&gt;&#94;&lt;n&gt;</em> was about specifying a single commit parent, these
+two notations consider all its parents. For example you can say
+<em>HEAD&#94;2&#94;@</em>, however you cannot say <em>HEAD&#94;@&#94;2</em>.</p></div>
+</div>
+</div>
+</div>
+<div class="sect1">
+<h2 id="_revision_range_summary">Revision Range Summary</h2>
+<div class="sectionbody">
 <div class="dlist"><dl>
 <dt class="hdlist1">
 <em>&lt;rev&gt;</em>
 </dt>
 <dd>
 <p>
-        Include commits that are reachable from (i.e. ancestors of)
-        &lt;rev&gt;.
+        Include commits that are reachable from &lt;rev&gt; (i.e. &lt;rev&gt; and its
+        ancestors).
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1562,8 +1670,8 @@
 </dt>
 <dd>
 <p>
-        Exclude commits that are reachable from (i.e. ancestors of)
-        &lt;rev&gt;.
+        Exclude commits that are reachable from &lt;rev&gt; (i.e. &lt;rev&gt; and its
+        ancestors).
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1573,7 +1681,7 @@
 <p>
         Include commits that are reachable from &lt;rev2&gt; but exclude
         those that are reachable from &lt;rev1&gt;.  When either &lt;rev1&gt; or
-        &lt;rev2&gt; is omitted, it defaults to <em>HEAD</em>.
+        &lt;rev2&gt; is omitted, it defaults to <code>HEAD</code>.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1583,7 +1691,7 @@
 <p>
         Include commits that are reachable from either &lt;rev1&gt; or
         &lt;rev2&gt; but exclude those that are reachable from both.  When
-        either &lt;rev1&gt; or &lt;rev2&gt; is omitted, it defaults to <em>HEAD</em>.
+        either &lt;rev1&gt; or &lt;rev2&gt; is omitted, it defaults to <code>HEAD</code>.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1607,20 +1715,31 @@
 </p>
 </dd>
 </dl></div>
-<div class="paragraph"><p>Here are a handful of examples:</p></div>
+<div class="paragraph"><p>Here are a handful of examples using the Loeliger illustration above,
+with each step in the notation&#8217;s expansion and selection carefully
+spelt out:</p></div>
 <div class="literalblock">
 <div class="content">
-<pre><code>D                G H D
-D F              G H I J D F
-^G D             H D
-^D B             E I J F B
-B..C             C
-B...C            G H D E B C
-^D B C           E I J F B C
-C                I J F C
-C^@              I J F
-C^!              C
-F^! D            G H D F</code></pre>
+<pre><code>Args   Expanded arguments    Selected commits
+D                            G H D
+D F                          G H I J D F
+^G D                         H D
+^D B                         E I J F B
+^D B C                       E I J F B C
+C                            I J F C
+B..C   = ^B C                C
+B...C  = B ^F C              G H D E B C
+C^@    = C^1
+       = F                   I J F
+B^@    = B^1 B^2 B^3
+       = D E F               D G H E F I J
+C^!    = C ^C^@
+       = C ^C^1
+       = C ^F                C
+B^!    = B ^B^@
+       = B ^B^1 ^B^2 ^B^3
+       = B ^D ^E ^F          B
+F^! D  = F ^I ^J D           G H D F</code></pre>
 </div></div>
 </div>
 </div>
@@ -1640,23 +1759,23 @@
 <h3 id="_input_format">Input Format</h3>
 <div class="paragraph"><p><em>git rev-parse --parseopt</em> input format is fully text based. It has two parts,
 separated by a line that contains only <code>--</code>. The lines before the separator
-(should be more than one) are used for the usage.
+(should be one or more) are used for the usage.
 The lines after the separator describe the options.</p></div>
 <div class="paragraph"><p>Each line of options has this format:</p></div>
 <div class="listingblock">
 <div class="content">
-<pre><code>&lt;opt_spec&gt;&lt;flags&gt;* SP+ help LF</code></pre>
+<pre><code>&lt;opt-spec&gt;&lt;flags&gt;*&lt;arg-hint&gt;? SP+ help LF</code></pre>
 </div></div>
 <div class="dlist"><dl>
 <dt class="hdlist1">
-<code>&lt;opt_spec&gt;</code>
+<code>&lt;opt-spec&gt;</code>
 </dt>
 <dd>
 <p>
         its format is the short option character, then the long option name
         separated by a comma. Both parts are not required, though at least one
-        is necessary. <code>h,help</code>, <code>dry-run</code> and <code>f</code> are all three correct
-        <code>&lt;opt_spec&gt;</code>.
+        is necessary. May not contain any of the <code>&lt;flags&gt;</code> characters.
+        <code>h,help</code>, <code>dry-run</code> and <code>f</code> are examples of correct <code>&lt;opt-spec&gt;</code>.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1693,6 +1812,17 @@
 </li>
 </ul></div>
 </dd>
+<dt class="hdlist1">
+<code>&lt;arg-hint&gt;</code>
+</dt>
+<dd>
+<p>
+        <code>&lt;arg-hint&gt;</code>, if specified, is used as a name of the argument in the
+        help output, for options that take arguments. <code>&lt;arg-hint&gt;</code> is
+        terminated by the first whitespace.  It is customary to use a
+        dash to separate words in a multi-word argument hint.
+</p>
+</dd>
 </dl></div>
 <div class="paragraph"><p>The remainder of the line, after stripping the spaces, is used
 as the help associated to the option.</p></div>
@@ -1713,6 +1843,8 @@
 
 foo       some nifty option --foo
 bar=      some cool option --bar with an argument
+baz=arg   another cool option --baz with a named argument
+qux?path  qux may take a path argument but has meaning by itself
 
   An option group Header
 C?        option C with an optional argument"
@@ -1720,6 +1852,26 @@
 eval "$(echo "$OPTS_SPEC" | git rev-parse --parseopt -- "$@" || echo exit $?)"</code></pre>
 </div></div>
 </div>
+<div class="sect2">
+<h3 id="_usage_text">Usage text</h3>
+<div class="paragraph"><p>When <code>"$@"</code> is <code>-h</code> or <code>--help</code> in the above example, the following
+usage text would be shown:</p></div>
+<div class="listingblock">
+<div class="content">
+<pre><code>usage: some-command [options] &lt;args&gt;...
+
+    some-command does foo and bar!
+
+    -h, --help            show the help
+    --foo                 some nifty option --foo
+    --bar ...             some cool option --bar with an argument
+    --baz &lt;arg&gt;           another cool option --baz with a named argument
+    --qux[=&lt;path&gt;]        qux may take a path argument but has meaning by itself
+
+An option group Header
+    -C[...]               option C with an optional argument</code></pre>
+</div></div>
+</div>
 </div>
 </div>
 <div class="sect1">
# install git-rev-parse.html /usr/share/doc/git-doc/git-rev-parse.html
--- /usr/share/doc/git-doc/git-revert.html	2016-03-21 09:24:29.000000000 -0600
+++ git-revert.html	2016-10-15 00:44:00.232074917 -0600
@@ -748,7 +748,7 @@
 <h2 id="_synopsis">SYNOPSIS</h2>
 <div class="sectionbody">
 <div class="verseblock">
-<pre class="content"><em>git revert</em> [--[no-]edit] [-n] [-m parent-number] [-s] &lt;commit&gt;&#8230;
+<pre class="content"><em>git revert</em> [--[no-]edit] [-n] [-m parent-number] [-s] [-S[&lt;keyid&gt;]] &lt;commit&gt;&#8230;
 <em>git revert</em> --continue
 <em>git revert</em> --quit
 <em>git revert</em> --abort</pre>
@@ -766,7 +766,7 @@
 <div class="paragraph"><p>Note: <em>git revert</em> is used to record some new commits to reverse the
 effect of some earlier commits (often only a faulty one).  If you want to
 throw away all uncommitted changes in your working directory, you
-should see <a href="git-reset.html">git-reset(1)</a>, particularly the <em>--hard</em> option.  If
+should see <a href="git-reset.html">git-reset(1)</a>, particularly the <code>--hard</code> option.  If
 you want to extract specific files as they were in another commit, you
 should see <a href="git-checkout.html">git-checkout(1)</a>, specifically the <code>git checkout
 &lt;commit&gt; -- &lt;filename&gt;</code> syntax.  Take care with these alternatives as
@@ -786,7 +786,7 @@
         For a more complete list of ways to spell commit names, see
         <a href="gitrevisions.html">gitrevisions(7)</a>.
         Sets of commits can also be given but no traversal is done by
-        default, see <a href="git-rev-list.html">git-rev-list(1)</a> and its <em>--no-walk</em>
+        default, see <a href="git-rev-list.html">git-rev-list(1)</a> and its <code>--no-walk</code>
         option.
 </p>
 </dd>
@@ -854,6 +854,19 @@
 effect to your index in a row.</p></div>
 </dd>
 <dt class="hdlist1">
+-S[&lt;keyid&gt;]
+</dt>
+<dt class="hdlist1">
+--gpg-sign[=&lt;keyid&gt;]
+</dt>
+<dd>
+<p>
+        GPG-sign commits. The <code>keyid</code> argument is optional and
+        defaults to the committer identity; if specified, it must be
+        stuck to the option without a space.
+</p>
+</dd>
+<dt class="hdlist1">
 -s
 </dt>
 <dt class="hdlist1">
@@ -862,6 +875,7 @@
 <dd>
 <p>
         Add Signed-off-by line at the end of the commit message.
+        See the signoff option in <a href="git-commit.html">git-commit(1)</a> for more information.
 </p>
 </dd>
 <dt class="hdlist1">
# install git-revert.html /usr/share/doc/git-doc/git-revert.html
--- /usr/share/doc/git-doc/git-send-email.html	2016-03-21 09:24:29.000000000 -0600
+++ git-send-email.html	2016-10-15 00:44:03.088074971 -0600
@@ -748,7 +748,8 @@
 <h2 id="_synopsis">SYNOPSIS</h2>
 <div class="sectionbody">
 <div class="verseblock">
-<pre class="content"><em>git send-email</em> [options] &lt;file|directory|rev-list options&gt;&#8230;</pre>
+<pre class="content"><em>git send-email</em> [options] &lt;file|directory|rev-list options&gt;&#8230;
+<em>git send-email</em> --dump-aliases</pre>
 <div class="attribution">
 </div></div>
 </div>
@@ -761,7 +762,7 @@
 files in the directory), or directly as a revision list.  In the
 last case, any format accepted by <a href="git-format-patch.html">git-format-patch(1)</a> can
 be passed to git send-email.</p></div>
-<div class="paragraph"><p>The header of the email is configurable by command line options.  If not
+<div class="paragraph"><p>The header of the email is configurable via command-line options.  If not
 specified on the command line, the user will be prompted with a ReadLine
 enabled interface to provide the necessary information.</p></div>
 <div class="paragraph"><p>There are two formats accepted for patch files:</p></div>
@@ -796,29 +797,29 @@
 <dd>
 <p>
         Review and edit each patch you&#8217;re about to send. Default is the value
-        of <em>sendemail.annotate</em>. See the CONFIGURATION section for
-        <em>sendemail.multiedit</em>.
+        of <code>sendemail.annotate</code>. See the CONFIGURATION section for
+        <code>sendemail.multiEdit</code>.
 </p>
 </dd>
 <dt class="hdlist1">
---bcc=&lt;address&gt;
+--bcc=&lt;address&gt;,&#8230;
 </dt>
 <dd>
 <p>
         Specify a "Bcc:" value for each email. Default is the value of
-        <em>sendemail.bcc</em>.
+        <code>sendemail.bcc</code>.
 </p>
-<div class="paragraph"><p>The --bcc option must be repeated for each user you want on the bcc list.</p></div>
+<div class="paragraph"><p>This option may be specified multiple times.</p></div>
 </dd>
 <dt class="hdlist1">
---cc=&lt;address&gt;
+--cc=&lt;address&gt;,&#8230;
 </dt>
 <dd>
 <p>
         Specify a starting "Cc:" value for each email.
-        Default is the value of <em>sendemail.cc</em>.
+        Default is the value of <code>sendemail.cc</code>.
 </p>
-<div class="paragraph"><p>The --cc option must be repeated for each user you want on the cc list.</p></div>
+<div class="paragraph"><p>This option may be specified multiple times.</p></div>
 </dd>
 <dt class="hdlist1">
 --compose
@@ -828,13 +829,13 @@
         Invoke a text editor (see GIT_EDITOR in <a href="git-var.html">git-var(1)</a>)
         to edit an introductory message for the patch series.
 </p>
-<div class="paragraph"><p>When <em>--compose</em> is used, git send-email will use the From, Subject, and
+<div class="paragraph"><p>When <code>--compose</code> is used, git send-email will use the From, Subject, and
 In-Reply-To headers specified in the message. If the body of the message
 (what you type after the headers and a blank line) only contains blank
-(or Git: prefixed) lines the summary won&#8217;t be sent, but From, Subject,
+(or Git: prefixed) lines, the summary won&#8217;t be sent, but From, Subject,
 and In-Reply-To headers will be used unless they are removed.</p></div>
 <div class="paragraph"><p>Missing From or In-Reply-To headers will be prompted for.</p></div>
-<div class="paragraph"><p>See the CONFIGURATION section for <em>sendemail.multiedit</em>.</p></div>
+<div class="paragraph"><p>See the CONFIGURATION section for <code>sendemail.multiEdit</code>.</p></div>
 </dd>
 <dt class="hdlist1">
 --from=&lt;address&gt;
@@ -842,8 +843,8 @@
 <dd>
 <p>
         Specify the sender of the emails.  If not specified on the command line,
-        the value of the <em>sendemail.from</em> configuration option is used.  If
-        neither the command line option nor <em>sendemail.from</em> are set, then the
+        the value of the <code>sendemail.from</code> configuration option is used.  If
+        neither the command-line option nor <code>sendemail.from</code> are set, then the
         user will be prompted for the value.  The default for the prompt will be
         the value of GIT_AUTHOR_IDENT, or GIT_COMMITTER_IDENT if that is not
         set, as returned by "git var -l".
@@ -887,16 +888,16 @@
 </p>
 </dd>
 <dt class="hdlist1">
---to=&lt;address&gt;
+--to=&lt;address&gt;,&#8230;
 </dt>
 <dd>
 <p>
         Specify the primary recipient of the emails generated. Generally, this
         will be the upstream maintainer of the project involved. Default is the
-        value of the <em>sendemail.to</em> configuration value; if that is unspecified,
+        value of the <code>sendemail.to</code> configuration value; if that is unspecified,
         and --to-cmd is not specified, this will be prompted for.
 </p>
-<div class="paragraph"><p>The --to option must be repeated for each user you want on the to list.</p></div>
+<div class="paragraph"><p>This option may be specified multiple times.</p></div>
 </dd>
 <dt class="hdlist1">
 --8bit-encoding=&lt;encoding&gt;
@@ -920,6 +921,34 @@
         <em>sendemail.composeencoding</em>; if that is unspecified, UTF-8 is assumed.
 </p>
 </dd>
+<dt class="hdlist1">
+--transfer-encoding=(7bit|8bit|quoted-printable|base64)
+</dt>
+<dd>
+<p>
+        Specify the transfer encoding to be used to send the message over SMTP.
+        7bit will fail upon encountering a non-ASCII message.  quoted-printable
+        can be useful when the repository contains files that contain carriage
+        returns, but makes the raw patch email file (as saved from a MUA) much
+        harder to inspect manually.  base64 is even more fool proof, but also
+        even more opaque.  Default is the value of the <code>sendemail.transferEncoding</code>
+        configuration value; if that is unspecified, git will use 8bit and not
+        add a Content-Transfer-Encoding header.
+</p>
+</dd>
+<dt class="hdlist1">
+--xmailer
+</dt>
+<dt class="hdlist1">
+--no-xmailer
+</dt>
+<dd>
+<p>
+        Add (or prevent adding) the "X-Mailer:" header.  By default,
+        the header is added, but it can be turned off by setting the
+        <code>sendemail.xmailer</code> configuration variable to <code>false</code>.
+</p>
+</dd>
 </dl></div>
 </div>
 <div class="sect2">
@@ -935,7 +964,7 @@
         subscribed to a list. In order to use the <em>From</em> address, set the
         value to "auto". If you use the sendmail binary, you must have
         suitable privileges for the -f parameter.  Default is the value of the
-        <em>sendemail.envelopesender</em> configuration variable; if that is
+        <code>sendemail.envelopeSender</code> configuration variable; if that is
         unspecified, choosing the envelope sender is left to your MTA.
 </p>
 </dd>
@@ -946,7 +975,7 @@
 <p>
         Specify the encryption to use, either <em>ssl</em> or <em>tls</em>.  Any other
         value reverts to plain SMTP.  Default is the value of
-        <em>sendemail.smtpencryption</em>.
+        <code>sendemail.smtpEncryption</code>.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -958,23 +987,40 @@
         HELO/EHLO command to the SMTP server.  Some servers require the
         FQDN to match your IP address.  If not set, git send-email attempts
         to determine your FQDN automatically.  Default is the value of
-        <em>sendemail.smtpdomain</em>.
+        <code>sendemail.smtpDomain</code>.
 </p>
 </dd>
 <dt class="hdlist1">
+--smtp-auth=&lt;mechanisms&gt;
+</dt>
+<dd>
+<p>
+        Whitespace-separated list of allowed SMTP-AUTH mechanisms. This setting
+        forces using only the listed mechanisms. Example:
+</p>
+<div class="listingblock">
+<div class="content">
+<pre><code>$ git send-email --smtp-auth="PLAIN LOGIN GSSAPI" ...</code></pre>
+</div></div>
+<div class="paragraph"><p>If at least one of the specified mechanisms matches the ones advertised by the
+SMTP server and if it is supported by the utilized SASL library, the mechanism
+is used for authentication. If neither <em>sendemail.smtpAuth</em> nor <code>--smtp-auth</code>
+is specified, all mechanisms supported by the SASL library can be used.</p></div>
+</dd>
+<dt class="hdlist1">
 --smtp-pass[=&lt;password&gt;]
 </dt>
 <dd>
 <p>
         Password for SMTP-AUTH. The argument is optional: If no
         argument is specified, then the empty string is used as
-        the password. Default is the value of <em>sendemail.smtppass</em>,
-        however <em>--smtp-pass</em> always overrides this value.
+        the password. Default is the value of <code>sendemail.smtpPass</code>,
+        however <code>--smtp-pass</code> always overrides this value.
 </p>
 <div class="paragraph"><p>Furthermore, passwords need not be specified in configuration files
 or on the command line. If a username has been specified (with
-<em>--smtp-user</em> or a <em>sendemail.smtpuser</em>), but no password has been
-specified (with <em>--smtp-pass</em> or <em>sendemail.smtppass</em>), then
+<code>--smtp-user</code> or a <code>sendemail.smtpUser</code>), but no password has been
+specified (with <code>--smtp-pass</code> or <code>sendemail.smtpPass</code>), then
 a password is obtained using <em>git-credential</em>.</p></div>
 </dd>
 <dt class="hdlist1">
@@ -986,7 +1032,7 @@
         <code>smtp.example.com</code> or a raw IP address).  Alternatively it can
         specify a full pathname of a sendmail-like program instead;
         the program must support the <code>-i</code> option.  Default value can
-        be specified by the <em>sendemail.smtpserver</em> configuration
+        be specified by the <code>sendemail.smtpServer</code> configuration
         option; the built-in default is <code>/usr/sbin/sendmail</code> or
         <code>/usr/lib/sendmail</code> if such program is available, or
         <code>localhost</code> otherwise.
@@ -1002,7 +1048,7 @@
         submission port 587, or the common SSL smtp port 465);
         symbolic port names (e.g. "submission" instead of 587)
         are also accepted. The port can also be set with the
-        <em>sendemail.smtpserverport</em> configuration variable.
+        <code>sendemail.smtpServerPort</code> configuration variable.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1011,7 +1057,7 @@
 <dd>
 <p>
         If set, specifies the outgoing SMTP server option to use.
-        Default value can be specified by the <em>sendemail.smtpserveroption</em>
+        Default value can be specified by the <code>sendemail.smtpServerOption</code>
         configuration option.
 </p>
 <div class="paragraph"><p>The --smtp-server-option option must be repeated for each option you want
@@ -1031,10 +1077,15 @@
 </dt>
 <dd>
 <p>
-        Path to ca-certificates (either a directory or a single file).
-        Set it to an empty string to disable certificate verification.
-        Defaults to the value set to the <em>sendemail.smtpsslcertpath</em>
-        configuration variable, if set, or <code>/etc/ssl/certs</code> otherwise.
+        Path to a store of trusted CA certificates for SMTP SSL/TLS
+        certificate validation (either a directory that has been processed
+        by <em>c_rehash</em>, or a single file containing one or more PEM format
+        certificates concatenated together: see verify(1) -CAfile and
+        -CApath for more information on these). Set it to an empty string
+        to disable certificate verification. Defaults to the value of the
+        <code>sendemail.smtpsslcertpath</code> configuration variable, if set, or the
+        backing SSL library&#8217;s compiled-in default otherwise (which should
+        be the best choice on most platforms).
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1042,8 +1093,8 @@
 </dt>
 <dd>
 <p>
-        Username for SMTP-AUTH. Default is the value of <em>sendemail.smtpuser</em>;
-        if a username is not specified (with <em>--smtp-user</em> or <em>sendemail.smtpuser</em>),
+        Username for SMTP-AUTH. Default is the value of <code>sendemail.smtpUser</code>;
+        if a username is not specified (with <code>--smtp-user</code> or <code>sendemail.smtpUser</code>),
         then authentication is not attempted.
 </p>
 </dd>
@@ -1081,7 +1132,7 @@
         Specify a command to execute once per patch file which
         should generate patch file specific "Cc:" entries.
         Output of this command must be single email address per line.
-        Default is the value of <em>sendemail.cccmd</em> configuration value.
+        Default is the value of <code>sendemail.ccCmd</code> configuration value.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1093,7 +1144,7 @@
         email sent.  If disabled with "--no-chain-reply-to", all emails after
         the first will be sent as replies to the first email sent.  When using
         this, it is recommended that the first file given be an overview of the
-        entire patch series. Disabled by default, but the <em>sendemail.chainreplyto</em>
+        entire patch series. Disabled by default, but the <code>sendemail.chainReplyTo</code>
         configuration variable can be used to enable it.
 </p>
 </dd>
@@ -1105,7 +1156,7 @@
         A configuration identity. When given, causes values in the
         <em>sendemail.&lt;identity&gt;</em> subsection to take precedence over
         values in the <em>sendemail</em> section. The default identity is
-        the value of <em>sendemail.identity</em>.
+        the value of <code>sendemail.identity</code>.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1114,11 +1165,33 @@
 <dd>
 <p>
         If this is set, add emails found in Signed-off-by: or Cc: lines to the
-        cc list. Default is the value of <em>sendemail.signedoffbycc</em> configuration
+        cc list. Default is the value of <code>sendemail.signedoffbycc</code> configuration
         value; if that is unspecified, default to --signed-off-by-cc.
 </p>
 </dd>
 <dt class="hdlist1">
+--[no-]cc-cover
+</dt>
+<dd>
+<p>
+        If this is set, emails found in Cc: headers in the first patch of
+        the series (typically the cover letter) are added to the cc list
+        for each email set. Default is the value of <em>sendemail.cccover</em>
+        configuration value; if that is unspecified, default to --no-cc-cover.
+</p>
+</dd>
+<dt class="hdlist1">
+--[no-]to-cover
+</dt>
+<dd>
+<p>
+        If this is set, emails found in To: headers in the first patch of
+        the series (typically the cover letter) are added to the to list
+        for each email set. Default is the value of <em>sendemail.tocover</em>
+        configuration value; if that is unspecified, default to --no-to-cover.
+</p>
+</dd>
+<dt class="hdlist1">
 --suppress-cc=&lt;category&gt;
 </dt>
 <dd>
@@ -1174,7 +1247,7 @@
 </li>
 </ul></div>
 </div></div>
-<div class="paragraph"><p>Default is the value of <em>sendemail.suppresscc</em> configuration value; if
+<div class="paragraph"><p>Default is the value of <code>sendemail.suppresscc</code> configuration value; if
 that is unspecified, default to <em>self</em> if --suppress-from is
 specified, as well as <em>body</em> if --no-signed-off-cc is specified.</p></div>
 </dd>
@@ -1184,7 +1257,7 @@
 <dd>
 <p>
         If this is set, do not add the From: address to the cc: list.
-        Default is the value of <em>sendemail.suppressfrom</em> configuration
+        Default is the value of <code>sendemail.suppressFrom</code> configuration
         value; if that is unspecified, default to --no-suppress-from.
 </p>
 </dd>
@@ -1201,7 +1274,7 @@
 </p>
 <div class="paragraph"><p>If disabled with "--no-thread", those headers will not be added
 (unless specified with --in-reply-to).  Default is the value of the
-<em>sendemail.thread</em> configuration value; if that is unspecified,
+<code>sendemail.thread</code> configuration value; if that is unspecified,
 default to --thread.</p></div>
 <div class="paragraph"><p>It is up to the user to ensure that no In-Reply-To header already
 exists when <em>git send-email</em> is asked to add it (especially note that
@@ -1252,7 +1325,7 @@
 </li>
 </ul></div>
 </div></div>
-<div class="paragraph"><p>Default is the value of <em>sendemail.confirm</em> configuration value; if that
+<div class="paragraph"><p>Default is the value of <code>sendemail.confirm</code> configuration value; if that
 is unspecified, default to <em>auto</em> unless any of the suppress options
 have been specified, in which case default to <em>compose</em>.</p></div>
 </dd>
@@ -1270,8 +1343,8 @@
 <dd>
 <p>
         When an argument may be understood either as a reference or as a file name,
-        choose to understand it as a format-patch argument (<em>--format-patch</em>)
-        or as a file name (<em>--no-format-patch</em>). By default, when such a conflict
+        choose to understand it as a format-patch argument (<code>--format-patch</code>)
+        or as a file name (<code>--no-format-patch</code>). By default, when such a conflict
         occurs, git send-email will fail.
 </p>
 </dd>
@@ -1303,8 +1376,8 @@
 </li>
 </ul></div>
 </div></div>
-<div class="paragraph"><p>Default is the value of <em>sendemail.validate</em>; if this is not set,
-default to <em>--validate</em>.</p></div>
+<div class="paragraph"><p>Default is the value of <code>sendemail.validate</code>; if this is not set,
+default to <code>--validate</code>.</p></div>
 </dd>
 <dt class="hdlist1">
 --force
@@ -1316,6 +1389,22 @@
 </dd>
 </dl></div>
 </div>
+<div class="sect2">
+<h3 id="_information">Information</h3>
+<div class="dlist"><dl>
+<dt class="hdlist1">
+--dump-aliases
+</dt>
+<dd>
+<p>
+        Instead of the normal operation, dump the shorthand alias names from
+        the configured alias file(s), one per line in alphabetical order. Note,
+        this only includes the alias name and not its expanded email addresses.
+        See <em>sendemail.aliasesfile</em> for more information about aliases.
+</p>
+</dd>
+</dl></div>
+</div>
 </div>
 </div>
 <div class="sect1">
@@ -1323,31 +1412,71 @@
 <div class="sectionbody">
 <div class="dlist"><dl>
 <dt class="hdlist1">
-sendemail.aliasesfile
+sendemail.aliasesFile
 </dt>
 <dd>
 <p>
         To avoid typing long email addresses, point this to one or more
-        email aliases files.  You must also supply <em>sendemail.aliasfiletype</em>.
+        email aliases files.  You must also supply <code>sendemail.aliasFileType</code>.
 </p>
 </dd>
 <dt class="hdlist1">
-sendemail.aliasfiletype
+sendemail.aliasFileType
 </dt>
 <dd>
 <p>
-        Format of the file(s) specified in sendemail.aliasesfile. Must be
-        one of <em>mutt</em>, <em>mailrc</em>, <em>pine</em>, <em>elm</em>, or <em>gnus</em>.
+        Format of the file(s) specified in sendemail.aliasesFile. Must be
+        one of <em>mutt</em>, <em>mailrc</em>, <em>pine</em>, <em>elm</em>, or <em>gnus</em>, or <em>sendmail</em>.
 </p>
+<div class="paragraph"><p>What an alias file in each format looks like can be found in
+the documentation of the email program of the same name. The
+differences and limitations from the standard formats are
+described below:</p></div>
+<div class="openblock">
+<div class="content">
+<div class="dlist"><dl>
+<dt class="hdlist1">
+sendmail
+</dt>
+<dd>
+<div class="ulist"><ul>
+<li>
+<p>
+Quoted aliases and quoted addresses are not supported: lines that
+        contain a <code>"</code> symbol are ignored.
+</p>
+</li>
+<li>
+<p>
+Redirection to a file (<code>/path/name</code>) or pipe (<code>|command</code>) is not
+        supported.
+</p>
+</li>
+<li>
+<p>
+File inclusion (<code>:include: /path/name</code>) is not supported.
+</p>
+</li>
+<li>
+<p>
+Warnings are printed on the standard error output for any
+        explicitly unsupported constructs, and any other lines that are not
+        recognized by the parser.
+</p>
+</li>
+</ul></div>
+</dd>
+</dl></div>
+</div></div>
 </dd>
 <dt class="hdlist1">
-sendemail.multiedit
+sendemail.multiEdit
 </dt>
 <dd>
 <p>
         If true (default), a single editor instance will be spawned to edit
-        files you have to edit (patches when <em>--annotate</em> is used, and the
-        summary when <em>--compose</em> is used). If false, files will be edited one
+        files you have to edit (patches when <code>--annotate</code> is used, and the
+        summary when <code>--compose</code> is used). If false, files will be edited one
         after the other, spawning a new editor each time.
 </p>
 </dd>
@@ -1357,7 +1486,7 @@
 <dd>
 <p>
         Sets the default for whether to confirm before sending. Must be
-        one of <em>always</em>, <em>never</em>, <em>cc</em>, <em>compose</em>, or <em>auto</em>. See <em>--confirm</em>
+        one of <em>always</em>, <em>never</em>, <em>cc</em>, <em>compose</em>, or <em>auto</em>. See <code>--confirm</code>
         in the previous section for the meaning of these values.
 </p>
 </dd>
@@ -1374,10 +1503,23 @@
 <div class="literalblock">
 <div class="content">
 <pre><code>[sendemail]
-        smtpencryption = tls
-        smtpserver = smtp.gmail.com
-        smtpuser = yourname@gmail.com
-        smtpserverport = 587</code></pre>
+        smtpEncryption = tls
+        smtpServer = smtp.gmail.com
+        smtpUser = yourname@gmail.com
+        smtpServerPort = 587</code></pre>
+</div></div>
+<div class="paragraph"><p>If you have multifactor authentication setup on your gmail account, you will
+need to generate an app-specific password for use with <em>git send-email</em>. Visit
+<a href="https://security.google.com/settings/security/apppasswords">https://security.google.com/settings/security/apppasswords</a> to setup an
+app-specific password.  Once setup, you can store it with the credentials
+helper:</p></div>
+<div class="literalblock">
+<div class="content">
+<pre><code>$ git credential fill
+protocol=smtp
+host=smtp.gmail.com
+username=youname@gmail.com
+password=app-password</code></pre>
 </div></div>
 <div class="paragraph"><p>Once your commits are ready to be sent to the mailing list, run the
 following commands:</p></div>
# install git-send-email.html /usr/share/doc/git-doc/git-send-email.html
--- /usr/share/doc/git-doc/git-send-pack.html	2016-03-21 09:24:29.000000000 -0600
+++ git-send-pack.html	2016-10-15 00:44:03.392074976 -0600
@@ -748,7 +748,10 @@
 <h2 id="_synopsis">SYNOPSIS</h2>
 <div class="sectionbody">
 <div class="verseblock">
-<pre class="content"><em>git send-pack</em> [--all] [--dry-run] [--force] [--receive-pack=&lt;git-receive-pack&gt;] [--verbose] [--thin] [&lt;host&gt;:]&lt;directory&gt; [&lt;ref&gt;&#8230;]</pre>
+<pre class="content"><em>git send-pack</em> [--all] [--dry-run] [--force] [--receive-pack=&lt;git-receive-pack&gt;]
+                [--verbose] [--thin] [--atomic]
+                [--[no-]signed|--sign=(true|false|if-asked)]
+                [&lt;host&gt;:]&lt;directory&gt; [&lt;ref&gt;&#8230;]</pre>
 <div class="attribution">
 </div></div>
 </div>
@@ -795,6 +798,20 @@
 </p>
 </dd>
 <dt class="hdlist1">
+--stdin
+</dt>
+<dd>
+<p>
+        Take the list of refs from stdin, one per line. If there
+        are refs specified on the command line in addition to this
+        option, then the refs from stdin are processed after those
+        on the command line.
+</p>
+<div class="paragraph"><p>If <code>--stateless-rpc</code> is specified together with this option then
+the list of refs must be in packet format (pkt-line). Each ref must
+be in a separate packet, and the list must end with a flush packet.</p></div>
+</dd>
+<dt class="hdlist1">
 --dry-run
 </dt>
 <dd>
@@ -832,6 +849,34 @@
 </p>
 </dd>
 <dt class="hdlist1">
+--atomic
+</dt>
+<dd>
+<p>
+        Use an atomic transaction for updating the refs. If any of the refs
+        fails to update then the entire push will fail without changing any
+        refs.
+</p>
+</dd>
+<dt class="hdlist1">
+--[no-]signed
+</dt>
+<dt class="hdlist1">
+--sign=(true|false|if-asked)
+</dt>
+<dd>
+<p>
+        GPG-sign the push request to update refs on the receiving
+        side, to allow it to be checked by the hooks and/or be
+        logged.  If <code>false</code> or <code>--no-signed</code>, no signing will be
+        attempted.  If <code>true</code> or <code>--signed</code>, the push will fail if the
+        server does not support signed pushes.  If set to <code>if-asked</code>,
+        sign if and only if the server supports signed pushes.  The push
+        will also fail if the actual call to <code>gpg --sign</code> fails.  See
+        <a href="git-receive-pack.html">git-receive-pack(1)</a> for the details on the receiving end.
+</p>
+</dd>
+<dt class="hdlist1">
 &lt;host&gt;
 </dt>
 <dd>
@@ -865,12 +910,13 @@
 <div class="sectionbody">
 <div class="paragraph"><p>There are three ways to specify which refs to update on the
 remote end.</p></div>
-<div class="paragraph"><p>With <em>--all</em> flag, all refs that exist locally are transferred to
+<div class="paragraph"><p>With <code>--all</code> flag, all refs that exist locally are transferred to
 the remote side.  You cannot specify any <em>&lt;ref&gt;</em> if you use
 this flag.</p></div>
-<div class="paragraph"><p>Without <em>--all</em> and without any <em>&lt;ref&gt;</em>, the heads that exist
+<div class="paragraph"><p>Without <code>--all</code> and without any <em>&lt;ref&gt;</em>, the heads that exist
 both on the local side and on the remote side are updated.</p></div>
-<div class="paragraph"><p>When one or more <em>&lt;ref&gt;</em> are specified explicitly, it can be either a
+<div class="paragraph"><p>When one or more <em>&lt;ref&gt;</em> are specified explicitly (whether on the
+command line or via <code>--stdin</code>), it can be either a
 single pattern, or a pair of such pattern separated by a colon
 ":" (this means that a ref name cannot have a colon in it).  A
 single pattern <em>&lt;name&gt;</em> is just a shorthand for <em>&lt;name&gt;:&lt;name&gt;</em>.</p></div>
@@ -914,12 +960,12 @@
 </ul></div>
 </li>
 </ul></div>
-<div class="paragraph"><p>Without <em>--force</em>, the &lt;src&gt; ref is stored at the remote only if
+<div class="paragraph"><p>Without &#8216;--force`, the &lt;src&gt; ref is stored at the remote only if
 &lt;dst&gt; does not exist, or &lt;dst&gt; is a proper subset (i.e. an
 ancestor) of &lt;src&gt;.  This check, known as "fast-forward check",
 is performed in order to avoid accidentally overwriting the
-remote ref and lose other peoples' commits from there.</p></div>
-<div class="paragraph"><p>With <em>--force</em>, the fast-forward check is disabled for all refs.</p></div>
+remote ref and lose other peoples&#8217; commits from there.</p></div>
+<div class="paragraph"><p>With <code>--force</code>, the fast-forward check is disabled for all refs.</p></div>
 <div class="paragraph"><p>Optionally, a &lt;ref&gt; parameter can be prefixed with a plus <em>+</em> sign
 to disable the fast-forward check only on that ref.</p></div>
 </div>
# install git-send-pack.html /usr/share/doc/git-doc/git-send-pack.html
--- /usr/share/doc/git-doc/git-sh-setup.html	2016-03-21 09:24:29.000000000 -0600
+++ git-sh-setup.html	2016-10-15 00:44:06.672075038 -0600
@@ -797,7 +797,7 @@
 </dt>
 <dd>
 <p>
-        Set GIT_REFLOG_ACTION environment to a given string (typically
+        Set <code>GIT_REFLOG_ACTION</code> environment to a given string (typically
         the name of the program) unless it is already set.  Whenever
         the script runs a <code>git</code> command that updates refs, a reflog
         entry is created using the value of this string to leave the
# install git-sh-setup.html /usr/share/doc/git-doc/git-sh-setup.html
--- /usr/share/doc/git-doc/git-shell.html	2016-03-21 09:24:29.000000000 -0600
+++ git-shell.html	2016-10-15 00:44:03.636074981 -0600
@@ -767,7 +767,7 @@
 <div class="sect1">
 <h2 id="_commands">COMMANDS</h2>
 <div class="sectionbody">
-<div class="paragraph"><p><em>git shell</em> accepts the following commands after the <em>-c</em> option:</p></div>
+<div class="paragraph"><p><em>git shell</em> accepts the following commands after the <code>-c</code> option:</p></div>
 <div class="dlist"><dl>
 <dt class="hdlist1">
 <em>git receive-pack &lt;argument&gt;</em>
@@ -803,7 +803,7 @@
 <div class="sect1">
 <h2 id="_interactive_use">INTERACTIVE USE</h2>
 <div class="sectionbody">
-<div class="paragraph"><p>By default, the commands above can be executed only with the <em>-c</em>
+<div class="paragraph"><p>By default, the commands above can be executed only with the <code>-c</code>
 option; the shell is not interactive.</p></div>
 <div class="paragraph"><p>If a <code>~/git-shell-commands</code> directory is present, <em>git shell</em>
 can also be run interactively (with no arguments).  If a <code>help</code>
@@ -824,7 +824,6 @@
 <h2 id="_example">EXAMPLE</h2>
 <div class="sectionbody">
 <div class="paragraph"><p>To disable interactive logins, displaying a greeting instead:</p></div>
-<div class="paragraph"><p>+</p></div>
 <div class="listingblock">
 <div class="content">
 <pre><code>$ chsh -s /usr/bin/git-shell
# install git-shell.html /usr/share/doc/git-doc/git-shell.html
--- /usr/share/doc/git-doc/git-show-branch.html	2016-03-21 09:24:29.000000000 -0600
+++ git-show-branch.html	2016-10-15 00:44:04.732075001 -0600
@@ -766,7 +766,7 @@
 and/or refs/tags) semi-visually.</p></div>
 <div class="paragraph"><p>It cannot show more than 29 branches and commits at a time.</p></div>
 <div class="paragraph"><p>It uses <code>showbranch.default</code> multi-valued configuration items if
-no &lt;rev&gt; nor &lt;glob&gt; is given on the command line.</p></div>
+no &lt;rev&gt; or &lt;glob&gt; is given on the command line.</p></div>
 </div>
 </div>
 <div class="sect1">
@@ -841,7 +841,7 @@
 </dt>
 <dd>
 <p>
-        This option is similar to <em>--topo-order</em> in the sense that no
+        This option is similar to <code>--topo-order</code> in the sense that no
         parent comes before all of its children, but otherwise commits
         are ordered according to their commit date.
 </p>
# install git-show-branch.html /usr/share/doc/git-doc/git-show-branch.html
--- /usr/share/doc/git-doc/git-show-index.html	2016-03-21 09:24:29.000000000 -0600
+++ git-show-index.html	2016-10-15 00:44:04.928075005 -0600
@@ -748,7 +748,7 @@
 <h2 id="_synopsis">SYNOPSIS</h2>
 <div class="sectionbody">
 <div class="verseblock">
-<pre class="content"><em>git show-index</em> &lt; idx-file</pre>
+<pre class="content"><em>git show-index</em></pre>
 <div class="attribution">
 </div></div>
 </div>
@@ -756,8 +756,9 @@
 <div class="sect1">
 <h2 id="_description">DESCRIPTION</h2>
 <div class="sectionbody">
-<div class="paragraph"><p>Reads given idx file for packed Git archive created with
-<em>git pack-objects</em> command, and dumps its contents.</p></div>
+<div class="paragraph"><p>Read the idx file for a Git packfile created with
+<em>git pack-objects</em> command from the standard input, and
+dump its contents.</p></div>
 <div class="paragraph"><p>The information it outputs is subset of what you can get from
 <em>git verify-pack -v</em>; this command only shows the packfile
 offset and SHA-1 of each object.</p></div>
# install git-show-index.html /usr/share/doc/git-doc/git-show-index.html
--- /usr/share/doc/git-doc/git-show-ref.html	2016-03-21 09:24:29.000000000 -0600
+++ git-show-ref.html	2016-10-15 00:44:05.244075011 -0600
@@ -751,7 +751,7 @@
 <pre class="content"><em>git show-ref</em> [-q|--quiet] [--verify] [--head] [-d|--dereference]
              [-s|--hash[=&lt;n&gt;]] [--abbrev[=&lt;n&gt;]] [--tags]
              [--heads] [--] [&lt;pattern&gt;&#8230;]
-<em>git show-ref</em> --exclude-existing[=&lt;pattern&gt;] &lt; ref-list</pre>
+<em>git show-ref</em> --exclude-existing[=&lt;pattern&gt;]</pre>
 <div class="attribution">
 </div></div>
 </div>
@@ -764,8 +764,9 @@
 dereferenced into object IDs. Additionally, it can be used to test whether a
 particular ref exists.</p></div>
 <div class="paragraph"><p>By default, shows the tags, heads, and remote refs.</p></div>
-<div class="paragraph"><p>The --exclude-existing form is a filter that does the inverse, it shows the
-refs from stdin that don&#8217;t exist in the local repository.</p></div>
+<div class="paragraph"><p>The --exclude-existing form is a filter that does the inverse. It reads
+refs from stdin, one ref per line, and shows those that don&#8217;t exist in
+the local repository.</p></div>
 <div class="paragraph"><p>Use of this utility is encouraged in favor of directly accessing files under
 the <code>.git</code> directory.</p></div>
 </div>
@@ -826,7 +827,7 @@
 <p>
         Enable stricter reference checking by requiring an exact ref path.
         Aside from returning an error code of 1, it will also print an error
-        message if <em>--quiet</em> was not specified.
+        message if <code>--quiet</code> was not specified.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -846,7 +847,7 @@
 </dt>
 <dd>
 <p>
-        Do not print any results to stdout. When combined with <em>--verify</em> this
+        Do not print any results to stdout. When combined with <code>--verify</code> this
         can be used to silently check if a reference exists.
 </p>
 </dd>
@@ -873,7 +874,7 @@
         Show references matching one or more patterns. Patterns are matched from
         the end of the full name, and only complete parts are matched, e.g.
         <em>master</em> matches <em>refs/heads/master</em>, <em>refs/remotes/origin/master</em>,
-        <em>refs/tags/jedi/master</em> but not <em>refs/heads/mymaster</em> nor
+        <em>refs/tags/jedi/master</em> but not <em>refs/heads/mymaster</em> or
         <em>refs/remotes/master/jedi</em>.
 </p>
 </dd>
@@ -919,7 +920,7 @@
 </div></div>
 <div class="paragraph"><p>This will show "refs/heads/master" but also "refs/remote/other-repo/master",
 if such references exists.</p></div>
-<div class="paragraph"><p>When using the <em>--verify</em> flag, the command requires an exact path:</p></div>
+<div class="paragraph"><p>When using the <code>--verify</code> flag, the command requires an exact path:</p></div>
 <div class="listingblock">
 <div class="content">
 <pre><code>        git show-ref --verify refs/heads/master</code></pre>
# install git-show-ref.html /usr/share/doc/git-doc/git-show-ref.html
--- /usr/share/doc/git-doc/git-show.html	2016-03-21 09:24:29.000000000 -0600
+++ git-show.html	2016-10-15 00:44:06.404075033 -0600
@@ -793,10 +793,13 @@
 <p>
         Pretty-print the contents of the commit logs in a given format,
         where <em>&lt;format&gt;</em> can be one of <em>oneline</em>, <em>short</em>, <em>medium</em>,
-        <em>full</em>, <em>fuller</em>, <em>email</em>, <em>raw</em> and <em>format:&lt;string&gt;</em>.  See
-        the "PRETTY FORMATS" section for some additional details for each
-        format.  When omitted, the format defaults to <em>medium</em>.
+        <em>full</em>, <em>fuller</em>, <em>email</em>, <em>raw</em>, <em>format:&lt;string&gt;</em>
+        and <em>tformat:&lt;string&gt;</em>.  When <em>&lt;format&gt;</em> is none of the above,
+        and has <em>%placeholder</em> in it, it acts as if
+        <em>--pretty=tformat:&lt;format&gt;</em> were given.
 </p>
+<div class="paragraph"><p>See the "PRETTY FORMATS" section for some additional details for each
+format.  When <em>=&lt;format&gt;</em> part is omitted, it defaults to <em>medium</em>.</p></div>
 <div class="paragraph"><p>Note: you can specify the default pretty format in the repository
 configuration (see <a href="git-config.html">git-config(1)</a>).</p></div>
 </dd>
@@ -820,7 +823,7 @@
 <p>
         Show the full 40-byte hexadecimal commit object name. This negates
         <code>--abbrev-commit</code> and those options which imply it such as
-        "--oneline". It also overrides the <em>log.abbrevCommit</em> variable.
+        "--oneline". It also overrides the <code>log.abbrevCommit</code> variable.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -841,26 +844,52 @@
         in their encoding header; this option can be used to tell the
         command to re-code the commit log message in the encoding
         preferred by the user.  For non plumbing commands this
-        defaults to UTF-8.
+        defaults to UTF-8. Note that if an object claims to be encoded
+        in <code>X</code> and we are outputting in <code>X</code>, we will output the object
+        verbatim; this means that invalid sequences in the original
+        commit may be copied to the output.
 </p>
 </dd>
 <dt class="hdlist1">
---notes[=&lt;ref&gt;]
+--expand-tabs=&lt;n&gt;
+</dt>
+<dt class="hdlist1">
+--expand-tabs
+</dt>
+<dt class="hdlist1">
+--no-expand-tabs
+</dt>
+<dd>
+<p>
+        Perform a tab expansion (replace each tab with enough spaces
+        to fill to the next display column that is multiple of <em>&lt;n&gt;</em>)
+        in the log message before showing it in the output.
+        <code>--expand-tabs</code> is a short-hand for <code>--expand-tabs=8</code>, and
+        <code>--no-expand-tabs</code> is a short-hand for <code>--expand-tabs=0</code>,
+        which disables tab expansion.
+</p>
+<div class="paragraph"><p>By default, tabs are expanded in pretty formats that indent the log
+message by 4 spaces (i.e.  <em>medium</em>, which is the default, <em>full</em>,
+and <em>fuller</em>).</p></div>
+</dd>
+<dt class="hdlist1">
+--notes[=&lt;treeish&gt;]
 </dt>
 <dd>
 <p>
         Show the notes (see <a href="git-notes.html">git-notes(1)</a>) that annotate the
         commit, when showing the commit log message.  This is the default
         for <code>git log</code>, <code>git show</code> and <code>git whatchanged</code> commands when
-        there is no <code>--pretty</code>, <code>--format</code> nor <code>--oneline</code> option given
+        there is no <code>--pretty</code>, <code>--format</code>, or <code>--oneline</code> option given
         on the command line.
 </p>
 <div class="paragraph"><p>By default, the notes shown are from the notes refs listed in the
-<em>core.notesRef</em> and <em>notes.displayRef</em> variables (or corresponding
+<code>core.notesRef</code> and <code>notes.displayRef</code> variables (or corresponding
 environment overrides). See <a href="git-config.html">git-config(1)</a> for more details.</p></div>
-<div class="paragraph"><p>With an optional <em>&lt;ref&gt;</em> argument, show this notes ref instead of the
-default notes ref(s). The ref is taken to be in <code>refs/notes/</code> if it
-is not qualified.</p></div>
+<div class="paragraph"><p>With an optional <em>&lt;treeish&gt;</em> argument, use the treeish to find the notes
+to display.  The treeish can specify the full refname when it begins
+with <code>refs/notes/</code>; when it begins with <code>notes/</code>, <code>refs/</code> and otherwise
+<code>refs/notes/</code> is prefixed to form a full name of the ref.</p></div>
 <div class="paragraph"><p>Multiple --notes options can be combined to control which notes are
 being displayed. Examples: "--notes=foo" will show only notes from
 "refs/notes/foo"; "--notes=foo --notes" will show both notes from
@@ -879,7 +908,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
---show-notes[=&lt;ref&gt;]
+--show-notes[=&lt;treeish&gt;]
 </dt>
 <dt class="hdlist1">
 --[no-]standard-notes
@@ -1028,8 +1057,11 @@
 stored in the commit object.  Notably, the SHA-1s are
 displayed in full, regardless of whether --abbrev or
 --no-abbrev are used, and <em>parents</em> information show the
-true parent commits, without taking grafts nor history
-simplification into account.</p></div>
+true parent commits, without taking grafts or history
+simplification into account. Note that this format affects the way
+commits are displayed, but not the way the diff is shown e.g. with
+<code>git log --raw</code>. To get full object names in a raw diff format,
+use <code>--no-abbrev</code>.</p></div>
 </li>
 <li>
 <p>
@@ -1122,7 +1154,12 @@
 </li>
 <li>
 <p>
-<em>%ai</em>: author date, ISO 8601 format
+<em>%ai</em>: author date, ISO 8601-like format
+</p>
+</li>
+<li>
+<p>
+<em>%aI</em>: author date, strict ISO 8601 format
 </p>
 </li>
 <li>
@@ -1149,7 +1186,7 @@
 </li>
 <li>
 <p>
-<em>%cd</em>: committer date
+<em>%cd</em>: committer date (format respects --date= option)
 </p>
 </li>
 <li>
@@ -1169,7 +1206,12 @@
 </li>
 <li>
 <p>
-<em>%ci</em>: committer date, ISO 8601 format
+<em>%ci</em>: committer date, ISO 8601-like format
+</p>
+</li>
+<li>
+<p>
+<em>%cI</em>: committer date, strict ISO 8601 format
 </p>
 </li>
 <li>
@@ -1179,6 +1221,11 @@
 </li>
 <li>
 <p>
+<em>%D</em>: ref names without the " (", ")" wrapping.
+</p>
+</li>
+<li>
+<p>
 <em>%e</em>: encoding
 </p>
 </li>
@@ -1214,8 +1261,8 @@
 </li>
 <li>
 <p>
-<em>%G?</em>: show "G" for a Good signature, "B" for a Bad signature, "U" for a good,
-  untrusted signature and "N" for no signature
+<em>%G?</em>: show "G" for a good (valid) signature, "B" for a bad signature,
+  "U" for a good signature with unknown validity and "N" for no signature
 </p>
 </li>
 <li>
@@ -1230,12 +1277,18 @@
 </li>
 <li>
 <p>
-<em>%gD</em>: reflog selector, e.g., <code>refs/stash@{1}</code>
+<em>%gD</em>: reflog selector, e.g., <code>refs/stash@{1}</code> or
+  <code>refs/stash@{2 minutes ago</code>}; the format follows the rules described
+  for the <code>-g</code> option. The portion before the <code>@</code> is the refname as
+  given on the command line (so <code>git log -g refs/heads/master</code> would
+  yield <code>refs/heads/master@{0}</code>).
 </p>
 </li>
 <li>
 <p>
-<em>%gd</em>: shortened reflog selector, e.g., <code>stash@{1}</code>
+<em>%gd</em>: shortened reflog selector; same as <code>%gD</code>, but the refname
+  portion is shortened for human readability (so <code>refs/heads/master</code>
+  becomes just <code>master</code>).
 </p>
 </li>
 <li>
@@ -1297,7 +1350,7 @@
 </li>
 <li>
 <p>
-<em>%m</em>: left, right or boundary mark
+<em>%m</em>: left (<code>&lt;</code>), right (<code>&gt;</code>) or boundary (<code>-</code>) mark
 </p>
 </li>
 <li>
@@ -1366,8 +1419,9 @@
 <td class="content">Some placeholders may depend on other options given to the
 revision traversal engine. For example, the <code>%g*</code> reflog options will
 insert an empty string unless we are traversing reflog entries (e.g., by
-<code>git log -g</code>). The <code>%d</code> placeholder will use the "short" decoration
-format if <code>--decorate</code> was not already provided on the command line.</td>
+<code>git log -g</code>). The <code>%d</code> and <code>%D</code> placeholders will use the "short"
+decoration format if <code>--decorate</code> was not already provided on the command
+line.</td>
 </tr></table>
 </div>
 <div class="paragraph"><p>If you add a <code>+</code> (plus sign) after <em>%</em> of a placeholder, a line-feed
@@ -1431,7 +1485,6 @@
 <dd>
 <p>
         Generate patch (see section on generating patches).
-        
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1464,8 +1517,11 @@
 </dt>
 <dd>
 <p>
-        Generate the raw format.
-        
+        For each commit, show a summary of changes using the raw diff
+        format. See the "RAW OUTPUT FORMAT" section of
+        <a href="git-diff.html">git-diff(1)</a>. This is different from showing the log
+        itself in raw format, which you can achieve with
+        <code>--format=raw</code>.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1477,6 +1533,20 @@
 </p>
 </dd>
 <dt class="hdlist1">
+--compaction-heuristic
+</dt>
+<dt class="hdlist1">
+--no-compaction-heuristic
+</dt>
+<dd>
+<p>
+        These are to help debugging and tuning an experimental
+        heuristic (which is off by default) that shifts the hunk
+        boundary in an attempt to make the resulting patch easier
+        to read.
+</p>
+</dd>
+<dt class="hdlist1">
 --minimal
 </dt>
 <dd>
@@ -1829,8 +1899,10 @@
 expression to make sure that it matches all non-whitespace characters.
 A match that contains a newline is silently truncated(!) at the
 newline.</p></div>
+<div class="paragraph"><p>For example, <code>--word-diff-regex=.</code> will treat each character as a word
+and, correspondingly, show differences character by character.</p></div>
 <div class="paragraph"><p>The regex can also be set via a diff driver or configuration option, see
-<a href="gitattributes.html">gitattributes(1)</a> or <a href="git-config.html">git-config(1)</a>.  Giving it explicitly
+<a href="gitattributes.html">gitattributes(5)</a> or <a href="git-config.html">git-config(1)</a>.  Giving it explicitly
 overrides any diff driver or configuration setting.  Diff drivers
 override configuration settings.</p></div>
 </dd>
@@ -1857,8 +1929,8 @@
 </dt>
 <dd>
 <p>
-        Warn if changes introduce whitespace errors.  What are
-        considered whitespace errors is controlled by <code>core.whitespace</code>
+        Warn if changes introduce conflict markers or whitespace errors.
+        What are considered whitespace errors is controlled by <code>core.whitespace</code>
         configuration.  By default, trailing whitespaces (including
         lines that solely consist of whitespaces) and a space character
         that is immediately followed by a tab character inside the
@@ -1868,6 +1940,20 @@
 </p>
 </dd>
 <dt class="hdlist1">
+--ws-error-highlight=&lt;kind&gt;
+</dt>
+<dd>
+<p>
+        Highlight whitespace errors on lines specified by &lt;kind&gt;
+        in the color specified by <code>color.diff.whitespace</code>.  &lt;kind&gt;
+        is a comma separated list of <code>old</code>, <code>new</code>, <code>context</code>.  When
+        this option is not given, only whitespace errors in <code>new</code>
+        lines are highlighted.  E.g. <code>--ws-error-highlight=new,old</code>
+        highlights whitespace errors on both deleted and added lines.
+        <code>all</code> can be used as a short-hand for <code>old,new,context</code>.
+</p>
+</dd>
+<dt class="hdlist1">
 --full-index
 </dt>
 <dd>
@@ -1985,7 +2071,7 @@
 <p>
         Omit the preimage for deletes, i.e. print only the header but not
         the diff between the preimage and <code>/dev/null</code>. The resulting patch
-        is not meant to be applied with <code>patch</code> nor <code>git apply</code>; this is
+        is not meant to be applied with <code>patch</code> or <code>git apply</code>; this is
         solely for people who want to just concentrate on reviewing the
         text after the change. In addition, the output obviously lack
         enough information to apply such a patch in reverse, even manually,
@@ -2022,6 +2108,8 @@
         other criteria in the comparison; if there is no file
         that matches other criteria, nothing is selected.
 </p>
+<div class="paragraph"><p>Also, these upper-case letters can be downcased to exclude.  E.g.
+<code>--diff-filter=ad</code> excludes added and deleted paths.</p></div>
 </dd>
 <dt class="hdlist1">
 -S&lt;string&gt;
@@ -2087,8 +2175,8 @@
 <p>
         Output the patch in the order specified in the
         &lt;orderfile&gt;, which has one shell glob pattern per line.
-        This overrides the <code>diff.orderfile</code> configuration variable
-        (see <a href="git-config.html">git-config(1)</a>).  To cancel <code>diff.orderfile</code>,
+        This overrides the <code>diff.orderFile</code> configuration variable
+        (see <a href="git-config.html">git-config(1)</a>).  To cancel <code>diff.orderFile</code>,
         use <code>-O/dev/null</code>.
 </p>
 </dd>
@@ -2274,11 +2362,11 @@
 <h2 id="_generating_patches_with_p">Generating patches with -p</h2>
 <div class="sectionbody">
 <div class="paragraph"><p>When "git-diff-index", "git-diff-tree", or "git-diff-files" are run
-with a <em>-p</em> option, "git diff" without the <em>--raw</em> option, or
+with a <code>-p</code> option, "git diff" without the <code>--raw</code> option, or
 "git log" with the "-p" option, they
 do not produce the output described above; instead they produce a
 patch file.  You can customize the creation of such patches via the
-GIT_EXTERNAL_DIFF and the GIT_DIFF_OPTS environment variables.</p></div>
+<code>GIT_EXTERNAL_DIFF</code> and the <code>GIT_DIFF_OPTS</code> environment variables.</p></div>
 <div class="paragraph"><p>What the -p option produces is slightly different from the traditional
 diff format:</p></div>
 <div class="olist arabic"><ol class="arabic">
@@ -2359,10 +2447,10 @@
 <div class="sect1">
 <h2 id="_combined_diff_format">combined diff format</h2>
 <div class="sectionbody">
-<div class="paragraph"><p>Any diff-generating command can take the &#8216;-c` or <code>--cc</code> option to
+<div class="paragraph"><p>Any diff-generating command can take the <code>-c</code> or <code>--cc</code> option to
 produce a <em>combined diff</em> when showing a merge. This is the default
 format when showing merges with <a href="git-diff.html">git-diff(1)</a> or
-<a href="git-show.html">git-show(1)</a>. Note also that you can give the `-m&#8217; option to any
+<a href="git-show.html">git-show(1)</a>. Note also that you can give the <code>-m</code> option to any
 of these commands to force generation of diffs with individual parents
 of a merge.</p></div>
 <div class="paragraph"><p>A <em>combined diff</em> format looks like this:</p></div>
@@ -2400,13 +2488,13 @@
 <li>
 <p>
 It is preceded with a "git diff" header, that looks like
-     this (when <em>-c</em> option is used):
+     this (when <code>-c</code> option is used):
 </p>
 <div class="literalblock">
 <div class="content">
 <pre><code>diff --combined file</code></pre>
 </div></div>
-<div class="paragraph"><p>or like this (when <em>--cc</em> option is used):</p></div>
+<div class="paragraph"><p>or like this (when <code>--cc</code> option is used):</p></div>
 <div class="literalblock">
 <div class="content">
 <pre><code>diff --cc file</code></pre>
@@ -2474,7 +2562,7 @@
 <div class="paragraph"><p>In the above example output, the function signature was changed
 from both files (hence two <code>-</code> removals from both file1 and
 file2, plus <code>++</code> to mean one line that was added does not appear
-in either file1 nor file2).  Also eight other lines are the same
+in either file1 or file2).  Also eight other lines are the same
 from file1 but do not appear in file2 (hence prefixed with <code>+</code>).</p></div>
 <div class="paragraph"><p>When shown by <code>git diff-tree -c</code>, it compares the parents of a
 merge commit with the merge result (i.e. file1..fileN are the
@@ -2539,20 +2627,10 @@
 <div class="sect1">
 <h2 id="_discussion">Discussion</h2>
 <div class="sectionbody">
-<div class="paragraph"><p>At the core level, Git is character encoding agnostic.</p></div>
+<div class="paragraph"><p>Git is to some extent character encoding agnostic.</p></div>
 <div class="ulist"><ul>
 <li>
 <p>
-The pathnames recorded in the index and in the tree objects
-   are treated as uninterpreted sequences of non-NUL bytes.
-   What readdir(2) returns are what are recorded and compared
-   with the data Git keeps track of, which in turn are expected
-   to be what lstat(2) and creat(2) accepts.  There is no such
-   thing as pathname encoding translation.
-</p>
-</li>
-<li>
-<p>
 The contents of the blob objects are uninterpreted sequences
    of bytes.  There is no encoding translation at the core
    level.
@@ -2560,8 +2638,30 @@
 </li>
 <li>
 <p>
-The commit log messages are uninterpreted sequences of non-NUL
-   bytes.
+Path names are encoded in UTF-8 normalization form C. This
+   applies to tree objects, the index file, ref names, as well as
+   path names in command line arguments, environment variables
+   and config files (<code>.git/config</code> (see <a href="git-config.html">git-config(1)</a>),
+   <a href="gitignore.html">gitignore(5)</a>, <a href="gitattributes.html">gitattributes(5)</a> and
+   <a href="gitmodules.html">gitmodules(5)</a>).
+</p>
+<div class="paragraph"><p>Note that Git at the core level treats path names simply as
+sequences of non-NUL bytes, there are no path name encoding
+conversions (except on Mac and Windows). Therefore, using
+non-ASCII path names will mostly work even on platforms and file
+systems that use legacy extended ASCII encodings. However,
+repositories created on such systems will not work properly on
+UTF-8-based systems (e.g. Linux, Mac, Windows) and vice versa.
+Additionally, many Git-based tools simply assume path names to
+be UTF-8 and will fail to display other encodings correctly.</p></div>
+</li>
+<li>
+<p>
+Commit log messages are typically encoded in UTF-8, but other
+   extended ASCII encodings are also supported. This includes
+   ISO-8859-x, CP125x and many others, but <em>not</em> UTF-16/32,
+   EBCDIC and CJK multi-byte encodings (GBK, Shift-JIS, Big5,
+   EUC-x, CP9xx etc.).
 </p>
 </li>
 </ul></div>
# install git-show.html /usr/share/doc/git-doc/git-show.html
--- /usr/share/doc/git-doc/git-stash.html	2016-03-21 09:24:29.000000000 -0600
+++ git-stash.html	2016-10-15 00:44:07.228075048 -0600
@@ -788,7 +788,7 @@
 <div class="sectionbody">
 <div class="dlist"><dl>
 <dt class="hdlist1">
-save [-p|--patch] [--[no-]keep-index] [-u|--include-untracked] [-a|--all] [-q|--quiet] [&lt;message&gt;]
+save [-p|--patch] [-k|--[no-]keep-index] [-u|--include-untracked] [-a|--all] [-q|--quiet] [&lt;message&gt;]
 </dt>
 <dd>
 <p>
@@ -844,6 +844,8 @@
         shows the latest one. By default, the command shows the diffstat, but
         it will accept any format known to <em>git diff</em> (e.g., <code>git stash show
         -p stash@{1}</code> to view the second most recent stash in patch form).
+        You can use stash.showStat and/or stash.showPatch config variables
+        to change the default behavior.
 </p>
 </dd>
 <dt class="hdlist1">
# install git-stash.html /usr/share/doc/git-doc/git-stash.html
--- /usr/share/doc/git-doc/git-status.html	2016-03-21 09:24:29.000000000 -0600
+++ git-status.html	2016-10-15 00:44:07.576075055 -0600
@@ -811,6 +811,21 @@
 </p>
 </dd>
 <dt class="hdlist1">
+-v
+</dt>
+<dt class="hdlist1">
+--verbose
+</dt>
+<dd>
+<p>
+        In addition to the names of files that have been changed, also
+        show the textual changes that are staged to be committed
+        (i.e., like the output of <code>git diff --cached</code>). If <code>-v</code> is specified
+        twice, then also show the changes in the working tree that
+        have not yet been staged (i.e., like the output of <code>git diff</code>).
+</p>
+</dd>
+<dt class="hdlist1">
 -u[&lt;mode&gt;]
 </dt>
 <dt class="hdlist1">
@@ -820,8 +835,9 @@
 <p>
         Show untracked files.
 </p>
-<div class="paragraph"><p>The mode parameter is optional (defaults to <em>all</em>), and is used to
-specify the handling of untracked files.</p></div>
+<div class="paragraph"><p>The mode parameter is used to specify the handling of untracked files.
+It is optional: it defaults to <em>all</em>, and if specified, it must be
+stuck to the option (e.g. <code>-uno</code>, but not <code>-u no</code>).</p></div>
 <div class="paragraph"><p>The possible options are:</p></div>
 <div class="ulist"><ul>
 <li>
@@ -842,7 +858,10 @@
 shown (i.e. the same as specifying <code>normal</code>), to help you avoid
 forgetting to add newly created files.  Because it takes extra work
 to find untracked files in the filesystem, this mode may take some
-time in a large working tree.  You can use <code>no</code> to have <code>git status</code>
+time in a large working tree.
+Consider enabling untracked cache and split index if supported (see
+<code>git update-index --untracked-cache</code> and <code>git update-index
+--split-index</code>), Otherwise you can use <code>no</code> to have <code>git status</code>
 return more quickly without showing untracked files.</p></div>
 <div class="paragraph"><p>The default can be changed using the status.showUntrackedFiles
 configuration variable documented in <a href="git-config.html">git-config(1)</a>.</p></div>
@@ -866,7 +885,7 @@
         only changes to the commits stored in the superproject are shown (this was
         the behavior before 1.7.0). Using "all" hides all changes to submodules
         (and suppresses the output of submodule summaries when the config option
-        <code>status.submodulesummary</code> is set).
+        <code>status.submoduleSummary</code> is set).
 </p>
 </dd>
 <dt class="hdlist1">
@@ -907,7 +926,7 @@
 <h2 id="_output">OUTPUT</h2>
 <div class="sectionbody">
 <div class="paragraph"><p>The output from this command is designed to be used as a commit
-template comment, and all the output lines are prefixed with <em>#</em>.
+template comment.
 The default, long format, is designed to be human readable,
 verbose and descriptive.  Its contents and format are subject to change
 at any time.</p></div>
@@ -924,14 +943,14 @@
 </div></div>
 <div class="paragraph"><p>where <code>PATH1</code> is the path in the <code>HEAD</code>, and the " <code>-&gt; PATH2</code>" part is
 shown only when <code>PATH1</code> corresponds to a different path in the
-index/worktree (i.e. the file is renamed). The <em>XY</em> is a two-letter
+index/worktree (i.e. the file is renamed). The <code>XY</code> is a two-letter
 status code.</p></div>
 <div class="paragraph"><p>The fields (including the <code>-&gt;</code>) are separated from each other by a
 single space. If a filename contains whitespace or other nonprintable
 characters, that field will be quoted in the manner of a C string
 literal: surrounded by ASCII double quote (34) characters, and with
 interior special characters backslash-escaped.</p></div>
-<div class="paragraph"><p>For paths with merge conflicts, <code>X</code> and <em>Y</em> show the modification
+<div class="paragraph"><p>For paths with merge conflicts, <code>X</code> and <code>Y</code> show the modification
 states of each side of the merge. For paths that do not have merge
 conflicts, <code>X</code> shows the status of the index, and <code>Y</code> shows the status
 of the work tree.  For untracked paths, <code>XY</code> are <code>??</code>.  Other status
@@ -1047,7 +1066,7 @@
 <div class="paragraph"><p>If the config variable <code>status.relativePaths</code> is set to false, then all
 paths shown are relative to the repository root, not to the current
 directory.</p></div>
-<div class="paragraph"><p>If <code>status.submodulesummary</code> is set to a non zero number or true (identical
+<div class="paragraph"><p>If <code>status.submoduleSummary</code> is set to a non zero number or true (identical
 to -1 or an unlimited number), the submodule summary will be enabled for
 the long format and a summary of commits for modified submodules will be
 shown (see --summary-limit option of <a href="git-submodule.html">git-submodule(1)</a>). Please note
# install git-status.html /usr/share/doc/git-doc/git-status.html
--- /usr/share/doc/git-doc/git-stripspace.html	2016-03-21 09:24:29.000000000 -0600
+++ git-stripspace.html	2016-10-15 00:44:07.812075059 -0600
@@ -748,7 +748,8 @@
 <h2 id="_synopsis">SYNOPSIS</h2>
 <div class="sectionbody">
 <div class="verseblock">
-<pre class="content"><em>git stripspace</em> [-s | --strip-comments] &lt; input</pre>
+<pre class="content"><em>git stripspace</em> [-s | --strip-comments]
+<em>git stripspace</em> [-c | --comment-lines]</pre>
 <div class="attribution">
 </div></div>
 </div>
@@ -756,8 +757,9 @@
 <div class="sect1">
 <h2 id="_description">DESCRIPTION</h2>
 <div class="sectionbody">
-<div class="paragraph"><p>Clean the input in the manner used by Git for text such as commit
-messages, notes, tags and branch descriptions.</p></div>
+<div class="paragraph"><p>Read text, such as commit messages, notes, tags and branch
+descriptions, from the standard input and clean it in the manner
+used by Git.</p></div>
 <div class="paragraph"><p>With no arguments, this will:</p></div>
 <div class="ulist"><ul>
 <li>
# install git-stripspace.html /usr/share/doc/git-doc/git-stripspace.html
--- /usr/share/doc/git-doc/git-submodule.html	2016-03-21 09:24:29.000000000 -0600
+++ git-submodule.html	2016-10-15 00:44:08.304075068 -0600
@@ -752,14 +752,15 @@
               [--reference &lt;repository&gt;] [--depth &lt;depth&gt;] [--] &lt;repository&gt; [&lt;path&gt;]
 <em>git submodule</em> [--quiet] status [--cached] [--recursive] [--] [&lt;path&gt;&#8230;]
 <em>git submodule</em> [--quiet] init [--] [&lt;path&gt;&#8230;]
-<em>git submodule</em> [--quiet] deinit [-f|--force] [--] &lt;path&gt;&#8230;
+<em>git submodule</em> [--quiet] deinit [-f|--force] (--all|[--] &lt;path&gt;&#8230;)
 <em>git submodule</em> [--quiet] update [--init] [--remote] [-N|--no-fetch]
-              [-f|--force] [--rebase] [--reference &lt;repository&gt;] [--depth &lt;depth&gt;]
-              [--merge] [--recursive] [--] [&lt;path&gt;&#8230;]
+              [--[no-]recommend-shallow] [-f|--force] [--rebase|--merge]
+              [--reference &lt;repository&gt;] [--depth &lt;depth&gt;] [--recursive]
+              [--jobs &lt;n&gt;] [--] [&lt;path&gt;&#8230;]
 <em>git submodule</em> [--quiet] summary [--cached|--files] [(-n|--summary-limit) &lt;n&gt;]
               [commit] [--] [&lt;path&gt;&#8230;]
 <em>git submodule</em> [--quiet] foreach [--recursive] &lt;command&gt;
-<em>git submodule</em> [--quiet] sync [--] [&lt;path&gt;&#8230;]</pre>
+<em>git submodule</em> [--quiet] sync [--recursive] [--] [&lt;path&gt;&#8230;]</pre>
 <div class="attribution">
 </div></div>
 </div>
@@ -767,11 +768,25 @@
 <div class="sect1">
 <h2 id="_description">DESCRIPTION</h2>
 <div class="sectionbody">
-<div class="paragraph"><p>Submodules allow foreign repositories to be embedded within
-a dedicated subdirectory of the source tree, always pointed
-at a particular commit.</p></div>
-<div class="paragraph"><p>They are not to be confused with remotes, which are meant mainly
-for branches of the same project; submodules are meant for
+<div class="paragraph"><p>Inspects, updates and manages submodules.</p></div>
+<div class="paragraph"><p>A submodule allows you to keep another Git repository in a subdirectory
+of your repository. The other repository has its own history, which does not
+interfere with the history of the current repository. This can be used to
+have external dependencies such as third party libraries for example.</p></div>
+<div class="paragraph"><p>When cloning or pulling a repository containing submodules however,
+these will not be checked out by default; the <em>init</em> and <em>update</em>
+subcommands will maintain submodules checked out and at
+appropriate revision in your working tree.</p></div>
+<div class="paragraph"><p>Submodules are composed from a so-called <code>gitlink</code> tree entry
+in the main repository that refers to a particular commit object
+within the inner repository that is completely separate.
+A record in the <code>.gitmodules</code> (see <a href="gitmodules.html">gitmodules(5)</a>) file at the
+root of the source tree assigns a logical name to the submodule and
+describes the default URL the submodule shall be cloned from.
+The logical name can be used for overriding this URL within your
+local repository configuration (see <em>submodule init</em>).</p></div>
+<div class="paragraph"><p>Submodules are not to be confused with remotes, which are other
+repositories of the same project; submodules are meant for
 different projects you would like to make part of your source tree,
 while the history of the two projects still stays completely
 independent and you cannot modify the contents of the submodule
@@ -782,26 +797,6 @@
 instead of treating the other project as a submodule. Directories
 that come from both projects can be cloned and checked out as a whole
 if you choose to go that route.</p></div>
-<div class="paragraph"><p>Submodules are composed from a so-called <code>gitlink</code> tree entry
-in the main repository that refers to a particular commit object
-within the inner repository that is completely separate.
-A record in the <code>.gitmodules</code> (see <a href="gitmodules.html">gitmodules(5)</a>) file at the
-root of the source tree assigns a logical name to the submodule and
-describes the default URL the submodule shall be cloned from.
-The logical name can be used for overriding this URL within your
-local repository configuration (see <em>submodule init</em>).</p></div>
-<div class="paragraph"><p>This command will manage the tree entries and contents of the
-gitmodules file for you, as well as inspect the status of your
-submodules and update them.
-When adding a new submodule to the tree, the <em>add</em> subcommand
-is to be used.  However, when pulling a tree containing submodules,
-these will not be checked out by default;
-the <em>init</em> and <em>update</em> subcommands will maintain submodules
-checked out and at appropriate revision in your working tree.
-You can briefly inspect the up-to-date status of your submodules
-using the <em>status</em> subcommand and get a detailed overview of the
-difference between the index and checkouts using the <em>summary</em>
-subcommand.</p></div>
 </div>
 </div>
 <div class="sect1">
@@ -900,36 +895,86 @@
         tree. Further calls to <code>git submodule update</code>, <code>git submodule foreach</code>
         and <code>git submodule sync</code> will skip any unregistered submodules until
         they are initialized again, so use this command if you don&#8217;t want to
-        have a local checkout of the submodule in your work tree anymore. If
+        have a local checkout of the submodule in your working tree anymore. If
         you really want to remove a submodule from the repository and commit
         that use <a href="git-rm.html">git-rm(1)</a> instead.
 </p>
-<div class="paragraph"><p>If <code>--force</code> is specified, the submodule&#8217;s work tree will be removed even if
-it contains local modifications.</p></div>
+<div class="paragraph"><p>When the command is run without pathspec, it errors out,
+instead of deinit-ing everything, to prevent mistakes.</p></div>
+<div class="paragraph"><p>If <code>--force</code> is specified, the submodule&#8217;s working tree will
+be removed even if it contains local modifications.</p></div>
 </dd>
 <dt class="hdlist1">
 update
 </dt>
 <dd>
+<div class="openblock">
+<div class="content">
+<div class="paragraph"><p>Update the registered submodules to match what the superproject
+expects by cloning missing submodules and updating the working tree of
+the submodules. The "updating" can be done in several ways depending
+on command line options and the value of <code>submodule.&lt;name&gt;.update</code>
+configuration variable. Supported update procedures are:</p></div>
+<div class="dlist"><dl>
+<dt class="hdlist1">
+checkout
+</dt>
+<dd>
+<p>
+the commit recorded in the superproject will be
+            checked out in the submodule on a detached HEAD. This is
+            done when <code>--checkout</code> option is given, or no option is
+            given, and <code>submodule.&lt;name&gt;.update</code> is unset, or if it is
+            set to <em>checkout</em>.
+</p>
+<div class="paragraph"><p>If <code>--force</code> is specified, the submodule will be checked out (using
+<code>git checkout --force</code> if appropriate), even if the commit specified
+in the index of the containing repository already matches the commit
+checked out in the submodule.</p></div>
+</dd>
+<dt class="hdlist1">
+rebase
+</dt>
+<dd>
+<p>
+the current branch of the submodule will be rebased
+            onto the commit recorded in the superproject. This is done
+            when <code>--rebase</code> option is given, or no option is given, and
+            <code>submodule.&lt;name&gt;.update</code> is set to <em>rebase</em>.
+</p>
+</dd>
+<dt class="hdlist1">
+merge
+</dt>
+<dd>
 <p>
-        Update the registered submodules, i.e. clone missing submodules and
-        checkout the commit specified in the index of the containing repository.
-        This will make the submodules HEAD be detached unless <code>--rebase</code> or
-        <code>--merge</code> is specified or the key <code>submodule.$name.update</code> is set to
-        <code>rebase</code>, <code>merge</code> or <code>none</code>. <code>none</code> can be overridden by specifying
-        <code>--checkout</code>. Setting the key <code>submodule.$name.update</code> to <code>!command</code>
-        will cause <code>command</code> to be run. <code>command</code> can be any arbitrary shell
-        command that takes a single argument, namely the sha1 to update to.
+the commit recorded in the superproject will be merged
+            into the current branch in the submodule. This is done
+            when <code>--merge</code> option is given, or no option is given, and
+            <code>submodule.&lt;name&gt;.update</code> is set to <em>merge</em>.
 </p>
+</dd>
+<dt class="hdlist1">
+custom command
+</dt>
+<dd>
+<p>
+arbitrary shell command that takes a single
+            argument (the sha1 of the commit recorded in the
+            superproject) is executed. This is done when no option is
+            given, and <code>submodule.&lt;name&gt;.update</code> has the form of
+            <em>!command</em>.
+</p>
+</dd>
+</dl></div>
+<div class="paragraph"><p>When no option is given and <code>submodule.&lt;name&gt;.update</code> is set to <em>none</em>,
+the submodule is not updated.</p></div>
 <div class="paragraph"><p>If the submodule is not yet initialized, and you just want to use the
 setting as stored in .gitmodules, you can automatically initialize the
 submodule with the <code>--init</code> option.</p></div>
 <div class="paragraph"><p>If <code>--recursive</code> is specified, this command will recurse into the
 registered submodules, and update any nested submodules within.</p></div>
-<div class="paragraph"><p>If <code>--force</code> is specified, the submodule will be checked out (using
-<code>git checkout --force</code> if appropriate), even if the commit specified in the
-index of the containing repository already matches the commit checked out in
-the submodule.</p></div>
+</div></div>
 </dd>
 <dt class="hdlist1">
 summary
@@ -987,6 +1032,8 @@
 </p>
 <div class="paragraph"><p>"git submodule sync" synchronizes all submodules while
 "git submodule sync -- A" synchronizes submodule "A" only.</p></div>
+<div class="paragraph"><p>If <code>--recursive</code> is specified, this command will recurse into the
+registered submodules, and sync any nested submodules within.</p></div>
 </dd>
 </dl></div>
 </div>
@@ -1007,6 +1054,15 @@
 </p>
 </dd>
 <dt class="hdlist1">
+--all
+</dt>
+<dd>
+<p>
+        This option is only valid for the deinit command. Unregister all
+        submodules in the working tree.
+</p>
+</dd>
+<dt class="hdlist1">
 -b
 </dt>
 <dt class="hdlist1">
@@ -1015,7 +1071,7 @@
 <dd>
 <p>
         Branch of repository to add as submodule.
-        The name of the branch is recorded as <code>submodule.&lt;path&gt;.branch</code> in
+        The name of the branch is recorded as <code>submodule.&lt;name&gt;.branch</code> in
         <code>.gitmodules</code> for <code>update --remote</code>.
 </p>
 </dd>
@@ -1029,12 +1085,14 @@
 <p>
         This option is only valid for add, deinit and update commands.
         When running add, allow adding an otherwise ignored submodule path.
-        When running deinit the submodule work trees will be removed even if
-        they contain local changes.
-        When running update, throw away local changes in submodules when
-        switching to a different commit; and always run a checkout operation
-        in the submodule, even if the commit listed in the index of the
-        containing repository matches the commit checked out in the submodule.
+        When running deinit the submodule working trees will be removed even
+        if they contain local changes.
+        When running update (only effective with the checkout procedure),
+        throw away local changes in submodules when switching to a
+        different commit; and always run a checkout operation in the
+        submodule, even if the commit listed in the index of the
+        containing repository matches the commit checked out in the
+        submodule.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1095,6 +1153,15 @@
 fetches the submodule&#8217;s remote repository before calculating the
 SHA-1.  If you don&#8217;t want to fetch, you should use <code>submodule update
 --remote --no-fetch</code>.</p></div>
+<div class="paragraph"><p>Use this option to integrate changes from the upstream subproject with
+your submodule&#8217;s current HEAD.  Alternatively, you can run <code>git pull</code>
+from the submodule, which is equivalent except for the remote branch
+name: <code>update --remote</code> uses the default upstream repository and
+<code>submodule.&lt;name&gt;.branch</code>, while <code>git pull</code> uses the submodule&#8217;s
+<code>branch.&lt;name&gt;.merge</code>.  Prefer <code>submodule.&lt;name&gt;.branch</code> if you want
+to distribute the default upstream branch with the superproject and
+<code>branch.&lt;name&gt;.merge</code> if you want a more native feel while working in
+the submodule itself.</p></div>
 </dd>
 <dt class="hdlist1">
 -N
@@ -1109,6 +1176,20 @@
 </p>
 </dd>
 <dt class="hdlist1">
+--checkout
+</dt>
+<dd>
+<p>
+        This option is only valid for the update command.
+        Checkout the commit recorded in the superproject on a detached HEAD
+        in the submodule. This is the default behavior, the main use of
+        this option is to override <code>submodule.$name.update</code> when set to
+        a value other than <code>checkout</code>.
+        If the key <code>submodule.$name.update</code> is either not explicitly set or
+        set to <code>checkout</code>, this option is implicit.
+</p>
+</dd>
+<dt class="hdlist1">
 --merge
 </dt>
 <dd>
@@ -1174,7 +1255,7 @@
 </dt>
 <dd>
 <p>
-        This option is only valid for foreach, update and status commands.
+        This option is only valid for foreach, update, status and sync commands.
         Traverse submodules recursively. The operation is performed not
         only in the submodules of the current repo, but also
         in any nested submodules inside those submodules (and so on).
@@ -1191,6 +1272,30 @@
 </p>
 </dd>
 <dt class="hdlist1">
+--[no-]recommend-shallow
+</dt>
+<dd>
+<p>
+        This option is only valid for the update command.
+        The initial clone of a submodule will use the recommended
+        <code>submodule.&lt;name&gt;.shallow</code> as provided by the .gitmodules file
+        by default. To ignore the suggestions use <code>--no-recommend-shallow</code>.
+</p>
+</dd>
+<dt class="hdlist1">
+-j &lt;n&gt;
+</dt>
+<dt class="hdlist1">
+--jobs &lt;n&gt;
+</dt>
+<dd>
+<p>
+        This option is only valid for the update command.
+        Clone new submodules in parallel with as many jobs.
+        Defaults to the <code>submodule.fetchJobs</code> option.
+</p>
+</dd>
+<dt class="hdlist1">
 &lt;path&gt;&#8230;
 </dt>
 <dd>
# install git-submodule.html /usr/share/doc/git-doc/git-submodule.html
--- /usr/share/doc/git-doc/git-svn.html	2016-03-21 09:24:29.000000000 -0600
+++ git-svn.html	2016-10-15 00:44:09.416075089 -0600
@@ -873,8 +873,8 @@
 <p>
         For transports that SVN handles authentication for (http,
         https, and plain svn), specify the username.  For other
-        transports (eg svn+ssh://), you must include the username in
-        the URL, eg svn+ssh://foo@svn.bar.com/project
+        transports (e.g. <code>svn+ssh://</code>), you must include the username in
+        the URL, e.g. <code>svn+ssh://foo@svn.bar.com/project</code>
 </p>
 </dd>
 <dt class="hdlist1">
@@ -895,18 +895,19 @@
         (refs/remotes/$remote/</strong>). Setting a prefix is also useful
         if you wish to track multiple projects that share a common
         repository.
+        By default, the prefix is set to <em>origin/</em>.
 </p>
 <div class="admonitionblock">
 <table><tr>
 <td class="icon">
 <div class="title">Note</div>
 </td>
-<td class="content">In Git v2.0, the default prefix will CHANGE from "" (no prefix)
-to "origin/". This is done to put SVN-tracking refs at
-"refs/remotes/origin/<strong>" instead of "refs/remotes/</strong>", and make them
-more compatible with how Git&#8217;s own remote-tracking refs are organized
-(i.e. refs/remotes/$remote/*). You can enjoy the same benefits today,
-by using the --prefix option.</td>
+<td class="content">Before Git v2.0, the default prefix was "" (no prefix). This
+meant that SVN-tracking refs were put at "refs/remotes/*", which is
+incompatible with how Git&#8217;s own remote-tracking refs are organized.
+If you still want the old default, you can get it by passing
+<code>--prefix ""</code> on the command line (<code>--prefix=""</code> may not work if
+your Perl&#8217;s Getopt::Long is &lt; v2.37).</td>
 </tr></table>
 </div>
 </dd>
@@ -917,7 +918,7 @@
 <p>
         When passed to <em>init</em> or <em>clone</em> this regular expression will
         be preserved as a config key.  See <em>fetch</em> for a description
-        of <em>--ignore-paths</em>.
+        of <code>--ignore-paths</code>.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -927,7 +928,7 @@
 <p>
         When passed to <em>init</em> or <em>clone</em> this regular expression will
         be preserved as a config key.  See <em>fetch</em> for a description
-        of <em>--include-paths</em>.
+        of <code>--include-paths</code>.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -941,7 +942,7 @@
         repository.  This default allows better tracking of history if
         entire projects are moved within a repository, but may cause
         issues on repositories where read access restrictions are in
-        place.  Passing <em>--no-minimize-url</em> will allow git svn to
+        place.  Passing <code>--no-minimize-url</code> will allow git svn to
         accept URLs as-is without attempting to connect to a higher
         level directory.  This option is off by default when only
         one URL/branch is tracked (it would do little good).
@@ -992,7 +993,7 @@
 <p>
         This allows one to specify a Perl regular expression that will
         cause skipping of all matching paths from checkout from SVN.
-        The <em>--ignore-paths</em> option should match for every <em>fetch</em>
+        The <code>--ignore-paths</code> option should match for every <em>fetch</em>
         (including automatic fetches due to <em>clone</em>, <em>dcommit</em>,
         <em>rebase</em>, etc) on a given repository.
 </p>
@@ -1000,8 +1001,8 @@
 <pre class="content">config key: svn-remote.&lt;name&gt;.ignore-paths</pre>
 <div class="attribution">
 </div></div>
-<div class="paragraph"><p>If the ignore-paths config key is set and the command line option is
-also given, both regular expressions will be used.</p></div>
+<div class="paragraph"><p>If the ignore-paths configuration key is set, and the command-line
+option is also given, both regular expressions will be used.</p></div>
 <div class="paragraph"><p>Examples:</p></div>
 <div class="openblock">
 <div class="content">
@@ -1034,11 +1035,15 @@
 <p>
         This allows one to specify a Perl regular expression that will
         cause the inclusion of only matching paths from checkout from SVN.
-        The <em>--include-paths</em> option should match for every <em>fetch</em>
+        The <code>--include-paths</code> option should match for every <em>fetch</em>
         (including automatic fetches due to <em>clone</em>, <em>dcommit</em>,
-        <em>rebase</em>, etc) on a given repository. <em>--ignore-paths</em> takes
-        precedence over <em>--include-paths</em>.
+        <em>rebase</em>, etc) on a given repository. <code>--ignore-paths</code> takes
+        precedence over <code>--include-paths</code>.
 </p>
+<div class="verseblock">
+<pre class="content">config key: svn-remote.&lt;name&gt;.include-paths</pre>
+<div class="attribution">
+</div></div>
 </dd>
 <dt class="hdlist1">
 --log-window-size=&lt;n&gt;
@@ -1064,7 +1069,7 @@
         or if a second argument is passed; it will create a directory
         and work within that.  It accepts all arguments that the
         <em>init</em> and <em>fetch</em> commands accept; with the exception of
-        <em>--fetch-all</em> and <em>--parent</em>.  After a repository is cloned,
+        <code>--fetch-all</code> and <code>--parent</code>.  After a repository is cloned,
         the <em>fetch</em> command will be able to update revisions without
         affecting the working tree; and the <em>rebase</em> command will be
         able to update the working tree with the latest changes.
@@ -1105,7 +1110,7 @@
 it preserves linear history with <em>git rebase</em> instead of
 <em>git merge</em> for ease of dcommitting with <em>git svn</em>.</p></div>
 <div class="paragraph"><p>This accepts all options that <em>git svn fetch</em> and <em>git rebase</em>
-accept.  However, <em>--fetch-all</em> only fetches from the current
+accept.  However, <code>--fetch-all</code> only fetches from the current
 [svn-remote], and not all [svn-remote] definitions.</p></div>
 <div class="paragraph"><p>Like <em>git rebase</em>; this requires that the working tree be clean
 and have no uncommitted changes.</p></div>
@@ -1165,6 +1170,9 @@
 config key: svn.commiturl (overwrites all svn-remote.&lt;name&gt;.commiturl options)</pre>
 <div class="attribution">
 </div></div>
+<div class="paragraph"><p>Note that the SVN URL of the commiturl config key includes the SVN branch.
+If you rather want to set the commit URL for an entire SVN repository use
+svn-remote.&lt;name&gt;.pushurl instead.</p></div>
 <div class="paragraph"><p>Using this option for any other purpose (don&#8217;t ask) is very strongly
 discouraged.</p></div>
 </dd>
@@ -1197,10 +1205,9 @@
         Ask the user to confirm that a patch set should actually be sent to SVN.
         For each patch, one may answer "yes" (accept this patch), "no" (discard this
         patch), "all" (accept all patches), or "quit".
-       <br />
-        <em>git svn dcommit</em> returns immediately if answer is "no" or "quit", without
-        committing anything to SVN.
 </p>
+<div class="paragraph"><p><em>git svn dcommit</em> returns immediately if answer is "no" or "quit", without
+committing anything to SVN.</p></div>
 </dd>
 </dl></div>
 </dd>
@@ -1430,6 +1437,9 @@
 </p>
 <div class="dlist"><dl>
 <dt class="hdlist1">
+-B
+</dt>
+<dt class="hdlist1">
 --before
 </dt>
 <dd>
@@ -1440,6 +1450,9 @@
 </p>
 </dd>
 <dt class="hdlist1">
+-A
+</dt>
+<dt class="hdlist1">
 --after
 </dt>
 <dd>
@@ -1546,6 +1559,23 @@
 </p>
 </dd>
 <dt class="hdlist1">
+<em>propset</em>
+</dt>
+<dd>
+<p>
+        Sets the Subversion property given as the first argument, to the
+        value given as the second argument for the file given as the
+        third argument.
+</p>
+<div class="paragraph"><p>Example:</p></div>
+<div class="listingblock">
+<div class="content">
+<pre><code>git svn propset svn:keywords "FreeBSD=%H" devel/py-tipper/Makefile</code></pre>
+</div></div>
+<div class="paragraph"><p>This will set the property <em>svn:keywords</em> to <em>FreeBSD=%H</em> for the file
+<em>devel/py-tipper/Makefile</em>.</p></div>
+</dd>
+<dt class="hdlist1">
 <em>show-externals</em>
 </dt>
 <dd>
@@ -1787,6 +1817,10 @@
         expected to return a single line of the form "Name &lt;email&gt;",
         which will be treated as if included in the authors file.
 </p>
+<div class="verseblock">
+<pre class="content">config key: svn.authorsProg</pre>
+<div class="attribution">
+</div></div>
 </dd>
 <dt class="hdlist1">
 -q
@@ -1801,27 +1835,6 @@
 </p>
 </dd>
 <dt class="hdlist1">
---repack[=&lt;n&gt;]
-</dt>
-<dt class="hdlist1">
---repack-flags=&lt;flags&gt;
-</dt>
-<dd>
-<p>
-        These should help keep disk usage sane for large fetches with
-        many revisions.
-</p>
-<div class="paragraph"><p>--repack takes an optional argument for the number of revisions
-to fetch before repacking.  This defaults to repacking every
-1000 commits fetched if no argument is specified.</p></div>
-<div class="paragraph"><p>--repack-flags are passed directly to <em>git repack</em>.</p></div>
-<div class="verseblock">
-<pre class="content">config key: svn.repack
-config key: svn.repackflags</pre>
-<div class="attribution">
-</div></div>
-</dd>
-<dt class="hdlist1">
 -m
 </dt>
 <dt class="hdlist1">
@@ -2038,7 +2051,7 @@
 </dt>
 <dd>
 <p>
-        Similar to Git&#8217;s <em>remote.&lt;name&gt;.pushurl</em>, this key is designed
+        Similar to Git&#8217;s <code>remote.&lt;name&gt;.pushurl</code>, this key is designed
         to be used in cases where <em>url</em> points to an SVN repository
         via a read-only transport, to provide an alternate read/write
         transport. It is assumed that both keys point to the same
@@ -2213,7 +2226,7 @@
 Git commit to serve as parent.  This will happen, among other reasons,
 if the SVN branch is a copy of a revision that was not fetched by <em>git
 svn</em> (e.g. because it is an old revision that was skipped with
-<em>--revision</em>), or if in SVN a directory was copied that is not tracked
+<code>--revision</code>), or if in SVN a directory was copied that is not tracked
 by <em>git svn</em> (such as a branch that is not tracked at all, or a
 subdirectory of a tracked branch). In these cases, <em>git svn</em> will still
 create a Git branch, but instead of using an existing Git commit as the
@@ -2283,21 +2296,12 @@
 copy of a complete repository, for projects with many branches it will
 lead to a working copy many times larger than just the trunk. Thus for
 projects using the standard directory structure (trunk/branches/tags),
-it is recommended to clone with option <em>--stdlayout</em>. If the project
+it is recommended to clone with option <code>--stdlayout</code>. If the project
 uses a non-standard structure, and/or if branches and tags are not
 required, it is easiest to only clone one directory (typically trunk),
 without giving any repository layout options.  If the full history with
-branches and tags is required, the options <em>--trunk</em> / <em>--branches</em> /
-<em>--tags</em> must be used.</p></div>
-<div class="paragraph"><p>When using the options for describing the repository layout (--trunk,
---tags, --branches, --stdlayout), please also specify the --prefix
-option (e.g. <em>--prefix=origin/</em>) to cause your SVN-tracking refs to be
-placed at refs/remotes/origin/* rather than the default refs/remotes/<strong>.
-The former is more compatible with the layout of Git&#8217;s "regular"
-remote-tracking refs (refs/remotes/$remote/</strong>), and may potentially
-prevent similarly named SVN branches and Git remotes from clobbering
-each other. In Git v2.0 the default prefix used (i.e. when no --prefix
-is given) will change from "" (no prefix) to "origin/".</p></div>
+branches and tags is required, the options <code>--trunk</code> / <code>--branches</code> /
+<code>--tags</code> must be used.</p></div>
 <div class="paragraph"><p>When using multiple --branches or --tags, <em>git svn</em> does not automatically
 handle name collisions (for example, if two branches from different paths have
 the same name, or if a branch and a tag have the same name).  In these cases,
@@ -2345,6 +2349,8 @@
         url = http://server.org/svn
         fetch = trunk/project-a:refs/remotes/project-a/trunk
         branches = branches/*/project-a:refs/remotes/project-a/branches/*
+        branches = branches/release_*:refs/remotes/project-a/branches/release_*
+        branches = branches/re*se:refs/remotes/project-a/branches/*
         tags = tags/*/project-a:refs/remotes/project-a/tags/*</code></pre>
 </div></div>
 <div class="paragraph"><p>Keep in mind that the <em>*</em> (asterisk) wildcard of the local ref
@@ -2353,6 +2359,17 @@
 independent path component (surrounded by <em>/</em> or EOL).   This
 type of configuration is not automatically created by <em>init</em> and
 should be manually entered with a text-editor or using <em>git config</em>.</p></div>
+<div class="paragraph"><p>Also note that only one asterisk is allowed per word. For example:</p></div>
+<div class="literalblock">
+<div class="content">
+<pre><code>branches = branches/re*se:refs/remotes/project-a/branches/*</code></pre>
+</div></div>
+<div class="paragraph"><p>will match branches <em>release</em>, <em>rese</em>, <em>re123se</em>, however</p></div>
+<div class="literalblock">
+<div class="content">
+<pre><code>branches = branches/re*s*e:refs/remotes/project-a/branches/*</code></pre>
+</div></div>
+<div class="paragraph"><p>will produce an error.</p></div>
 <div class="paragraph"><p>It is also possible to fetch a subset of branches or tags by using a
 comma-separated list of names within braces. For example:</p></div>
 <div class="listingblock">
# install git-svn.html /usr/share/doc/git-doc/git-svn.html
--- /usr/share/doc/git-doc/git-tag.html	2016-03-21 09:24:29.000000000 -0600
+++ git-tag.html	2016-10-15 00:44:10.100075102 -0600
@@ -748,12 +748,12 @@
 <h2 id="_synopsis">SYNOPSIS</h2>
 <div class="sectionbody">
 <div class="verseblock">
-<pre class="content"><em>git tag</em> [-a | -s | -u &lt;key-id&gt;] [-f] [-m &lt;msg&gt; | -F &lt;file&gt;]
+<pre class="content"><em>git tag</em> [-a | -s | -u &lt;keyid&gt;] [-f] [-m &lt;msg&gt; | -F &lt;file&gt;]
         &lt;tagname&gt; [&lt;commit&gt; | &lt;object&gt;]
 <em>git tag</em> -d &lt;tagname&gt;&#8230;
 <em>git tag</em> [-n[&lt;num&gt;]] -l [--contains &lt;commit&gt;] [--points-at &lt;object&gt;]
-        [--column[=&lt;options&gt;] | --no-column] [&lt;pattern&gt;&#8230;]
-        [&lt;pattern&gt;&#8230;]
+        [--column[=&lt;options&gt;] | --no-column] [--create-reflog] [--sort=&lt;key&gt;]
+        [--format=&lt;format&gt;] [--[no-]merged [&lt;commit&gt;]] [&lt;pattern&gt;&#8230;]
 <em>git tag</em> -v &lt;tagname&gt;&#8230;</pre>
 <div class="attribution">
 </div></div>
@@ -765,20 +765,20 @@
 <div class="paragraph"><p>Add a tag reference in <code>refs/tags/</code>, unless <code>-d/-l/-v</code> is given
 to delete, list or verify tags.</p></div>
 <div class="paragraph"><p>Unless <code>-f</code> is given, the named tag must not yet exist.</p></div>
-<div class="paragraph"><p>If one of <code>-a</code>, <code>-s</code>, or <code>-u &lt;key-id&gt;</code> is passed, the command
+<div class="paragraph"><p>If one of <code>-a</code>, <code>-s</code>, or <code>-u &lt;keyid&gt;</code> is passed, the command
 creates a <em>tag</em> object, and requires a tag message.  Unless
 <code>-m &lt;msg&gt;</code> or <code>-F &lt;file&gt;</code> is given, an editor is started for the user to type
 in the tag message.</p></div>
-<div class="paragraph"><p>If <code>-m &lt;msg&gt;</code> or <code>-F &lt;file&gt;</code> is given and <code>-a</code>, <code>-s</code>, and <code>-u &lt;key-id&gt;</code>
+<div class="paragraph"><p>If <code>-m &lt;msg&gt;</code> or <code>-F &lt;file&gt;</code> is given and <code>-a</code>, <code>-s</code>, and <code>-u &lt;keyid&gt;</code>
 are absent, <code>-a</code> is implied.</p></div>
 <div class="paragraph"><p>Otherwise just a tag reference for the SHA-1 object name of the commit object is
 created (i.e. a lightweight tag).</p></div>
 <div class="paragraph"><p>A GnuPG signed tag object will be created when <code>-s</code> or <code>-u
-&lt;key-id&gt;</code> is used.  When <code>-u &lt;key-id&gt;</code> is not used, the
+&lt;keyid&gt;</code> is used.  When <code>-u &lt;keyid&gt;</code> is not used, the
 committer identity for the current user is used to find the
 GnuPG key for signing.  The configuration variable <code>gpg.program</code>
 is used to specify custom GnuPG binary.</p></div>
-<div class="paragraph"><p>Tag objects (created with <code>-a</code>, <code>s</code>, or <code>-u</code>) are called "annotated"
+<div class="paragraph"><p>Tag objects (created with <code>-a</code>, <code>-s</code>, or <code>-u</code>) are called "annotated"
 tags; they contain a creation date, the tagger name and e-mail, a
 tagging message, and an optional GnuPG signature. Whereas a
 "lightweight" tag is simply a name for an object (usually a commit
@@ -816,10 +816,10 @@
 </p>
 </dd>
 <dt class="hdlist1">
--u &lt;key-id&gt;
+-u &lt;keyid&gt;
 </dt>
 <dt class="hdlist1">
---local-user=&lt;key-id&gt;
+--local-user=&lt;keyid&gt;
 </dt>
 <dd>
 <p>
@@ -856,7 +856,7 @@
 </dt>
 <dd>
 <p>
-        Verify the gpg signature of the given tag names.
+        Verify the GPG signature of the given tag names.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -887,6 +887,24 @@
 </p>
 </dd>
 <dt class="hdlist1">
+--sort=&lt;key&gt;
+</dt>
+<dd>
+<p>
+        Sort based on the key given.  Prefix <code>-</code> to sort in
+        descending order of the value. You may use the --sort=&lt;key&gt; option
+        multiple times, in which case the last key becomes the primary
+        key. Also supports "version:refname" or "v:refname" (tag
+        names are treated as versions). The "version:refname" sort
+        order can also be affected by the
+        "versionsort.prereleaseSuffix" configuration variable.
+        The keys supported are the same as those in <code>git for-each-ref</code>.
+        Sort order defaults to the value configured for the <code>tag.sort</code>
+        variable if it exists, or lexicographic order otherwise. See
+        <a href="git-config.html">git-config(1)</a>.
+</p>
+</dd>
+<dt class="hdlist1">
 --column[=&lt;options&gt;]
 </dt>
 <dt class="hdlist1">
@@ -928,7 +946,7 @@
         Use the given tag message (instead of prompting).
         If multiple <code>-m</code> options are given, their values are
         concatenated as separate paragraphs.
-        Implies <code>-a</code> if none of <code>-a</code>, <code>-s</code>, or <code>-u &lt;key-id&gt;</code>
+        Implies <code>-a</code> if none of <code>-a</code>, <code>-s</code>, or <code>-u &lt;keyid&gt;</code>
         is given.
 </p>
 </dd>
@@ -942,7 +960,7 @@
 <p>
         Take the tag message from the given file.  Use <em>-</em> to
         read the message from the standard input.
-        Implies <code>-a</code> if none of <code>-a</code>, <code>-s</code>, or <code>-u &lt;key-id&gt;</code>
+        Implies <code>-a</code> if none of <code>-a</code>, <code>-s</code>, or <code>-u &lt;keyid&gt;</code>
         is given.
 </p>
 </dd>
@@ -959,6 +977,14 @@
 </p>
 </dd>
 <dt class="hdlist1">
+--create-reflog
+</dt>
+<dd>
+<p>
+        Create a reflog for the tag.
+</p>
+</dd>
+<dt class="hdlist1">
 &lt;tagname&gt;
 </dt>
 <dd>
@@ -981,6 +1007,27 @@
         Defaults to HEAD.
 </p>
 </dd>
+<dt class="hdlist1">
+&lt;format&gt;
+</dt>
+<dd>
+<p>
+        A string that interpolates <code>%(fieldname)</code> from the object
+        pointed at by a ref being shown.  The format is the same as
+        that of <a href="git-for-each-ref.html">git-for-each-ref(1)</a>.  When unspecified,
+        defaults to <code>%(refname:strip=2)</code>.
+</p>
+</dd>
+<dt class="hdlist1">
+--[no-]merged [&lt;commit&gt;]
+</dt>
+<dd>
+<p>
+        Only list tags whose tips are reachable, or not reachable
+        if <code>--no-merged</code> is used, from the specified commit (<code>HEAD</code>
+        if not specified).
+</p>
+</dd>
 </dl></div>
 </div>
 </div>
@@ -988,13 +1035,13 @@
 <h2 id="_configuration">CONFIGURATION</h2>
 <div class="sectionbody">
 <div class="paragraph"><p>By default, <em>git tag</em> in sign-with-default mode (-s) will use your
-committer identity (of the form "Your Name &lt;your@email.address&gt;") to
+committer identity (of the form <code>Your Name &lt;your@email.address&gt;</code>) to
 find a key.  If you want to use a different default key, you can specify
 it in the repository configuration as follows:</p></div>
 <div class="listingblock">
 <div class="content">
 <pre><code>[user]
-    signingkey = &lt;gpg-key-id&gt;</code></pre>
+    signingKey = &lt;gpg-keyid&gt;</code></pre>
 </div></div>
 </div>
 </div>
@@ -1141,7 +1188,7 @@
 <div class="sect1">
 <h2 id="_date_formats">DATE FORMATS</h2>
 <div class="sectionbody">
-<div class="paragraph"><p>The GIT_AUTHOR_DATE, GIT_COMMITTER_DATE environment variables
+<div class="paragraph"><p>The <code>GIT_AUTHOR_DATE</code>, <code>GIT_COMMITTER_DATE</code> environment variables
 support the following date formats:</p></div>
 <div class="dlist"><dl>
 <dt class="hdlist1">
@@ -1189,7 +1236,8 @@
 <div class="sect1">
 <h2 id="_see_also">SEE ALSO</h2>
 <div class="sectionbody">
-<div class="paragraph"><p><a href="git-check-ref-format.html">git-check-ref-format(1)</a>.</p></div>
+<div class="paragraph"><p><a href="git-check-ref-format.html">git-check-ref-format(1)</a>.
+<a href="git-config.html">git-config(1)</a>.</p></div>
 </div>
 </div>
 <div class="sect1">
# install git-tag.html /usr/share/doc/git-doc/git-tag.html
--- /usr/share/doc/git-doc/git-tools.html	2016-03-21 09:24:29.000000000 -0600
+++ git-tools.html	2016-10-15 00:44:27.340075426 -0600
@@ -4,7 +4,7 @@
 <head>
 <meta http-equiv="Content-Type" content="application/xhtml+xml; charset=UTF-8" />
 <meta name="generator" content="AsciiDoc 8.6.9" />
-<title>A short Git tools survey</title>
+<title>Git Tools</title>
 <style type="text/css">
 /* Shared CSS for AsciiDoc xhtml11 and html5 backends */
 
@@ -733,192 +733,17 @@
 </head>
 <body class="article">
 <div id="header">
-<h1>A short Git tools survey</h1>
+<h1>Git Tools</h1>
 </div>
 <div id="content">
-<div class="sect1">
-<h2 id="_introduction">Introduction</h2>
+<div id="preamble">
 <div class="sectionbody">
-<div class="paragraph"><p>Apart from Git contrib/ area there are some others third-party tools
-you may want to look.</p></div>
-<div class="paragraph"><p>This document presents a brief summary of each tool and the corresponding
-link.</p></div>
-</div>
-</div>
-<div class="sect1">
-<h2 id="_alternative_augmentative_porcelains">Alternative/Augmentative Porcelains</h2>
-<div class="sectionbody">
-<div class="ulist"><ul>
-<li>
-<p>
-<strong>Cogito</strong> (<a href="http://www.kernel.org/pub/software/scm/cogito/">http://www.kernel.org/pub/software/scm/cogito/</a>)
-</p>
-<div class="literalblock">
-<div class="content">
-<pre><code>Cogito is a version control system layered on top of the Git tree history
-storage system. It aims at seamless user interface and ease of use,
-providing generally smoother user experience than the "raw" Core Git
-itself and indeed many other version control systems.</code></pre>
-</div></div>
-<div class="literalblock">
-<div class="content">
-<pre><code>Cogito is no longer maintained as most of its functionality
-is now in core Git.</code></pre>
-</div></div>
-</li>
-<li>
-<p>
-<strong>pg</strong> (<a href="http://www.spearce.org/category/projects/scm/pg/">http://www.spearce.org/category/projects/scm/pg/</a>)
-</p>
-<div class="literalblock">
-<div class="content">
-<pre><code>pg is a shell script wrapper around Git to help the user manage a set of
-patches to files. pg is somewhat like quilt or StGit, but it does have a
-slightly different feature set.</code></pre>
-</div></div>
-</li>
-<li>
-<p>
-<strong>StGit</strong> (<a href="http://www.procode.org/stgit/">http://www.procode.org/stgit/</a>)
-</p>
-<div class="literalblock">
-<div class="content">
-<pre><code>Stacked Git provides a quilt-like patch management functionality in the
-Git environment. You can easily manage your patches in the scope of Git
-until they get merged upstream.</code></pre>
-</div></div>
-</li>
-</ul></div>
-</div>
-</div>
-<div class="sect1">
-<h2 id="_history_viewers">History Viewers</h2>
-<div class="sectionbody">
-<div class="ulist"><ul>
-<li>
-<p>
-<strong>gitk</strong> (shipped with git-core)
-</p>
-<div class="literalblock">
-<div class="content">
-<pre><code>gitk is a simple Tk GUI for browsing history of Git repositories easily.</code></pre>
-</div></div>
-</li>
-<li>
-<p>
-<strong>gitview</strong>  (contrib/)
-</p>
-<div class="literalblock">
-<div class="content">
-<pre><code>gitview is a GTK based repository browser for Git</code></pre>
-</div></div>
-</li>
-<li>
-<p>
-<strong>gitweb</strong> (shipped with git-core)
-</p>
-<div class="literalblock">
-<div class="content">
-<pre><code>Gitweb provides full-fledged web interface for Git repositories.</code></pre>
-</div></div>
-</li>
-<li>
-<p>
-<strong>qgit</strong> (<a href="http://digilander.libero.it/mcostalba/">http://digilander.libero.it/mcostalba/</a>)
-</p>
-<div class="literalblock">
-<div class="content">
-<pre><code>QGit is a git/StGit GUI viewer built on Qt/C++. QGit could be used
-to browse history and directory tree, view annotated files, commit
-changes cherry picking single files or applying patches.
-Currently it is the fastest and most feature rich among the Git
-viewers and commit tools.</code></pre>
-</div></div>
-</li>
-<li>
-<p>
-<strong>tig</strong> (<a href="http://jonas.nitro.dk/tig/">http://jonas.nitro.dk/tig/</a>)
-</p>
-<div class="literalblock">
-<div class="content">
-<pre><code>tig by Jonas Fonseca is a simple Git repository browser
-written using ncurses. Basically, it just acts as a front-end
-for git-log and git-show/git-diff. Additionally, you can also
-use it as a pager for Git commands.</code></pre>
-</div></div>
-</li>
-</ul></div>
-</div>
-</div>
-<div class="sect1">
-<h2 id="_foreign_scm_interface">Foreign SCM interface</h2>
-<div class="sectionbody">
-<div class="ulist"><ul>
-<li>
-<p>
-<strong>git-svn</strong> (shipped with git-core)
-</p>
-<div class="literalblock">
-<div class="content">
-<pre><code>git-svn is a simple conduit for changesets between a single Subversion
-branch and Git.</code></pre>
-</div></div>
-</li>
-<li>
-<p>
-<strong>quilt2git / git2quilt</strong> (<a href="http://home-tj.org/wiki/index.php/Misc">http://home-tj.org/wiki/index.php/Misc</a>)
-</p>
-<div class="literalblock">
-<div class="content">
-<pre><code>These utilities convert patch series in a quilt repository and commit
-series in Git back and forth.</code></pre>
-</div></div>
-</li>
-<li>
-<p>
-<strong>hg-to-git</strong> (contrib/)
-</p>
-<div class="literalblock">
-<div class="content">
-<pre><code>hg-to-git converts a Mercurial repository into a Git one, and
-preserves the full branch history in the process. hg-to-git can
-also be used in an incremental way to keep the Git repository
-in sync with the master Mercurial repository.</code></pre>
-</div></div>
-</li>
-</ul></div>
-</div>
-</div>
-<div class="sect1">
-<h2 id="_others">Others</h2>
-<div class="sectionbody">
-<div class="ulist"><ul>
-<li>
-<p>
-<strong>(h)gct</strong> (<a href="http://www.cyd.liu.se/users/~freku045/gct/">http://www.cyd.liu.se/users/~freku045/gct/</a>)
-</p>
-<div class="literalblock">
-<div class="content">
-<pre><code>Commit Tool or (h)gct is a GUI enabled commit tool for Git and
-Mercurial (hg). It allows the user to view diffs, select which files
-to committed (or ignored / reverted) write commit messages and
-perform the commit itself.</code></pre>
-</div></div>
-</li>
-<li>
-<p>
-<strong>git.el</strong> (contrib/)
-</p>
-<div class="literalblock">
-<div class="content">
-<pre><code>This is an Emacs interface for Git. The user interface is modelled on
-pcl-cvs. It has been developed on Emacs 21 and will probably need some
-tweaking to work on XEmacs.</code></pre>
-</div></div>
-</li>
-</ul></div>
-<div class="paragraph"><p><a href="http://git.or.cz/gitwiki/InterfacesFrontendsAndTools">http://git.or.cz/gitwiki/InterfacesFrontendsAndTools</a> has more
-comprehensive list.</p></div>
+<div class="paragraph"><p>When Git was young, people looking for third-party Git-related tools came
+to the Git project itself to find them, thus a list of such tools was
+maintained here. These days, however, search engines fill that role much
+more efficiently, so this manually-maintained list has been retired.</p></div>
+<div class="paragraph"><p>See also the <code>contrib/</code> area, and the Git wiki:
+<a href="http://git.or.cz/gitwiki/InterfacesFrontendsAndTools">http://git.or.cz/gitwiki/InterfacesFrontendsAndTools</a></p></div>
 </div>
 </div>
 </div>
# install git-tools.html /usr/share/doc/git-doc/git-tools.html
--- /usr/share/doc/git-doc/git-unpack-objects.html	2016-03-21 09:24:29.000000000 -0600
+++ git-unpack-objects.html	2016-10-15 00:44:10.516075110 -0600
@@ -748,7 +748,7 @@
 <h2 id="_synopsis">SYNOPSIS</h2>
 <div class="sectionbody">
 <div class="verseblock">
-<pre class="content"><em>git unpack-objects</em> [-n] [-q] [-r] [--strict] &lt; &lt;pack-file&gt;</pre>
+<pre class="content"><em>git unpack-objects</em> [-n] [-q] [-r] [--strict]</pre>
 <div class="attribution">
 </div></div>
 </div>
@@ -760,8 +760,8 @@
 the objects contained within and writing them into the repository in
 "loose" (one object per file) format.</p></div>
 <div class="paragraph"><p>Objects that already exist in the repository will <strong>not</strong> be unpacked
-from the pack-file.  Therefore, nothing will be unpacked if you use
-this command on a pack-file that exists within the target repository.</p></div>
+from the packfile.  Therefore, nothing will be unpacked if you use
+this command on a packfile that exists within the target repository.</p></div>
 <div class="paragraph"><p>See <a href="git-repack.html">git-repack(1)</a> for options to generate
 new packs and replace existing ones.</p></div>
 </div>
# install git-unpack-objects.html /usr/share/doc/git-doc/git-unpack-objects.html
--- /usr/share/doc/git-doc/git-update-index.html	2016-03-21 09:24:29.000000000 -0600
+++ git-update-index.html	2016-10-15 00:44:11.040075120 -0600
@@ -751,11 +751,13 @@
 <pre class="content"><em>git update-index</em>
              [--add] [--remove | --force-remove] [--replace]
              [--refresh] [-q] [--unmerged] [--ignore-missing]
-             [(--cacheinfo &lt;mode&gt; &lt;object&gt; &lt;file&gt;)&#8230;]
+             [(--cacheinfo &lt;mode&gt;,&lt;object&gt;,&lt;file&gt;)&#8230;]
              [--chmod=(+|-)x]
              [--[no-]assume-unchanged]
              [--[no-]skip-worktree]
              [--ignore-submodules]
+             [--[no-]split-index]
+             [--[no-|test-|force-]untracked-cache]
              [--really-refresh] [--unresolve] [--again | -g]
              [--info-only] [--index-info]
              [-z] [--stdin] [--index-version &lt;n&gt;]
@@ -848,11 +850,17 @@
 </p>
 </dd>
 <dt class="hdlist1">
+--cacheinfo &lt;mode&gt;,&lt;object&gt;,&lt;path&gt;
+</dt>
+<dt class="hdlist1">
 --cacheinfo &lt;mode&gt; &lt;object&gt; &lt;path&gt;
 </dt>
 <dd>
 <p>
-        Directly insert the specified info into the index.
+        Directly insert the specified info into the index.  For
+        backward compatibility, you can also give these three
+        arguments as three separate parameters, but new users are
+        encouraged to use a single-parameter form.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -876,21 +884,19 @@
 </dt>
 <dd>
 <p>
-        When these flags are specified, the object names recorded
-        for the paths are not updated.  Instead, these options
-        set and unset the "assume unchanged" bit for the
-        paths.  When the "assume unchanged" bit is on, Git stops
-        checking the working tree files for possible
-        modifications, so you need to manually unset the bit to
-        tell Git when you change the working tree file. This is
+        When this flag is specified, the object names recorded
+        for the paths are not updated.  Instead, this option
+        sets/unsets the "assume unchanged" bit for the
+        paths.  When the "assume unchanged" bit is on, the user
+        promises not to change the file and allows Git to assume
+        that the working tree file matches what is recorded in
+        the index.  If you want to change the working tree file,
+        you need to unset the bit to tell Git.  This is
         sometimes helpful when working with a big project on a
         filesystem that has very slow lstat(2) system call
         (e.g. cifs).
 </p>
-<div class="paragraph"><p>This option can be also used as a coarse file-level mechanism
-to ignore uncommitted changes in tracked files (akin to what
-<code>.gitignore</code> does for untracked files).
-Git will fail (gracefully) in case it needs to modify this file
+<div class="paragraph"><p>Git will fail (gracefully) in case it needs to modify this file
 in the index e.g. when merging in a commit;
 thus, in case the assumed-untracked file is changed upstream,
 you will need to handle the situation manually.</p></div>
@@ -900,7 +906,7 @@
 </dt>
 <dd>
 <p>
-        Like <em>--refresh</em>, but checks stat information unconditionally,
+        Like <code>--refresh</code>, but checks stat information unconditionally,
         without regard to the "assume unchanged" setting.
 </p>
 </dd>
@@ -1012,6 +1018,67 @@
 </p>
 </dd>
 <dt class="hdlist1">
+--split-index
+</dt>
+<dt class="hdlist1">
+--no-split-index
+</dt>
+<dd>
+<p>
+        Enable or disable split index mode. If enabled, the index is
+        split into two files, $GIT_DIR/index and $GIT_DIR/sharedindex.&lt;SHA-1&gt;.
+        Changes are accumulated in $GIT_DIR/index while the shared
+        index file contains all index entries stays unchanged. If
+        split-index mode is already enabled and <code>--split-index</code> is
+        given again, all changes in $GIT_DIR/index are pushed back to
+        the shared index file. This mode is designed for very large
+        indexes that take a significant amount of time to read or write.
+</p>
+</dd>
+<dt class="hdlist1">
+--untracked-cache
+</dt>
+<dt class="hdlist1">
+--no-untracked-cache
+</dt>
+<dd>
+<p>
+        Enable or disable untracked cache feature. Please use
+        <code>--test-untracked-cache</code> before enabling it.
+</p>
+<div class="paragraph"><p>These options take effect whatever the value of the <code>core.untrackedCache</code>
+configuration variable (see <a href="git-config.html">git-config(1)</a>). But a warning is
+emitted when the change goes against the configured value, as the
+configured value will take effect next time the index is read and this
+will remove the intended effect of the option.</p></div>
+</dd>
+<dt class="hdlist1">
+--test-untracked-cache
+</dt>
+<dd>
+<p>
+        Only perform tests on the working directory to make sure
+        untracked cache can be used. You have to manually enable
+        untracked cache using <code>--untracked-cache</code> or
+        <code>--force-untracked-cache</code> or the <code>core.untrackedCache</code>
+        configuration variable afterwards if you really want to use
+        it. If a test fails the exit code is 1 and a message
+        explains what is not working as needed, otherwise the exit
+        code is 0 and OK is printed.
+</p>
+</dd>
+<dt class="hdlist1">
+--force-untracked-cache
+</dt>
+<dd>
+<p>
+        Same as <code>--untracked-cache</code>. Provided for backwards
+        compatibility with older versions of Git where
+        <code>--untracked-cache</code> used to imply <code>--test-untracked-cache</code> but
+        this option would enable the extension unconditionally.
+</p>
+</dd>
+<dt class="hdlist1">
 --
 </dt>
 <dd>
@@ -1037,7 +1104,7 @@
 <div class="sect1">
 <h2 id="_using_refresh">Using --refresh</h2>
 <div class="sectionbody">
-<div class="paragraph"><p><em>--refresh</em> does not calculate a new sha1 file or bring the index
+<div class="paragraph"><p><code>--refresh</code> does not calculate a new sha1 file or bring the index
 up-to-date for mode/content changes. But what it <strong>does</strong> do is to
 "re-match" the stat information of a file with the index, so that you
 can refresh the index for a file that hasn&#8217;t been changed but where
@@ -1049,19 +1116,19 @@
 <div class="sect1">
 <h2 id="_using_cacheinfo_or_info_only">Using --cacheinfo or --info-only</h2>
 <div class="sectionbody">
-<div class="paragraph"><p><em>--cacheinfo</em> is used to register a file that is not in the
+<div class="paragraph"><p><code>--cacheinfo</code> is used to register a file that is not in the
 current working directory.  This is useful for minimum-checkout
 merging.</p></div>
 <div class="paragraph"><p>To pretend you have a file with mode and sha1 at path, say:</p></div>
 <div class="listingblock">
 <div class="content">
-<pre><code>$ git update-index --cacheinfo mode sha1 path</code></pre>
+<pre><code>$ git update-index --cacheinfo &lt;mode&gt;,&lt;sha1&gt;,&lt;path&gt;</code></pre>
 </div></div>
-<div class="paragraph"><p><em>--info-only</em> is used to register files without placing them in the object
+<div class="paragraph"><p><code>--info-only</code> is used to register files without placing them in the object
 database.  This is useful for status-only repositories.</p></div>
-<div class="paragraph"><p>Both <em>--cacheinfo</em> and <em>--info-only</em> behave similarly: the index is updated
-but the object database isn&#8217;t.  <em>--cacheinfo</em> is useful when the object is
-in the database but the file isn&#8217;t available locally.  <em>--info-only</em> is
+<div class="paragraph"><p>Both <code>--cacheinfo</code> and <code>--info-only</code> behave similarly: the index is updated
+but the object database isn&#8217;t.  <code>--cacheinfo</code> is useful when the object is
+in the database but the file isn&#8217;t available locally.  <code>--info-only</code> is
 useful when the file is available, but you do not wish to update the
 object database.</p></div>
 </div>
@@ -1257,6 +1324,35 @@
 </div>
 </div>
 <div class="sect1">
+<h2 id="_untracked_cache">Untracked cache</h2>
+<div class="sectionbody">
+<div class="paragraph"><p>This cache is meant to speed up commands that involve determining
+untracked files such as <code>git status</code>.</p></div>
+<div class="paragraph"><p>This feature works by recording the mtime of the working tree
+directories and then omitting reading directories and stat calls
+against files in those directories whose mtime hasn&#8217;t changed. For
+this to work the underlying operating system and file system must
+change the <code>st_mtime</code> field of directories if files in the directory
+are added, modified or deleted.</p></div>
+<div class="paragraph"><p>You can test whether the filesystem supports that with the
+<code>--test-untracked-cache</code> option. The <code>--untracked-cache</code> option used
+to implicitly perform that test in older versions of Git, but that&#8217;s
+no longer the case.</p></div>
+<div class="paragraph"><p>If you want to enable (or disable) this feature, it is easier to use
+the <code>core.untrackedCache</code> configuration variable (see
+<a href="git-config.html">git-config(1)</a>) than using the <code>--untracked-cache</code> option to
+<code>git update-index</code> in each repository, especially if you want to do so
+across all repositories you use, because you can set the configuration
+variable to <code>true</code> (or <code>false</code>) in your <code>$HOME/.gitconfig</code> just once
+and have it affect all repositories you touch.</p></div>
+<div class="paragraph"><p>When the <code>core.untrackedCache</code> configuration variable is changed, the
+untracked cache is added to or removed from the index the next time a
+command reads the index; while when <code>--[no-|force-]untracked-cache</code>
+are used, the untracked cache is immediately added to or removed from
+the index.</p></div>
+</div>
+</div>
+<div class="sect1">
 <h2 id="_configuration">Configuration</h2>
 <div class="sectionbody">
 <div class="paragraph"><p>The command honors <code>core.filemode</code> configuration variable.  If
@@ -1276,6 +1372,9 @@
 It can be useful when the inode change time is regularly modified by
 something outside Git (file system crawlers and backup systems use
 ctime for marking files processed) (see <a href="git-config.html">git-config(1)</a>).</p></div>
+<div class="paragraph"><p>The untracked cache extension can be enabled by the
+<code>core.untrackedCache</code> configuration variable (see
+<a href="git-config.html">git-config(1)</a>).</p></div>
 </div>
 </div>
 <div class="sect1">
# install git-update-index.html /usr/share/doc/git-doc/git-update-index.html
--- /usr/share/doc/git-doc/git-update-ref.html	2016-03-21 09:24:29.000000000 -0600
+++ git-update-ref.html	2016-10-15 00:44:11.340075125 -0600
@@ -748,7 +748,7 @@
 <h2 id="_synopsis">SYNOPSIS</h2>
 <div class="sectionbody">
 <div class="verseblock">
-<pre class="content"><em>git update-ref</em> [-m &lt;reason&gt;] (-d &lt;ref&gt; [&lt;oldvalue&gt;] | [--no-deref] &lt;ref&gt; &lt;newvalue&gt; [&lt;oldvalue&gt;] | --stdin [-z])</pre>
+<pre class="content"><em>git update-ref</em> [-m &lt;reason&gt;] (-d &lt;ref&gt; [&lt;oldvalue&gt;] | [--no-deref] [--create-reflog] &lt;ref&gt; &lt;newvalue&gt; [&lt;oldvalue&gt;] | --stdin [-z])</pre>
 <div class="attribution">
 </div></div>
 </div>
@@ -807,8 +807,14 @@
 verify SP &lt;ref&gt; [SP &lt;oldvalue&gt;] LF
 option SP &lt;opt&gt; LF</code></pre>
 </div></div>
+<div class="paragraph"><p>With <code>--create-reflog</code>, update-ref will create a reflog for each ref
+even if one would not ordinarily be created.</p></div>
 <div class="paragraph"><p>Quote fields containing whitespace as if they were strings in C source
-code.  Alternatively, use <code>-z</code> to specify commands without quoting:</p></div>
+code; i.e., surrounded by double-quotes and with backslash escapes.
+Use 40 "0" characters or the empty string to specify a zero value.  To
+specify a missing value, omit the value and its preceding SP entirely.</p></div>
+<div class="paragraph"><p>Alternatively, use <code>-z</code> to specify in NUL-terminated format, without
+quoting:</p></div>
 <div class="literalblock">
 <div class="content">
 <pre><code>update SP &lt;ref&gt; NUL &lt;newvalue&gt; NUL [&lt;oldvalue&gt;] NUL
@@ -817,8 +823,11 @@
 verify SP &lt;ref&gt; NUL [&lt;oldvalue&gt;] NUL
 option SP &lt;opt&gt; NUL</code></pre>
 </div></div>
-<div class="paragraph"><p>Lines of any other format or a repeated &lt;ref&gt; produce an error.
-Command meanings are:</p></div>
+<div class="paragraph"><p>In this format, use 40 "0" to specify a zero value, and use the empty
+string to specify a missing value.</p></div>
+<div class="paragraph"><p>In either format, values can be specified in any form that Git
+recognizes as an object name.  Commands in any other format or a
+repeated &lt;ref&gt; produce an error.  Command meanings are:</p></div>
 <div class="dlist"><dl>
 <dt class="hdlist1">
 update
@@ -869,8 +878,6 @@
 </p>
 </dd>
 </dl></div>
-<div class="paragraph"><p>Use 40 "0" or the empty string to specify a zero value, except that
-with <code>-z</code> an empty &lt;oldvalue&gt; is considered missing.</p></div>
 <div class="paragraph"><p>If all &lt;ref&gt;s can be locked with matching &lt;oldvalue&gt;s
 simultaneously, all modifications are performed.  Otherwise, no
 modifications are performed.  Note that while each individual
# install git-update-ref.html /usr/share/doc/git-doc/git-update-ref.html
--- /usr/share/doc/git-doc/git-upload-archive.html	2016-03-21 09:24:29.000000000 -0600
+++ git-upload-archive.html	2016-10-15 00:44:11.768075134 -0600
@@ -764,6 +764,48 @@
 </div>
 </div>
 <div class="sect1">
+<h2 id="_security">SECURITY</h2>
+<div class="sectionbody">
+<div class="paragraph"><p>In order to protect the privacy of objects that have been removed from
+history but may not yet have been pruned, <code>git-upload-archive</code> avoids
+serving archives for commits and trees that are not reachable from the
+repository&#8217;s refs.  However, because calculating object reachability is
+computationally expensive, <code>git-upload-archive</code> implements a stricter
+but easier-to-check set of rules:</p></div>
+<div class="olist arabic"><ol class="arabic">
+<li>
+<p>
+Clients may request a commit or tree that is pointed to directly by
+     a ref. E.g., <code>git archive --remote=origin v1.0</code>.
+</p>
+</li>
+<li>
+<p>
+Clients may request a sub-tree within a commit or tree using the
+     <code>ref:path</code> syntax. E.g., <code>git archive --remote=origin v1.0:Documentation</code>.
+</p>
+</li>
+<li>
+<p>
+Clients may <em>not</em> use other sha1 expressions, even if the end
+     result is reachable. E.g., neither a relative commit like <code>master^</code>
+     nor a literal sha1 like <code>abcd1234</code> is allowed, even if the result
+     is reachable from the refs.
+</p>
+</li>
+</ol></div>
+<div class="paragraph"><p>Note that rule 3 disallows many cases that do not have any privacy
+implications. These rules are subject to change in future versions of
+git, and the server accessed by <code>git archive --remote</code> may or may not
+follow these exact rules.</p></div>
+<div class="paragraph"><p>If the config option <code>uploadArchive.allowUnreachable</code> is true, these
+rules are ignored, and clients may use arbitrary sha1 expressions.
+This is useful if you do not care about the privacy of unreachable
+objects, or if your object database is already publicly available for
+access via non-smart-http.</p></div>
+</div>
+</div>
+<div class="sect1">
 <h2 id="_options">OPTIONS</h2>
 <div class="sectionbody">
 <div class="dlist"><dl>
# install git-upload-archive.html /usr/share/doc/git-doc/git-upload-archive.html
--- /usr/share/doc/git-doc/git-upload-pack.html	2016-03-21 09:24:29.000000000 -0600
+++ git-upload-pack.html	2016-10-15 00:44:11.988075138 -0600
@@ -748,28 +748,27 @@
 <h2 id="_synopsis">SYNOPSIS</h2>
 <div class="sectionbody">
 <div class="verseblock">
-<pre class="content"><em>git-upload-pack</em> [--strict] [--timeout=&lt;n&gt;] &lt;directory&gt;</pre>
+<pre class="content"><em>git-upload-pack</em> [--[no-]strict] [--timeout=&lt;n&gt;] [--stateless-rpc]
+                  [--advertise-refs] &lt;directory&gt;
+DESCRIPTION</pre>
 <div class="attribution">
 </div></div>
-</div>
-</div>
-<div class="sect1">
-<h2 id="_description">DESCRIPTION</h2>
-<div class="sectionbody">
-<div class="paragraph"><p>Invoked by <em>git fetch-pack</em>, learns what
-objects the other side is missing, and sends them after packing.</p></div>
-<div class="paragraph"><p>This command is usually not invoked directly by the end user.
-The UI for the protocol is on the <em>git fetch-pack</em> side, and the
+<div class="listingblock">
+<div class="content">
+<pre><code>Invoked by 'git fetch-pack', learns what
+objects the other side is missing, and sends them after packing.
+
+This command is usually not invoked directly by the end user.
+The UI for the protocol is on the 'git fetch-pack' side, and the
 program pair is meant to be used to pull updates from a remote
-repository.  For push operations, see <em>git send-pack</em>.</p></div>
-</div>
-</div>
-<div class="sect1">
-<h2 id="_options">OPTIONS</h2>
-<div class="sectionbody">
+repository.  For push operations, see 'git send-pack'.
+
+
+OPTIONS</code></pre>
+</div></div>
 <div class="dlist"><dl>
 <dt class="hdlist1">
---strict
+--[no-]strict
 </dt>
 <dd>
 <p>
@@ -785,6 +784,26 @@
 </p>
 </dd>
 <dt class="hdlist1">
+--stateless-rpc
+</dt>
+<dd>
+<p>
+        Perform only a single read-write cycle with stdin and stdout.
+        This fits with the HTTP POST request processing model where
+        a program may read the request, write a response, and must exit.
+</p>
+</dd>
+<dt class="hdlist1">
+--advertise-refs
+</dt>
+<dd>
+<p>
+        Only the initial ref advertisement is output, and the program exits
+        immediately. This fits with the HTTP GET request model, where
+        no request content is received but a response must be produced.
+</p>
+</dd>
+<dt class="hdlist1">
 &lt;directory&gt;
 </dt>
 <dd>
# install git-upload-pack.html /usr/share/doc/git-doc/git-upload-pack.html
# install git-verify-commit.html /usr/share/doc/git-doc/git-verify-commit.html
--- /usr/share/doc/git-doc/git-verify-pack.html	2016-03-21 09:24:29.000000000 -0600
+++ git-verify-pack.html	2016-10-15 00:44:12.716075151 -0600
@@ -814,7 +814,7 @@
 <div class="paragraph"><p>When specifying the -v option the format used is:</p></div>
 <div class="literalblock">
 <div class="content">
-<pre><code>SHA-1 type size size-in-pack-file offset-in-packfile</code></pre>
+<pre><code>SHA-1 type size size-in-packfile offset-in-packfile</code></pre>
 </div></div>
 <div class="paragraph"><p>for objects that are not deltified in the pack, and</p></div>
 <div class="literalblock">
# install git-verify-pack.html /usr/share/doc/git-doc/git-verify-pack.html
--- /usr/share/doc/git-doc/git-verify-tag.html	2016-03-21 09:24:29.000000000 -0600
+++ git-verify-tag.html	2016-10-15 00:44:12.924075155 -0600
@@ -764,6 +764,15 @@
 <div class="sectionbody">
 <div class="dlist"><dl>
 <dt class="hdlist1">
+--raw
+</dt>
+<dd>
+<p>
+        Print the raw gpg status output to standard error instead of the normal
+        human-readable output.
+</p>
+</dd>
+<dt class="hdlist1">
 -v
 </dt>
 <dt class="hdlist1">
# install git-verify-tag.html /usr/share/doc/git-doc/git-verify-tag.html
--- /usr/share/doc/git-doc/git-web--browse.html	2016-03-21 09:24:29.000000000 -0600
+++ git-web--browse.html	2016-10-15 00:44:13.216075161 -0600
@@ -898,13 +898,13 @@
 <div class="sect2">
 <h3 id="_conf_var_from_c_option_and_web_browser">CONF.VAR (from -c option) and web.browser</h3>
 <div class="paragraph"><p>The web browser can be specified using a configuration variable passed
-with the -c (or --config) command line option, or the <em>web.browser</em>
+with the -c (or --config) command-line option, or the <code>web.browser</code>
 configuration variable if the former is not used.</p></div>
 </div>
 <div class="sect2">
 <h3 id="_browser_lt_tool_gt_path">browser.&lt;tool&gt;.path</h3>
 <div class="paragraph"><p>You can explicitly provide a full path to your preferred browser by
-setting the configuration variable <em>browser.&lt;tool&gt;.path</em>. For example,
+setting the configuration variable <code>browser.&lt;tool&gt;.path</code>. For example,
 you can configure the absolute path to firefox by setting
 <em>browser.firefox.path</em>. Otherwise, <em>git web&#45;&#45;browse</em> assumes the tool
 is available in PATH.</p></div>
@@ -913,7 +913,7 @@
 <h3 id="_browser_lt_tool_gt_cmd">browser.&lt;tool&gt;.cmd</h3>
 <div class="paragraph"><p>When the browser, specified by options or configuration variables, is
 not among the supported ones, then the corresponding
-<em>browser.&lt;tool&gt;.cmd</em> configuration variable will be looked up. If this
+<code>browser.&lt;tool&gt;.cmd</code> configuration variable will be looked up. If this
 variable exists then <em>git web&#45;&#45;browse</em> will treat the specified tool
 as a custom command and will use a shell eval to run the command with
 the URLs passed as arguments.</p></div>
@@ -923,7 +923,7 @@
 <div class="sect1">
 <h2 id="_note_about_konqueror">Note about konqueror</h2>
 <div class="sectionbody">
-<div class="paragraph"><p>When <em>konqueror</em> is specified by a command line option or a
+<div class="paragraph"><p>When <em>konqueror</em> is specified by a command-line option or a
 configuration variable, we launch <em>kfmclient</em> to try to open the HTML
 man page on an already opened konqueror in a new tab if possible.</p></div>
 <div class="paragraph"><p>For consistency, we also try such a trick if <em>browser.konqueror.path</em> is
@@ -942,7 +942,7 @@
 <div class="sect2">
 <h3 id="_note_about_git_config_global">Note about git-config --global</h3>
 <div class="paragraph"><p>Note that these configuration variables should probably be set using
-the <em>--global</em> flag, for example like this:</p></div>
+the <code>--global</code> flag, for example like this:</p></div>
 <div class="listingblock">
 <div class="content">
 <pre><code>$ git config --global web.browser firefox</code></pre>
# install git-web--browse.html /usr/share/doc/git-doc/git-web--browse.html
# install git-worktree.html /usr/share/doc/git-doc/git-worktree.html
--- /usr/share/doc/git-doc/git.html	2016-03-21 09:24:29.000000000 -0600
+++ git.html	2016-10-15 00:44:15.448075203 -0600
@@ -764,15 +764,15 @@
 unusually rich command set that provides both high-level operations
 and full access to internals.</p></div>
 <div class="paragraph"><p>See <a href="gittutorial.html">gittutorial(7)</a> to get started, then see
-<a href="everyday.html">Everyday Git</a> for a useful minimum set of
+<a href="giteveryday.html">giteveryday(7)</a> for a useful minimum set of
 commands.  The <a href="user-manual.html">Git User&#8217;s Manual</a> has a more
 in-depth introduction.</p></div>
 <div class="paragraph"><p>After you mastered the basic concepts, you can come back to this
 page to learn what commands Git offers.  You can learn more about
 individual Git commands with "git help command".  <a href="gitcli.html">gitcli(7)</a>
-manual page gives you an overview of the command line command syntax.</p></div>
-<div class="paragraph"><p>Formatted and hyperlinked version of the latest Git documentation
-can be viewed at <code>http://git-htmldocs.googlecode.com/git/git.html</code>.</p></div>
+manual page gives you an overview of the command-line command syntax.</p></div>
+<div class="paragraph"><p>A formatted and hyperlinked copy of the latest Git documentation
+can be viewed at <code>https://git.github.io/htmldocs/git.html</code>.</p></div>
 </div>
 </div>
 <div class="sect1">
@@ -793,7 +793,7 @@
 <dd>
 <p>
         Prints the synopsis and a list of the most commonly used
-        commands. If the option <em>--all</em> or <em>-a</em> is given then all
+        commands. If the option <code>--all</code> or <code>-a</code> is given then all
         available commands are printed. If a Git command is named this
         option will bring up the manual page for that command.
 </p>
@@ -832,6 +832,10 @@
         The &lt;name&gt; is expected in the same format as listed by
         <em>git config</em> (subkeys separated by dots).
 </p>
+<div class="paragraph"><p>Note that omitting the <code>=</code> in <code>git -c foo.bar ...</code> is allowed and sets
+<code>foo.bar</code> to the boolean true value (just like <code>[foo]bar</code> would in a
+config file). Including the equals but with an empty value (like <code>git -c
+foo.bar= ...</code>) sets <code>foo.bar</code> to the empty string.</p></div>
 </dd>
 <dt class="hdlist1">
 --exec-path[=&lt;path&gt;]
@@ -899,7 +903,7 @@
 <dd>
 <p>
         Set the path to the repository. This can also be controlled by
-        setting the GIT_DIR environment variable. It can be an absolute
+        setting the <code>GIT_DIR</code> environment variable. It can be an absolute
         path or relative path to current working directory.
 </p>
 </dd>
@@ -1033,7 +1037,7 @@
 </dt>
 <dd>
 <p>
-        Find by binary search the change that introduced a bug.
+        Use binary search to find the commit that introduced a bug.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1057,7 +1061,7 @@
 </dt>
 <dd>
 <p>
-        Checkout a branch or paths to the working tree.
+        Switch branches or restore working tree files.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1105,7 +1109,7 @@
 </dt>
 <dd>
 <p>
-        Show the most recent tag that is reachable from a commit.
+        Describe a commit using the most recent tag reachable from it.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1217,7 +1221,7 @@
 </dt>
 <dd>
 <p>
-        Forward-port local commits to the updated upstream head.
+        Reapply commits on top of another base tip.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1293,6 +1297,14 @@
 </p>
 </dd>
 <dt class="hdlist1">
+<a href="git-worktree.html">git-worktree(1)</a>
+</dt>
+<dd>
+<p>
+        Manage multiple working trees.
+</p>
+</dd>
+<dt class="hdlist1">
 <a href="gitk.html">gitk(1)</a>
 </dt>
 <dd>
@@ -1383,7 +1395,7 @@
 </dt>
 <dd>
 <p>
-        manage set of tracked repositories.
+        Manage set of tracked repositories.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1510,6 +1522,14 @@
 </p>
 </dd>
 <dt class="hdlist1">
+<a href="git-verify-commit.html">git-verify-commit(1)</a>
+</dt>
+<dd>
+<p>
+        Check the GPG signature of commits.
+</p>
+</dd>
+<dt class="hdlist1">
 <a href="git-verify-tag.html">git-verify-tag(1)</a>
 </dt>
 <dd>
@@ -2110,6 +2130,14 @@
 </p>
 </dd>
 <dt class="hdlist1">
+<a href="git-interpret-trailers.html">git-interpret-trailers(1)</a>
+</dt>
+<dd>
+<p>
+        help add structured information into commit messages.
+</p>
+</dd>
+<dt class="hdlist1">
 <a href="git-mailinfo.html">git-mailinfo(1)</a>
 </dt>
 <dd>
@@ -2335,10 +2363,10 @@
 <h3 id="_the_git_repository">The Git Repository</h3>
 <div class="paragraph"><p>These environment variables apply to <em>all</em> core Git commands. Nb: it
 is worth noting that they may be used/overridden by SCMS sitting above
-Git so take care if using Cogito etc.</p></div>
+Git so take care if using a foreign front-end.</p></div>
 <div class="dlist"><dl>
 <dt class="hdlist1">
-<em>GIT_INDEX_FILE</em>
+<code>GIT_INDEX_FILE</code>
 </dt>
 <dd>
 <p>
@@ -2348,7 +2376,18 @@
 </p>
 </dd>
 <dt class="hdlist1">
-<em>GIT_OBJECT_DIRECTORY</em>
+<code>GIT_INDEX_VERSION</code>
+</dt>
+<dd>
+<p>
+        This environment variable allows the specification of an index
+        version for new repositories.  It won&#8217;t affect existing index
+        files.  By default index file version 2 or 3 is used. See
+        <a href="git-update-index.html">git-update-index(1)</a> for more information.
+</p>
+</dd>
+<dt class="hdlist1">
+<code>GIT_OBJECT_DIRECTORY</code>
 </dt>
 <dd>
 <p>
@@ -2359,7 +2398,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
-<em>GIT_ALTERNATE_OBJECT_DIRECTORIES</em>
+<code>GIT_ALTERNATE_OBJECT_DIRECTORIES</code>
 </dt>
 <dd>
 <p>
@@ -2371,37 +2410,37 @@
 </p>
 </dd>
 <dt class="hdlist1">
-<em>GIT_DIR</em>
+<code>GIT_DIR</code>
 </dt>
 <dd>
 <p>
-        If the <em>GIT_DIR</em> environment variable is set then it
+        If the <code>GIT_DIR</code> environment variable is set then it
         specifies a path to use instead of the default <code>.git</code>
         for the base of the repository.
-        The <em>--git-dir</em> command-line option also sets this value.
+        The <code>--git-dir</code> command-line option also sets this value.
 </p>
 </dd>
 <dt class="hdlist1">
-<em>GIT_WORK_TREE</em>
+<code>GIT_WORK_TREE</code>
 </dt>
 <dd>
 <p>
         Set the path to the root of the working tree.
-        This can also be controlled by the <em>--work-tree</em> command line
+        This can also be controlled by the <code>--work-tree</code> command-line
         option and the core.worktree configuration variable.
 </p>
 </dd>
 <dt class="hdlist1">
-<em>GIT_NAMESPACE</em>
+<code>GIT_NAMESPACE</code>
 </dt>
 <dd>
 <p>
         Set the Git namespace; see <a href="gitnamespaces.html">gitnamespaces(7)</a> for details.
-        The <em>--namespace</em> command-line option also sets this value.
+        The <code>--namespace</code> command-line option also sets this value.
 </p>
 </dd>
 <dt class="hdlist1">
-<em>GIT_CEILING_DIRECTORIES</em>
+<code>GIT_CEILING_DIRECTORIES</code>
 </dt>
 <dd>
 <p>
@@ -2417,11 +2456,11 @@
         can add an empty entry to the list to tell Git that the
         subsequent entries are not symlinks and needn&#8217;t be resolved;
         e.g.,
-        <em>GIT_CEILING_DIRECTORIES=/maybe/symlink::/very/slow/non/symlink</em>.
+        <code>GIT_CEILING_DIRECTORIES=/maybe/symlink::/very/slow/non/symlink</code>.
 </p>
 </dd>
 <dt class="hdlist1">
-<em>GIT_DISCOVERY_ACROSS_FILESYSTEM</em>
+<code>GIT_DISCOVERY_ACROSS_FILESYSTEM</code>
 </dt>
 <dd>
 <p>
@@ -2430,33 +2469,47 @@
         directories to find the top of the working tree, but by default it
         does not cross filesystem boundaries.  This environment variable
         can be set to true to tell Git not to stop at filesystem
-        boundaries.  Like <em>GIT_CEILING_DIRECTORIES</em>, this will not affect
-        an explicit repository directory set via <em>GIT_DIR</em> or on the
+        boundaries.  Like <code>GIT_CEILING_DIRECTORIES</code>, this will not affect
+        an explicit repository directory set via <code>GIT_DIR</code> or on the
         command line.
 </p>
 </dd>
+<dt class="hdlist1">
+<code>GIT_COMMON_DIR</code>
+</dt>
+<dd>
+<p>
+        If this variable is set to a path, non-worktree files that are
+        normally in $GIT_DIR will be taken from this path
+        instead. Worktree-specific files such as HEAD or index are
+        taken from $GIT_DIR. See <a href="gitrepository-layout.html">gitrepository-layout(5)</a> and
+        <a href="git-worktree.html">git-worktree(1)</a> for
+        details. This variable has lower precedence than other path
+        variables such as GIT_INDEX_FILE, GIT_OBJECT_DIRECTORY&#8230;
+</p>
+</dd>
 </dl></div>
 </div>
 <div class="sect2">
 <h3 id="_git_commits">Git Commits</h3>
 <div class="dlist"><dl>
 <dt class="hdlist1">
-<em>GIT_AUTHOR_NAME</em>
+<code>GIT_AUTHOR_NAME</code>
 </dt>
 <dt class="hdlist1">
-<em>GIT_AUTHOR_EMAIL</em>
+<code>GIT_AUTHOR_EMAIL</code>
 </dt>
 <dt class="hdlist1">
-<em>GIT_AUTHOR_DATE</em>
+<code>GIT_AUTHOR_DATE</code>
 </dt>
 <dt class="hdlist1">
-<em>GIT_COMMITTER_NAME</em>
+<code>GIT_COMMITTER_NAME</code>
 </dt>
 <dt class="hdlist1">
-<em>GIT_COMMITTER_EMAIL</em>
+<code>GIT_COMMITTER_EMAIL</code>
 </dt>
 <dt class="hdlist1">
-<em>GIT_COMMITTER_DATE</em>
+<code>GIT_COMMITTER_DATE</code>
 </dt>
 <dt class="hdlist1">
 <em>EMAIL</em>
@@ -2472,7 +2525,7 @@
 <h3 id="_git_diffs">Git Diffs</h3>
 <div class="dlist"><dl>
 <dt class="hdlist1">
-<em>GIT_DIFF_OPTS</em>
+<code>GIT_DIFF_OPTS</code>
 </dt>
 <dd>
 <p>
@@ -2483,14 +2536,14 @@
 </p>
 </dd>
 <dt class="hdlist1">
-<em>GIT_EXTERNAL_DIFF</em>
+<code>GIT_EXTERNAL_DIFF</code>
 </dt>
 <dd>
 <p>
-        When the environment variable <em>GIT_EXTERNAL_DIFF</em> is set, the
+        When the environment variable <code>GIT_EXTERNAL_DIFF</code> is set, the
         program named by it is called, instead of the diff invocation
         described above.  For a path that is added, removed, or modified,
-        <em>GIT_EXTERNAL_DIFF</em> is called with 7 parameters:
+        <code>GIT_EXTERNAL_DIFF</code> is called with 7 parameters:
 </p>
 <div class="literalblock">
 <div class="content">
@@ -2525,15 +2578,15 @@
 <div class="paragraph"><p>The file parameters can point at the user&#8217;s working file
 (e.g. <code>new-file</code> in "git-diff-files"), <code>/dev/null</code> (e.g. <code>old-file</code>
 when a new file is added), or a temporary file (e.g. <code>old-file</code> in the
-index).  <em>GIT_EXTERNAL_DIFF</em> should not worry about unlinking the
-temporary file --- it is removed when <em>GIT_EXTERNAL_DIFF</em> exits.</p></div>
-<div class="paragraph"><p>For a path that is unmerged, <em>GIT_EXTERNAL_DIFF</em> is called with 1
+index).  <code>GIT_EXTERNAL_DIFF</code> should not worry about unlinking the
+temporary file --- it is removed when <code>GIT_EXTERNAL_DIFF</code> exits.</p></div>
+<div class="paragraph"><p>For a path that is unmerged, <code>GIT_EXTERNAL_DIFF</code> is called with 1
 parameter, &lt;path&gt;.</p></div>
-<div class="paragraph"><p>For each path <em>GIT_EXTERNAL_DIFF</em> is called, two environment variables,
-<em>GIT_DIFF_PATH_COUNTER</em> and <em>GIT_DIFF_PATH_TOTAL</em> are set.</p></div>
+<div class="paragraph"><p>For each path <code>GIT_EXTERNAL_DIFF</code> is called, two environment variables,
+<code>GIT_DIFF_PATH_COUNTER</code> and <code>GIT_DIFF_PATH_TOTAL</code> are set.</p></div>
 </dd>
 <dt class="hdlist1">
-<em>GIT_DIFF_PATH_COUNTER</em>
+<code>GIT_DIFF_PATH_COUNTER</code>
 </dt>
 <dd>
 <p>
@@ -2541,7 +2594,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
-<em>GIT_DIFF_PATH_TOTAL</em>
+<code>GIT_DIFF_PATH_TOTAL</code>
 </dt>
 <dd>
 <p>
@@ -2554,7 +2607,7 @@
 <h3 id="_other">other</h3>
 <div class="dlist"><dl>
 <dt class="hdlist1">
-<em>GIT_MERGE_VERBOSITY</em>
+<code>GIT_MERGE_VERBOSITY</code>
 </dt>
 <dd>
 <p>
@@ -2564,7 +2617,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
-<em>GIT_PAGER</em>
+<code>GIT_PAGER</code>
 </dt>
 <dd>
 <p>
@@ -2575,7 +2628,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
-<em>GIT_EDITOR</em>
+<code>GIT_EDITOR</code>
 </dt>
 <dd>
 <p>
@@ -2586,41 +2639,54 @@
 </p>
 </dd>
 <dt class="hdlist1">
-<em>GIT_SSH</em>
+<code>GIT_SSH</code>
+</dt>
+<dt class="hdlist1">
+<code>GIT_SSH_COMMAND</code>
 </dt>
 <dd>
 <p>
-        If this environment variable is set then <em>git fetch</em>
-        and <em>git push</em> will use this command instead
-        of <em>ssh</em> when they need to connect to a remote system.
-        The <em>$GIT_SSH</em> command will be given exactly two or
-        four arguments: the <em>username@host</em> (or just <em>host</em>)
-        from the URL and the shell command to execute on that
-        remote system, optionally preceded by <em>-p</em> (literally) and
-        the <em>port</em> from the URL when it specifies something other
-        than the default SSH port.
-</p>
-<div class="paragraph"><p>To pass options to the program that you want to list in GIT_SSH
-you will need to wrap the program and options into a shell script,
-then set GIT_SSH to refer to the shell script.</p></div>
+        If either of these environment variables is set then <em>git fetch</em>
+        and <em>git push</em> will use the specified command instead of <em>ssh</em>
+        when they need to connect to a remote system.
+        The command will be given exactly two or four arguments: the
+        <em>username@host</em> (or just <em>host</em>) from the URL and the shell
+        command to execute on that remote system, optionally preceded by
+        <code>-p</code> (literally) and the <em>port</em> from the URL when it specifies
+        something other than the default SSH port.
+</p>
+<div class="paragraph"><p><code>$GIT_SSH_COMMAND</code> takes precedence over <code>$GIT_SSH</code>, and is interpreted
+by the shell, which allows additional arguments to be included.
+<code>$GIT_SSH</code> on the other hand must be just the path to a program
+(which can be a wrapper shell script, if additional arguments are
+needed).</p></div>
 <div class="paragraph"><p>Usually it is easier to configure any desired options through your
 personal <code>.ssh/config</code> file.  Please consult your ssh documentation
 for further details.</p></div>
 </dd>
 <dt class="hdlist1">
-<em>GIT_ASKPASS</em>
+<code>GIT_ASKPASS</code>
 </dt>
 <dd>
 <p>
         If this environment variable is set, then Git commands which need to
         acquire passwords or passphrases (e.g. for HTTP or IMAP authentication)
-        will call this program with a suitable prompt as command line argument
-        and read the password from its STDOUT. See also the <em>core.askpass</em>
+        will call this program with a suitable prompt as command-line argument
+        and read the password from its STDOUT. See also the <code>core.askPass</code>
         option in <a href="git-config.html">git-config(1)</a>.
 </p>
 </dd>
 <dt class="hdlist1">
-<em>GIT_CONFIG_NOSYSTEM</em>
+<code>GIT_TERMINAL_PROMPT</code>
+</dt>
+<dd>
+<p>
+        If this environment variable is set to <code>0</code>, git will not prompt
+        on the terminal (e.g., when asking for HTTP authentication).
+</p>
+</dd>
+<dt class="hdlist1">
+<code>GIT_CONFIG_NOSYSTEM</code>
 </dt>
 <dd>
 <p>
@@ -2633,7 +2699,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
-<em>GIT_FLUSH</em>
+<code>GIT_FLUSH</code>
 </dt>
 <dd>
 <p>
@@ -2649,49 +2715,111 @@
 </p>
 </dd>
 <dt class="hdlist1">
-<em>GIT_TRACE</em>
+<code>GIT_TRACE</code>
 </dt>
 <dd>
 <p>
-        If this variable is set to "1", "2" or "true" (comparison
-        is case insensitive), Git will print <code>trace:</code> messages on
-        stderr telling about alias expansion, built-in command
-        execution and external command execution.
-        If this variable is set to an integer value greater than 1
-        and lower than 10 (strictly) then Git will interpret this
-        value as an open file descriptor and will try to write the
-        trace messages into this file descriptor.
-        Alternatively, if this variable is set to an absolute path
-        (starting with a <em>/</em> character), Git will interpret this
-        as a file path and will try to write the trace messages
-        into it.
+        Enables general trace messages, e.g. alias expansion, built-in
+        command execution and external command execution.
 </p>
+<div class="paragraph"><p>If this variable is set to "1", "2" or "true" (comparison
+is case insensitive), trace messages will be printed to
+stderr.</p></div>
+<div class="paragraph"><p>If the variable is set to an integer value greater than 2
+and lower than 10 (strictly) then Git will interpret this
+value as an open file descriptor and will try to write the
+trace messages into this file descriptor.</p></div>
+<div class="paragraph"><p>Alternatively, if the variable is set to an absolute path
+(starting with a <em>/</em> character), Git will interpret this
+as a file path and will try to write the trace messages
+into it.</p></div>
+<div class="paragraph"><p>Unsetting the variable, or setting it to empty, "0" or
+"false" (case insensitive) disables trace messages.</p></div>
 </dd>
 <dt class="hdlist1">
-<em>GIT_TRACE_PACK_ACCESS</em>
+<code>GIT_TRACE_PACK_ACCESS</code>
 </dt>
 <dd>
 <p>
-        If this variable is set to a path, a file will be created at
-        the given path logging all accesses to any packs. For each
+        Enables trace messages for all accesses to any packs. For each
         access, the pack file name and an offset in the pack is
         recorded. This may be helpful for troubleshooting some
         pack-related performance problems.
+        See <code>GIT_TRACE</code> for available trace output options.
 </p>
 </dd>
 <dt class="hdlist1">
-<em>GIT_TRACE_PACKET</em>
+<code>GIT_TRACE_PACKET</code>
 </dt>
 <dd>
 <p>
-        If this variable is set, it shows a trace of all packets
-        coming in or out of a given program. This can help with
-        debugging object negotiation or other protocol issues. Tracing
-        is turned off at a packet starting with "PACK".
+        Enables trace messages for all packets coming in or out of a
+        given program. This can help with debugging object negotiation
+        or other protocol issues. Tracing is turned off at a packet
+        starting with "PACK" (but see <code>GIT_TRACE_PACKFILE</code> below).
+        See <code>GIT_TRACE</code> for available trace output options.
 </p>
 </dd>
 <dt class="hdlist1">
-GIT_LITERAL_PATHSPECS
+<code>GIT_TRACE_PACKFILE</code>
+</dt>
+<dd>
+<p>
+        Enables tracing of packfiles sent or received by a
+        given program. Unlike other trace output, this trace is
+        verbatim: no headers, and no quoting of binary data. You almost
+        certainly want to direct into a file (e.g.,
+        <code>GIT_TRACE_PACKFILE=/tmp/my.pack</code>) rather than displaying it on
+        the terminal or mixing it with other trace output.
+</p>
+<div class="paragraph"><p>Note that this is currently only implemented for the client side
+of clones and fetches.</p></div>
+</dd>
+<dt class="hdlist1">
+<code>GIT_TRACE_PERFORMANCE</code>
+</dt>
+<dd>
+<p>
+        Enables performance related trace messages, e.g. total execution
+        time of each Git command.
+        See <code>GIT_TRACE</code> for available trace output options.
+</p>
+</dd>
+<dt class="hdlist1">
+<code>GIT_TRACE_SETUP</code>
+</dt>
+<dd>
+<p>
+        Enables trace messages printing the .git, working tree and current
+        working directory after Git has completed its setup phase.
+        See <code>GIT_TRACE</code> for available trace output options.
+</p>
+</dd>
+<dt class="hdlist1">
+<code>GIT_TRACE_SHALLOW</code>
+</dt>
+<dd>
+<p>
+        Enables trace messages that can help debugging fetching /
+        cloning of shallow repositories.
+        See <code>GIT_TRACE</code> for available trace output options.
+</p>
+</dd>
+<dt class="hdlist1">
+<code>GIT_TRACE_CURL</code>
+</dt>
+<dd>
+<p>
+        Enables a curl full trace dump of all incoming and outgoing data,
+        including descriptive information, of the git transport protocol.
+        This is similar to doing curl <code>--trace-ascii</code> on the command line.
+        This option overrides setting the <code>GIT_CURL_VERBOSE</code> environment
+        variable.
+        See <code>GIT_TRACE</code> for available trace output options.
+</p>
+</dd>
+<dt class="hdlist1">
+<code>GIT_LITERAL_PATHSPECS</code>
 </dt>
 <dd>
 <p>
@@ -2705,7 +2833,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
-GIT_GLOB_PATHSPECS
+<code>GIT_GLOB_PATHSPECS</code>
 </dt>
 <dd>
 <p>
@@ -2714,7 +2842,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
-GIT_NOGLOB_PATHSPECS
+<code>GIT_NOGLOB_PATHSPECS</code>
 </dt>
 <dd>
 <p>
@@ -2723,7 +2851,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
-GIT_ICASE_PATHSPECS
+<code>GIT_ICASE_PATHSPECS</code>
 </dt>
 <dd>
 <p>
@@ -2732,7 +2860,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
-<em>GIT_REFLOG_ACTION</em>
+<code>GIT_REFLOG_ACTION</code>
 </dt>
 <dd>
 <p>
@@ -2746,6 +2874,69 @@
         end user, to be recorded in the body of the reflog.
 </p>
 </dd>
+<dt class="hdlist1">
+<code>GIT_REF_PARANOIA</code>
+</dt>
+<dd>
+<p>
+        If set to <code>1</code>, include broken or badly named refs when iterating
+        over lists of refs. In a normal, non-corrupted repository, this
+        does nothing. However, enabling it may help git to detect and
+        abort some operations in the presence of broken refs. Git sets
+        this variable automatically when performing destructive
+        operations like <a href="git-prune.html">git-prune(1)</a>. You should not need to set
+        it yourself unless you want to be paranoid about making sure
+        an operation has touched every ref (e.g., because you are
+        cloning a repository to make a backup).
+</p>
+</dd>
+<dt class="hdlist1">
+<code>GIT_ALLOW_PROTOCOL</code>
+</dt>
+<dd>
+<p>
+        If set, provide a colon-separated list of protocols which are
+        allowed to be used with fetch/push/clone. This is useful to
+        restrict recursive submodule initialization from an untrusted
+        repository. Any protocol not mentioned will be disallowed (i.e.,
+        this is a whitelist, not a blacklist). If the variable is not
+        set at all, all protocols are enabled.  The protocol names
+        currently used by git are:
+</p>
+<div class="ulist"><ul>
+<li>
+<p>
+<code>file</code>: any local file-based path (including <code>file://</code> URLs,
+            or local paths)
+</p>
+</li>
+<li>
+<p>
+<code>git</code>: the anonymous git protocol over a direct TCP
+            connection (or proxy, if configured)
+</p>
+</li>
+<li>
+<p>
+<code>ssh</code>: git over ssh (including <code>host:path</code> syntax,
+            <code>ssh://</code>, etc).
+</p>
+</li>
+<li>
+<p>
+<code>http</code>: git over http, both "smart http" and "dumb http".
+            Note that this does <em>not</em> include <code>https</code>; if you want both,
+            you should specify both as <code>http:https</code>.
+</p>
+</li>
+<li>
+<p>
+any external helpers are named by their protocol (e.g., use
+            <code>hg</code> to allow the <code>git-remote-hg</code> helper)
+</p>
+</li>
+</ul></div>
+</dd>
 </dl></div>
 </div>
 </div>
@@ -2812,60 +3003,6 @@
 <a href="technical/api-index.html">Git API documentation</a>.</p></div>
 <div class="paragraph"><p>Users migrating from CVS may also want to
 read <a href="gitcvs-migration.html">gitcvs-migration(7)</a>.</p></div>
-<div class="dlist"><dl>
-<dt class="hdlist1">
-<code>GIT_ALLOW_PROTOCOL</code>
-</dt>
-<dd>
-<p>
-        If set, provide a colon-separated list of protocols which are
-        allowed to be used with fetch/push/clone. This is useful to
-        restrict recursive submodule initialization from an untrusted
-        repository. Any protocol not mentioned will be disallowed (i.e.,
-        this is a whitelist, not a blacklist). If the variable is not
-        set at all, all protocols are enabled.  The protocol names
-        currently used by git are:
-</p>
-<div class="ulist"><ul>
-<li>
-<p>
-<code>file</code>: any local file-based path (including <code>file://</code> URLs,
-            or local paths)
-</p>
-</li>
-<li>
-<p>
-<code>git</code>: the anonymous git protocol over a direct TCP
-            connection (or proxy, if configured)
-</p>
-</li>
-<li>
-<p>
-<code>ssh</code>: git over ssh (including <code>host:path</code> syntax,
-            <code>git+ssh://</code>, etc).
-</p>
-</li>
-<li>
-<p>
-<code>rsync</code>: git over rsync
-</p>
-</li>
-<li>
-<p>
-<code>http</code>: git over http, both "smart http" and "dumb http".
-            Note that this does <em>not</em> include <code>https</code>; if you want both,
-            you should specify both as <code>http:https</code>.
-</p>
-</li>
-<li>
-<p>
-any external helpers are named by their protocol (e.g., use
-            <code>hg</code> to allow the <code>git-remote-hg</code> helper)
-</p>
-</li>
-</ul></div>
-</dd>
-</dl></div>
 </div>
 </div>
 <div class="sect1">
@@ -2873,7 +3010,7 @@
 <div class="sectionbody">
 <div class="paragraph"><p>Git was started by Linus Torvalds, and is currently maintained by Junio
 C Hamano. Numerous contributions have come from the Git mailing list
-&lt;<a href="mailto:git@vger.kernel.org">git@vger.kernel.org</a>&gt;.  <a href="http://www.ohloh.net/p/git/contributors/summary">http://www.ohloh.net/p/git/contributors/summary</a>
+&lt;<a href="mailto:git@vger.kernel.org">git@vger.kernel.org</a>&gt;.  <a href="http://www.openhub.net/p/git/contributors/summary">http://www.openhub.net/p/git/contributors/summary</a>
 gives you a more complete list of contributors.</p></div>
 <div class="paragraph"><p>If you have a clone of git.git itself, the
 output of <a href="git-shortlog.html">git-shortlog(1)</a> and <a href="git-blame.html">git-blame(1)</a> can show you
@@ -2892,7 +3029,7 @@
 <h2 id="_see_also">SEE ALSO</h2>
 <div class="sectionbody">
 <div class="paragraph"><p><a href="gittutorial.html">gittutorial(7)</a>, <a href="gittutorial-2.html">gittutorial-2(7)</a>,
-<a href="everyday.html">Everyday Git</a>, <a href="gitcvs-migration.html">gitcvs-migration(7)</a>,
+<a href="giteveryday.html">giteveryday(7)</a>, <a href="gitcvs-migration.html">gitcvs-migration(7)</a>,
 <a href="gitglossary.html">gitglossary(7)</a>, <a href="gitcore-tutorial.html">gitcore-tutorial(7)</a>,
 <a href="gitcli.html">gitcli(7)</a>, <a href="user-manual.html">The Git User&#8217;s Manual</a>,
 <a href="gitworkflows.html">gitworkflows(7)</a></p></div>
# install git.html /usr/share/doc/git-doc/git.html
--- /usr/share/doc/git-doc/gitattributes.html	2016-03-21 09:24:29.000000000 -0600
+++ gitattributes.html	2016-10-15 00:44:17.940075249 -0600
@@ -833,7 +833,7 @@
 repositories (i.e., attributes of interest to all users) should go into
 <code>.gitattributes</code> files. Attributes that should affect all repositories
 for a single user should be placed in a file specified by the
-<code>core.attributesfile</code> configuration option (see <a href="git-config.html">git-config(1)</a>).
+<code>core.attributesFile</code> configuration option (see <a href="git-config.html">git-config(1)</a>).
 Its default value is $XDG_CONFIG_HOME/git/attributes. If $XDG_CONFIG_HOME
 is either not set or empty, $HOME/.config/git/attributes is used instead.
 Attributes for all users on a system should be placed in the
@@ -862,7 +862,8 @@
 text file is normalized, its line endings are converted to LF in the
 repository.  To control what line ending style is used in the working
 directory, use the <code>eol</code> attribute for a single file and the
-<code>core.eol</code> configuration variable for all text files.</p></div>
+<code>core.eol</code> configuration variable for all text files.
+Note that <code>core.autocrlf</code> overrides <code>core.eol</code></p></div>
 <div class="dlist"><dl>
 <dt class="hdlist1">
 Set
@@ -889,8 +890,9 @@
 <dd>
 <p>
         When <code>text</code> is set to "auto", the path is marked for automatic
-        end-of-line normalization.  If Git decides that the content is
-        text, its line endings are normalized to LF on checkin.
+        end-of-line conversion.  If Git decides that the content is
+        text, its line endings are converted to LF on checkin.
+        When the file has been committed with CRLF, no conversion is done.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -910,7 +912,7 @@
 <div class="sect3">
 <h4 id="_code_eol_code"><code>eol</code></h4>
 <div class="paragraph"><p>This attribute sets a specific line-ending style to be used in the
-working directory.  It enables end-of-line normalization without any
+working directory.  It enables end-of-line conversion without any
 content checks, effectively setting the <code>text</code> attribute.</p></div>
 <div class="dlist"><dl>
 <dt class="hdlist1">
@@ -951,61 +953,53 @@
 <div class="paragraph"><p>While Git normally leaves file contents alone, it can be configured to
 normalize line endings to LF in the repository and, optionally, to
 convert them to CRLF when files are checked out.</p></div>
-<div class="paragraph"><p>Here is an example that will make Git normalize .txt, .vcproj and .sh
-files, ensure that .vcproj files have CRLF and .sh files have LF in
-the working directory, and prevent .jpg files from being normalized
-regardless of their content.</p></div>
-<div class="listingblock">
-<div class="content">
-<pre><code>*.txt           text
-*.vcproj        eol=crlf
-*.sh            eol=lf
-*.jpg           -text</code></pre>
-</div></div>
-<div class="paragraph"><p>Other source code management systems normalize all text files in their
-repositories, and there are two ways to enable similar automatic
-normalization in Git.</p></div>
 <div class="paragraph"><p>If you simply want to have CRLF line endings in your working directory
 regardless of the repository you are working with, you can set the
-config variable "core.autocrlf" without changing any attributes.</p></div>
+config variable "core.autocrlf" without using any attributes.</p></div>
 <div class="listingblock">
 <div class="content">
 <pre><code>[core]
         autocrlf = true</code></pre>
 </div></div>
-<div class="paragraph"><p>This does not force normalization of all text files, but does ensure
+<div class="paragraph"><p>This does not force normalization of text files, but does ensure
 that text files that you introduce to the repository have their line
 endings normalized to LF when they are added, and that files that are
 already normalized in the repository stay normalized.</p></div>
-<div class="paragraph"><p>If you want to interoperate with a source code management system that
-enforces end-of-line normalization, or you simply want all text files
-in your repository to be normalized, you should instead set the <code>text</code>
-attribute to "auto" for <em>all</em> files.</p></div>
+<div class="paragraph"><p>If you want to ensure that text files that any contributor introduces to
+the repository have their line endings normalized, you can set the
+<code>text</code> attribute to "auto" for <em>all</em> files.</p></div>
 <div class="listingblock">
 <div class="content">
 <pre><code>*       text=auto</code></pre>
 </div></div>
-<div class="paragraph"><p>This ensures that all files that Git considers to be text will have
-normalized (LF) line endings in the repository.  The <code>core.eol</code>
-configuration variable controls which line endings Git will use for
-normalized files in your working directory; the default is to use the
-native line ending for your platform, or CRLF if <code>core.autocrlf</code> is
-set.</p></div>
+<div class="paragraph"><p>The attributes allow a fine-grained control, how the line endings
+are converted.
+Here is an example that will make Git normalize .txt, .vcproj and .sh
+files, ensure that .vcproj files have CRLF and .sh files have LF in
+the working directory, and prevent .jpg files from being normalized
+regardless of their content.</p></div>
+<div class="listingblock">
+<div class="content">
+<pre><code>*               text=auto
+*.txt           text
+*.vcproj        text eol=crlf
+*.sh            text eol=lf
+*.jpg           -text</code></pre>
+</div></div>
 <div class="admonitionblock">
 <table><tr>
 <td class="icon">
 <div class="title">Note</div>
 </td>
-<td class="content">When <code>text=auto</code> normalization is enabled in an existing
-repository, any text files containing CRLFs should be normalized.  If
-they are not they will be normalized the next time someone tries to
-change them, causing unfortunate misattribution.  From a clean working
-directory:</td>
+<td class="content">When <code>text=auto</code> conversion is enabled in a cross-platform
+project using push and pull to a central repository the text files
+containing CRLFs should be normalized.</td>
 </tr></table>
 </div>
+<div class="paragraph"><p>From a clean working directory:</p></div>
 <div class="listingblock">
 <div class="content">
-<pre><code>$ echo "* text=auto" &gt;&gt;.gitattributes
+<pre><code>$ echo "* text=auto" &gt;.gitattributes
 $ rm .git/index     # Remove the index to force Git to
 $ git reset         # re-scan the working directory
 $ git status        # Show files that will be normalized
@@ -1138,6 +1132,11 @@
         clean = git-p4-filter --clean %f
         smudge = git-p4-filter --smudge %f</code></pre>
 </div></div>
+<div class="paragraph"><p>Note that "%f" is the name of the path that is being worked on. Depending
+on the version that is being filtered, the corresponding file on disk may
+not exist, or may have different contents. So, smudge and clean commands
+should not try to access the file on disk, but only act as filters on the
+content provided to them on standard input.</p></div>
 </div>
 <div class="sect3">
 <h4 id="_interaction_between_checkin_checkout_attributes">Interaction between checkin/checkout attributes</h4>
@@ -1207,8 +1206,8 @@
 <p>
         A path to which the <code>diff</code> attribute is unspecified
         first gets its contents inspected, and if it looks like
-        text, it is treated as text.  Otherwise it would
-        generate <code>Binary files differ</code>.
+        text and is smaller than core.bigFileThreshold, it is treated
+        as text. Otherwise it would generate <code>Binary files differ</code>.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1304,11 +1303,21 @@
 </li>
 <li>
 <p>
+<code>css</code> suitable for cascading style sheets.
+</p>
+</li>
+<li>
+<p>
 <code>fortran</code> suitable for source code in the Fortran language.
 </p>
 </li>
 <li>
 <p>
+<code>fountain</code> suitable for Fountain documents.
+</p>
+</li>
+<li>
+<p>
 <code>html</code> suitable for HTML/XHTML documents.
 </p>
 </li>
@@ -1480,7 +1489,7 @@
 may want to override its decision, either because a blob contains binary
 data later in the file, or because the content, while technically
 composed of text characters, is opaque to a human reader. For example,
-many postscript files contain only ascii characters, but produce noisy
+many postscript files contain only ASCII characters, but produce noisy
 and meaningless diffs.</p></div>
 <div class="paragraph"><p>The simplest way to mark a file as binary is to unset the diff
 attribute in the <code>.gitattributes</code> file:</p></div>
@@ -1492,7 +1501,7 @@
 patch, if binary patches are enabled) instead of a regular diff.</p></div>
 <div class="paragraph"><p>However, one may also want to specify other diff driver attributes. For
 example, you might want to use <code>textconv</code> to convert postscript files to
-an ascii representation for human viewing, but otherwise treat them as
+an ASCII representation for human viewing, but otherwise treat them as
 binary files. You cannot specify both <code>-diff</code> and <code>diff=ps</code> attributes.
 The solution is to use the <code>diff.*.binary</code> config option:</p></div>
 <div class="listingblock">
@@ -1612,7 +1621,7 @@
 <div class="content">
 <pre><code>[merge "filfre"]
         name = feel-free merge driver
-        driver = filfre %O %A %B
+        driver = filfre %O %A %B %L %P
         recursive = binary</code></pre>
 </div></div>
 <div class="paragraph"><p>The <code>merge.*.name</code> variable gives the driver a human-readable
@@ -1633,6 +1642,8 @@
 merge between common ancestors, when there are more than one.
 When left unspecified, the driver itself is used for both
 internal merge and the final merge.</p></div>
+<div class="paragraph"><p>The merge driver can learn the pathname in which the merged result
+will be stored via placeholder <code>%P</code>.</p></div>
 </div>
 <div class="sect3">
 <h4 id="_code_conflict_marker_size_code"><code>conflict-marker-size</code></h4>
# install gitattributes.html /usr/share/doc/git-doc/gitattributes.html
--- /usr/share/doc/git-doc/gitcli.html	2016-03-21 09:24:29.000000000 -0600
+++ gitcli.html	2016-10-15 00:44:20.680075301 -0600
@@ -739,7 +739,7 @@
 <h2>NAME</h2>
 <div class="sectionbody">
 <p>gitcli -
-   Git command line interface and conventions
+   Git command-line interface and conventions
 </p>
 </div>
 </div>
@@ -821,7 +821,7 @@
 <div class="ulist"><ul>
 <li>
 <p>
-it&#8217;s preferred to use the non dashed form of Git commands, which means that
+it&#8217;s preferred to use the non-dashed form of Git commands, which means that
    you should prefer <code>git foo</code> to <code>git-foo</code>.
 </p>
 </li>
@@ -833,7 +833,7 @@
 </li>
 <li>
 <p>
-when a command line option takes an argument, use the <em>stuck</em> form.  In
+when a command-line option takes an argument, use the <em>stuck</em> form.  In
    other words, write <code>git foo -oArg</code> instead of <code>git foo -o Arg</code> for short
    options, and <code>git foo --long-opt=Arg</code> instead of <code>git foo --long-opt Arg</code>
    for long options.  An option that takes optional option-argument must be
@@ -871,7 +871,7 @@
 <div class="sect2">
 <h3 id="_magic_options">Magic Options</h3>
 <div class="paragraph"><p>Commands which have the enhanced option parser activated all understand a
-couple of magic command line options:</p></div>
+couple of magic command-line options:</p></div>
 <div class="dlist"><dl>
 <dt class="hdlist1">
 -h
# install gitcli.html /usr/share/doc/git-doc/gitcli.html
--- /usr/share/doc/git-doc/gitcore-tutorial.html	2016-03-21 09:24:29.000000000 -0600
+++ gitcore-tutorial.html	2016-10-15 00:44:21.952075325 -0600
@@ -1437,7 +1437,7 @@
 <div class="paragraph"><p>Again, this can all be simplified with</p></div>
 <div class="listingblock">
 <div class="content">
-<pre><code>$ git clone rsync://rsync.kernel.org/pub/scm/git/git.git/ my-git
+<pre><code>$ git clone git://git.kernel.org/pub/scm/git/git.git/ my-git
 $ cd my-git
 $ git checkout</code></pre>
 </div></div>
@@ -1661,7 +1661,7 @@
 </td>
 <td class="content">If there were more commits on the <em>master</em> branch after the merge, the
 merge commit itself would not be shown by <em>git show-branch</em> by
-default.  You would need to provide <em>--sparse</em> option to make the
+default.  You would need to provide <code>--sparse</code> option to make the
 merge commit visible in this case.</td>
 </tr></table>
 </div>
@@ -1720,24 +1720,6 @@
 repository to download from:</p></div>
 <div class="dlist"><dl>
 <dt class="hdlist1">
-Rsync
-</dt>
-<dd>
-<p>
-        <code>rsync://remote.machine/path/to/repo.git/</code>
-</p>
-<div class="paragraph"><p>Rsync transport is usable for both uploading and downloading,
-but is completely unaware of what git does, and can produce
-unexpected results when you download from the public repository
-while the repository owner is uploading into it via <code>rsync</code>
-transport.  Most notably, it could update the files under
-<code>refs/</code> which holds the object name of the topmost commits
-before uploading the files in <code>objects/</code>&#8201;&#8212;&#8201;the downloader would
-obtain head commit object name while that object itself is still
-not available in the repository.  For this reason, it is
-considered deprecated.</p></div>
-</dd>
-<dt class="hdlist1">
 SSH
 </dt>
 <dd>
@@ -2174,7 +2156,7 @@
 while, depending on how active your project is.</p></div>
 <div class="paragraph"><p>When a repository is synchronized via <code>git push</code> and <code>git pull</code>
 objects packed in the source repository are usually stored
-unpacked in the destination, unless rsync transport is used.
+unpacked in the destination.
 While this allows you to use different packing strategies on
 both ends, it also means you may need to repack both
 repositories every once in a while.</p></div>
@@ -2461,7 +2443,7 @@
 <a href="gittutorial-2.html">gittutorial-2(7)</a>,
 <a href="gitcvs-migration.html">gitcvs-migration(7)</a>,
 <a href="git-help.html">git-help(1)</a>,
-<a href="everyday.html">Everyday git</a>,
+<a href="giteveryday.html">giteveryday(7)</a>,
 <a href="user-manual.html">The Git User&#8217;s Manual</a></p></div>
 </div>
 </div>
# install gitcore-tutorial.html /usr/share/doc/git-doc/gitcore-tutorial.html
--- /usr/share/doc/git-doc/gitcredentials.html	2016-03-21 09:24:29.000000000 -0600
+++ gitcredentials.html	2016-10-15 00:44:22.252075330 -0600
@@ -780,7 +780,7 @@
 </li>
 <li>
 <p>
-Otherwise, if the <code>core.askpass</code> configuration variable is set, its
+Otherwise, if the <code>core.askPass</code> configuration variable is set, its
    value is used as above.
 </p>
 </li>
@@ -887,6 +887,10 @@
 variable, each helper will be tried in turn, and may provide a username,
 password, or nothing. Once Git has acquired both a username and a
 password, no more helpers will be tried.</p></div>
+<div class="paragraph"><p>If <code>credential.helper</code> is configured to the empty string, this resets
+the helper list to empty (so you may override a helper set by a
+lower-priority config file by configuring the empty-string helper,
+followed by whatever set of helpers you would like).</p></div>
 </div>
 </div>
 <div class="sect1">
# install gitcredentials.html /usr/share/doc/git-doc/gitcredentials.html
--- /usr/share/doc/git-doc/gitcvs-migration.html	2016-03-21 09:24:29.000000000 -0600
+++ gitcvs-migration.html	2016-10-15 00:44:22.572075336 -0600
@@ -856,8 +856,18 @@
 <div class="sect1">
 <h2 id="_importing_a_cvs_archive">Importing a CVS archive</h2>
 <div class="sectionbody">
+<div class="admonitionblock">
+<table><tr>
+<td class="icon">
+<div class="title">Note</div>
+</td>
+<td class="content">These instructions use the <code>git-cvsimport</code> script which ships with
+git, but other importers may provide better results. See the note in
+<a href="git-cvsimport.html">git-cvsimport(1)</a> for other options.</td>
+</tr></table>
+</div>
 <div class="paragraph"><p>First, install version 2.1 or higher of cvsps from
-<a href="http://www.cobite.com/cvsps/">http://www.cobite.com/cvsps/</a> and make
+<a href="https://github.com/andreyvit/cvsps">https://github.com/andreyvit/cvsps</a> and make
 sure it is in your path.  Then cd to a checked out CVS working directory
 of the project you are interested in and run <a href="git-cvsimport.html">git-cvsimport(1)</a>:</p></div>
 <div class="listingblock">
@@ -931,7 +941,7 @@
 <a href="gittutorial-2.html">gittutorial-2(7)</a>,
 <a href="gitcore-tutorial.html">gitcore-tutorial(7)</a>,
 <a href="gitglossary.html">gitglossary(7)</a>,
-<a href="everyday.html">Everyday Git</a>,
+<a href="giteveryday.html">giteveryday(7)</a>,
 <a href="user-manual.html">The Git User&#8217;s Manual</a></p></div>
 </div>
 </div>
# install gitcvs-migration.html /usr/share/doc/git-doc/gitcvs-migration.html
--- /usr/share/doc/git-doc/gitdiffcore.html	2016-03-21 09:24:29.000000000 -0600
+++ gitdiffcore.html	2016-10-15 00:44:22.952075343 -0600
@@ -773,8 +773,8 @@
 <li>
 <p>
 <em>git diff-index</em> compares contents of a "tree" object and the
-   working directory (when <em>--cached</em> flag is not used) or a
-   "tree" object and the index file (when <em>--cached</em> flag is
+   working directory (when <code>--cached</code> flag is not used) or a
+   "tree" object and the index file (when <code>--cached</code> flag is
    used);
 </p>
 </li>
# install gitdiffcore.html /usr/share/doc/git-doc/gitdiffcore.html
# install giteveryday.html /usr/share/doc/git-doc/giteveryday.html
--- /usr/share/doc/git-doc/gitglossary.html	2016-03-21 09:24:29.000000000 -0600
+++ gitglossary.html	2016-10-15 00:44:24.176075366 -0600
@@ -761,7 +761,7 @@
 <p>
         Via the alternates mechanism, a <a href="#def_repository">repository</a>
         can inherit part of its <a href="#def_object_database">object database</a>
-        from another object database, which is called "alternate".
+        from another object database, which is called an "alternate".
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1003,7 +1003,7 @@
         A fast-forward is a special type of <a href="#def_merge">merge</a> where you have a
         <a href="#def_revision">revision</a> and you are "merging" another
         <a href="#def_branch">branch</a>'s changes that happen to be a descendant of what
-        you have. In such these cases, you do not make a new <a href="#def_merge">merge</a>
+        you have. In such a case, you do not make a new <a href="#def_merge">merge</a>
         <a href="#def_commit">commit</a> but instead just update to his
         revision. This will happen frequently on a
         <a href="#def_remote_tracking_branch">remote-tracking branch</a> of a remote
@@ -1060,6 +1060,9 @@
         is different from what was recorded when the commit was
         created. Configured via the <code>.git/info/grafts</code> file.
 </p>
+<div class="paragraph"><p>Note that the grafts mechanism is outdated and can lead to problems
+transferring objects between repositories; see <a href="git-replace.html">git-replace(1)</a>
+for a more flexible and robust system to do the same thing.</p></div>
 </dd>
 <dt class="hdlist1">
 <a id="def_hash"></a>hash
@@ -1311,7 +1314,7 @@
 signature" letters (which optionally is terminated by another colon <code>:</code>),
 and the remainder is the pattern to match against the path.
 The "magic signature" consists of ASCII symbols that are neither
-alphanumeric, glob, regex special charaters nor colon.
+alphanumeric, glob, regex special characters nor colon.
 The optional colon that terminates the "magic signature" can be
 omitted if the pattern begins with a character that does not belong to
 "magic signature" symbol set and is not a colon.</p></div>
@@ -1452,6 +1455,38 @@
 </p>
 </dd>
 <dt class="hdlist1">
+<a id="def_per_worktree_ref"></a>per-worktree ref
+</dt>
+<dd>
+<p>
+        Refs that are per-<a href="#def_working_tree">worktree</a>, rather than
+        global.  This is presently only <a href="#def_HEAD">HEAD</a> and any refs
+        that start with <code>refs/bisect/</code>, but might later include other
+        unusual refs.
+</p>
+</dd>
+<dt class="hdlist1">
+<a id="def_pseudoref"></a>pseudoref
+</dt>
+<dd>
+<p>
+        Pseudorefs are a class of files under <code>$GIT_DIR</code> which behave
+        like refs for the purposes of rev-parse, but which are treated
+        specially by git.  Pseudorefs both have names that are all-caps,
+        and always start with a line consisting of a
+        <a href="#def_SHA1">SHA-1</a> followed by whitespace.  So, HEAD is not a
+        pseudoref, because it is sometimes a symbolic ref.  They might
+        optionally contain some additional data.  <code>MERGE_HEAD</code> and
+        <code>CHERRY_PICK_HEAD</code> are examples.  Unlike
+        <a href="#def_per_worktree_ref">per-worktree refs</a>, these files cannot
+        be symbolic refs, and never have reflogs.  They also cannot be
+        updated through the normal ref update machinery.  Instead,
+        they are updated by directly writing to the files.  However,
+        they can be read as if they were refs, so <code>git rev-parse
+        MERGE_HEAD</code> will work.
+</p>
+</dd>
+<dt class="hdlist1">
 <a id="def_pull"></a>pull
 </dt>
 <dd>
@@ -1543,6 +1578,16 @@
 </p>
 </dd>
 <dt class="hdlist1">
+<a id="def_remote"></a>remote repository
+</dt>
+<dd>
+<p>
+        A <a href="#def_repository">repository</a> which is used to track the same
+        project but resides somewhere else. To communicate with remotes,
+        see <a href="#def_fetch">fetch</a> or <a href="#def_push">push</a>.
+</p>
+</dd>
+<dt class="hdlist1">
 <a id="def_remote_tracking_branch"></a>remote-tracking branch
 </dt>
 <dd>
@@ -1613,6 +1658,16 @@
 </p>
 </dd>
 <dt class="hdlist1">
+<a id="def_shallow_clone"></a>shallow clone
+</dt>
+<dd>
+<p>
+        Mostly a synonym to <a href="#def_shallow_repository">shallow repository</a>
+        but the phrase makes it more explicit that it was created by
+        running <code>git clone --depth=...</code> command.
+</p>
+</dd>
+<dt class="hdlist1">
 <a id="def_shallow_repository"></a>shallow repository
 </dt>
 <dd>
@@ -1628,6 +1683,27 @@
 </p>
 </dd>
 <dt class="hdlist1">
+<a id="def_submodule"></a>submodule
+</dt>
+<dd>
+<p>
+        A <a href="#def_repository">repository</a> that holds the history of a
+        separate project inside another repository (the latter of
+        which is called <a href="#def_superproject">superproject</a>).
+</p>
+</dd>
+<dt class="hdlist1">
+<a id="def_superproject"></a>superproject
+</dt>
+<dd>
+<p>
+        A <a href="#def_repository">repository</a> that references repositories
+        of other projects in its working tree as <a href="#def_submodule">submodules</a>.
+        The superproject knows about the names of (but does not hold
+        copies of) commit objects of the contained submodules.
+</p>
+</dd>
+<dt class="hdlist1">
 <a id="def_symref"></a>symref
 </dt>
 <dd>
@@ -1764,7 +1840,7 @@
 <div class="paragraph"><p><a href="gittutorial.html">gittutorial(7)</a>,
 <a href="gittutorial-2.html">gittutorial-2(7)</a>,
 <a href="gitcvs-migration.html">gitcvs-migration(7)</a>,
-<a href="everyday.html">Everyday Git</a>,
+<a href="giteveryday.html">giteveryday(7)</a>,
 <a href="user-manual.html">The Git User&#8217;s Manual</a></p></div>
 </div>
 </div>
# install gitglossary.html /usr/share/doc/git-doc/gitglossary.html
--- /usr/share/doc/git-doc/githooks.html	2016-03-21 09:24:29.000000000 -0600
+++ githooks.html	2016-10-15 00:44:18.460075259 -0600
@@ -747,29 +747,30 @@
 <div class="sect1">
 <h2 id="_synopsis">SYNOPSIS</h2>
 <div class="sectionbody">
-<div class="paragraph"><p>$GIT_DIR/hooks/*</p></div>
+<div class="paragraph"><p>$GIT_DIR/hooks/* (or `git config core.hooksPath`/*)</p></div>
 </div>
 </div>
 <div class="sect1">
 <h2 id="_description">DESCRIPTION</h2>
 <div class="sectionbody">
-<div class="paragraph"><p>Hooks are little scripts you can place in <code>$GIT_DIR/hooks</code>
-directory to trigger action at certain points.  When
-<em>git init</em> is run, a handful of example hooks are copied into the
-<code>hooks</code> directory of the new repository, but by default they are
-all disabled.  To enable a hook, rename it by removing its <code>.sample</code>
-suffix.</p></div>
-<div class="admonitionblock">
-<table><tr>
-<td class="icon">
-<div class="title">Note</div>
-</td>
-<td class="content">It is also a requirement for a given hook to be executable.
-However - in a freshly initialized repository - the <code>.sample</code> files are
-executable by default.</td>
-</tr></table>
-</div>
-<div class="paragraph"><p>This document describes the currently defined hooks.</p></div>
+<div class="paragraph"><p>Hooks are programs you can place in a hooks directory to trigger
+actions at certain points in git&#8217;s execution. Hooks that don&#8217;t have
+the executable bit set are ignored.</p></div>
+<div class="paragraph"><p>By default the hooks directory is <code>$GIT_DIR/hooks</code>, but that can be
+changed via the <code>core.hooksPath</code> configuration variable (see
+<a href="git-config.html">git-config(1)</a>).</p></div>
+<div class="paragraph"><p>Before Git invokes a hook, it changes its working directory to either
+the root of the working tree in a non-bare repository, or to the
+$GIT_DIR in a bare repository.</p></div>
+<div class="paragraph"><p>Hooks can get their arguments via the environment, command-line
+arguments, and stdin. See the documentation for each hook below for
+details.</p></div>
+<div class="paragraph"><p><em>git init</em> may copy hooks to the new repository, depending on its
+configuration. See the "TEMPLATE DIRECTORY" section in
+<a href="git-init.html">git-init(1)</a> for details. When the rest of this document refers
+to "default hooks" it&#8217;s talking about the default template shipped
+with Git.</p></div>
+<div class="paragraph"><p>The currently supported hooks are described below.</p></div>
 </div>
 </div>
 <div class="sect1">
@@ -777,14 +778,14 @@
 <div class="sectionbody">
 <div class="sect2">
 <h3 id="_applypatch_msg">applypatch-msg</h3>
-<div class="paragraph"><p>This hook is invoked by <em>git am</em> script.  It takes a single
+<div class="paragraph"><p>This hook is invoked by <em>git am</em>.  It takes a single
 parameter, the name of the file that holds the proposed commit
-log message.  Exiting with non-zero status causes
-<em>git am</em> to abort before applying the patch.</p></div>
+log message.  Exiting with a non-zero status causes <em>git am</em> to abort
+before applying the patch.</p></div>
 <div class="paragraph"><p>The hook is allowed to edit the message file in place, and can
 be used to normalize the message into some project standard
-format (if the project has one). It can also be used to refuse
-the commit after inspecting the message file.</p></div>
+format. It can also be used to refuse the commit after inspecting
+the message file.</p></div>
 <div class="paragraph"><p>The default <em>applypatch-msg</em> hook, when enabled, runs the
 <em>commit-msg</em> hook, if the latter is enabled.</p></div>
 </div>
@@ -809,10 +810,10 @@
 <div class="sect2">
 <h3 id="_pre_commit">pre-commit</h3>
 <div class="paragraph"><p>This hook is invoked by <em>git commit</em>, and can be bypassed
-with <code>--no-verify</code> option.  It takes no parameter, and is
+with the <code>--no-verify</code> option.  It takes no parameters, and is
 invoked before obtaining the proposed commit log message and
-making a commit.  Exiting with non-zero status from this script
-causes the <em>git commit</em> to abort.</p></div>
+making a commit.  Exiting with a non-zero status from this script
+causes the <em>git commit</em> command to abort before creating a commit.</p></div>
 <div class="paragraph"><p>The default <em>pre-commit</em> hook, when enabled, catches introduction
 of lines with trailing whitespaces and aborts the commit when
 such a line is found.</p></div>
@@ -843,21 +844,21 @@
 <div class="sect2">
 <h3 id="_commit_msg">commit-msg</h3>
 <div class="paragraph"><p>This hook is invoked by <em>git commit</em>, and can be bypassed
-with <code>--no-verify</code> option.  It takes a single parameter, the
+with the <code>--no-verify</code> option.  It takes a single parameter, the
 name of the file that holds the proposed commit log message.
-Exiting with non-zero status causes the <em>git commit</em> to
+Exiting with a non-zero status causes the <em>git commit</em> to
 abort.</p></div>
-<div class="paragraph"><p>The hook is allowed to edit the message file in place, and can
-be used to normalize the message into some project standard
-format (if the project has one). It can also be used to refuse
-the commit after inspecting the message file.</p></div>
+<div class="paragraph"><p>The hook is allowed to edit the message file in place, and can be used
+to normalize the message into some project standard format. It
+can also be used to refuse the commit after inspecting the message
+file.</p></div>
 <div class="paragraph"><p>The default <em>commit-msg</em> hook, when enabled, detects duplicate
 "Signed-off-by" lines, and aborts the commit if one is found.</p></div>
 </div>
 <div class="sect2">
 <h3 id="_post_commit">post-commit</h3>
-<div class="paragraph"><p>This hook is invoked by <em>git commit</em>.  It takes no
-parameter, and is invoked after a commit is made.</p></div>
+<div class="paragraph"><p>This hook is invoked by <em>git commit</em>. It takes no parameters, and is
+invoked after a commit is made.</p></div>
 <div class="paragraph"><p>This hook is meant primarily for notification, and cannot affect
 the outcome of <em>git commit</em>.</p></div>
 </div>
@@ -893,7 +894,7 @@
 if the merge failed due to conflicts.</p></div>
 <div class="paragraph"><p>This hook can be used in conjunction with a corresponding pre-commit hook to
 save and restore any form of metadata associated with the working tree
-(eg: permissions/ownership, ACLS, etc).  See contrib/hooks/setgitperms.perl
+(e.g.: permissions/ownership, ACLS, etc).  See contrib/hooks/setgitperms.perl
 for an example of how to do this.</p></div>
 </div>
 <div class="sect2">
@@ -948,6 +949,14 @@
 <div class="paragraph"><p>Both standard output and standard error output are forwarded to
 <em>git send-pack</em> on the other end, so you can simply <code>echo</code> messages
 for the user.</p></div>
+<div class="paragraph"><p>The number of push options given on the command line of
+<code>git push --push-option=...</code> can be read from the environment
+variable <code>GIT_PUSH_OPTION_COUNT</code>, and the options themselves are
+found in <code>GIT_PUSH_OPTION_0</code>, <code>GIT_PUSH_OPTION_1</code>,&#8230;
+If it is negotiated to not use the push options phase, the
+environment variables will not be set. If the client selects
+to use push options, but doesn&#8217;t transmit any, the count variable
+will be set to zero, <code>GIT_PUSH_OPTION_COUNT=0</code>.</p></div>
 </div>
 <div class="sect2">
 <h3 id="update">update</h3>
@@ -986,9 +995,11 @@
 does not know the entire set of branches, so it would end up
 firing one e-mail per ref when used naively, though.  The
 <a href="#post-receive"><em>post-receive</em></a> hook is more suited to that.</p></div>
-<div class="paragraph"><p>Another use suggested on the mailing list is to use this hook to
-implement access control which is finer grained than the one
-based on filesystem group.</p></div>
+<div class="paragraph"><p>In an environment that restricts the users' access only to git
+commands over the wire, this hook can be used to implement access
+control without relying on filesystem ownership and group
+membership. See <a href="git-shell.html">git-shell(1)</a> for how you might use the login
+shell to restrict the user&#8217;s access to only git commands.</p></div>
 <div class="paragraph"><p>Both standard output and standard error output are forwarded to
 <em>git send-pack</em> on the other end, so you can simply <code>echo</code> messages
 for the user.</p></div>
@@ -1018,6 +1029,14 @@
 a sample script <code>post-receive-email</code> provided in the <code>contrib/hooks</code>
 directory in Git distribution, which implements sending commit
 emails.</p></div>
+<div class="paragraph"><p>The number of push options given on the command line of
+<code>git push --push-option=...</code> can be read from the environment
+variable <code>GIT_PUSH_OPTION_COUNT</code>, and the options themselves are
+found in <code>GIT_PUSH_OPTION_0</code>, <code>GIT_PUSH_OPTION_1</code>,&#8230;
+If it is negotiated to not use the push options phase, the
+environment variables will not be set. If the client selects
+to use push options, but doesn&#8217;t transmit any, the count variable
+will be set to zero, <code>GIT_PUSH_OPTION_COUNT=0</code>.</p></div>
 </div>
 <div class="sect2">
 <h3 id="post-update">post-update</h3>
@@ -1045,6 +1064,32 @@
 for the user.</p></div>
 </div>
 <div class="sect2">
+<h3 id="_push_to_checkout">push-to-checkout</h3>
+<div class="paragraph"><p>This hook is invoked by <em>git-receive-pack</em> on the remote repository,
+which happens when a <em>git push</em> is done on a local repository, when
+the push tries to update the branch that is currently checked out
+and the <code>receive.denyCurrentBranch</code> configuration variable is set to
+<code>updateInstead</code>.  Such a push by default is refused if the working
+tree and the index of the remote repository has any difference from
+the currently checked out commit; when both the working tree and the
+index match the current commit, they are updated to match the newly
+pushed tip of the branch.  This hook is to be used to override the
+default behaviour.</p></div>
+<div class="paragraph"><p>The hook receives the commit with which the tip of the current
+branch is going to be updated.  It can exit with a non-zero status
+to refuse the push (when it does so, it must not modify the index or
+the working tree).  Or it can make any necessary changes to the
+working tree and to the index to bring them to the desired state
+when the tip of the current branch is updated to the new commit, and
+exit with a zero status.</p></div>
+<div class="paragraph"><p>For example, the hook can simply run <code>git read-tree -u -m HEAD "$1"</code>
+in order to emulate <em>git fetch</em> that is run in the reverse direction
+with <code>git push</code>, as the two-tree form of <code>read-tree -u -m</code> is
+essentially the same as <code>git checkout</code> that switches branches while
+keeping the local changes in the working tree that do not interfere
+with the difference between the branches.</p></div>
+</div>
+<div class="sect2">
 <h3 id="_pre_auto_gc">pre-auto-gc</h3>
 <div class="paragraph"><p>This hook is invoked by <em>git gc --auto</em>. It takes no parameter, and
 exiting with non-zero status from this script causes the <em>git gc --auto</em>
@@ -1067,7 +1112,7 @@
 preceding SP is also omitted.  Currently, no commands pass any
 <em>extra-info</em>.</p></div>
 <div class="paragraph"><p>The hook always runs after the automatic note copying (see
-"notes.rewrite.&lt;command&gt;" in <a href="git-config.txt.html">git-config.txt(1)</a>) has happened, and
+"notes.rewrite.&lt;command&gt;" in <a href="git-config.html">git-config(1)</a>) has happened, and
 thus has access to these notes.</p></div>
 <div class="paragraph"><p>The following command-specific comments apply:</p></div>
 <div class="dlist"><dl>
# install githooks.html /usr/share/doc/git-doc/githooks.html
--- /usr/share/doc/git-doc/gitignore.html	2016-03-21 09:24:29.000000000 -0600
+++ gitignore.html	2016-10-15 00:44:18.736075264 -0600
@@ -789,7 +789,7 @@
 <li>
 <p>
 Patterns read from the file specified by the configuration
-   variable <em>core.excludesfile</em>.
+   variable <code>core.excludesFile</code>.
 </p>
 </li>
 </ul></div>
@@ -817,7 +817,7 @@
 Patterns which a user wants Git to
    ignore in all situations (e.g., backup or temporary files generated by
    the user&#8217;s editor of choice) generally go into a file specified by
-   <code>core.excludesfile</code> in the user&#8217;s <code>~/.gitconfig</code>. Its default value is
+   <code>core.excludesFile</code> in the user&#8217;s <code>~/.gitconfig</code>. Its default value is
    $XDG_CONFIG_HOME/git/ignore. If $XDG_CONFIG_HOME is either not set or
    empty, $HOME/.config/git/ignore is used instead.
 </p>
@@ -850,6 +850,12 @@
 </li>
 <li>
 <p>
+Trailing spaces are ignored unless they are quoted with backslash
+   ("<code>\</code>").
+</p>
+</li>
+<li>
+<p>
 An optional prefix "<code>!</code>" which negates the pattern; any
    matching file excluded by a previous pattern will become
    included again. It is not possible to re-include a file if a parent
@@ -936,8 +942,6 @@
 <div class="sectionbody">
 <div class="paragraph"><p>The purpose of gitignore files is to ensure that certain files
 not tracked by Git remain untracked.</p></div>
-<div class="paragraph"><p>To ignore uncommitted changes in a file that is already tracked,
-use <em>git update-index &#45;&#45;assume-unchanged</em>.</p></div>
 <div class="paragraph"><p>To stop tracking a file that is currently tracked, use
 <em>git rm --cached</em>.</p></div>
 </div>
@@ -1001,7 +1005,6 @@
 <h2 id="_see_also">SEE ALSO</h2>
 <div class="sectionbody">
 <div class="paragraph"><p><a href="git-rm.html">git-rm(1)</a>,
-<a href="git-update-index.html">git-update-index(1)</a>,
 <a href="gitrepository-layout.html">gitrepository-layout(5)</a>,
 <a href="git-check-ignore.html">git-check-ignore(1)</a></p></div>
 </div>
# install gitignore.html /usr/share/doc/git-doc/gitignore.html
--- /usr/share/doc/git-doc/gitk.html	2016-03-21 09:24:29.000000000 -0600
+++ gitk.html	2016-10-15 00:44:15.812075209 -0600
@@ -771,7 +771,7 @@
 gitk-specific options.</p></div>
 <div class="paragraph"><p>gitk generally only understands options with arguments in the
 <em>sticked</em> form (see <a href="gitcli.html">gitcli(7)</a>) due to limitations in the
-command line parser.</p></div>
+command-line parser.</p></div>
 <div class="sect2">
 <h3 id="_rev_list_options_and_arguments">rev-list options and arguments</h3>
 <div class="paragraph"><p>This manual page describes only the most frequently used options.  See
@@ -843,7 +843,7 @@
 </dt>
 <dd>
 <p>
-        Mark which side of a symmetric diff a commit is reachable
+        Mark which side of a symmetric difference a commit is reachable
         from.  Commits from the left side are prefixed with a <code>&lt;</code>
         symbol and those from the right with a <code>&gt;</code> symbol.
 </p>
@@ -863,7 +863,7 @@
 </dt>
 <dd>
 <p>
-        Additional option to <em>--full-history</em> to remove some needless
+        Additional option to <code>--full-history</code> to remove some needless
         merges from the resulting history, as there are no selected
         commits contributing to this merge.  (See "History
         simplification" in <a href="git-log.html">git-log(1)</a> for a more detailed
@@ -888,12 +888,12 @@
 -L&lt;start&gt;,&lt;end&gt;:&lt;file&gt;
 </dt>
 <dt class="hdlist1">
--L:&lt;regex&gt;:&lt;file&gt;
+-L:&lt;funcname&gt;:&lt;file&gt;
 </dt>
 <dd>
 <p>
         Trace the evolution of the line range given by "&lt;start&gt;,&lt;end&gt;"
-        (or the funcname regex &lt;regex&gt;) within the &lt;file&gt;.  You may
+        (or the function name regex &lt;funcname&gt;) within the &lt;file&gt;.  You may
         not give any pathspec limiters.  This is currently limited to
         a walk starting from a single revision, i.e., you may only
         give zero or one positive revision arguments.
@@ -930,11 +930,12 @@
 of lines before or after the line given by &lt;start&gt;.</p></div>
 </li>
 </ul></div>
-<div class="paragraph"><p>If &#8220;:&lt;regex&gt;&#8221; is given in place of &lt;start&gt; and &lt;end&gt;, it denotes the range
-from the first funcname line that matches &lt;regex&gt;, up to the next
-funcname line. &#8220;:&lt;regex&gt;&#8221; searches from the end of the previous <code>-L</code> range,
-if any, otherwise from the start of file.
-&#8220;^:&lt;regex&gt;&#8221; searches from the start of file.</p></div>
+<div class="paragraph"><p>If &#8220;:&lt;funcname&gt;&#8221; is given in place of &lt;start&gt; and &lt;end&gt;, it is a
+regular expression that denotes the range from the first funcname line
+that matches &lt;funcname&gt;, up to the next funcname line. &#8220;:&lt;funcname&gt;&#8221;
+searches from the end of the previous <code>-L</code> range, if any, otherwise
+from the start of file. &#8220;^:&lt;funcname&gt;&#8221; searches from the start of
+file.</p></div>
 </dd>
 <dt class="hdlist1">
 &lt;revision range&gt;
@@ -1028,8 +1029,22 @@
 <div class="sect1">
 <h2 id="_files">Files</h2>
 <div class="sectionbody">
-<div class="paragraph"><p>Gitk creates the .gitk file in your $HOME directory to store preferences
-such as display options, font, and colors.</p></div>
+<div class="paragraph"><p>User configuration and preferences are stored at:</p></div>
+<div class="ulist"><ul>
+<li>
+<p>
+<em>$XDG_CONFIG_HOME/git/gitk</em> if it exists, otherwise
+</p>
+</li>
+<li>
+<p>
+<em>$HOME/.gitk</em> if it exists
+</p>
+</li>
+</ul></div>
+<div class="paragraph"><p>If neither of the above exist then <em>$XDG_CONFIG_HOME/git/gitk</em> is created and
+used by default. If <em>$XDG_CONFIG_HOME</em> is not set it defaults to
+<em>$HOME/.config</em> in all cases.</p></div>
 </div>
 </div>
 <div class="sect1">
# install gitk.html /usr/share/doc/git-doc/gitk.html
--- /usr/share/doc/git-doc/gitmodules.html	2016-03-21 09:24:29.000000000 -0600
+++ gitmodules.html	2016-10-15 00:44:18.996075269 -0600
@@ -758,7 +758,7 @@
 of <a href="git-config.html">git-config(1)</a>.</p></div>
 <div class="paragraph"><p>The file contains one subsection per submodule, and the subsection value
 is the name of the submodule. The name is set to the path where the
-submodule has been added unless it was customized with the <em>--name</em>
+submodule has been added unless it was customized with the <code>--name</code>
 option of <em>git submodule add</em>. Each submodule section also contains the
 following required keys:</p></div>
 <div class="dlist"><dl>
@@ -792,21 +792,16 @@
 </dt>
 <dd>
 <p>
-        Defines what to do when the submodule is updated by the superproject.
-        If <em>checkout</em> (the default), the new commit specified in the
-        superproject will be checked out in the submodule on a detached HEAD.
-        If <em>rebase</em>, the current branch of the submodule will be rebased onto
-        the commit specified in the superproject. If <em>merge</em>, the commit
-        specified in the superproject will be merged into the current branch
-        in the submodule.
-        If <em>none</em>, the submodule with name <code>$name</code> will not be updated
-        by default.
+        Defines the default update procedure for the named submodule,
+        i.e. how the submodule is updated by "git submodule update"
+        command in the superproject. This is only used by <code>git
+        submodule init</code> to initialize the configuration variable of
+        the same name. Allowed values here are <em>checkout</em>, <em>rebase</em>,
+        <em>merge</em> or <em>none</em>. See description of <em>update</em> command in
+        <a href="git-submodule.html">git-submodule(1)</a> for their meaning. Note that the
+        <em>!command</em> form is intentionally ignored here for security
+        reasons.
 </p>
-<div class="literalblock">
-<div class="content">
-<pre><code>This config option is overridden if 'git submodule update' is given
-the '--merge', '--rebase' or '--checkout' options.</code></pre>
-</div></div>
 </dd>
 <dt class="hdlist1">
 submodule.&lt;name&gt;.branch
@@ -838,7 +833,9 @@
 <p>
         Defines under what circumstances "git status" and the diff family show
         a submodule as modified. When set to "all", it will never be considered
-        modified, "dirty" will ignore all changes to the submodules work tree and
+        modified (but will nonetheless show up in the output of status and
+        commit when it has been staged), "dirty" will ignore all changes
+        to the submodules work tree and
         takes only differences between the HEAD of the submodule and the commit
         recorded in the superproject into account. "untracked" will additionally
         let submodules with modified tracked files in their work tree show up.
@@ -852,6 +849,16 @@
         affected by this setting.
 </p>
 </dd>
+<dt class="hdlist1">
+submodule.&lt;name&gt;.shallow
+</dt>
+<dd>
+<p>
+        When set to true, a clone of this submodule will be performed as a
+        shallow clone unless the user explicitly asks for a non-shallow
+        clone.
+</p>
+</dd>
 </dl></div>
 </div>
 </div>
# install gitmodules.html /usr/share/doc/git-doc/gitmodules.html
--- /usr/share/doc/git-doc/gitremote-helpers.html	2016-03-21 09:24:29.000000000 -0600
+++ gitremote-helpers.html	2016-10-15 00:44:16.408075221 -0600
@@ -785,7 +785,7 @@
 it is either the name of a configured remote or a URL. The second
 argument specifies a URL; it is usually of the form
 <em>&lt;transport&gt;://&lt;address&gt;</em>, but any arbitrary string is possible.
-The <em>GIT_DIR</em> environment variable is set up for the remote helper
+The <code>GIT_DIR</code> environment variable is set up for the remote helper
 and can be used to determine where to store additional data or from
 which directory to invoke auxiliary Git commands.</p></div>
 <div class="paragraph"><p>When Git encounters a URL of the form <em>&lt;transport&gt;://&lt;address&gt;</em>, where
@@ -800,10 +800,10 @@
 argument. If such a URL is encountered directly on the command line,
 the first argument is <em>&lt;address&gt;</em>, and if it is encountered in a
 configured remote, the first argument is the name of that remote.</p></div>
-<div class="paragraph"><p>Additionally, when a configured remote has <em>remote.&lt;name&gt;.vcs</em> set to
+<div class="paragraph"><p>Additionally, when a configured remote has <code>remote.&lt;name&gt;.vcs</code> set to
 <em>&lt;transport&gt;</em>, Git explicitly invokes <em>git remote-&lt;transport&gt;</em> with
 <em>&lt;name&gt;</em> as the first argument. If set, the second argument is
-<em>remote.&lt;name&gt;.url</em>; otherwise, the second argument is omitted.</p></div>
+<code>remote.&lt;name&gt;.url</code>; otherwise, the second argument is omitted.</p></div>
 </div>
 </div>
 <div class="sect1">
@@ -1000,7 +1000,7 @@
 <p>
         This modifies the <em>export</em> capability, instructing Git to dump the
         internal marks table to &lt;file&gt; when complete. For details,
-        read up on <em>--export-marks=&lt;file&gt;</em> in <a href="git-fast-export.html">git-fast-export(1)</a>.
+        read up on <code>--export-marks=&lt;file&gt;</code> in <a href="git-fast-export.html">git-fast-export(1)</a>.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1010,7 +1010,7 @@
 <p>
         This modifies the <em>export</em> capability, instructing Git to load the
         marks specified in &lt;file&gt; before processing any input. For details,
-        read up on <em>--import-marks=&lt;file&gt;</em> in <a href="git-fast-export.html">git-fast-export(1)</a>.
+        read up on <code>--import-marks=&lt;file&gt;</code> in <a href="git-fast-export.html">git-fast-export(1)</a>.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1019,8 +1019,8 @@
 <dd>
 <p>
         This modifies the <em>export</em> capability, instructing Git to pass
-        <em>--signed-tags=verbatim</em> to <a href="git-fast-export.html">git-fast-export(1)</a>.  In the
-        absence of this capability, Git will use <em>--signed-tags=warn-strip</em>.
+        <code>--signed-tags=verbatim</code> to <a href="git-fast-export.html">git-fast-export(1)</a>.  In the
+        absence of this capability, Git will use <code>--signed-tags=warn-strip</code>.
 </p>
 </dd>
 </dl></div>
@@ -1122,7 +1122,7 @@
         is followed by a blank line). For example, the following would
         be two batches of <em>push</em>, the first asking the remote-helper
         to push the local ref <em>master</em> to the remote ref <em>master</em> and
-        the local <em>HEAD</em> to the remote <em>branch</em>, and the second
+        the local <code>HEAD</code> to the remote <em>branch</em>, and the second
         asking to push ref <em>foo</em> to ref <em>bar</em> (forced update requested
         by the <em>+</em>).
 </p>
@@ -1307,6 +1307,15 @@
 </p>
 </dd>
 <dt class="hdlist1">
+<em>option force</em> {<em>true</em>|<em>false</em>}
+</dt>
+<dd>
+<p>
+        Request the helper to perform a force update.  Defaults to
+        <em>false</em>.
+</p>
+</dd>
+<dt class="hdlist1">
 <em>option cloning {'true</em>|<em>false</em>}
 </dt>
 <dd>
@@ -1323,6 +1332,14 @@
         Allow to extend .git/shallow if the new refs require it.
 </p>
 </dd>
+<dt class="hdlist1">
+<em>option pushcert {'true</em>|<em>false</em>}
+</dt>
+<dd>
+<p>
+        GPG sign pushes.
+</p>
+</dd>
 </dl></div>
 </div>
 </div>
@@ -1330,7 +1347,10 @@
 <h2 id="_see_also">SEE ALSO</h2>
 <div class="sectionbody">
 <div class="paragraph"><p><a href="git-remote.html">git-remote(1)</a></p></div>
+<div class="paragraph"><p><a href="git-remote-ext.html">git-remote-ext(1)</a></p></div>
+<div class="paragraph"><p><a href="git-remote-fd.html">git-remote-fd(1)</a></p></div>
 <div class="paragraph"><p><a href="git-remote-testgit.html">git-remote-testgit(1)</a></p></div>
+<div class="paragraph"><p><a href="git-fast-import.html">git-fast-import(1)</a></p></div>
 </div>
 </div>
 <div class="sect1">
# install gitremote-helpers.html /usr/share/doc/git-doc/gitremote-helpers.html
--- /usr/share/doc/git-doc/gitrepository-layout.html	2016-03-21 09:24:29.000000000 -0600
+++ gitrepository-layout.html	2016-10-15 00:44:19.412075277 -0600
@@ -805,6 +805,8 @@
 <code>objects/info/alternates</code> points at the object stores it
 borrows from.
 </p>
+<div class="paragraph"><p>This directory is ignored if $GIT_COMMON_DIR is set and
+"$GIT_COMMON_DIR/objects" will be used instead.</p></div>
 </li>
 </ol></div>
 </dd>
@@ -887,7 +889,8 @@
         References are stored in subdirectories of this
         directory.  The <em>git prune</em> command knows to preserve
         objects reachable from refs found in this directory and
-        its subdirectories.
+        its subdirectories. This directory is ignored if $GIT_COMMON_DIR
+        is set and "$GIT_COMMON_DIR/refs" will be used instead.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -934,7 +937,8 @@
 <p>
         records the same information as refs/heads/, refs/tags/,
         and friends record in a more efficient way.  See
-        <a href="git-pack-refs.html">git-pack-refs(1)</a>.
+        <a href="git-pack-refs.html">git-pack-refs(1)</a>. This file is ignored if $GIT_COMMON_DIR
+        is set and "$GIT_COMMON_DIR/packed-refs" will be used instead.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -959,6 +963,16 @@
 for details.</p></div>
 </dd>
 <dt class="hdlist1">
+config
+</dt>
+<dd>
+<p>
+        Repository specific configuration file. This file is ignored
+        if $GIT_COMMON_DIR is set and "$GIT_COMMON_DIR/config" will be
+        used instead.
+</p>
+</dd>
+<dt class="hdlist1">
 branches
 </dt>
 <dd>
@@ -969,7 +983,9 @@
         <em>name</em> can be given to these commands in place of
         <em>repository</em> argument.  See the REMOTES section in
         <a href="git-fetch.html">git-fetch(1)</a> for details.  This mechanism is legacy
-        and not likely to be found in modern repositories.
+        and not likely to be found in modern repositories. This
+        directory is ignored if $GIT_COMMON_DIR is set and
+        "$GIT_COMMON_DIR/branches" will be used instead.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -983,7 +999,8 @@
         default.  To enable, the <code>.sample</code> suffix has to be
         removed from the filename by renaming.
         Read <a href="githooks.html">githooks(5)</a> for more details about
-        each hook.
+        each hook. This directory is ignored if $GIT_COMMON_DIR is set
+        and "$GIT_COMMON_DIR/hooks" will be used instead.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -996,12 +1013,22 @@
 </p>
 </dd>
 <dt class="hdlist1">
+sharedindex.&lt;SHA-1&gt;
+</dt>
+<dd>
+<p>
+        The shared index part, to be referenced by $GIT_DIR/index and
+        other temporary index files. Only valid in split index mode.
+</p>
+</dd>
+<dt class="hdlist1">
 info
 </dt>
 <dd>
 <p>
         Additional information about the repository is recorded
-        in this directory.
+        in this directory. This directory is ignored if $GIT_COMMON_DIR
+        is set and "$GIT_COMMON_DIR/index" will be used instead.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1031,6 +1058,9 @@
         listing their 40-byte hexadecimal object names separated
         by a space and terminated by a newline.
 </p>
+<div class="paragraph"><p>Note that the grafts mechanism is outdated and can lead to problems
+transferring objects between repositories; see <a href="git-replace.html">git-replace(1)</a>
+for a more flexible and robust system to do the same thing.</p></div>
 </dd>
 <dt class="hdlist1">
 info/exclude
@@ -1062,7 +1092,9 @@
         when interacting with remote repositories via <em>git fetch</em>,
         <em>git pull</em> and <em>git push</em> commands.  See the REMOTES section
         in <a href="git-fetch.html">git-fetch(1)</a> for details.  This mechanism is legacy
-        and not likely to be found in modern repositories.
+        and not likely to be found in modern repositories. This
+        directory is ignored if $GIT_COMMON_DIR is set and
+        "$GIT_COMMON_DIR/remotes" will be used instead.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1070,9 +1102,10 @@
 </dt>
 <dd>
 <p>
-        Records of changes made to refs are stored in this
-        directory.  See <a href="git-update-ref.html">git-update-ref(1)</a>
-        for more information.
+        Records of changes made to refs are stored in this directory.
+        See <a href="git-update-ref.html">git-update-ref(1)</a> for more information. This
+        directory is ignored if $GIT_COMMON_DIR is set and
+        "$GIT_COMMON_DIR/logs" will be used instead.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1098,7 +1131,21 @@
 <p>
         This is similar to <code>info/grafts</code> but is internally used
         and maintained by shallow clone mechanism.  See <code>--depth</code>
-        option to <a href="git-clone.html">git-clone(1)</a> and <a href="git-fetch.html">git-fetch(1)</a>.
+        option to <a href="git-clone.html">git-clone(1)</a> and <a href="git-fetch.html">git-fetch(1)</a>. This
+        file is ignored if $GIT_COMMON_DIR is set and
+        "$GIT_COMMON_DIR/shallow" will be used instead.
+</p>
+</dd>
+<dt class="hdlist1">
+commondir
+</dt>
+<dd>
+<p>
+        If this file exists, $GIT_COMMON_DIR (see <a href="git.html">git(1)</a>) will
+        be set to the path specified in this file if it is not
+        explicitly set. If the specified path is relative, it is
+        relative to $GIT_DIR. The repository with commondir is
+        incomplete without the repository pointed by "commondir".
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1109,6 +1156,52 @@
         Contains the git-repositories of the submodules.
 </p>
 </dd>
+<dt class="hdlist1">
+worktrees
+</dt>
+<dd>
+<p>
+        Contains administrative data for linked
+        working trees. Each subdirectory contains the working tree-related
+        part of a linked working tree. This directory is ignored if
+        $GIT_COMMON_DIR is set, in which case
+        "$GIT_COMMON_DIR/worktrees" will be used instead.
+</p>
+</dd>
+<dt class="hdlist1">
+worktrees/&lt;id&gt;/gitdir
+</dt>
+<dd>
+<p>
+        A text file containing the absolute path back to the .git file
+        that points to here. This is used to check if the linked
+        repository has been manually removed and there is no need to
+        keep this directory any more. The mtime of this file should be
+        updated every time the linked repository is accessed.
+</p>
+</dd>
+<dt class="hdlist1">
+worktrees/&lt;id&gt;/locked
+</dt>
+<dd>
+<p>
+        If this file exists, the linked working tree may be on a
+        portable device and not available. The presence of this file
+        prevents <code>worktrees/&lt;id&gt;</code> from being pruned either automatically
+        or manually by <code>git worktree prune</code>. The file may contain a string
+        explaining why the repository is locked.
+</p>
+</dd>
+<dt class="hdlist1">
+worktrees/&lt;id&gt;/link
+</dt>
+<dd>
+<p>
+        If this file exists, it is a hard link to the linked .git
+        file. It is used to detect if the linked repository is
+        manually removed.
+</p>
+</dd>
 </dl></div>
 </div>
 </div>
# install gitrepository-layout.html /usr/share/doc/git-doc/gitrepository-layout.html
--- /usr/share/doc/git-doc/gitrevisions.html	2016-03-21 09:24:29.000000000 -0600
+++ gitrevisions.html	2016-10-15 00:44:24.868075379 -0600
@@ -755,9 +755,9 @@
 <div class="sectionbody">
 <div class="paragraph"><p>Many Git commands take revision parameters as arguments. Depending on
 the command, they denote a specific commit or, for commands which
-walk the revision graph (such as <a href="git-log.html">git-log(1)</a>), all commits which can
-be reached from that commit. In the latter case one can also specify a
-range of revisions explicitly.</p></div>
+walk the revision graph (such as <a href="git-log.html">git-log(1)</a>), all commits which are
+reachable from that commit. For commands that walk the revision graph one can
+also specify a range of revisions explicitly.</p></div>
 <div class="paragraph"><p>In addition, some Git commands (such as <a href="git-show.html">git-show(1)</a>) also take
 revision parameters which denote other objects than commits, e.g. blobs
 ("files") or trees ("directories of files").</p></div>
@@ -810,8 +810,8 @@
 <li>
 <p>
 If <em>$GIT_DIR/&lt;refname&gt;</em> exists, that is what you mean (this is usually
-    useful only for <em>HEAD</em>, <em>FETCH_HEAD</em>, <em>ORIG_HEAD</em>, <em>MERGE_HEAD</em>
-    and <em>CHERRY_PICK_HEAD</em>);
+    useful only for <code>HEAD</code>, <code>FETCH_HEAD</code>, <code>ORIG_HEAD</code>, <code>MERGE_HEAD</code>
+    and <code>CHERRY_PICK_HEAD</code>);
 </p>
 </li>
 <li>
@@ -838,16 +838,16 @@
 <p>
 otherwise, <em>refs/remotes/&lt;refname&gt;/HEAD</em> if it exists.
 </p>
-<div class="paragraph"><p><em>HEAD</em> names the commit on which you based the changes in the working tree.
-<em>FETCH_HEAD</em> records the branch which you fetched from a remote repository
+<div class="paragraph"><p><code>HEAD</code> names the commit on which you based the changes in the working tree.
+<code>FETCH_HEAD</code> records the branch which you fetched from a remote repository
 with your last <code>git fetch</code> invocation.
-<em>ORIG_HEAD</em> is created by commands that move your <em>HEAD</em> in a drastic
-way, to record the position of the <em>HEAD</em> before their operation, so that
+<code>ORIG_HEAD</code> is created by commands that move your <code>HEAD</code> in a drastic
+way, to record the position of the <code>HEAD</code> before their operation, so that
 you can easily change the tip of the branch back to the state before you ran
 them.
-<em>MERGE_HEAD</em> records the commit(s) which you are merging into your branch
+<code>MERGE_HEAD</code> records the commit(s) which you are merging into your branch
 when you run <code>git merge</code>.
-<em>CHERRY_PICK_HEAD</em> records the commit which you are cherry-picking
+<code>CHERRY_PICK_HEAD</code> records the commit which you are cherry-picking
 when you run <code>git cherry-pick</code>.</p></div>
 <div class="paragraph"><p>Note that any of the <em>refs/*</em> cases above may come either from
 the <em>$GIT_DIR/refs</em> directory or from the <em>$GIT_DIR/packed-refs</em> file.
@@ -861,7 +861,7 @@
 </dt>
 <dd>
 <p>
-  <em>@</em> alone is a shortcut for <em>HEAD</em>.
+  <em>@</em> alone is a shortcut for <code>HEAD</code>.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -878,7 +878,7 @@
   existing log (<em>$GIT_DIR/logs/&lt;ref&gt;</em>). Note that this looks up the state
   of your <strong>local</strong> ref at a given time; e.g., what was in your local
   <em>master</em> branch last week. If you want to look at commits made during
-  certain times, see <em>--since</em> and <em>--until</em>.
+  certain times, see <code>--since</code> and <code>--until</code>.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -921,10 +921,40 @@
 <p>
   The suffix <em>@{upstream}</em> to a branchname (short form <em>&lt;branchname&gt;@{u}</em>)
   refers to the branch that the branch specified by branchname is set to build on
-  top of.  A missing branchname defaults to the current one.
+  top of (configured with <code>branch.&lt;name&gt;.remote</code> and
+  <code>branch.&lt;name&gt;.merge</code>).  A missing branchname defaults to the
+  current one.
 </p>
 </dd>
 <dt class="hdlist1">
+<em>&lt;branchname&gt;@{push}</em>, e.g. <em>master@{push}</em>, <em>@{push}</em>
+</dt>
+<dd>
+<p>
+  The suffix <em>@{push}</em> reports the branch "where we would push to" if
+  <code>git push</code> were run while <code>branchname</code> was checked out (or the current
+  <code>HEAD</code> if no branchname is specified). Since our push destination is
+  in a remote repository, of course, we report the local tracking branch
+  that corresponds to that branch (i.e., something in <em>refs/remotes/</em>).
+</p>
+<div class="paragraph"><p>Here&#8217;s an example to make it more clear:</p></div>
+<div class="listingblock">
+<div class="content">
+<pre><code>$ git config push.default current
+$ git config remote.pushdefault myfork
+$ git checkout -b mybranch origin/master
+
+$ git rev-parse --symbolic-full-name @{upstream}
+refs/remotes/origin/master
+
+$ git rev-parse --symbolic-full-name @{push}
+refs/remotes/myfork/mybranch</code></pre>
+</div></div>
+<div class="paragraph"><p>Note in the example that we set up a triangular workflow, where we pull
+from one location and push to another. In a non-triangular workflow,
+<em>@{push}</em> is the same as <em>@{upstream}</em>, and there is no need for it.</p></div>
+</dd>
+<dt class="hdlist1">
 <em>&lt;rev&gt;&#94;</em>, e.g. <em>HEAD&#94;, v1.5.1&#94;0</em>
 </dt>
 <dd>
@@ -1004,11 +1034,12 @@
   A colon, followed by a slash, followed by a text, names
   a commit whose commit message matches the specified regular expression.
   This name returns the youngest matching commit which is
-  reachable from any ref.  If the commit message starts with a
-  <em>!</em> you have to repeat that;  the special sequence <em>:/!</em>,
-  followed by something else than <em>!</em>, is reserved for now.
-  The regular expression can match any part of the commit message. To
-  match messages starting with a string, one can use e.g. <em>:/^foo</em>.
+  reachable from any ref. The regular expression can match any part of the
+  commit message. To match messages starting with a string, one can use
+  e.g. <em>:/^foo</em>. The special sequence <em>:/!</em> is reserved for modifiers to what
+  is matched. <em>:/!-foo</em> performs a negative match, while <em>:/!!foo</em> matches a
+  literal <em>!</em> character, followed by <em>foo</em>. Any other sequence beginning with
+  <em>:/!</em> is reserved for now.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1078,42 +1109,88 @@
 <h2 id="_specifying_ranges">SPECIFYING RANGES</h2>
 <div class="sectionbody">
 <div class="paragraph"><p>History traversing commands such as <code>git log</code> operate on a set
-of commits, not just a single commit.  To these commands,
-specifying a single revision with the notation described in the
-previous section means the set of commits reachable from that
-commit, following the commit ancestry chain.</p></div>
-<div class="paragraph"><p>To exclude commits reachable from a commit, a prefix <em>&#94;</em>
-notation is used.  E.g. <em>&#94;r1 r2</em> means commits reachable
-from <em>r2</em> but exclude the ones reachable from <em>r1</em>.</p></div>
-<div class="paragraph"><p>This set operation appears so often that there is a shorthand
-for it.  When you have two commits <em>r1</em> and <em>r2</em> (named according
-to the syntax explained in SPECIFYING REVISIONS above), you can ask
-for commits that are reachable from r2 excluding those that are reachable
-from r1 by <em>&#94;r1 r2</em> and it can be written as <em>r1..r2</em>.</p></div>
-<div class="paragraph"><p>A similar notation <em>r1...r2</em> is called symmetric difference
-of <em>r1</em> and <em>r2</em> and is defined as
-<em>r1 r2 --not $(git merge-base --all r1 r2)</em>.
-It is the set of commits that are reachable from either one of
-<em>r1</em> or <em>r2</em> but not from both.</p></div>
-<div class="paragraph"><p>In these two shorthands, you can omit one end and let it default to HEAD.
+of commits, not just a single commit.</p></div>
+<div class="paragraph"><p>For these commands,
+specifying a single revision, using the notation described in the
+previous section, means the set of commits <code>reachable</code> from the given
+commit.</p></div>
+<div class="paragraph"><p>A commit&#8217;s reachable set is the commit itself and the commits in
+its ancestry chain.</p></div>
+<div class="sect2">
+<h3 id="_commit_exclusions">Commit Exclusions</h3>
+<div class="dlist"><dl>
+<dt class="hdlist1">
+<em>&#94;&lt;rev&gt;</em> (caret) Notation
+</dt>
+<dd>
+<p>
+ To exclude commits reachable from a commit, a prefix <em>&#94;</em>
+ notation is used.  E.g. <em>&#94;r1 r2</em> means commits reachable
+ from <em>r2</em> but exclude the ones reachable from <em>r1</em> (i.e. <em>r1</em> and
+ its ancestors).
+</p>
+</dd>
+</dl></div>
+</div>
+<div class="sect2">
+<h3 id="_dotted_range_notations">Dotted Range Notations</h3>
+<div class="dlist"><dl>
+<dt class="hdlist1">
+The <em>..</em> (two-dot) Range Notation
+</dt>
+<dd>
+<p>
+ The <em>&#94;r1 r2</em> set operation appears so often that there is a shorthand
+ for it.  When you have two commits <em>r1</em> and <em>r2</em> (named according
+ to the syntax explained in SPECIFYING REVISIONS above), you can ask
+ for commits that are reachable from r2 excluding those that are reachable
+ from r1 by <em>&#94;r1 r2</em> and it can be written as <em>r1..r2</em>.
+</p>
+</dd>
+<dt class="hdlist1">
+The <em>&#8230;</em> (three dot) Symmetric Difference Notation
+</dt>
+<dd>
+<p>
+ A similar notation <em>r1...r2</em> is called symmetric difference
+ of <em>r1</em> and <em>r2</em> and is defined as
+ <em>r1 r2 --not $(git merge-base --all r1 r2)</em>.
+ It is the set of commits that are reachable from either one of
+ <em>r1</em> (left side) or <em>r2</em> (right side) but not from both.
+</p>
+</dd>
+</dl></div>
+<div class="paragraph"><p>In these two shorthand notations, you can omit one end and let it default to HEAD.
 For example, <em>origin..</em> is a shorthand for <em>origin..HEAD</em> and asks "What
 did I do since I forked from the origin branch?"  Similarly, <em>..origin</em>
 is a shorthand for <em>HEAD..origin</em> and asks "What did the origin do since
 I forked from them?"  Note that <em>..</em> would mean <em>HEAD..HEAD</em> which is an
 empty range that is both reachable and unreachable from HEAD.</p></div>
-<div class="paragraph"><p>Two other shorthands for naming a set that is formed by a commit
-and its parent commits exist.  The <em>r1&#94;@</em> notation means all
-parents of <em>r1</em>.  <em>r1&#94;!</em> includes commit <em>r1</em> but excludes
-all of its parents.</p></div>
-<div class="paragraph"><p>To summarize:</p></div>
+</div>
+<div class="sect2">
+<h3 id="_other_lt_rev_gt_94_parent_shorthand_notations">Other &lt;rev&gt;&#94; Parent Shorthand Notations</h3>
+<div class="paragraph"><p>Two other shorthands exist, particularly useful for merge commits,
+for naming a set that is formed by a commit and its parent commits.</p></div>
+<div class="paragraph"><p>The <em>r1&#94;@</em> notation means all parents of <em>r1</em>.</p></div>
+<div class="paragraph"><p>The <em>r1&#94;!</em> notation includes commit <em>r1</em> but excludes all of its parents.
+By itself, this notation denotes the single commit <em>r1</em>.</p></div>
+<div class="paragraph"><p>While <em>&lt;rev&gt;&#94;&lt;n&gt;</em> was about specifying a single commit parent, these
+two notations consider all its parents. For example you can say
+<em>HEAD&#94;2&#94;@</em>, however you cannot say <em>HEAD&#94;@&#94;2</em>.</p></div>
+</div>
+</div>
+</div>
+<div class="sect1">
+<h2 id="_revision_range_summary">Revision Range Summary</h2>
+<div class="sectionbody">
 <div class="dlist"><dl>
 <dt class="hdlist1">
 <em>&lt;rev&gt;</em>
 </dt>
 <dd>
 <p>
-        Include commits that are reachable from (i.e. ancestors of)
-        &lt;rev&gt;.
+        Include commits that are reachable from &lt;rev&gt; (i.e. &lt;rev&gt; and its
+        ancestors).
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1121,8 +1198,8 @@
 </dt>
 <dd>
 <p>
-        Exclude commits that are reachable from (i.e. ancestors of)
-        &lt;rev&gt;.
+        Exclude commits that are reachable from &lt;rev&gt; (i.e. &lt;rev&gt; and its
+        ancestors).
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1132,7 +1209,7 @@
 <p>
         Include commits that are reachable from &lt;rev2&gt; but exclude
         those that are reachable from &lt;rev1&gt;.  When either &lt;rev1&gt; or
-        &lt;rev2&gt; is omitted, it defaults to <em>HEAD</em>.
+        &lt;rev2&gt; is omitted, it defaults to <code>HEAD</code>.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1142,7 +1219,7 @@
 <p>
         Include commits that are reachable from either &lt;rev1&gt; or
         &lt;rev2&gt; but exclude those that are reachable from both.  When
-        either &lt;rev1&gt; or &lt;rev2&gt; is omitted, it defaults to <em>HEAD</em>.
+        either &lt;rev1&gt; or &lt;rev2&gt; is omitted, it defaults to <code>HEAD</code>.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1166,20 +1243,31 @@
 </p>
 </dd>
 </dl></div>
-<div class="paragraph"><p>Here are a handful of examples:</p></div>
+<div class="paragraph"><p>Here are a handful of examples using the Loeliger illustration above,
+with each step in the notation&#8217;s expansion and selection carefully
+spelt out:</p></div>
 <div class="literalblock">
 <div class="content">
-<pre><code>D                G H D
-D F              G H I J D F
-^G D             H D
-^D B             E I J F B
-B..C             C
-B...C            G H D E B C
-^D B C           E I J F B C
-C                I J F C
-C^@              I J F
-C^!              C
-F^! D            G H D F</code></pre>
+<pre><code>Args   Expanded arguments    Selected commits
+D                            G H D
+D F                          G H I J D F
+^G D                         H D
+^D B                         E I J F B
+^D B C                       E I J F B C
+C                            I J F C
+B..C   = ^B C                C
+B...C  = B ^F C              G H D E B C
+C^@    = C^1
+       = F                   I J F
+B^@    = B^1 B^2 B^3
+       = D E F               D G H E F I J
+C^!    = C ^C^@
+       = C ^C^1
+       = C ^F                C
+B^!    = B ^B^@
+       = B ^B^1 ^B^2 ^B^3
+       = B ^D ^E ^F          B
+F^! D  = F ^I ^J D           G H D F</code></pre>
 </div></div>
 </div>
 </div>
# install gitrevisions.html /usr/share/doc/git-doc/gitrevisions.html
--- /usr/share/doc/git-doc/gittutorial-2.html	2016-03-21 09:24:29.000000000 -0600
+++ gittutorial-2.html	2016-10-15 00:44:25.296075387 -0600
@@ -1100,17 +1100,17 @@
 <div class="listingblock">
 <div class="content">
 <pre><code>$ git status
-# On branch master
-# Changes to be committed:
-#   (use "git reset HEAD &lt;file&gt;..." to unstage)
-#
-#       new file: closing.txt
-#
-# Changes not staged for commit:
-#   (use "git add &lt;file&gt;..." to update what will be committed)
-#
-#       modified: file.txt
-#</code></pre>
+On branch master
+Changes to be committed:
+  (use "git reset HEAD &lt;file&gt;..." to unstage)
+
+        new file:   closing.txt
+
+Changes not staged for commit:
+  (use "git add &lt;file&gt;..." to update what will be committed)
+  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
+
+        modified:   file.txt</code></pre>
 </div></div>
 <div class="paragraph"><p>Since the current state of closing.txt is cached in the index file,
 it is listed as "Changes to be committed".  Since file.txt has
@@ -1133,7 +1133,7 @@
 <div class="sectionbody">
 <div class="paragraph"><p>At this point you should know everything necessary to read the man
 pages for any of the git commands; one good place to start would be
-with the commands mentioned in <a href="everyday.html">Everyday Git</a>.  You
+with the commands mentioned in <a href="giteveryday.html">giteveryday(7)</a>.  You
 should be able to find any unknown jargon in <a href="gitglossary.html">gitglossary(7)</a>.</p></div>
 <div class="paragraph"><p>The <a href="user-manual.html">Git User&#8217;s Manual</a> provides a more
 comprehensive introduction to Git.</p></div>
@@ -1155,7 +1155,7 @@
 <a href="gitcore-tutorial.html">gitcore-tutorial(7)</a>,
 <a href="gitglossary.html">gitglossary(7)</a>,
 <a href="git-help.html">git-help(1)</a>,
-<a href="everyday.html">Everyday Git</a>,
+<a href="giteveryday.html">giteveryday(7)</a>,
 <a href="user-manual.html">The Git User&#8217;s Manual</a></p></div>
 </div>
 </div>
# install gittutorial-2.html /usr/share/doc/git-doc/gittutorial-2.html
--- /usr/share/doc/git-doc/gittutorial.html	2016-03-21 09:24:29.000000000 -0600
+++ gittutorial.html	2016-10-15 00:44:25.940075400 -0600
@@ -739,7 +739,7 @@
 <h2>NAME</h2>
 <div class="sectionbody">
 <p>gittutorial -
-   A tutorial introduction to Git (for version 1.5.1 or newer)
+   A tutorial introduction to Git
 </p>
 </div>
 </div>
@@ -839,14 +839,14 @@
 <div class="listingblock">
 <div class="content">
 <pre><code>$ git status
-# On branch master
-# Changes to be committed:
-#   (use "git reset HEAD &lt;file&gt;..." to unstage)
-#
-#       modified:   file1
-#       modified:   file2
-#       modified:   file3
-#</code></pre>
+On branch master
+Changes to be committed:
+Your branch is up-to-date with 'origin/master'.
+  (use "git reset HEAD &lt;file&gt;..." to unstage)
+
+        modified:   file1
+        modified:   file2
+        modified:   file3</code></pre>
 </div></div>
 <div class="paragraph"><p>If you need to make any further adjustments, do so now, and then add any
 newly modified content to the index.  Finally, commit your changes with:</p></div>
@@ -1136,7 +1136,7 @@
 <div class="content">
 <pre><code>bob$ git clone alice.org:/home/alice/project myrepo</code></pre>
 </div></div>
-<div class="paragraph"><p>Alternatively, Git has a native protocol, or can use rsync or http;
+<div class="paragraph"><p>Alternatively, Git has a native protocol, or can use http;
 see <a href="git-pull.html">git-pull(1)</a> for details.</p></div>
 <div class="paragraph"><p>Git can also be used in a CVS-like mode, with a central repository
 that various users push changes to; see <a href="git-push.html">git-push(1)</a> and
@@ -1339,7 +1339,7 @@
 </li>
 <li>
 <p>
-<a href="everyday.html">Everyday Git with 20 Commands Or So</a>
+<a href="giteveryday.html">giteveryday(7)</a>: Everyday Git with 20 Commands Or So.
 </p>
 </li>
 <li>
@@ -1359,7 +1359,7 @@
 <a href="gitglossary.html">gitglossary(7)</a>,
 <a href="git-help.html">git-help(1)</a>,
 <a href="gitworkflows.html">gitworkflows(7)</a>,
-<a href="everyday.html">Everyday Git</a>,
+<a href="giteveryday.html">giteveryday(7)</a>,
 <a href="user-manual.html">The Git User&#8217;s Manual</a></p></div>
 </div>
 </div>
# install gittutorial.html /usr/share/doc/git-doc/gittutorial.html
--- /usr/share/doc/git-doc/gitweb.conf.html	2016-03-21 09:24:29.000000000 -0600
+++ gitweb.conf.html	2016-10-15 00:44:20.356075295 -0600
@@ -1194,7 +1194,7 @@
         Name of your site or organization, to appear in page titles.  Set it
         to something descriptive for clearer bookmarks etc.  If this variable
         is not set or is, then gitweb uses the value of the <code>SERVER_NAME</code>
-        CGI environment variable, setting site name to "$SERVER_NAME Git",
+        <code>CGI</code> environment variable, setting site name to "$SERVER_NAME Git",
         or "Untitled Git" if this variable is not set (e.g. if running gitweb
         as standalone script).
 </p>
@@ -1353,7 +1353,7 @@
 project config.  Per-repository configuration takes precedence over value
 composed from <code>@git_base_url_list</code> elements and project name.</p></div>
 <div class="paragraph"><p>You can setup one single value (single entry/item in this list) at build
-time by setting the <code>GITWEB_BASE_URL</code> built-time configuration variable.
+time by setting the <code>GITWEB_BASE_URL</code> build-time configuration variable.
 By default it is set to (), i.e. an empty list.  This means that gitweb
 would not try to create project URL (to fetch) from project name.</p></div>
 </dd>
@@ -1362,7 +1362,7 @@
 </dt>
 <dd>
 <p>
-        Whether to enables the grouping of projects by category on the project
+        Whether to enable the grouping of projects by category on the project
         list page. The category of a project is determined by the
         <code>$GIT_DIR/category</code> file or the <code>gitweb.category</code> variable in each
         repository&#8217;s configuration.  Disabled by default (set to 0).
@@ -1656,7 +1656,7 @@
         I/O.  Enabled by default.
 </p>
 <div class="paragraph"><p>This feature can be configured on a per-repository basis via
-repository&#8217;s <code>gitweb.showsizes</code> configuration variable (boolean).</p></div>
+repository&#8217;s <code>gitweb.showSizes</code> configuration variable (boolean).</p></div>
 </dd>
 <dt class="hdlist1">
 patches
@@ -1890,7 +1890,7 @@
 $feature{'snapshot'}{'override'} = 1;</code></pre>
 </div></div>
 <div class="paragraph"><p>If you allow overriding for the snapshot feature, you can specify which
-snapshot formats are globally disabled. You can also add any command line
+snapshot formats are globally disabled. You can also add any command-line
 options you want (such as setting the compression level). For instance, you
 can disable Zip compressed snapshots and set <strong>gzip</strong>(1) to run at level 6 by
 adding the following lines to your gitweb configuration file:</p></div>
# install gitweb.conf.html /usr/share/doc/git-doc/gitweb.conf.html
--- /usr/share/doc/git-doc/gitweb.html	2016-03-21 09:24:29.000000000 -0600
+++ gitweb.html	2016-10-15 00:44:17.092075233 -0600
@@ -1004,8 +1004,8 @@
 <div class="sect2">
 <h3 id="_per_repository_gitweb_configuration">Per-repository gitweb configuration</h3>
 <div class="paragraph"><p>You can configure individual repositories shown in gitweb by creating file
-in the <em>GIT_DIR</em> of Git repository, or by setting some repo configuration
-variable (in <em>GIT_DIR/config</em>, see <a href="git-config.html">git-config(1)</a>).</p></div>
+in the <code>GIT_DIR</code> of Git repository, or by setting some repo configuration
+variable (in <code>GIT_DIR/config</code>, see <a href="git-config.html">git-config(1)</a>).</p></div>
 <div class="paragraph"><p>You can use the following files in repository:</p></div>
 <div class="dlist"><dl>
 <dt class="hdlist1">
# install gitweb.html /usr/share/doc/git-doc/gitweb.html
--- /usr/share/doc/git-doc/howto-index.html	2016-03-21 09:24:29.000000000 -0600
+++ howto-index.html	2016-10-15 00:44:27.152075422 -0600
@@ -743,6 +743,15 @@
 <div class="ulist"><ul>
 <li>
 <p>
+<a href="howto/keep-canonical-history-correct.html">keep-canonical-history-correct</a> by Junio C Hamano &lt;<a href="mailto:gitster@pobox.com">gitster@pobox.com</a>&gt;
+</p>
+</li>
+</ul></div>
+<div class="paragraph"><p>This how-to explains a method for keeping a
+project&#8217;s history correct when using git pull.</p></div>
+<div class="ulist"><ul>
+<li>
+<p>
 <a href="howto/maintain-git.html">maintain-git</a> by Junio C Hamano &lt;<a href="mailto:gitster@pobox.com">gitster@pobox.com</a>&gt;
 </p>
 </li>
# install howto-index.html /usr/share/doc/git-doc/howto-index.html
--- /usr/share/doc/git-doc/user-manual.html	2016-03-21 09:24:30.000000000 -0600
+++ user-manual.html	2016-10-15 00:44:32.304075519 -0600
@@ -1,5 +1,5 @@
 <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
-<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><title>Git User Manual</title><link rel="stylesheet" type="text/css" href="docbook-xsl.css"><meta name="generator" content="DocBook XSL Stylesheets V1.78.1"></head><body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><div lang="en" class="article"><div class="titlepage"><div><div><h2 class="title"><a name="idp40826660"></a>Git User Manual</h2></div></div><hr></div><div class="toc"><p><b>Table of Contents</b></p><dl class="toc"><dt><span class="section"><a href="#repositories-and-branches">Repositories and Branches</a></span></dt><dd><dl><dt><span class="section"><a href="#how-to-get-a-git-repository">How to get a Git repository</a></span></dt><dt><span class="section"><a href="#how-to-check-out">How to check out a different version of a project</a></span></dt><dt><span class="section"><a href="#understanding-commits">Understanding History: Commits</a></span></dt><dt><span class="section"><a href="#manipulating-branches">Manipulating branches</a></span></dt><dt><span class="section"><a href="#detached-head">Examining an old version without creating a new branch</a></span></dt><dt><span class="section"><a href="#examining-remote-branches">Examining branches from a remote repository</a></span></dt><dt><span class="section"><a href="#how-git-stores-references">Naming branches, tags, and other references</a></span></dt><dt><span class="section"><a href="#Updating-a-repository-With-git-fetch">Updating a repository with git fetch</a></span></dt><dt><span class="section"><a href="#fetching-branches">Fetching branches from other repositories</a></span></dt></dl></dd><dt><span class="section"><a href="#exploring-git-history">Exploring Git history</a></span></dt><dd><dl><dt><span class="section"><a href="#using-bisect">How to use bisect to find a regression</a></span></dt><dt><span class="section"><a href="#naming-commits">Naming commits</a></span></dt><dt><span class="section"><a href="#creating-tags">Creating tags</a></span></dt><dt><span class="section"><a href="#browsing-revisions">Browsing revisions</a></span></dt><dt><span class="section"><a href="#generating-diffs">Generating diffs</a></span></dt><dt><span class="section"><a href="#viewing-old-file-versions">Viewing old file versions</a></span></dt><dt><span class="section"><a href="#history-examples">Examples</a></span></dt></dl></dd><dt><span class="section"><a href="#Developing-With-git">Developing with Git</a></span></dt><dd><dl><dt><span class="section"><a href="#telling-git-your-name">Telling Git your name</a></span></dt><dt><span class="section"><a href="#creating-a-new-repository">Creating a new repository</a></span></dt><dt><span class="section"><a href="#how-to-make-a-commit">How to make a commit</a></span></dt><dt><span class="section"><a href="#creating-good-commit-messages">Creating good commit messages</a></span></dt><dt><span class="section"><a href="#ignoring-files">Ignoring files</a></span></dt><dt><span class="section"><a href="#how-to-merge">How to merge</a></span></dt><dt><span class="section"><a href="#resolving-a-merge">Resolving a merge</a></span></dt><dt><span class="section"><a href="#undoing-a-merge">Undoing a merge</a></span></dt><dt><span class="section"><a href="#fast-forwards">Fast-forward merges</a></span></dt><dt><span class="section"><a href="#fixing-mistakes">Fixing mistakes</a></span></dt><dt><span class="section"><a href="#ensuring-good-performance">Ensuring good performance</a></span></dt><dt><span class="section"><a href="#ensuring-reliability">Ensuring reliability</a></span></dt></dl></dd><dt><span class="section"><a href="#sharing-development">Sharing development with others</a></span></dt><dd><dl><dt><span class="section"><a href="#getting-updates-With-git-pull">Getting updates with git pull</a></span></dt><dt><span class="section"><a href="#submitting-patches">Submitting patches to a project</a></span></dt><dt><span class="section"><a href="#importing-patches">Importing patches to a project</a></span></dt><dt><span class="section"><a href="#public-repositories">Public Git repositories</a></span></dt><dt><span class="section"><a href="#sharing-development-examples">Examples</a></span></dt></dl></dd><dt><span class="section"><a href="#cleaning-up-history">Rewriting history and maintaining patch series</a></span></dt><dd><dl><dt><span class="section"><a href="#patch-series">Creating the perfect patch series</a></span></dt><dt><span class="section"><a href="#using-git-rebase">Keeping a patch series up to date using git rebase</a></span></dt><dt><span class="section"><a href="#rewriting-one-commit">Rewriting a single commit</a></span></dt><dt><span class="section"><a href="#reordering-patch-series">Reordering or selecting from a patch series</a></span></dt><dt><span class="section"><a href="#interactive-rebase">Using interactive rebases</a></span></dt><dt><span class="section"><a href="#patch-series-tools">Other tools</a></span></dt><dt><span class="section"><a href="#problems-With-rewriting-history">Problems with rewriting history</a></span></dt><dt><span class="section"><a href="#bisect-merges">Why bisecting merge commits can be harder than bisecting linear history</a></span></dt></dl></dd><dt><span class="section"><a href="#advanced-branch-management">Advanced branch management</a></span></dt><dd><dl><dt><span class="section"><a href="#fetching-individual-branches">Fetching individual branches</a></span></dt><dt><span class="section"><a href="#fetch-fast-forwards">git fetch and fast-forwards</a></span></dt><dt><span class="section"><a href="#forcing-fetch">Forcing git fetch to do non-fast-forward updates</a></span></dt><dt><span class="section"><a href="#remote-branch-configuration">Configuring remote-tracking branches</a></span></dt></dl></dd><dt><span class="section"><a href="#git-concepts">Git concepts</a></span></dt><dd><dl><dt><span class="section"><a href="#the-object-database">The Object Database</a></span></dt><dt><span class="section"><a href="#the-index">The index</a></span></dt></dl></dd><dt><span class="section"><a href="#submodules">Submodules</a></span></dt><dd><dl><dt><span class="section"><a href="#_pitfalls_with_submodules">Pitfalls with submodules</a></span></dt></dl></dd><dt><span class="section"><a href="#low-level-operations">Low-level Git operations</a></span></dt><dd><dl><dt><span class="section"><a href="#object-manipulation">Object access and manipulation</a></span></dt><dt><span class="section"><a href="#the-workflow">The Workflow</a></span></dt><dt><span class="section"><a href="#examining-the-data">Examining the data</a></span></dt><dt><span class="section"><a href="#merging-multiple-trees">Merging multiple trees</a></span></dt><dt><span class="section"><a href="#merging-multiple-trees-2">Merging multiple trees, continued</a></span></dt></dl></dd><dt><span class="section"><a href="#hacking-git">Hacking Git</a></span></dt><dd><dl><dt><span class="section"><a href="#object-details">Object storage format</a></span></dt><dt><span class="section"><a href="#birdview-on-the-source-code">A birds-eye view of Git’s source code</a></span></dt></dl></dd><dt><span class="section"><a href="#glossary">Git Glossary</a></span></dt><dt><span class="appendix"><a href="#git-quick-start">A. Git Quick Reference</a></span></dt><dd><dl><dt><span class="section"><a href="#quick-creating-a-new-repository">Creating a new repository</a></span></dt><dt><span class="section"><a href="#managing-branches">Managing branches</a></span></dt><dt><span class="section"><a href="#exploring-history">Exploring history</a></span></dt><dt><span class="section"><a href="#making-changes">Making changes</a></span></dt><dt><span class="section"><a href="#merging">Merging</a></span></dt><dt><span class="section"><a href="#sharing-your-changes">Sharing your changes</a></span></dt><dt><span class="section"><a href="#repository-maintenance">Repository maintenance</a></span></dt></dl></dd><dt><span class="appendix"><a href="#todo">B. Notes and todo list for this manual</a></span></dt></dl></div><p>Git is a fast distributed revision control system.</p><p>This manual is designed to be readable by someone with basic UNIX
+<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><title>Git User Manual</title><link rel="stylesheet" type="text/css" href="docbook-xsl.css"><meta name="generator" content="DocBook XSL Stylesheets V1.78.1"></head><body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><div lang="en" class="article"><div class="titlepage"><div><div><h2 class="title"><a name="idp49193824"></a>Git User Manual</h2></div></div><hr></div><div class="toc"><p><b>Table of Contents</b></p><dl class="toc"><dt><span class="section"><a href="#repositories-and-branches">Repositories and Branches</a></span></dt><dd><dl><dt><span class="section"><a href="#how-to-get-a-git-repository">How to get a Git repository</a></span></dt><dt><span class="section"><a href="#how-to-check-out">How to check out a different version of a project</a></span></dt><dt><span class="section"><a href="#understanding-commits">Understanding History: Commits</a></span></dt><dt><span class="section"><a href="#manipulating-branches">Manipulating branches</a></span></dt><dt><span class="section"><a href="#detached-head">Examining an old version without creating a new branch</a></span></dt><dt><span class="section"><a href="#examining-remote-branches">Examining branches from a remote repository</a></span></dt><dt><span class="section"><a href="#how-git-stores-references">Naming branches, tags, and other references</a></span></dt><dt><span class="section"><a href="#Updating-a-repository-With-git-fetch">Updating a repository with git fetch</a></span></dt><dt><span class="section"><a href="#fetching-branches">Fetching branches from other repositories</a></span></dt></dl></dd><dt><span class="section"><a href="#exploring-git-history">Exploring Git history</a></span></dt><dd><dl><dt><span class="section"><a href="#using-bisect">How to use bisect to find a regression</a></span></dt><dt><span class="section"><a href="#naming-commits">Naming commits</a></span></dt><dt><span class="section"><a href="#creating-tags">Creating tags</a></span></dt><dt><span class="section"><a href="#browsing-revisions">Browsing revisions</a></span></dt><dt><span class="section"><a href="#generating-diffs">Generating diffs</a></span></dt><dt><span class="section"><a href="#viewing-old-file-versions">Viewing old file versions</a></span></dt><dt><span class="section"><a href="#history-examples">Examples</a></span></dt></dl></dd><dt><span class="section"><a href="#Developing-With-git">Developing with Git</a></span></dt><dd><dl><dt><span class="section"><a href="#telling-git-your-name">Telling Git your name</a></span></dt><dt><span class="section"><a href="#creating-a-new-repository">Creating a new repository</a></span></dt><dt><span class="section"><a href="#how-to-make-a-commit">How to make a commit</a></span></dt><dt><span class="section"><a href="#creating-good-commit-messages">Creating good commit messages</a></span></dt><dt><span class="section"><a href="#ignoring-files">Ignoring files</a></span></dt><dt><span class="section"><a href="#how-to-merge">How to merge</a></span></dt><dt><span class="section"><a href="#resolving-a-merge">Resolving a merge</a></span></dt><dt><span class="section"><a href="#undoing-a-merge">Undoing a merge</a></span></dt><dt><span class="section"><a href="#fast-forwards">Fast-forward merges</a></span></dt><dt><span class="section"><a href="#fixing-mistakes">Fixing mistakes</a></span></dt><dt><span class="section"><a href="#ensuring-good-performance">Ensuring good performance</a></span></dt><dt><span class="section"><a href="#ensuring-reliability">Ensuring reliability</a></span></dt></dl></dd><dt><span class="section"><a href="#sharing-development">Sharing development with others</a></span></dt><dd><dl><dt><span class="section"><a href="#getting-updates-With-git-pull">Getting updates with git pull</a></span></dt><dt><span class="section"><a href="#submitting-patches">Submitting patches to a project</a></span></dt><dt><span class="section"><a href="#importing-patches">Importing patches to a project</a></span></dt><dt><span class="section"><a href="#public-repositories">Public Git repositories</a></span></dt><dt><span class="section"><a href="#how-to-get-a-git-repository-with-minimal-history">How to get a Git repository with minimal history</a></span></dt><dt><span class="section"><a href="#sharing-development-examples">Examples</a></span></dt></dl></dd><dt><span class="section"><a href="#cleaning-up-history">Rewriting history and maintaining patch series</a></span></dt><dd><dl><dt><span class="section"><a href="#patch-series">Creating the perfect patch series</a></span></dt><dt><span class="section"><a href="#using-git-rebase">Keeping a patch series up to date using git rebase</a></span></dt><dt><span class="section"><a href="#rewriting-one-commit">Rewriting a single commit</a></span></dt><dt><span class="section"><a href="#reordering-patch-series">Reordering or selecting from a patch series</a></span></dt><dt><span class="section"><a href="#interactive-rebase">Using interactive rebases</a></span></dt><dt><span class="section"><a href="#patch-series-tools">Other tools</a></span></dt><dt><span class="section"><a href="#problems-With-rewriting-history">Problems with rewriting history</a></span></dt><dt><span class="section"><a href="#bisect-merges">Why bisecting merge commits can be harder than bisecting linear history</a></span></dt></dl></dd><dt><span class="section"><a href="#advanced-branch-management">Advanced branch management</a></span></dt><dd><dl><dt><span class="section"><a href="#fetching-individual-branches">Fetching individual branches</a></span></dt><dt><span class="section"><a href="#fetch-fast-forwards">git fetch and fast-forwards</a></span></dt><dt><span class="section"><a href="#forcing-fetch">Forcing git fetch to do non-fast-forward updates</a></span></dt><dt><span class="section"><a href="#remote-branch-configuration">Configuring remote-tracking branches</a></span></dt></dl></dd><dt><span class="section"><a href="#git-concepts">Git concepts</a></span></dt><dd><dl><dt><span class="section"><a href="#the-object-database">The Object Database</a></span></dt><dt><span class="section"><a href="#the-index">The index</a></span></dt></dl></dd><dt><span class="section"><a href="#submodules">Submodules</a></span></dt><dd><dl><dt><span class="section"><a href="#_pitfalls_with_submodules">Pitfalls with submodules</a></span></dt></dl></dd><dt><span class="section"><a href="#low-level-operations">Low-level Git operations</a></span></dt><dd><dl><dt><span class="section"><a href="#object-manipulation">Object access and manipulation</a></span></dt><dt><span class="section"><a href="#the-workflow">The Workflow</a></span></dt><dt><span class="section"><a href="#examining-the-data">Examining the data</a></span></dt><dt><span class="section"><a href="#merging-multiple-trees">Merging multiple trees</a></span></dt><dt><span class="section"><a href="#merging-multiple-trees-2">Merging multiple trees, continued</a></span></dt></dl></dd><dt><span class="section"><a href="#hacking-git">Hacking Git</a></span></dt><dd><dl><dt><span class="section"><a href="#object-details">Object storage format</a></span></dt><dt><span class="section"><a href="#birdview-on-the-source-code">A birds-eye view of Git’s source code</a></span></dt></dl></dd><dt><span class="section"><a href="#glossary">Git Glossary</a></span></dt><dt><span class="appendix"><a href="#git-quick-start">A. Git Quick Reference</a></span></dt><dd><dl><dt><span class="section"><a href="#quick-creating-a-new-repository">Creating a new repository</a></span></dt><dt><span class="section"><a href="#managing-branches">Managing branches</a></span></dt><dt><span class="section"><a href="#exploring-history">Exploring history</a></span></dt><dt><span class="section"><a href="#making-changes">Making changes</a></span></dt><dt><span class="section"><a href="#merging">Merging</a></span></dt><dt><span class="section"><a href="#sharing-your-changes">Sharing your changes</a></span></dt><dt><span class="section"><a href="#repository-maintenance">Repository maintenance</a></span></dt></dl></dd><dt><span class="appendix"><a href="#todo">B. Notes and todo list for this manual</a></span></dt></dl></div><p>Git is a fast distributed revision control system.</p><p>This manual is designed to be readable by someone with basic UNIX
 command-line skills, but no previous knowledge of Git.</p><p><a class="xref" href="#repositories-and-branches" title="Repositories and Branches">the section called “Repositories and Branches”</a> and <a class="xref" href="#exploring-git-history" title="Exploring Git history">the section called “Exploring Git history”</a> explain how
 to fetch and study a project using git—read these chapters to learn how
 to build and test a particular version of a software project, search for
@@ -215,10 +215,9 @@
 is usually a shortcut for the HEAD branch in the repository "origin".</p><p>For the complete list of paths which Git checks for references, and
 the order it uses to decide which to choose when there are multiple
 references with the same shorthand name, see the "SPECIFYING
-REVISIONS" section of <a class="ulink" href="gitrevisions.html" target="_top">gitrevisions(7)</a>.</p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a name="Updating-a-repository-With-git-fetch"></a>Updating a repository with git fetch</h3></div></div></div><p>Eventually the developer cloned from will do additional work in her
-repository, creating new commits and advancing the branches to point
-at the new commits.</p><p>The command <code class="literal">git fetch</code>, with no arguments, will update all of the
-remote-tracking branches to the latest version found in her
+REVISIONS" section of <a class="ulink" href="gitrevisions.html" target="_top">gitrevisions(7)</a>.</p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a name="Updating-a-repository-With-git-fetch"></a>Updating a repository with git fetch</h3></div></div></div><p>After you clone a repository and commit a few changes of your own, you
+may wish to check the original repository for updates.</p><p>The <code class="literal">git-fetch</code> command, with no arguments, will update all of the
+remote-tracking branches to the latest version found in the original
 repository.  It will not touch any of your own branches—not even the
 "master" branch that was created for you on clone.</p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a name="fetching-branches"></a>Fetching branches from other repositories</h3></div></div></div><p>You can also track branches from repositories other than the one you
 cloned from, using <a class="ulink" href="git-remote.html" target="_top">git-remote(1)</a>:</p><pre class="literallayout">$ git remote add staging git://git.kernel.org/.../gregkh/staging.git
@@ -493,7 +492,7 @@
 for other users who clone your repository.</p><p>If you wish the exclude patterns to affect only certain repositories
 (instead of every repository for a given project), you may instead put
 them in a file in your repository named <code class="literal">.git/info/exclude</code>, or in any
-file specified by the <code class="literal">core.excludesfile</code> configuration variable.
+file specified by the <code class="literal">core.excludesFile</code> configuration variable.
 Some Git commands can also take exclude patterns directly on the
 command line.  See <a class="ulink" href="gitignore.html" target="_top">gitignore(5)</a> for the details.</p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a name="how-to-merge"></a>How to merge</h3></div></div></div><p>You can rejoin two diverging branches of development using
 <a class="ulink" href="git-merge.html" target="_top">git-merge(1)</a>:</p><pre class="literallayout">$ git merge branchname</pre><p>merges the development in the branch <code class="literal">branchname</code> into the current
@@ -592,11 +591,11 @@
 further merges.</p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a name="fast-forwards"></a>Fast-forward merges</h3></div></div></div><p>There is one special case not mentioned above, which is treated
 differently.  Normally, a merge results in a merge commit, with two
 parents, one pointing at each of the two lines of development that
-were merged.</p><p>However, if the current branch is a descendant of the other—so every
-commit present in the one is already contained in the other—then Git
-just performs a "fast-forward"; the head of the current branch is moved
-forward to point at the head of the merged-in branch, without any new
-commits being created.</p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a name="fixing-mistakes"></a>Fixing mistakes</h3></div></div></div><p>If you’ve messed up the working tree, but haven’t yet committed your
+were merged.</p><p>However, if the current branch is an ancestor of the other—so every commit
+present in the current branch is already contained in the other branch—then Git
+just performs a "fast-forward"; the head of the current branch is moved forward
+to point at the head of the merged-in branch, without any new commits being
+created.</p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a name="fixing-mistakes"></a>Fixing mistakes</h3></div></div></div><p>If you’ve messed up the working tree, but haven’t yet committed your
 mistake, you can return the entire working tree to the last committed
 state with</p><pre class="literallayout">$ git reset --hard HEAD</pre><p>If you make a commit that you later wish you hadn’t, there are two
 fundamentally different ways to fix the problem:</p><div class="orderedlist"><ol class="orderedlist" type="1"><li class="listitem">
@@ -729,8 +728,8 @@
 manner.</p><p>You can then import these into your mail client and send them by
 hand.  However, if you have a lot to send at once, you may prefer to
 use the <a class="ulink" href="git-send-email.html" target="_top">git-send-email(1)</a> script to automate the process.
-Consult the mailing list for your project first to determine how they
-prefer such patches be handled.</p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a name="importing-patches"></a>Importing patches to a project</h3></div></div></div><p>Git also provides a tool called <a class="ulink" href="git-am.html" target="_top">git-am(1)</a> (am stands for
+Consult the mailing list for your project first to determine
+their requirements for submitting patches.</p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a name="importing-patches"></a>Importing patches to a project</h3></div></div></div><p>Git also provides a tool called <a class="ulink" href="git-am.html" target="_top">git-am(1)</a> (am stands for
 "apply mailbox"), for importing such an emailed series of patches.
 Just save all of the patch-containing messages, in order, into a
 single mailbox file, say <code class="literal">patches.mbox</code>, then run</p><pre class="literallayout">$ git am -3 patches.mbox</pre><p>Git will apply each patch in order; if any conflicts are found, it
@@ -862,8 +861,23 @@
           less need for formal decisions about who is "in" and who is
           "out".
 </li></ul></div></div><div class="section"><div class="titlepage"><div><div><h4 class="title"><a name="setting-up-gitweb"></a>Allowing web browsing of a repository</h4></div></div></div><p>The gitweb cgi script provides users an easy way to browse your
-project’s files and history without having to install Git; see the file
-gitweb/INSTALL in the Git source tree for instructions on setting it up.</p></div></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a name="sharing-development-examples"></a>Examples</h3></div></div></div><div class="section"><div class="titlepage"><div><div><h4 class="title"><a name="maintaining-topic-branches"></a>Maintaining topic branches for a Linux subsystem maintainer</h4></div></div></div><p>This describes how Tony Luck uses Git in his role as maintainer of the
+project’s revisions, file contents and logs without having to install
+Git. Features like RSS/Atom feeds and blame/annotation details may
+optionally be enabled.</p><p>The <a class="ulink" href="git-instaweb.html" target="_top">git-instaweb(1)</a> command provides a simple way to start
+browsing the repository using gitweb. The default server when using
+instaweb is lighttpd.</p><p>See the file gitweb/INSTALL in the Git source tree and
+<a class="ulink" href="gitweb.html" target="_top">gitweb(1)</a> for instructions on details setting up a permanent
+installation with a CGI or Perl capable server.</p></div></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a name="how-to-get-a-git-repository-with-minimal-history"></a>How to get a Git repository with minimal history</h3></div></div></div><p>A <a class="link" href="#def_shallow_clone">shallow clone</a>, with its truncated
+history, is useful when one is interested only in recent history
+of a project and getting full history from the upstream is
+expensive.</p><p>A <a class="link" href="#def_shallow_clone">shallow clone</a> is created by specifying
+the <a class="ulink" href="git-clone.html" target="_top">git-clone(1)</a> <code class="literal">--depth</code> switch. The depth can later be
+changed with the <a class="ulink" href="git-fetch.html" target="_top">git-fetch(1)</a> <code class="literal">--depth</code> switch, or full
+history restored with <code class="literal">--unshallow</code>.</p><p>Merging inside a <a class="link" href="#def_shallow_clone">shallow clone</a> will work as long
+as a merge base is in the recent history.
+Otherwise, it will be like merging unrelated histories and may
+have to result in huge conflicts.  This limitation may make such
+a repository unsuitable to be used in merge based workflows.</p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a name="sharing-development-examples"></a>Examples</h3></div></div></div><div class="section"><div class="titlepage"><div><div><h4 class="title"><a name="maintaining-topic-branches"></a>Maintaining topic branches for a Linux subsystem maintainer</h4></div></div></div><p>This describes how Tony Luck uses Git in his role as maintainer of the
 IA64 architecture for the Linux kernel.</p><p>He uses two public branches:</p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem">
 A "test" tree into which patches are initially placed so that they
    can get some exposure when integrated with other ongoing development.
@@ -909,7 +923,7 @@
 the patch is a multi-part series, then you should apply each as a separate
 commit to this branch.</p><pre class="literallayout">$ ... patch ... test  ... commit [ ... patch ... test ... commit ]*</pre><p>When you are happy with the state of this change, you can merge it into the
 "test" branch in preparation to make it public:</p><pre class="literallayout">$ git checkout test &amp;&amp; git merge speed-up-spinlocks</pre><p>It is unlikely that you would have any conflicts here … but you might if you
-spent a while on this step and had also pulled new versions from upstream.</p><p>Some time later when enough time has passed and testing done, you can pull the
+spent a while on this step and had also pulled new versions from upstream.</p><p>Sometime later when enough time has passed and testing done, you can pull the
 same branch into the <code class="literal">release</code> tree ready to go upstream.  This is where you
 see the value of keeping each patch (or patch series) in its own branch.  It
 means that the patches can be moved into the <code class="literal">release</code> tree in any order.</p><pre class="literallayout">$ git checkout release &amp;&amp; git merge speed-up-spinlocks</pre><p>After a while, you will have a number of branches, and despite the
@@ -1796,7 +1810,7 @@
 came from: stage 1 corresponds to the <code class="literal">$orig</code> tree, stage 2 to
 the <code class="literal">HEAD</code> tree, and stage 3 to the <code class="literal">$target</code> tree.</p><p>Earlier we said that trivial merges are done inside
 <code class="literal">git read-tree -m</code>.  For example, if the file did not change
-from <code class="literal">$orig</code> to <code class="literal">HEAD</code> nor <code class="literal">$target</code>, or if the file changed
+from <code class="literal">$orig</code> to <code class="literal">HEAD</code> or <code class="literal">$target</code>, or if the file changed
 from <code class="literal">$orig</code> to <code class="literal">HEAD</code> and <code class="literal">$orig</code> to <code class="literal">$target</code> the same way,
 obviously the final outcome is what is in <code class="literal">HEAD</code>.  What the
 above example shows is that file <code class="literal">hello.c</code> was changed from
@@ -1869,9 +1883,9 @@
 called by the script.</p><p>Most of what <code class="literal">git rev-list</code> did is contained in <code class="literal">revision.c</code> and
 <code class="literal">revision.h</code>.  It wraps the options in a struct named <code class="literal">rev_info</code>, which
 controls how and what revisions are walked, and more.</p><p>The original job of <code class="literal">git rev-parse</code> is now taken by the function
-<code class="literal">setup_revisions()</code>, which parses the revisions and the common command line
+<code class="literal">setup_revisions()</code>, which parses the revisions and the common command-line
 options for the revision walker. This information is stored in the struct
-<code class="literal">rev_info</code> for later consumption. You can do your own command line option
+<code class="literal">rev_info</code> for later consumption. You can do your own command-line option
 parsing after calling <code class="literal">setup_revisions()</code>. After that, you have to call
 <code class="literal">prepare_revision_walk()</code> for initialization, and then you can get the
 commits one by one with the function <code class="literal">get_revision()</code>.</p><p>If you are interested in more details of the revision walking process,
@@ -1938,7 +1952,7 @@
 </span></dt><dd>
         Via the alternates mechanism, a <a class="link" href="#def_repository">repository</a>
         can inherit part of its <a class="link" href="#def_object_database">object database</a>
-        from another object database, which is called "alternate".
+        from another object database, which is called an "alternate".
 </dd><dt><span class="term">
 <a name="def_bare_repository"></a>bare repository
 </span></dt><dd>
@@ -2098,7 +2112,7 @@
         A fast-forward is a special type of <a class="link" href="#def_merge">merge</a> where you have a
         <a class="link" href="#def_revision">revision</a> and you are "merging" another
         <a class="link" href="#def_branch">branch</a>'s changes that happen to be a descendant of what
-        you have. In such these cases, you do not make a new <a class="link" href="#def_merge">merge</a>
+        you have. In such a case, you do not make a new <a class="link" href="#def_merge">merge</a>
         <a class="link" href="#def_commit">commit</a> but instead just update to his
         revision. This will happen frequently on a
         <a class="link" href="#def_remote_tracking_branch">remote-tracking branch</a> of a remote
@@ -2128,13 +2142,15 @@
         points at the directory that is the real repository.
 </dd><dt><span class="term">
 <a name="def_grafts"></a>grafts
-</span></dt><dd>
+</span></dt><dd><p class="simpara">
         Grafts enables two otherwise different lines of development to be joined
         together by recording fake ancestry information for commits. This way
         you can make Git pretend the set of <a class="link" href="#def_parent">parents</a> a <a class="link" href="#def_commit">commit</a> has
         is different from what was recorded when the commit was
         created. Configured via the <code class="literal">.git/info/grafts</code> file.
-</dd><dt><span class="term">
+</p><p class="simpara">Note that the grafts mechanism is outdated and can lead to problems
+transferring objects between repositories; see <a class="ulink" href="git-replace.html" target="_top">git-replace(1)</a>
+for a more flexible and robust system to do the same thing.</p></dd><dt><span class="term">
 <a name="def_hash"></a>hash
 </span></dt><dd>
         In Git’s context, synonym for <a class="link" href="#def_object_name">object name</a>.
@@ -2292,7 +2308,7 @@
 signature" letters (which optionally is terminated by another colon <code class="literal">:</code>),
 and the remainder is the pattern to match against the path.
 The "magic signature" consists of ASCII symbols that are neither
-alphanumeric, glob, regex special charaters nor colon.
+alphanumeric, glob, regex special characters nor colon.
 The optional colon that terminates the "magic signature" can be
 omitted if the pattern begins with a character that does not belong to
 "magic signature" symbol set and is not a colon.</p><p class="simpara">In the long form, the leading colon <code class="literal">:</code> is followed by a open
@@ -2372,6 +2388,30 @@
         core Git. Porcelains expose more of a <a class="link" href="#def_SCM">SCM</a>
         interface than the <a class="link" href="#def_plumbing">plumbing</a>.
 </dd><dt><span class="term">
+<a name="def_per_worktree_ref"></a>per-worktree ref
+</span></dt><dd>
+        Refs that are per-<a class="link" href="#def_working_tree">worktree</a>, rather than
+        global.  This is presently only <a class="link" href="#def_HEAD">HEAD</a> and any refs
+        that start with <code class="literal">refs/bisect/</code>, but might later include other
+        unusual refs.
+</dd><dt><span class="term">
+<a name="def_pseudoref"></a>pseudoref
+</span></dt><dd>
+        Pseudorefs are a class of files under <code class="literal">$GIT_DIR</code> which behave
+        like refs for the purposes of rev-parse, but which are treated
+        specially by git.  Pseudorefs both have names that are all-caps,
+        and always start with a line consisting of a
+        <a class="link" href="#def_SHA1">SHA-1</a> followed by whitespace.  So, HEAD is not a
+        pseudoref, because it is sometimes a symbolic ref.  They might
+        optionally contain some additional data.  <code class="literal">MERGE_HEAD</code> and
+        <code class="literal">CHERRY_PICK_HEAD</code> are examples.  Unlike
+        <a class="link" href="#def_per_worktree_ref">per-worktree refs</a>, these files cannot
+        be symbolic refs, and never have reflogs.  They also cannot be
+        updated through the normal ref update machinery.  Instead,
+        they are updated by directly writing to the files.  However,
+        they can be read as if they were refs, so <code class="literal">git rev-parse
+        MERGE_HEAD</code> will work.
+</dd><dt><span class="term">
 <a name="def_pull"></a>pull
 </span></dt><dd>
         Pulling a <a class="link" href="#def_branch">branch</a> means to <a class="link" href="#def_fetch">fetch</a> it and
@@ -2433,6 +2473,12 @@
         <a class="link" href="#def_push">push</a> to describe the mapping between remote
         <a class="link" href="#def_ref">ref</a> and local ref.
 </dd><dt><span class="term">
+<a name="def_remote"></a>remote repository
+</span></dt><dd>
+        A <a class="link" href="#def_repository">repository</a> which is used to track the same
+        project but resides somewhere else. To communicate with remotes,
+        see <a class="link" href="#def_fetch">fetch</a> or <a class="link" href="#def_push">push</a>.
+</dd><dt><span class="term">
 <a name="def_remote_tracking_branch"></a>remote-tracking branch
 </span></dt><dd>
         A <a class="link" href="#def_ref">ref</a> that is used to follow changes from another
@@ -2475,6 +2521,12 @@
         "Secure Hash Algorithm 1"; a cryptographic hash function.
         In the context of Git used as a synonym for <a class="link" href="#def_object_name">object name</a>.
 </dd><dt><span class="term">
+<a name="def_shallow_clone"></a>shallow clone
+</span></dt><dd>
+        Mostly a synonym to <a class="link" href="#def_shallow_repository">shallow repository</a>
+        but the phrase makes it more explicit that it was created by
+        running <code class="literal">git clone --depth=...</code> command.
+</dd><dt><span class="term">
 <a name="def_shallow_repository"></a>shallow repository
 </span></dt><dd>
         A shallow <a class="link" href="#def_repository">repository</a> has an incomplete
@@ -2486,6 +2538,19 @@
         is created by giving the <code class="literal">--depth</code> option to <a class="ulink" href="git-clone.html" target="_top">git-clone(1)</a>, and
         its history can be later deepened with <a class="ulink" href="git-fetch.html" target="_top">git-fetch(1)</a>.
 </dd><dt><span class="term">
+<a name="def_submodule"></a>submodule
+</span></dt><dd>
+        A <a class="link" href="#def_repository">repository</a> that holds the history of a
+        separate project inside another repository (the latter of
+        which is called <a class="link" href="#def_superproject">superproject</a>).
+</dd><dt><span class="term">
+<a name="def_superproject"></a>superproject
+</span></dt><dd>
+        A <a class="link" href="#def_repository">repository</a> that references repositories
+        of other projects in its working tree as <a class="link" href="#def_submodule">submodules</a>.
+        The superproject knows about the names of (but does not hold
+        copies of) commit objects of the contained submodules.
+</dd><dt><span class="term">
 <a name="def_symref"></a>symref
 </span></dt><dd>
         Symbolic reference: instead of containing the <a class="link" href="#def_SHA1">SHA-1</a>
@@ -2663,11 +2728,9 @@
 </li><li class="listitem">
 list of commands in <a class="ulink" href="git.html" target="_top">git(1)</a>
 </li></ul></div><p>Scan email archives for other stuff left out</p><p>Scan man pages to see if any assume more background than this manual
-provides.</p><p>Simplify beginning by suggesting disconnected head instead of
-temporary branch creation?</p><p>Add more good examples.  Entire sections of just cookbook examples
+provides.</p><p>Add more good examples.  Entire sections of just cookbook examples
 might be a good idea; maybe make an "advanced examples" section a
-standard end-of-chapter section?</p><p>Include cross-references to the glossary, where appropriate.</p><p>Document shallow clones?  See draft 1.5.0 release notes for some
-documentation.</p><p>Add a section on working with other version control systems, including
-CVS, Subversion, and just imports of series of release tarballs.</p><p>More details on gitweb?</p><p>Write a chapter on using plumbing and writing scripts.</p><p>Alternates, clone -reference, etc.</p><p>More on recovery from repository corruption.  See:
+standard end-of-chapter section?</p><p>Include cross-references to the glossary, where appropriate.</p><p>Add a section on working with other version control systems, including
+CVS, Subversion, and just imports of series of release tarballs.</p><p>Write a chapter on using plumbing and writing scripts.</p><p>Alternates, clone -reference, etc.</p><p>More on recovery from repository corruption.  See:
         <a class="ulink" href="http://marc.info/?l=git&amp;m=117263864820799&amp;w=2" target="_top">http://marc.info/?l=git&amp;m=117263864820799&amp;w=2</a>
         <a class="ulink" href="http://marc.info/?l=git&amp;m=117147855503798&amp;w=2" target="_top">http://marc.info/?l=git&amp;m=117147855503798&amp;w=2</a></p></div></div></body></html>
# install user-manual.html /usr/share/doc/git-doc/user-manual.html
# install howto/keep-canonical-history-correct.txt /usr/share/doc/git-doc/howto/keep-canonical-history-correct.txt
--- /usr/share/doc/git-doc/howto/new-command.txt	2016-03-21 09:24:29.000000000 -0600
+++ howto/new-command.txt	2016-10-03 14:24:18.000000000 -0600
@@ -94,8 +94,10 @@
 6. There is a file command-list.txt in the distribution main directory
 that categorizes commands by type, so they can be listed in appropriate
 subsections in the documentation's summary command list.  Add an entry
-for yours.  To understand the categories, look at git-commands.txt
-in the main directory.
+for yours.  To understand the categories, look at command-list.txt
+in the main directory.  If the new command is part of the typical Git
+workflow and you believe it common enough to be mentioned in 'git help',
+map this command to a common group in the column [common].
 
 7. Give the maintainer one paragraph to include in the RelNotes file
 to describe the new feature; a good place to do so is in the cover
# install howto/new-command.txt /usr/share/doc/git-doc/howto/new-command.txt
--- /usr/share/doc/git-doc/howto/rebase-from-internal-branch.txt	2016-03-21 09:24:29.000000000 -0600
+++ howto/rebase-from-internal-branch.txt	2016-10-03 14:24:18.000000000 -0600
@@ -139,7 +139,7 @@
     $ git fetch upstream
 
 This leaves the updated upstream head in .git/FETCH_HEAD but
-does not touch your .git/HEAD nor .git/refs/heads/master.
+does not touch your .git/HEAD or .git/refs/heads/master.
 You run "git rebase" now.
 
     $ git rebase FETCH_HEAD master
# install howto/rebase-from-internal-branch.txt /usr/share/doc/git-doc/howto/rebase-from-internal-branch.txt
--- /usr/share/doc/git-doc/howto/recover-corrupted-object-harder.txt	2016-03-21 09:24:29.000000000 -0600
+++ howto/recover-corrupted-object-harder.txt	2016-10-03 14:24:18.000000000 -0600
@@ -38,7 +38,7 @@
 Reading the zlib source code, I found that "incorrect data check" means
 that the adler-32 checksum at the end of the zlib data did not match the
 inflated data. So stepping the data through zlib would not help, as it
-did not fail until the very end, when we realize the crc does not match.
+did not fail until the very end, when we realize the CRC does not match.
 The problematic bytes could be anywhere in the object data.
 
 The first thing I did was pull the broken data out of the packfile. I
@@ -195,7 +195,7 @@
 -------
 
 I let it run to completion, and got a few more hits at the end (where it
-was munging the crc to match our broken data). So there was a good
+was munging the CRC to match our broken data). So there was a good
 chance this middle hit was the source of the problem.
 
 I confirmed by tweaking the byte in a hex editor, zlib inflating the
@@ -240,3 +240,240 @@
 that easily could have gone undetected in another system. The result
 still compiled, but would have caused an interesting bug (that would
 have been blamed on some random commit).
+
+
+The adventure continues...
+--------------------------
+
+I ended up doing this again! Same entity, new hardware. The assumption
+at this point is that the old disk corrupted the packfile, and then the
+corruption was migrated to the new hardware (because it was done by
+rsync or similar, and no fsck was done at the time of migration).
+
+This time, the affected blob was over 20 megabytes, which was far too
+large to do a brute-force on. I followed the instructions above to
+create the `zlib` file. I then used the `inflate` program below to pull
+the corrupted data from that. Examining that output gave me a hint about
+where in the file the corruption was. But now I was working with the
+file itself, not the zlib contents. So knowing the sha1 of the object
+and the approximate area of the corruption, I used the `sha1-munge`
+program below to brute-force the correct byte.
+
+Here's the inflate program (it's essentially `gunzip` but without the
+`.gz` header processing):
+
+--------------------------
+#include <stdio.h>
+#include <string.h>
+#include <zlib.h>
+#include <stdlib.h>
+
+int main(int argc, char **argv)
+{
+	/*
+	 * oversized so we can read the whole buffer in;
+	 * this could actually be switched to streaming
+	 * to avoid any memory limitations
+	 */
+	static unsigned char buf[25 * 1024 * 1024];
+	static unsigned char out[25 * 1024 * 1024];
+	int len;
+	z_stream z;
+	int ret;
+
+	len = read(0, buf, sizeof(buf));
+	memset(&z, 0, sizeof(z));
+	inflateInit(&z);
+
+	z.next_in = buf;
+	z.avail_in = len;
+	z.next_out = out;
+	z.avail_out = sizeof(out);
+
+	ret = inflate(&z, 0);
+	if (ret != Z_OK && ret != Z_STREAM_END)
+		fprintf(stderr, "initial inflate failed (%d)\n", ret);
+
+	fprintf(stderr, "outputting %lu bytes", z.total_out);
+	fwrite(out, 1, z.total_out, stdout);
+	return 0;
+}
+--------------------------
+
+And here is the `sha1-munge` program:
+
+--------------------------
+#include <stdio.h>
+#include <unistd.h>
+#include <string.h>
+#include <signal.h>
+#include <openssl/sha.h>
+#include <stdlib.h>
+
+/* eye candy */
+static int counter = 0;
+static void progress(int sig)
+{
+	fprintf(stderr, "\r%d", counter);
+	alarm(1);
+}
+
+static const signed char hexval_table[256] = {
+	 -1, -1, -1, -1, -1, -1, -1, -1,		/* 00-07 */
+	 -1, -1, -1, -1, -1, -1, -1, -1,		/* 08-0f */
+	 -1, -1, -1, -1, -1, -1, -1, -1,		/* 10-17 */
+	 -1, -1, -1, -1, -1, -1, -1, -1,		/* 18-1f */
+	 -1, -1, -1, -1, -1, -1, -1, -1,		/* 20-27 */
+	 -1, -1, -1, -1, -1, -1, -1, -1,		/* 28-2f */
+	  0,  1,  2,  3,  4,  5,  6,  7,		/* 30-37 */
+	  8,  9, -1, -1, -1, -1, -1, -1,		/* 38-3f */
+	 -1, 10, 11, 12, 13, 14, 15, -1,		/* 40-47 */
+	 -1, -1, -1, -1, -1, -1, -1, -1,		/* 48-4f */
+	 -1, -1, -1, -1, -1, -1, -1, -1,		/* 50-57 */
+	 -1, -1, -1, -1, -1, -1, -1, -1,		/* 58-5f */
+	 -1, 10, 11, 12, 13, 14, 15, -1,		/* 60-67 */
+	 -1, -1, -1, -1, -1, -1, -1, -1,		/* 68-67 */
+	 -1, -1, -1, -1, -1, -1, -1, -1,		/* 70-77 */
+	 -1, -1, -1, -1, -1, -1, -1, -1,		/* 78-7f */
+	 -1, -1, -1, -1, -1, -1, -1, -1,		/* 80-87 */
+	 -1, -1, -1, -1, -1, -1, -1, -1,		/* 88-8f */
+	 -1, -1, -1, -1, -1, -1, -1, -1,		/* 90-97 */
+	 -1, -1, -1, -1, -1, -1, -1, -1,		/* 98-9f */
+	 -1, -1, -1, -1, -1, -1, -1, -1,		/* a0-a7 */
+	 -1, -1, -1, -1, -1, -1, -1, -1,		/* a8-af */
+	 -1, -1, -1, -1, -1, -1, -1, -1,		/* b0-b7 */
+	 -1, -1, -1, -1, -1, -1, -1, -1,		/* b8-bf */
+	 -1, -1, -1, -1, -1, -1, -1, -1,		/* c0-c7 */
+	 -1, -1, -1, -1, -1, -1, -1, -1,		/* c8-cf */
+	 -1, -1, -1, -1, -1, -1, -1, -1,		/* d0-d7 */
+	 -1, -1, -1, -1, -1, -1, -1, -1,		/* d8-df */
+	 -1, -1, -1, -1, -1, -1, -1, -1,		/* e0-e7 */
+	 -1, -1, -1, -1, -1, -1, -1, -1,		/* e8-ef */
+	 -1, -1, -1, -1, -1, -1, -1, -1,		/* f0-f7 */
+	 -1, -1, -1, -1, -1, -1, -1, -1,		/* f8-ff */
+};
+
+static inline unsigned int hexval(unsigned char c)
+{
+return hexval_table[c];
+}
+
+static int get_sha1_hex(const char *hex, unsigned char *sha1)
+{
+	int i;
+	for (i = 0; i < 20; i++) {
+		unsigned int val;
+		/*
+		 * hex[1]=='\0' is caught when val is checked below,
+		 * but if hex[0] is NUL we have to avoid reading
+		 * past the end of the string:
+		 */
+		if (!hex[0])
+			return -1;
+		val = (hexval(hex[0]) << 4) | hexval(hex[1]);
+		if (val & ~0xff)
+			return -1;
+		*sha1++ = val;
+		hex += 2;
+	}
+	return 0;
+}
+
+int main(int argc, char **argv)
+{
+	/* oversized so we can read the whole buffer in */
+	static unsigned char buf[25 * 1024 * 1024];
+	char header[32];
+	int header_len;
+	unsigned char have[20], want[20];
+	int start, len;
+	SHA_CTX orig;
+	unsigned i, j;
+
+	if (!argv[1] || get_sha1_hex(argv[1], want)) {
+		fprintf(stderr, "usage: sha1-munge <sha1> [start] <file.in\n");
+		return 1;
+	}
+
+	if (argv[2])
+		start = atoi(argv[2]);
+	else
+		start = 0;
+
+	len = read(0, buf, sizeof(buf));
+	header_len = sprintf(header, "blob %d", len) + 1;
+	fprintf(stderr, "using header: %s\n", header);
+
+	/*
+	 * We keep a running sha1 so that if you are munging
+	 * near the end of the file, we do not have to re-sha1
+	 * the unchanged earlier bytes
+	 */
+	SHA1_Init(&orig);
+	SHA1_Update(&orig, header, header_len);
+	if (start)
+		SHA1_Update(&orig, buf, start);
+
+	signal(SIGALRM, progress);
+	alarm(1);
+
+	for (i = start; i < len; i++) {
+		unsigned char c;
+		SHA_CTX x;
+
+#if 0
+		/*
+		 * deletion -- this would not actually work in practice,
+		 * I think, because we've already committed to a
+		 * particular size in the header. Ditto for addition
+		 * below. In those cases, you'd have to do the whole
+		 * sha1 from scratch, or possibly keep three running
+		 * "orig" sha1 computations going.
+		 */
+		memcpy(&x, &orig, sizeof(x));
+		SHA1_Update(&x, buf + i + 1, len - i - 1);
+		SHA1_Final(have, &x);
+		if (!memcmp(have, want, 20))
+			printf("i=%d, deletion\n", i);
+#endif
+
+		/*
+		 * replacement -- note that this tries each of the 256
+		 * possible bytes. If you suspect a single-bit flip,
+		 * it would be much shorter to just try the 8
+		 * bit-flipped variants.
+		 */
+		c = buf[i];
+		for (j = 0; j <= 0xff; j++) {
+			buf[i] = j;
+
+			memcpy(&x, &orig, sizeof(x));
+			SHA1_Update(&x, buf + i, len - i);
+			SHA1_Final(have, &x);
+			if (!memcmp(have, want, 20))
+				printf("i=%d, j=%02x\n", i, j);
+		}
+		buf[i] = c;
+
+#if 0
+		/* addition */
+		for (j = 0; j <= 0xff; j++) {
+			unsigned char extra = j;
+			memcpy(&x, &orig, sizeof(x));
+			SHA1_Update(&x, &extra, 1);
+			SHA1_Update(&x, buf + i, len - i);
+			SHA1_Final(have, &x);
+			if (!memcmp(have, want, 20))
+				printf("i=%d, addition=%02x", i, j);
+		}
+#endif
+
+		SHA1_Update(&orig, buf + i, 1);
+		counter++;
+	}
+
+	alarm(0);
+	fprintf(stderr, "\r%d\n", counter);
+	return 0;
+}
+--------------------------
# install howto/recover-corrupted-object-harder.txt /usr/share/doc/git-doc/howto/recover-corrupted-object-harder.txt
--- /usr/share/doc/git-doc/howto/revert-a-faulty-merge.txt	2016-03-21 09:24:29.000000000 -0600
+++ howto/revert-a-faulty-merge.txt	2016-10-03 14:24:18.000000000 -0600
@@ -54,7 +54,7 @@
 have some other changes on the mainline after W.
 
 If you merge the updated side branch (with D at its tip), none of the
-changes made in A nor B will be in the result, because they were reverted
+changes made in A or B will be in the result, because they were reverted
 by W.  That is what Alan saw.
 
 Linus explains the situation:
@@ -90,7 +90,7 @@
     $ git revert W
 
 This history would (ignoring possible conflicts between what W and W..Y
-changed) be equivalent to not having W nor Y at all in the history:
+changed) be equivalent to not having W or Y at all in the history:
 
  ---o---o---o---M---x---x-------x----
 	       /
# install howto/revert-a-faulty-merge.txt /usr/share/doc/git-doc/howto/revert-a-faulty-merge.txt
--- /usr/share/doc/git-doc/howto/revert-branch-rebase.txt	2016-03-21 09:24:29.000000000 -0600
+++ howto/revert-branch-rebase.txt	2016-10-03 14:24:18.000000000 -0600
@@ -137,7 +137,7 @@
 ------------------------------------------------
 
 Everything is in the good order.  I do not need the temporary branch
-nor tag anymore, so remove them:
+or tag anymore, so remove them:
 
 ------------------------------------------------
 $ rm -f .git/refs/tags/pu-anchor
# install howto/revert-branch-rebase.txt /usr/share/doc/git-doc/howto/revert-branch-rebase.txt
--- /usr/share/doc/git-doc/howto/setup-git-server-over-http.txt	2016-03-21 09:24:29.000000000 -0600
+++ howto/setup-git-server-over-http.txt	2016-10-03 14:24:18.000000000 -0600
@@ -181,7 +181,7 @@
 
    Most tests should pass.
 
-A command line tool to test WebDAV is cadaver. If you prefer GUIs, for
+A command-line tool to test WebDAV is cadaver. If you prefer GUIs, for
 example, konqueror can open WebDAV URLs as "webdav://..." or
 "webdavs://...".
 
# install howto/setup-git-server-over-http.txt /usr/share/doc/git-doc/howto/setup-git-server-over-http.txt
# install howto/keep-canonical-history-correct.html /usr/share/doc/git-doc/howto/keep-canonical-history-correct.html
--- /usr/share/doc/git-doc/howto/new-command.html	2016-03-21 09:24:29.000000000 -0600
+++ howto/new-command.html	2016-10-15 00:44:32.576075524 -0600
@@ -840,8 +840,10 @@
 There is a file command-list.txt in the distribution main directory
 that categorizes commands by type, so they can be listed in appropriate
 subsections in the documentation&#8217;s summary command list.  Add an entry
-for yours.  To understand the categories, look at git-commands.txt
-in the main directory.
+for yours.  To understand the categories, look at command-list.txt
+in the main directory.  If the new command is part of the typical Git
+workflow and you believe it common enough to be mentioned in <em>git help</em>,
+map this command to a common group in the column [common].
 </p>
 </li>
 <li>
# install howto/new-command.html /usr/share/doc/git-doc/howto/new-command.html
--- /usr/share/doc/git-doc/howto/rebase-from-internal-branch.html	2016-03-21 09:24:29.000000000 -0600
+++ howto/rebase-from-internal-branch.html	2016-10-15 00:44:35.896075586 -0600
@@ -863,7 +863,7 @@
 <pre><code>$ git fetch upstream</code></pre>
 </div></div>
 <div class="paragraph"><p>This leaves the updated upstream head in .git/FETCH_HEAD but
-does not touch your .git/HEAD nor .git/refs/heads/master.
+does not touch your .git/HEAD or .git/refs/heads/master.
 You run "git rebase" now.</p></div>
 <div class="literalblock">
 <div class="content">
# install howto/rebase-from-internal-branch.html /usr/share/doc/git-doc/howto/rebase-from-internal-branch.html
--- /usr/share/doc/git-doc/howto/recover-corrupted-object-harder.html	2016-03-21 09:24:29.000000000 -0600
+++ howto/recover-corrupted-object-harder.html	2016-10-15 00:44:35.408075577 -0600
@@ -766,7 +766,7 @@
 <div class="paragraph"><p>Reading the zlib source code, I found that "incorrect data check" means
 that the adler-32 checksum at the end of the zlib data did not match the
 inflated data. So stepping the data through zlib would not help, as it
-did not fail until the very end, when we realize the crc does not match.
+did not fail until the very end, when we realize the CRC does not match.
 The problematic bytes could be anywhere in the object data.</p></div>
 <div class="paragraph"><p>The first thing I did was pull the broken data out of the packfile. I
 needed to know how big the object was, which I found out with:</p></div>
@@ -910,7 +910,7 @@
 <pre><code>  i=5642, j=c7</code></pre>
 </div></div>
 <div class="paragraph"><p>I let it run to completion, and got a few more hits at the end (where it
-was munging the crc to match our broken data). So there was a good
+was munging the CRC to match our broken data). So there was a good
 chance this middle hit was the source of the problem.</p></div>
 <div class="paragraph"><p>I confirmed by tweaking the byte in a hex editor, zlib inflating the
 result (no errors!), and then piping the output into "git hash-object",
@@ -949,6 +949,240 @@
 have been blamed on some random commit).</p></div>
 </div>
 </div>
+<div class="sect1">
+<h2 id="_the_adventure_continues_8230">The adventure continues&#8230;</h2>
+<div class="sectionbody">
+<div class="paragraph"><p>I ended up doing this again! Same entity, new hardware. The assumption
+at this point is that the old disk corrupted the packfile, and then the
+corruption was migrated to the new hardware (because it was done by
+rsync or similar, and no fsck was done at the time of migration).</p></div>
+<div class="paragraph"><p>This time, the affected blob was over 20 megabytes, which was far too
+large to do a brute-force on. I followed the instructions above to
+create the <code>zlib</code> file. I then used the <code>inflate</code> program below to pull
+the corrupted data from that. Examining that output gave me a hint about
+where in the file the corruption was. But now I was working with the
+file itself, not the zlib contents. So knowing the sha1 of the object
+and the approximate area of the corruption, I used the <code>sha1-munge</code>
+program below to brute-force the correct byte.</p></div>
+<div class="paragraph"><p>Here&#8217;s the inflate program (it&#8217;s essentially <code>gunzip</code> but without the
+<code>.gz</code> header processing):</p></div>
+<div class="listingblock">
+<div class="content">
+<pre><code>#include &lt;stdio.h&gt;
+#include &lt;string.h&gt;
+#include &lt;zlib.h&gt;
+#include &lt;stdlib.h&gt;
+
+int main(int argc, char **argv)
+{
+        /*
+         * oversized so we can read the whole buffer in;
+         * this could actually be switched to streaming
+         * to avoid any memory limitations
+         */
+        static unsigned char buf[25 * 1024 * 1024];
+        static unsigned char out[25 * 1024 * 1024];
+        int len;
+        z_stream z;
+        int ret;
+
+        len = read(0, buf, sizeof(buf));
+        memset(&amp;z, 0, sizeof(z));
+        inflateInit(&amp;z);
+
+        z.next_in = buf;
+        z.avail_in = len;
+        z.next_out = out;
+        z.avail_out = sizeof(out);
+
+        ret = inflate(&amp;z, 0);
+        if (ret != Z_OK &amp;&amp; ret != Z_STREAM_END)
+                fprintf(stderr, "initial inflate failed (%d)\n", ret);
+
+        fprintf(stderr, "outputting %lu bytes", z.total_out);
+        fwrite(out, 1, z.total_out, stdout);
+        return 0;
+}</code></pre>
+</div></div>
+<div class="paragraph"><p>And here is the <code>sha1-munge</code> program:</p></div>
+<div class="listingblock">
+<div class="content">
+<pre><code>#include &lt;stdio.h&gt;
+#include &lt;unistd.h&gt;
+#include &lt;string.h&gt;
+#include &lt;signal.h&gt;
+#include &lt;openssl/sha.h&gt;
+#include &lt;stdlib.h&gt;
+
+/* eye candy */
+static int counter = 0;
+static void progress(int sig)
+{
+        fprintf(stderr, "\r%d", counter);
+        alarm(1);
+}
+
+static const signed char hexval_table[256] = {
+         -1, -1, -1, -1, -1, -1, -1, -1,                /* 00-07 */
+         -1, -1, -1, -1, -1, -1, -1, -1,                /* 08-0f */
+         -1, -1, -1, -1, -1, -1, -1, -1,                /* 10-17 */
+         -1, -1, -1, -1, -1, -1, -1, -1,                /* 18-1f */
+         -1, -1, -1, -1, -1, -1, -1, -1,                /* 20-27 */
+         -1, -1, -1, -1, -1, -1, -1, -1,                /* 28-2f */
+          0,  1,  2,  3,  4,  5,  6,  7,                /* 30-37 */
+          8,  9, -1, -1, -1, -1, -1, -1,                /* 38-3f */
+         -1, 10, 11, 12, 13, 14, 15, -1,                /* 40-47 */
+         -1, -1, -1, -1, -1, -1, -1, -1,                /* 48-4f */
+         -1, -1, -1, -1, -1, -1, -1, -1,                /* 50-57 */
+         -1, -1, -1, -1, -1, -1, -1, -1,                /* 58-5f */
+         -1, 10, 11, 12, 13, 14, 15, -1,                /* 60-67 */
+         -1, -1, -1, -1, -1, -1, -1, -1,                /* 68-67 */
+         -1, -1, -1, -1, -1, -1, -1, -1,                /* 70-77 */
+         -1, -1, -1, -1, -1, -1, -1, -1,                /* 78-7f */
+         -1, -1, -1, -1, -1, -1, -1, -1,                /* 80-87 */
+         -1, -1, -1, -1, -1, -1, -1, -1,                /* 88-8f */
+         -1, -1, -1, -1, -1, -1, -1, -1,                /* 90-97 */
+         -1, -1, -1, -1, -1, -1, -1, -1,                /* 98-9f */
+         -1, -1, -1, -1, -1, -1, -1, -1,                /* a0-a7 */
+         -1, -1, -1, -1, -1, -1, -1, -1,                /* a8-af */
+         -1, -1, -1, -1, -1, -1, -1, -1,                /* b0-b7 */
+         -1, -1, -1, -1, -1, -1, -1, -1,                /* b8-bf */
+         -1, -1, -1, -1, -1, -1, -1, -1,                /* c0-c7 */
+         -1, -1, -1, -1, -1, -1, -1, -1,                /* c8-cf */
+         -1, -1, -1, -1, -1, -1, -1, -1,                /* d0-d7 */
+         -1, -1, -1, -1, -1, -1, -1, -1,                /* d8-df */
+         -1, -1, -1, -1, -1, -1, -1, -1,                /* e0-e7 */
+         -1, -1, -1, -1, -1, -1, -1, -1,                /* e8-ef */
+         -1, -1, -1, -1, -1, -1, -1, -1,                /* f0-f7 */
+         -1, -1, -1, -1, -1, -1, -1, -1,                /* f8-ff */
+};
+
+static inline unsigned int hexval(unsigned char c)
+{
+return hexval_table[c];
+}
+
+static int get_sha1_hex(const char *hex, unsigned char *sha1)
+{
+        int i;
+        for (i = 0; i &lt; 20; i++) {
+                unsigned int val;
+                /*
+                 * hex[1]=='\0' is caught when val is checked below,
+                 * but if hex[0] is NUL we have to avoid reading
+                 * past the end of the string:
+                 */
+                if (!hex[0])
+                        return -1;
+                val = (hexval(hex[0]) &lt;&lt; 4) | hexval(hex[1]);
+                if (val &amp; ~0xff)
+                        return -1;
+                *sha1++ = val;
+                hex += 2;
+        }
+        return 0;
+}
+
+int main(int argc, char **argv)
+{
+        /* oversized so we can read the whole buffer in */
+        static unsigned char buf[25 * 1024 * 1024];
+        char header[32];
+        int header_len;
+        unsigned char have[20], want[20];
+        int start, len;
+        SHA_CTX orig;
+        unsigned i, j;
+
+        if (!argv[1] || get_sha1_hex(argv[1], want)) {
+                fprintf(stderr, "usage: sha1-munge &lt;sha1&gt; [start] &lt;file.in\n");
+                return 1;
+        }
+
+        if (argv[2])
+                start = atoi(argv[2]);
+        else
+                start = 0;
+
+        len = read(0, buf, sizeof(buf));
+        header_len = sprintf(header, "blob %d", len) + 1;
+        fprintf(stderr, "using header: %s\n", header);
+
+        /*
+         * We keep a running sha1 so that if you are munging
+         * near the end of the file, we do not have to re-sha1
+         * the unchanged earlier bytes
+         */
+        SHA1_Init(&amp;orig);
+        SHA1_Update(&amp;orig, header, header_len);
+        if (start)
+                SHA1_Update(&amp;orig, buf, start);
+
+        signal(SIGALRM, progress);
+        alarm(1);
+
+        for (i = start; i &lt; len; i++) {
+                unsigned char c;
+                SHA_CTX x;
+
+#if 0
+                /*
+                 * deletion -- this would not actually work in practice,
+                 * I think, because we've already committed to a
+                 * particular size in the header. Ditto for addition
+                 * below. In those cases, you'd have to do the whole
+                 * sha1 from scratch, or possibly keep three running
+                 * "orig" sha1 computations going.
+                 */
+                memcpy(&amp;x, &amp;orig, sizeof(x));
+                SHA1_Update(&amp;x, buf + i + 1, len - i - 1);
+                SHA1_Final(have, &amp;x);
+                if (!memcmp(have, want, 20))
+                        printf("i=%d, deletion\n", i);
+#endif
+
+                /*
+                 * replacement -- note that this tries each of the 256
+                 * possible bytes. If you suspect a single-bit flip,
+                 * it would be much shorter to just try the 8
+                 * bit-flipped variants.
+                 */
+                c = buf[i];
+                for (j = 0; j &lt;= 0xff; j++) {
+                        buf[i] = j;
+
+                        memcpy(&amp;x, &amp;orig, sizeof(x));
+                        SHA1_Update(&amp;x, buf + i, len - i);
+                        SHA1_Final(have, &amp;x);
+                        if (!memcmp(have, want, 20))
+                                printf("i=%d, j=%02x\n", i, j);
+                }
+                buf[i] = c;
+
+#if 0
+                /* addition */
+                for (j = 0; j &lt;= 0xff; j++) {
+                        unsigned char extra = j;
+                        memcpy(&amp;x, &amp;orig, sizeof(x));
+                        SHA1_Update(&amp;x, &amp;extra, 1);
+                        SHA1_Update(&amp;x, buf + i, len - i);
+                        SHA1_Final(have, &amp;x);
+                        if (!memcmp(have, want, 20))
+                                printf("i=%d, addition=%02x", i, j);
+                }
+#endif
+
+                SHA1_Update(&amp;orig, buf + i, 1);
+                counter++;
+        }
+
+        alarm(0);
+        fprintf(stderr, "\r%d\n", counter);
+        return 0;
+}</code></pre>
+</div></div>
+</div>
+</div>
 </div>
 <div id="footnotes"><hr /></div>
 <div id="footer">
# install howto/recover-corrupted-object-harder.html /usr/share/doc/git-doc/howto/recover-corrupted-object-harder.html
--- /usr/share/doc/git-doc/howto/revert-a-faulty-merge.html	2016-03-21 09:24:29.000000000 -0600
+++ howto/revert-a-faulty-merge.html	2016-10-15 00:44:34.784075566 -0600
@@ -783,7 +783,7 @@
 <div class="paragraph"><p>where C and D are to fix what was broken in A and B, and you may already
 have some other changes on the mainline after W.</p></div>
 <div class="paragraph"><p>If you merge the updated side branch (with D at its tip), none of the
-changes made in A nor B will be in the result, because they were reverted
+changes made in A or B will be in the result, because they were reverted
 by W.  That is what Alan saw.</p></div>
 <div class="paragraph"><p>Linus explains the situation:</p></div>
 <div class="literalblock">
@@ -827,7 +827,7 @@
 <pre><code>$ git revert W</code></pre>
 </div></div>
 <div class="paragraph"><p>This history would (ignoring possible conflicts between what W and W..Y
-changed) be equivalent to not having W nor Y at all in the history:</p></div>
+changed) be equivalent to not having W or Y at all in the history:</p></div>
 <div class="literalblock">
 <div class="content">
 <pre><code>---o---o---o---M---x---x-------x----
# install howto/revert-a-faulty-merge.html /usr/share/doc/git-doc/howto/revert-a-faulty-merge.html
--- /usr/share/doc/git-doc/howto/revert-branch-rebase.html	2016-03-21 09:24:29.000000000 -0600
+++ howto/revert-branch-rebase.html	2016-10-15 00:44:32.852075529 -0600
@@ -853,7 +853,7 @@
 $ make clean test ;# make sure it did not cause other breakage.</code></pre>
 </div></div>
 <div class="paragraph"><p>Everything is in the good order.  I do not need the temporary branch
-nor tag anymore, so remove them:</p></div>
+or tag anymore, so remove them:</p></div>
 <div class="listingblock">
 <div class="content">
 <pre><code>$ rm -f .git/refs/tags/pu-anchor
# install howto/revert-branch-rebase.html /usr/share/doc/git-doc/howto/revert-branch-rebase.html
--- /usr/share/doc/git-doc/howto/setup-git-server-over-http.html	2016-03-21 09:24:29.000000000 -0600
+++ howto/setup-git-server-over-http.html	2016-10-15 00:44:34.172075554 -0600
@@ -745,7 +745,7 @@
 </td>
 <td class="content">This document is from 2006.  A lot has happened since then, and this
 document is now relevant mainly if your web host is not CGI capable.
-Almost everyone else should instead look at linkgit:git-http-backend[1].</td>
+Almost everyone else should instead look at <a href="../git-http-backend.html">git-http-backend(1)</a>.</td>
 </tr></table>
 </div>
 <div class="paragraph"><p>Since Apache is one of those packages people like to compile
@@ -966,7 +966,7 @@
 <div class="content">
 <pre><code>Most tests should pass.</code></pre>
 </div></div>
-<div class="paragraph"><p>A command line tool to test WebDAV is cadaver. If you prefer GUIs, for
+<div class="paragraph"><p>A command-line tool to test WebDAV is cadaver. If you prefer GUIs, for
 example, konqueror can open WebDAV URLs as "webdav://&#8230;" or
 "webdavs://&#8230;".</p></div>
 <div class="paragraph"><p>If you&#8217;re into Windows, from XP onwards Internet Explorer supports
# install howto/setup-git-server-over-http.html /usr/share/doc/git-doc/howto/setup-git-server-over-http.html
--- /usr/share/doc/git-doc/technical/api-allocation-growing.txt	2016-03-21 09:24:30.000000000 -0600
+++ technical/api-allocation-growing.txt	2016-10-03 14:24:18.000000000 -0600
@@ -34,3 +34,6 @@
 ------------
 
 You are responsible for updating the `nr` variable.
+
+If you need to specify the number of elements to allocate explicitly
+then use the macro `REALLOC_ARRAY(item, alloc)` instead of `ALLOC_GROW`.
# install technical/api-allocation-growing.txt /usr/share/doc/git-doc/technical/api-allocation-growing.txt
--- /usr/share/doc/git-doc/technical/api-argv-array.txt	2016-03-21 09:24:30.000000000 -0600
+++ technical/api-argv-array.txt	2016-10-03 14:24:18.000000000 -0600
@@ -46,6 +46,9 @@
 	Format a string and push it onto the end of the array. This is a
 	convenience wrapper combining `strbuf_addf` and `argv_array_push`.
 
+`argv_array_pushv`::
+	Push a null-terminated array of strings onto the end of the array.
+
 `argv_array_pop`::
 	Remove the final element from the array. If there are no
 	elements in the array, do nothing.
@@ -55,9 +58,8 @@
 	initial, empty state.
 
 `argv_array_detach`::
-	Detach the argv array from the `struct argv_array`, transferring
-	ownership of the allocated array and strings.
-
-`argv_array_free_detached`::
-	Free the memory allocated by a `struct argv_array` that was later
-	detached and is now no longer needed.
+	Disconnect the `argv` member from the `argv_array` struct and
+	return it. The caller is responsible for freeing the memory used
+	by the array, and by the strings it references. After detaching,
+	the `argv_array` is in a reinitialized state and can be pushed
+	into again.
# install technical/api-argv-array.txt /usr/share/doc/git-doc/technical/api-argv-array.txt
--- /usr/share/doc/git-doc/technical/api-builtin.txt	2016-03-21 09:24:30.000000000 -0600
+++ technical/api-builtin.txt	2016-10-03 14:24:18.000000000 -0600
@@ -22,11 +22,14 @@
 where options is the bitwise-or of:
 
 `RUN_SETUP`::
+	If there is not a Git directory to work on, abort.  If there
+	is a work tree, chdir to the top of it if the command was
+	invoked in a subdirectory.  If there is no work tree, no
+	chdir() is done.
 
-	Make sure there is a Git directory to work on, and if there is a
-	work tree, chdir to the top of it if the command was invoked
-	in a subdirectory.  If there is no work tree, no chdir() is
-	done.
+`RUN_SETUP_GENTLY`::
+	If there is a Git directory, chdir as per RUN_SETUP, otherwise,
+	don't chdir anywhere.
 
 `USE_PAGER`::
 
# install technical/api-builtin.txt /usr/share/doc/git-doc/technical/api-builtin.txt
--- /usr/share/doc/git-doc/technical/api-config.txt	2016-03-21 09:24:30.000000000 -0600
+++ technical/api-config.txt	2016-10-03 14:24:18.000000000 -0600
@@ -63,13 +63,6 @@
 Specify whether include directives should be followed in parsed files.
 Regular `git_config` defaults to `1`.
 
-There is a special version of `git_config` called `git_config_early`.
-This version takes an additional parameter to specify the repository
-config, instead of having it looked up via `git_path`. This is useful
-early in a Git program before the repository has been found. Unless
-you're working with early setup code, you probably don't want to use
-this.
-
 Reading Specific Files
 ----------------------
 
@@ -77,6 +70,99 @@
 `git_config_from_file`. This takes the same callback and data parameters
 as `git_config`.
 
+Querying For Specific Variables
+-------------------------------
+
+For programs wanting to query for specific variables in a non-callback
+manner, the config API provides two functions `git_config_get_value`
+and `git_config_get_value_multi`. They both read values from an internal
+cache generated previously from reading the config files.
+
+`int git_config_get_value(const char *key, const char **value)`::
+
+	Finds the highest-priority value for the configuration variable `key`,
+	stores the pointer to it in `value` and returns 0. When the
+	configuration variable `key` is not found, returns 1 without touching
+	`value`. The caller should not free or modify `value`, as it is owned
+	by the cache.
+
+`const struct string_list *git_config_get_value_multi(const char *key)`::
+
+	Finds and returns the value list, sorted in order of increasing priority
+	for the configuration variable `key`. When the configuration variable
+	`key` is not found, returns NULL. The caller should not free or modify
+	the returned pointer, as it is owned by the cache.
+
+`void git_config_clear(void)`::
+
+	Resets and invalidates the config cache.
+
+The config API also provides type specific API functions which do conversion
+as well as retrieval for the queried variable, including:
+
+`int git_config_get_int(const char *key, int *dest)`::
+
+	Finds and parses the value to an integer for the configuration variable
+	`key`. Dies on error; otherwise, stores the value of the parsed integer in
+	`dest` and returns 0. When the configuration variable `key` is not found,
+	returns 1 without touching `dest`.
+
+`int git_config_get_ulong(const char *key, unsigned long *dest)`::
+
+	Similar to `git_config_get_int` but for unsigned longs.
+
+`int git_config_get_bool(const char *key, int *dest)`::
+
+	Finds and parses the value into a boolean value, for the configuration
+	variable `key` respecting keywords like "true" and "false". Integer
+	values are converted into true/false values (when they are non-zero or
+	zero, respectively). Other values cause a die(). If parsing is successful,
+	stores the value of the parsed result in `dest` and returns 0. When the
+	configuration variable `key` is not found, returns 1 without touching
+	`dest`.
+
+`int git_config_get_bool_or_int(const char *key, int *is_bool, int *dest)`::
+
+	Similar to `git_config_get_bool`, except that integers are copied as-is,
+	and `is_bool` flag is unset.
+
+`int git_config_get_maybe_bool(const char *key, int *dest)`::
+
+	Similar to `git_config_get_bool`, except that it returns -1 on error
+	rather than dying.
+
+`int git_config_get_string_const(const char *key, const char **dest)`::
+
+	Allocates and copies the retrieved string into the `dest` parameter for
+	the configuration variable `key`; if NULL string is given, prints an
+	error message and returns -1. When the configuration variable `key` is
+	not found, returns 1 without touching `dest`.
+
+`int git_config_get_string(const char *key, char **dest)`::
+
+	Similar to `git_config_get_string_const`, except that retrieved value
+	copied into the `dest` parameter is a mutable string.
+
+`int git_config_get_pathname(const char *key, const char **dest)`::
+
+	Similar to `git_config_get_string`, but expands `~` or `~user` into
+	the user's home directory when found at the beginning of the path.
+
+`git_die_config(const char *key, const char *err, ...)`::
+
+	First prints the error message specified by the caller in `err` and then
+	dies printing the line number and the file name of the highest priority
+	value for the configuration variable `key`.
+
+`void git_die_config_linenr(const char *key, const char *filename, int linenr)`::
+
+	Helper function which formats the die error message according to the
+	parameters entered. Used by `git_die_config()`. It can be used by callers
+	handling `git_config_get_value_multi()` to print the correct error message
+	for the desired value.
+
+See test-config.c for usage examples.
+
 Value Parsing Helpers
 ---------------------
 
@@ -134,7 +220,98 @@
 `git_config` respects includes automatically. The lower-level
 `git_config_from_file` does not.
 
+Custom Configsets
+-----------------
+
+A `config_set` can be used to construct an in-memory cache for
+config-like files that the caller specifies (i.e., files like `.gitmodules`,
+`~/.gitconfig` etc.). For example,
+
+---------------------------------------
+struct config_set gm_config;
+git_configset_init(&gm_config);
+int b;
+/* we add config files to the config_set */
+git_configset_add_file(&gm_config, ".gitmodules");
+git_configset_add_file(&gm_config, ".gitmodules_alt");
+
+if (!git_configset_get_bool(gm_config, "submodule.frotz.ignore", &b)) {
+	/* hack hack hack */
+}
+
+/* when we are done with the configset */
+git_configset_clear(&gm_config);
+----------------------------------------
+
+Configset API provides functions for the above mentioned work flow, including:
+
+`void git_configset_init(struct config_set *cs)`::
+
+	Initializes the config_set `cs`.
+
+`int git_configset_add_file(struct config_set *cs, const char *filename)`::
+
+	Parses the file and adds the variable-value pairs to the `config_set`,
+	dies if there is an error in parsing the file. Returns 0 on success, or
+	-1 if the file does not exist or is inaccessible. The user has to decide
+	if he wants to free the incomplete configset or continue using it when
+	the function returns -1.
+
+`int git_configset_get_value(struct config_set *cs, const char *key, const char **value)`::
+
+	Finds the highest-priority value for the configuration variable `key`
+	and config set `cs`, stores the pointer to it in `value` and returns 0.
+	When the configuration variable `key` is not found, returns 1 without
+	touching `value`. The caller should not free or modify `value`, as it
+	is owned by the cache.
+
+`const struct string_list *git_configset_get_value_multi(struct config_set *cs, const char *key)`::
+
+	Finds and returns the value list, sorted in order of increasing priority
+	for the configuration variable `key` and config set `cs`. When the
+	configuration variable `key` is not found, returns NULL. The caller
+	should not free or modify the returned pointer, as it is owned by the cache.
+
+`void git_configset_clear(struct config_set *cs)`::
+
+	Clears `config_set` structure, removes all saved variable-value pairs.
+
+In addition to above functions, the `config_set` API provides type specific
+functions in the vein of `git_config_get_int` and family but with an extra
+parameter, pointer to struct `config_set`.
+They all behave similarly to the `git_config_get*()` family described in
+"Querying For Specific Variables" above.
+
 Writing Config Files
 --------------------
 
-TODO
+Git gives multiple entry points in the Config API to write config values to
+files namely `git_config_set_in_file` and `git_config_set`, which write to
+a specific config file or to `.git/config` respectively. They both take a
+key/value pair as parameter.
+In the end they both call `git_config_set_multivar_in_file` which takes four
+parameters:
+
+- the name of the file, as a string, to which key/value pairs will be written.
+
+- the name of key, as a string. This is in canonical "flat" form: the section,
+  subsection, and variable segments will be separated by dots, and the section
+  and variable segments will be all lowercase.
+  E.g., `core.ignorecase`, `diff.SomeType.textconv`.
+
+- the value of the variable, as a string. If value is equal to NULL, it will
+  remove the matching key from the config file.
+
+- the value regex, as a string. It will disregard key/value pairs where value
+  does not match.
+
+- a multi_replace value, as an int. If value is equal to zero, nothing or only
+  one matching key/value is replaced, else all matching key/values (regardless
+  how many) are removed, before the new pair is written.
+
+It returns 0 on success.
+
+Also, there are functions `git_config_rename_section` and
+`git_config_rename_section_in_file` with parameters `old_name` and `new_name`
+for renaming or removing sections in the config files. If NULL is passed
+through `new_name` parameter, the section will be removed from the config file.
# install technical/api-config.txt /usr/share/doc/git-doc/technical/api-config.txt
--- /usr/share/doc/git-doc/technical/api-credentials.txt	2016-03-21 09:24:30.000000000 -0600
+++ technical/api-credentials.txt	2016-10-03 14:24:18.000000000 -0600
@@ -243,12 +243,15 @@
 The details of the credential will be provided on the helper's stdin
 stream. The exact format is the same as the input/output format of the
 `git credential` plumbing command (see the section `INPUT/OUTPUT
-FORMAT` in linkgit:git-credential[7] for a detailed specification).
+FORMAT` in linkgit:git-credential[1] for a detailed specification).
 
 For a `get` operation, the helper should produce a list of attributes
 on stdout in the same format. A helper is free to produce a subset, or
 even no values at all if it has nothing useful to provide. Any provided
-attributes will overwrite those already known about by Git.
+attributes will overwrite those already known about by Git.  If a helper
+outputs a `quit` attribute with a value of `true` or `1`, no further
+helpers will be consulted, nor will the user be prompted (if no
+credential has been provided, the operation will then fail).
 
 For a `store` or `erase` operation, the helper's output is ignored.
 If it fails to perform the requested operation, it may complain to
@@ -265,4 +268,4 @@
 
 linkgit:gitcredentials[7]
 
-linkgit:git-config[5] (See configuration variables `credential.*`)
+linkgit:git-config[1] (See configuration variables `credential.*`)
# install technical/api-credentials.txt /usr/share/doc/git-doc/technical/api-credentials.txt
# install technical/api-error-handling.txt /usr/share/doc/git-doc/technical/api-error-handling.txt
--- /usr/share/doc/git-doc/technical/api-gitattributes.txt	2016-03-21 09:24:30.000000000 -0600
+++ technical/api-gitattributes.txt	2016-10-03 14:24:18.000000000 -0600
@@ -99,7 +99,7 @@
 		The attribute is Unset, by listing the name of the
 		attribute prefixed with a dash - for the path.
 	} else if (ATTR_UNSET(value)) {
-		The attribute is not set nor unset for the path.
+		The attribute is neither set nor unset for the path.
 	} else if (!strcmp(value, "input")) {
 		If none of ATTR_TRUE(), ATTR_FALSE(), or ATTR_UNSET() is
 		true, the value is a string set in the gitattributes
# install technical/api-gitattributes.txt /usr/share/doc/git-doc/technical/api-gitattributes.txt
# install technical/api-hashmap.txt /usr/share/doc/git-doc/technical/api-hashmap.txt
--- /usr/share/doc/git-doc/technical/api-index.txt	2016-03-21 09:24:30.000000000 -0600
+++ technical/api-index.txt	2016-10-15 00:44:48.136075816 -0600
@@ -15,12 +15,12 @@
 * link:api-decorate.html[decorate API]
 * link:api-diff.html[diff API]
 * link:api-directory-listing.html[directory listing API]
+* link:api-error-handling.html[Error reporting in git]
 * link:api-gitattributes.html[gitattributes API]
 * link:api-grep.html[grep API]
-* link:api-hash.html[hash API]
+* link:api-hashmap.html[hashmap API]
 * link:api-history-graph.html[history graph API]
 * link:api-in-core-index.html[in-core index API]
-* link:api-lockfile.html[lockfile API]
 * link:api-merge.html[merge API]
 * link:api-object-access.html[object access API]
 * link:api-parse-options.html[parse-options API]
@@ -32,8 +32,9 @@
 * link:api-setup.html[setup API]
 * link:api-sha1-array.html[sha1-array API]
 * link:api-sigchain.html[sigchain API]
-* link:api-strbuf.html[strbuf API]
 * link:api-string-list.html[string-list API]
+* link:api-submodule-config.html[submodule config cache API]
+* link:api-trace.html[trace API]
 * link:api-tree-walking.html[tree walking API]
 * link:api-xdiff-interface.html[xdiff interface API]
 ////////////////////////////////////////////////////////////////
# install technical/api-index.txt /usr/share/doc/git-doc/technical/api-index.txt
--- /usr/share/doc/git-doc/technical/api-parse-options.txt	2016-03-21 09:24:30.000000000 -0600
+++ technical/api-parse-options.txt	2016-10-03 14:24:18.000000000 -0600
@@ -144,8 +144,12 @@
 
 `OPT_COUNTUP(short, long, &int_var, description)`::
 	Introduce a count-up option.
-	`int_var` is incremented on each use of `--option`, and
-	reset to zero with `--no-option`.
+	Each use of `--option` increments `int_var`, starting from zero
+	(even if initially negative), and `--no-option` resets it to
+	zero. To determine if `--option` or `--no-option` was encountered at
+	all, initialize `int_var` to a negative value, and if it is still
+	negative after parse_options(), then neither `--option` nor
+	`--no-option` was seen.
 
 `OPT_BIT(short, long, &int_var, description, mask)`::
 	Introduce a boolean option.
@@ -160,10 +164,6 @@
 	`int_var` is set to `integer` with `--option`, and
 	reset to zero with `--no-option`.
 
-`OPT_SET_PTR(short, long, &ptr_var, description, ptr)`::
-	Introduce a boolean option.
-	If used, set `ptr_var` to `ptr`.
-
 `OPT_STRING(short, long, &str_var, arg_str, description)`::
 	Introduce an option with string argument.
 	The string argument is put into `str_var`.
@@ -172,6 +172,12 @@
 	Introduce an option with integer argument.
 	The integer is put into `int_var`.
 
+`OPT_MAGNITUDE(short, long, &unsigned_long_var, description)`::
+	Introduce an option with a size argument. The argument must be a
+	non-negative integer and may include a suffix of 'k', 'm' or 'g' to
+	scale the provided value by 1024, 1024^2 or 1024^3 respectively.
+	The scaled value is put into `unsigned_long_var`.
+
 `OPT_DATE(short, long, &int_var, description)`::
 	Introduce an option with date argument, see `approxidate()`.
 	The timestamp is put into `int_var`.
@@ -216,6 +222,26 @@
 	Use it to hide deprecated options that are still to be recognized
 	and ignored silently.
 
+`OPT_PASSTHRU(short, long, &char_var, arg_str, description, flags)`::
+	Introduce an option that will be reconstructed into a char* string,
+	which must be initialized to NULL. This is useful when you need to
+	pass the command-line option to another command. Any previous value
+	will be overwritten, so this should only be used for options where
+	the last one specified on the command line wins.
+
+`OPT_PASSTHRU_ARGV(short, long, &argv_array_var, arg_str, description, flags)`::
+	Introduce an option where all instances of it on the command-line will
+	be reconstructed into an argv_array. This is useful when you need to
+	pass the command-line option, which can be specified multiple times,
+	to another command.
+
+`OPT_CMDMODE(short, long, &int_var, description, enum_val)`::
+	Define an "operation mode" option, only one of which in the same
+	group of "operating mode" options that share the same `int_var`
+	can be given by the user. `enum_val` is set to `int_var` when the
+	option is used, but an error is reported if other "operating mode"
+	option has already set its value to the same `int_var`.
+
 
 The last element of the array must be `OPT_END()`.
 
# install technical/api-parse-options.txt /usr/share/doc/git-doc/technical/api-parse-options.txt
--- /usr/share/doc/git-doc/technical/api-ref-iteration.txt	2016-03-21 09:24:30.000000000 -0600
+++ technical/api-ref-iteration.txt	2016-10-03 14:24:18.000000000 -0600
@@ -6,7 +6,7 @@
 callback function for every ref. The callback function has this
 signature:
 
-	int handle_one_ref(const char *refname, const unsigned char *sha1,
+	int handle_one_ref(const char *refname, const struct object_id *oid,
 			   int flags, void *cb_data);
 
 There are different kinds of iterate functions which all take a
# install technical/api-ref-iteration.txt /usr/share/doc/git-doc/technical/api-ref-iteration.txt
--- /usr/share/doc/git-doc/technical/api-remote.txt	2016-03-21 09:24:30.000000000 -0600
+++ technical/api-remote.txt	2016-10-03 14:24:18.000000000 -0600
@@ -51,6 +51,10 @@
 
 	The proxy to use for curl (http, https, ftp, etc.) URLs.
 
+`http_proxy_authmethod`::
+
+	The method used for authenticating against `http_proxy`.
+
 struct remotes can be found by name with remote_get(), and iterated
 through with for_each_remote(). remote_get(NULL) will return the
 default remote, given the current branch and configuration.
@@ -97,10 +101,6 @@
 
 	The name of the remote listed in the configuration.
 
-`remote`::
-
-	The struct remote for that remote.
-
 `merge_name`::
 
 	An array of the "merge" lines in the configuration.
# install technical/api-remote.txt /usr/share/doc/git-doc/technical/api-remote.txt
--- /usr/share/doc/git-doc/technical/api-run-command.txt	2016-03-21 09:24:30.000000000 -0600
+++ technical/api-run-command.txt	2016-10-03 14:24:18.000000000 -0600
@@ -13,6 +13,10 @@
 Functions
 ---------
 
+`child_process_init`::
+
+	Initialize a struct child_process variable.
+
 `start_command`::
 
 	Start a sub-process. Takes a pointer to a `struct child_process`
@@ -42,6 +46,13 @@
 	The argument dir corresponds the member .dir. The argument env
 	corresponds to the member .env.
 
+`child_process_clear`::
+
+	Release the memory associated with the struct child_process.
+	Most users of the run-command API don't need to call this
+	function explicitly because `start_command` invokes it on
+	failure and `finish_command` calls it automatically already.
+
 The functions above do the following:
 
 . If a system call failed, errno is set and -1 is returned. A diagnostic
@@ -96,8 +107,8 @@
 
 The caller:
 
-1. allocates and clears (memset(&chld, 0, sizeof(chld));) a
-   struct child_process variable;
+1. allocates and clears (using child_process_init() or
+   CHILD_PROCESS_INIT) a struct child_process variable;
 2. initializes the members;
 3. calls start_command();
 4. processes the data;
@@ -109,6 +120,13 @@
 without a path). If the command to run is a git command, set argv[0] to
 the command name without the 'git-' prefix and set .git_cmd = 1.
 
+Note that the ownership of the memory pointed to by .argv stays with the
+caller, but it should survive until `finish_command` completes. If the
+.argv member is NULL, `start_command` will point it at the .args
+`argv_array` (so you may use one or the other, but you must use exactly
+one). The memory in .args will be cleaned up automatically during
+`finish_command` (or during `start_command` when it is unsuccessful).
+
 The members .in, .out, .err are used to redirect stdin, stdout,
 stderr as follows:
 
@@ -158,6 +176,11 @@
 . If the string does not contain '=', it names an environment
   variable that will be removed from the child process's environment.
 
+If the .env member is NULL, `start_command` will point it at the
+.env_array `argv_array` (so you may use one or the other, but not both).
+The memory in .env_array will be cleaned up automatically during
+`finish_command` (or during `start_command` when it is unsuccessful).
+
 To specify a new initial working directory for the sub-process,
 specify it in the .dir member.
 
# install technical/api-run-command.txt /usr/share/doc/git-doc/technical/api-run-command.txt
--- /usr/share/doc/git-doc/technical/api-string-list.txt	2016-03-21 09:24:30.000000000 -0600
+++ technical/api-string-list.txt	2016-10-03 14:24:18.000000000 -0600
@@ -29,7 +29,7 @@
   `unsorted_string_list_has_string` and get it from the list using
   `string_list_lookup` for sorted lists.
 
-. Can sort an unsorted list using `sort_string_list`.
+. Can sort an unsorted list using `string_list_sort`.
 
 . Can remove duplicate items from a sorted list using
   `string_list_remove_duplicates`.
@@ -68,6 +68,11 @@
 
 * General ones (works with sorted and unsorted lists as well)
 
+`string_list_init`::
+
+	Initialize the members of the string_list, set `strdup_strings`
+	member according to the value of the second parameter.
+
 `filter_string_list`::
 
 	Apply a function to each item in a list, retaining only the
@@ -141,7 +146,7 @@
 	ownership of a malloc()ed string to a `string_list` that has
 	`strdup_string` set.
 
-`sort_string_list`::
+`string_list_sort`::
 
 	Sort the list's entries by string value in `strcmp()` order.
 
@@ -200,3 +205,5 @@
   You should not tamper with it.
 . Setting the `strdup_strings` member to 1 will strdup() the strings
   before adding them, see above.
+. The `compare_strings_fn` member is used to specify a custom compare
+  function, otherwise `strcmp()` is used as the default function.
# install technical/api-string-list.txt /usr/share/doc/git-doc/technical/api-string-list.txt
# install technical/api-submodule-config.txt /usr/share/doc/git-doc/technical/api-submodule-config.txt
# install technical/api-trace.txt /usr/share/doc/git-doc/technical/api-trace.txt
# install technical/bitmap-format.txt /usr/share/doc/git-doc/technical/bitmap-format.txt
--- /usr/share/doc/git-doc/technical/http-protocol.txt	2016-03-21 09:24:30.000000000 -0600
+++ technical/http-protocol.txt	2016-10-03 14:24:18.000000000 -0600
@@ -60,7 +60,7 @@
 server administrators MAY use directory based permissions within
 their HTTP server to control repository access.
 
-Clients SHOULD support Basic authentication as described by RFC 2616.
+Clients SHOULD support Basic authentication as described by RFC 2617.
 Servers SHOULD support Basic authentication by relying upon the
 HTTP server placed in front of the Git server software.
 
@@ -319,7 +319,8 @@
 Clients MUST send at least one "want" command in the request body.
 Clients MUST NOT reference an id in a "want" command which did not
 appear in the response obtained through ref discovery unless the
-server advertises capability `allow-tip-sha1-in-want`.
+server advertises capability `allow-tip-sha1-in-want` or
+`allow-reachable-sha1-in-want`.
 
   compute_request   =  want_list
 		       have_list
@@ -374,7 +375,7 @@
    C: 0000
 
 The stream is organized into "commands", with each command
-appearing by itself in a pkt-line.  Within a command line
+appearing by itself in a pkt-line.  Within a command line,
 the text leading up to the first space is the command name,
 and the remainder of the line to the first LF is the value.
 Command lines are terminated with an LF as the last byte of
@@ -500,7 +501,7 @@
 References
 ----------
 
-link:http://www.ietf.org/rfc/rfc1738.txt[RFC 1738: Uniform Resource Locators (URL)]
-link:http://www.ietf.org/rfc/rfc2616.txt[RFC 2616: Hypertext Transfer Protocol -- HTTP/1.1]
+http://www.ietf.org/rfc/rfc1738.txt[RFC 1738: Uniform Resource Locators (URL)]
+http://www.ietf.org/rfc/rfc2616.txt[RFC 2616: Hypertext Transfer Protocol -- HTTP/1.1]
 link:technical/pack-protocol.html
 link:technical/protocol-capabilities.html
# install technical/http-protocol.txt /usr/share/doc/git-doc/technical/http-protocol.txt
--- /usr/share/doc/git-doc/technical/index-format.txt	2016-03-21 09:24:30.000000000 -0600
+++ technical/index-format.txt	2016-10-03 14:24:18.000000000 -0600
@@ -129,6 +129,9 @@
   (Version 4) In version 4, the padding after the pathname does not
   exist.
 
+  Interpretation of index entries in split index mode is completely
+  different. See below for details.
+
 == Extensions
 
 === Cached tree
@@ -167,7 +170,7 @@
 
   The entries are written out in the top-down, depth-first order.  The
   first entry represents the root level of the repository, followed by the
-  first subtree---let's call this A---of the root level (with its name
+  first subtree--let's call this A--of the root level (with its name
   relative to the root level), followed by the first subtree of A (with
   its name relative to A), ...
 
@@ -198,3 +201,97 @@
   - At most three 160-bit object names of the entry in stages from 1 to 3
     (nothing is written for a missing stage).
 
+=== Split index
+
+  In split index mode, the majority of index entries could be stored
+  in a separate file. This extension records the changes to be made on
+  top of that to produce the final index.
+
+  The signature for this extension is { 'l', 'i', 'n', 'k' }.
+
+  The extension consists of:
+
+  - 160-bit SHA-1 of the shared index file. The shared index file path
+    is $GIT_DIR/sharedindex.<SHA-1>. If all 160 bits are zero, the
+    index does not require a shared index file.
+
+  - An ewah-encoded delete bitmap, each bit represents an entry in the
+    shared index. If a bit is set, its corresponding entry in the
+    shared index will be removed from the final index.  Note, because
+    a delete operation changes index entry positions, but we do need
+    original positions in replace phase, it's best to just mark
+    entries for removal, then do a mass deletion after replacement.
+
+  - An ewah-encoded replace bitmap, each bit represents an entry in
+    the shared index. If a bit is set, its corresponding entry in the
+    shared index will be replaced with an entry in this index
+    file. All replaced entries are stored in sorted order in this
+    index. The first "1" bit in the replace bitmap corresponds to the
+    first index entry, the second "1" bit to the second entry and so
+    on. Replaced entries may have empty path names to save space.
+
+  The remaining index entries after replaced ones will be added to the
+  final index. These added entries are also sorted by entry name then
+  stage.
+
+== Untracked cache
+
+  Untracked cache saves the untracked file list and necessary data to
+  verify the cache. The signature for this extension is { 'U', 'N',
+  'T', 'R' }.
+
+  The extension starts with
+
+  - A sequence of NUL-terminated strings, preceded by the size of the
+    sequence in variable width encoding. Each string describes the
+    environment where the cache can be used.
+
+  - Stat data of $GIT_DIR/info/exclude. See "Index entry" section from
+    ctime field until "file size".
+
+  - Stat data of core.excludesfile
+
+  - 32-bit dir_flags (see struct dir_struct)
+
+  - 160-bit SHA-1 of $GIT_DIR/info/exclude. Null SHA-1 means the file
+    does not exist.
+
+  - 160-bit SHA-1 of core.excludesfile. Null SHA-1 means the file does
+    not exist.
+
+  - NUL-terminated string of per-dir exclude file name. This usually
+    is ".gitignore".
+
+  - The number of following directory blocks, variable width
+    encoding. If this number is zero, the extension ends here with a
+    following NUL.
+
+  - A number of directory blocks in depth-first-search order, each
+    consists of
+
+    - The number of untracked entries, variable width encoding.
+
+    - The number of sub-directory blocks, variable width encoding.
+
+    - The directory name terminated by NUL.
+
+    - A number of untracked file/dir names terminated by NUL.
+
+The remaining data of each directory block is grouped by type:
+
+  - An ewah bitmap, the n-th bit marks whether the n-th directory has
+    valid untracked cache entries.
+
+  - An ewah bitmap, the n-th bit records "check-only" bit of
+    read_directory_recursive() for the n-th directory.
+
+  - An ewah bitmap, the n-th bit indicates whether SHA-1 and stat data
+    is valid for the n-th directory and exists in the next data.
+
+  - An array of stat data. The n-th data corresponds with the n-th
+    "one" bit in the previous ewah bitmap.
+
+  - An array of SHA-1. The n-th SHA-1 corresponds with the n-th "one" bit
+    in the previous ewah bitmap.
+
+  - One NUL.
# install technical/index-format.txt /usr/share/doc/git-doc/technical/index-format.txt
--- /usr/share/doc/git-doc/technical/pack-protocol.txt	2016-03-21 09:24:30.000000000 -0600
+++ technical/pack-protocol.txt	2016-10-03 14:24:18.000000000 -0600
@@ -1,11 +1,11 @@
 Packfile transfer protocols
 ===========================
 
-Git supports transferring data in packfiles over the ssh://, git:// and
+Git supports transferring data in packfiles over the ssh://, git://, http:// and
 file:// transports.  There exist two sets of protocols, one for pushing
 data from a client to a server and another for fetching data from a
-server to a client.  All three transports (ssh, git, file) use the same
-protocol to transfer data.
+server to a client.  The three transports (ssh, git, file) use the same
+protocol to transfer data. http is documented in http-protocol.txt.
 
 The processes invoked in the canonical Git implementation are 'upload-pack'
 on the server side and 'fetch-pack' on the client side for fetching data;
@@ -14,6 +14,14 @@
 currently on the server, then for the two to negotiate the smallest amount
 of data to send in order to fully update one or the other.
 
+pkt-line Format
+---------------
+
+The descriptions below build on the pkt-line format described in
+protocol-common.txt. When the grammar indicate `PKT-LINE(...)`, unless
+otherwise noted the usual pkt-line LF rules apply: the sender SHOULD
+include a LF, but the receiver MUST NOT complain if it is not present.
+
 Transports
 ----------
 There are three transports over which the packfile protocol is
@@ -143,9 +151,6 @@
    003fe92df48743b7bc7d26bcaabfddde0a1e20cae47c refs/tags/v1.0^{}
    0000
 
-Server SHOULD terminate each non-flush line using LF ("\n") terminator;
-client MUST NOT complain if there is no terminator.
-
 The returned response is a pkt-line stream describing each ref and
 its current value.  The stream MUST be sorted by name according to
 the C locale ordering.
@@ -165,15 +170,15 @@
 		      flush-pkt
 
   no-refs          =  PKT-LINE(zero-id SP "capabilities^{}"
-		      NUL capability-list LF)
+		      NUL capability-list)
 
   list-of-refs     =  first-ref *other-ref
   first-ref        =  PKT-LINE(obj-id SP refname
-		      NUL capability-list LF)
+		      NUL capability-list)
 
   other-ref        =  PKT-LINE(other-tip / other-peeled)
-  other-tip        =  obj-id SP refname LF
-  other-peeled     =  obj-id SP refname "^{}" LF
+  other-tip        =  obj-id SP refname
+  other-peeled     =  obj-id SP refname "^{}"
 
   shallow          =  PKT-LINE("shallow" SP obj-id)
 
@@ -212,12 +217,12 @@
   want-list         =  first-want
 		       *additional-want
 
-  shallow-line      =  PKT_LINE("shallow" SP obj-id)
+  shallow-line      =  PKT-LINE("shallow" SP obj-id)
 
-  depth-request     =  PKT_LINE("deepen" SP depth)
+  depth-request     =  PKT-LINE("deepen" SP depth)
 
-  first-want        =  PKT-LINE("want" SP obj-id SP capability-list LF)
-  additional-want   =  PKT-LINE("want" SP obj-id LF)
+  first-want        =  PKT-LINE("want" SP obj-id SP capability-list)
+  additional-want   =  PKT-LINE("want" SP obj-id)
 
   depth             =  1*DIGIT
 ----
@@ -237,10 +242,10 @@
 this transaction, which is the number of commits it wants from the
 tip of the history, if any, as a 'deepen' line.  A depth of 0 is the
 same as not making a depth request. The client does not want to receive
-any commits beyond this depth, nor objects needed only to complete
-those commits. Commits whose parents are not received as a result are
-defined as shallow and marked as such in the server. This information
-is sent back to the client in the next step.
+any commits beyond this depth, nor does it want objects needed only to
+complete those commits. Commits whose parents are not received as a
+result are defined as shallow and marked as such in the server. This
+information is sent back to the client in the next step.
 
 Once all the 'want's and 'shallow's (and optional 'deepen') are
 transferred, clients MUST send a flush-pkt, to tell the server side
@@ -284,7 +289,7 @@
 		       compute-end
 
   have-list         =  *have-line
-  have-line         =  PKT-LINE("have" SP obj-id LF)
+  have-line         =  PKT-LINE("have" SP obj-id)
   compute-end       =  flush-pkt / PKT-LINE("done")
 ----
 
@@ -302,7 +307,7 @@
     ready to make a packfile, it will blindly ACK all 'have' obj-ids
     back to the client.
 
-  * the server will then send a 'NACK' and then wait for another response
+  * the server will then send a 'NAK' and then wait for another response
     from the client - either a 'done' or another list of 'have' lines.
 
 In multi_ack_detailed mode:
@@ -348,10 +353,10 @@
 
 ----
   server-response = *ack_multi ack / nak
-  ack_multi       = PKT-LINE("ACK" SP obj-id ack_status LF)
+  ack_multi       = PKT-LINE("ACK" SP obj-id ack_status)
   ack_status      = "continue" / "common" / "ready"
-  ack             = PKT-LINE("ACK SP obj-id LF)
-  nak             = PKT-LINE("NAK" LF)
+  ack             = PKT-LINE("ACK" SP obj-id)
+  nak             = PKT-LINE("NAK")
 ----
 
 A simple clone may look like this (with no 'have' lines):
@@ -449,7 +454,8 @@
 fetching protocol. Each reference obj-id and name on the server is sent
 in packet-line format to the client, followed by a flush-pkt.  The only
 real difference is that the capability listing is different - the only
-possible values are 'report-status', 'delete-refs' and 'ofs-delta'.
+possible values are 'report-status', 'delete-refs', 'ofs-delta' and
+'push-options'.
 
 Reference Update Request and Packfile Transfer
 ----------------------------------------------
@@ -460,17 +466,18 @@
 the server, the obj-id the client would like to update it to and the name
 of the reference.
 
-This list is followed by a flush-pkt and then the packfile that should
-contain all the objects that the server will need to complete the new
-references.
+This list is followed by a flush-pkt. Then the push options are transmitted
+one per packet followed by another flush-pkt. After that the packfile that
+should contain all the objects that the server will need to complete the new
+references will be sent.
 
 ----
-  update-request    =  *shallow command-list [pack-file]
+  update-request    =  *shallow ( command-list | push-cert ) [packfile]
 
   shallow           =  PKT-LINE("shallow" SP obj-id)
 
-  command-list      =  PKT-LINE(command NUL capability-list LF)
-		       *PKT-LINE(command LF)
+  command-list      =  PKT-LINE(command NUL capability-list)
+		       *PKT-LINE(command)
 		       flush-pkt
 
   command           =  create / delete / update
@@ -481,17 +488,32 @@
   old-id            =  obj-id
   new-id            =  obj-id
 
-  pack-file         = "PACK" 28*(OCTET)
+  push-cert         = PKT-LINE("push-cert" NUL capability-list LF)
+		      PKT-LINE("certificate version 0.1" LF)
+		      PKT-LINE("pusher" SP ident LF)
+		      PKT-LINE("pushee" SP url LF)
+		      PKT-LINE("nonce" SP nonce LF)
+		      PKT-LINE(LF)
+		      *PKT-LINE(command LF)
+		      *PKT-LINE(gpg-signature-lines LF)
+		      PKT-LINE("push-cert-end" LF)
+
+  packfile          = "PACK" 28*(OCTET)
 ----
 
 If the receiving end does not support delete-refs, the sending end MUST
 NOT ask for delete command.
 
-The pack-file MUST NOT be sent if the only command used is 'delete'.
+If the receiving end does not support push-cert, the sending end
+MUST NOT send a push-cert command.  When a push-cert command is
+sent, command-list MUST NOT be sent; the commands recorded in the
+push certificate is used instead.
 
-A pack-file MUST be sent if either create or update command is used,
+The packfile MUST NOT be sent if the only command used is 'delete'.
+
+A packfile MUST be sent if either create or update command is used,
 even if the server already has all the necessary objects.  In this
-case the client MUST send an empty pack-file.   The only time this
+case the client MUST send an empty packfile.   The only time this
 is likely to happen is if the client is creating
 a new branch or a tag that points to an existing obj-id.
 
@@ -501,6 +523,35 @@
 it will run any update hooks to make sure that the update is acceptable.
 If all of that is fine, the server will then update the references.
 
+Push Certificate
+----------------
+
+A push certificate begins with a set of header lines.  After the
+header and an empty line, the protocol commands follow, one per
+line. Note that the trailing LF in push-cert PKT-LINEs is _not_
+optional; it must be present.
+
+Currently, the following header fields are defined:
+
+`pusher` ident::
+	Identify the GPG key in "Human Readable Name <email@address>"
+	format.
+
+`pushee` url::
+	The repository URL (anonymized, if the URL contains
+	authentication material) the user who ran `git push`
+	intended to push into.
+
+`nonce` nonce::
+	The 'nonce' string the receiving repository asked the
+	pushing user to include in the certificate, to prevent
+	replay attacks.
+
+The GPG signature lines are a detached signature for the contents
+recorded in the push certificate before the signature block begins.
+The detached signature is used to certify that the commands were
+given by the pusher, who must be the signer.
+
 Report Status
 -------------
 
@@ -517,12 +568,12 @@
 		      1*(command-status)
 		      flush-pkt
 
-  unpack-status     = PKT-LINE("unpack" SP unpack-result LF)
+  unpack-status     = PKT-LINE("unpack" SP unpack-result)
   unpack-result     = "ok" / error-msg
 
   command-status    = command-ok / command-fail
-  command-ok        = PKT-LINE("ok" SP refname LF)
-  command-fail      = PKT-LINE("ng" SP refname SP error-msg LF)
+  command-ok        = PKT-LINE("ok" SP refname)
+  command-fail      = PKT-LINE("ng" SP refname SP error-msg)
 
   error-msg         = 1*(OCTECT) ; where not "ok"
 ----
# install technical/pack-protocol.txt /usr/share/doc/git-doc/technical/pack-protocol.txt
--- /usr/share/doc/git-doc/technical/protocol-capabilities.txt	2016-03-21 09:24:30.000000000 -0600
+++ technical/protocol-capabilities.txt	2016-10-03 14:24:18.000000000 -0600
@@ -18,8 +18,9 @@
 and server advertised.  As a consequence of these rules, server MUST
 NOT advertise capabilities it does not understand.
 
-The 'report-status', 'delete-refs', and 'quiet' capabilities are sent and
-recognized by the receive-pack (push to server) process.
+The 'atomic', 'report-status', 'delete-refs', 'quiet', and 'push-cert'
+capabilities are sent and recognized by the receive-pack (push to server)
+process.
 
 The 'ofs-delta' and 'side-band-64k' capabilities are sent and recognized
 by both upload-pack and receive-pack protocols.  The 'agent' capability
@@ -168,7 +169,7 @@
 ASCII characters except space (i.e., the byte range 32 < x < 127), and
 are typically of the form "package/version" (e.g., "git/1.8.3.1"). The
 agent strings are purely informative for statistics and debugging
-purposes, and MUST NOT be used to programatically assume the presence
+purposes, and MUST NOT be used to programmatically assume the presence
 or absence of particular features.
 
 shallow
@@ -244,9 +245,42 @@
 reporting if the local progress reporting is also being suppressed
 (e.g., via `push -q`, or if stderr does not go to a tty).
 
+atomic
+------
+
+If the server sends the 'atomic' capability it is capable of accepting
+atomic pushes. If the pushing client requests this capability, the server
+will update the refs in one atomic transaction. Either all refs are
+updated or none.
+
+push-options
+------------
+
+If the server sends the 'push-options' capability it is able to accept
+push options after the update commands have been sent, but before the
+packfile is streamed. If the pushing client requests this capability,
+the server will pass the options to the pre- and post- receive hooks
+that process this push request.
+
 allow-tip-sha1-in-want
 ----------------------
 
 If the upload-pack server advertises this capability, fetch-pack may
 send "want" lines with SHA-1s that exist at the server but are not
 advertised by upload-pack.
+
+allow-reachable-sha1-in-want
+----------------------------
+
+If the upload-pack server advertises this capability, fetch-pack may
+send "want" lines with SHA-1s that exist at the server but are not
+advertised by upload-pack.
+
+push-cert=<nonce>
+-----------------
+
+The receive-pack server that advertises this capability is willing
+to accept a signed push certificate, and asks the <nonce> to be
+included in the push certificate.  A send-pack client MUST NOT
+send a push-cert packet unless the receive-pack server advertises
+this capability.
# install technical/protocol-capabilities.txt /usr/share/doc/git-doc/technical/protocol-capabilities.txt
--- /usr/share/doc/git-doc/technical/protocol-common.txt	2016-03-21 09:24:30.000000000 -0600
+++ technical/protocol-common.txt	2016-10-03 14:24:18.000000000 -0600
@@ -39,7 +39,7 @@
   caret `^`, colon `:`, question-mark `?`, asterisk `*`,
   or open bracket `[` anywhere.
 
-. They cannot end with a slash `/` nor a dot `.`.
+. They cannot end with a slash `/` or a dot `.`.
 
 . They cannot end with the sequence `.lock`.
 
@@ -62,11 +62,14 @@
 pkt-line parsing/formatting routines are 8-bit clean.
 
 A non-binary line SHOULD BE terminated by an LF, which if present
-MUST be included in the total length.
-
-The maximum length of a pkt-line's data component is 65520 bytes.
-Implementations MUST NOT send pkt-line whose length exceeds 65524
-(65520 bytes of payload + 4 bytes of length data).
+MUST be included in the total length. Receivers MUST treat pkt-lines
+with non-binary data the same whether or not they contain the trailing
+LF (stripping the LF if present, and not complaining when it is
+missing).
+
+The maximum length of a pkt-line's data component is 65516 bytes.
+Implementations MUST NOT send pkt-line whose length exceeds 65520
+(65516 bytes of payload + 4 bytes of length data).
 
 Implementations SHOULD NOT send an empty pkt-line ("0004").
 
# install technical/protocol-common.txt /usr/share/doc/git-doc/technical/protocol-common.txt
--- /usr/share/doc/git-doc/technical/racy-git.txt	2016-03-21 09:24:30.000000000 -0600
+++ technical/racy-git.txt	2016-10-03 14:24:18.000000000 -0600
@@ -41,13 +41,17 @@
 compared, but this is not enabled by default because this member
 is not stable on network filesystems.  With `USE_NSEC`
 compile-time option, `st_mtim.tv_nsec` and `st_ctim.tv_nsec`
-members are also compared, but this is not enabled by default
+members are also compared. On Linux, this is not enabled by default
 because in-core timestamps can have finer granularity than
 on-disk timestamps, resulting in meaningless changes when an
 inode is evicted from the inode cache.  See commit 8ce13b0
 of git://git.kernel.org/pub/scm/linux/kernel/git/tglx/history.git
 ([PATCH] Sync in core time granularity with filesystems,
-2005-01-04).
+2005-01-04). This patch is included in kernel 2.6.11 and newer, but
+only fixes the issue for file systems with exactly 1 ns or 1 s
+resolution. Other file systems are still broken in current Linux
+kernels (e.g. CEPH, CIFS, NTFS, UDF), see
+https://lkml.org/lkml/2015/6/9/714
 
 Racy Git
 --------
# install technical/racy-git.txt /usr/share/doc/git-doc/technical/racy-git.txt
# install technical/repository-version.txt /usr/share/doc/git-doc/technical/repository-version.txt
# install technical/signature-format.txt /usr/share/doc/git-doc/technical/signature-format.txt
--- /usr/share/doc/git-doc/technical/api-allocation-growing.html	2016-03-21 09:24:30.000000000 -0600
+++ technical/api-allocation-growing.html	2016-10-15 00:44:36.868075605 -0600
@@ -779,6 +779,8 @@
 item[nr++] = value you like;</code></pre>
 </div></div>
 <div class="paragraph"><p>You are responsible for updating the <code>nr</code> variable.</p></div>
+<div class="paragraph"><p>If you need to specify the number of elements to allocate explicitly
+then use the macro <code>REALLOC_ARRAY(item, alloc)</code> instead of <code>ALLOC_GROW</code>.</p></div>
 </div>
 </div>
 </div>
# install technical/api-allocation-growing.html /usr/share/doc/git-doc/technical/api-allocation-growing.html
--- /usr/share/doc/git-doc/technical/api-argv-array.html	2016-03-21 09:24:30.000000000 -0600
+++ technical/api-argv-array.html	2016-10-15 00:44:37.088075609 -0600
@@ -812,6 +812,14 @@
 </p>
 </dd>
 <dt class="hdlist1">
+<code>argv_array_pushv</code>
+</dt>
+<dd>
+<p>
+        Push a null-terminated array of strings onto the end of the array.
+</p>
+</dd>
+<dt class="hdlist1">
 <code>argv_array_pop</code>
 </dt>
 <dd>
@@ -834,17 +842,11 @@
 </dt>
 <dd>
 <p>
-        Detach the argv array from the <code>struct argv_array</code>, transferring
-        ownership of the allocated array and strings.
-</p>
-</dd>
-<dt class="hdlist1">
-<code>argv_array_free_detached</code>
-</dt>
-<dd>
-<p>
-        Free the memory allocated by a <code>struct argv_array</code> that was later
-        detached and is now no longer needed.
+        Disconnect the <code>argv</code> member from the <code>argv_array</code> struct and
+        return it. The caller is responsible for freeing the memory used
+        by the array, and by the strings it references. After detaching,
+        the <code>argv_array</code> is in a reinitialized state and can be pushed
+        into again.
 </p>
 </dd>
 </dl></div>
# install technical/api-argv-array.html /usr/share/doc/git-doc/technical/api-argv-array.html
--- /usr/share/doc/git-doc/technical/api-builtin.html	2016-03-21 09:24:30.000000000 -0600
+++ technical/api-builtin.html	2016-10-15 00:44:37.308075613 -0600
@@ -773,10 +773,19 @@
 </dt>
 <dd>
 <p>
-        Make sure there is a Git directory to work on, and if there is a
-        work tree, chdir to the top of it if the command was invoked
-        in a subdirectory.  If there is no work tree, no chdir() is
-        done.
+        If there is not a Git directory to work on, abort.  If there
+        is a work tree, chdir to the top of it if the command was
+        invoked in a subdirectory.  If there is no work tree, no
+        chdir() is done.
+</p>
+</dd>
+<dt class="hdlist1">
+<code>RUN_SETUP_GENTLY</code>
+</dt>
+<dd>
+<p>
+        If there is a Git directory, chdir as per RUN_SETUP, otherwise,
+        don&#8217;t chdir anywhere.
 </p>
 </dd>
 <dt class="hdlist1">
# install technical/api-builtin.html /usr/share/doc/git-doc/technical/api-builtin.html
--- /usr/share/doc/git-doc/technical/api-config.html	2016-03-21 09:24:30.000000000 -0600
+++ technical/api-config.html	2016-10-15 00:44:37.716075621 -0600
@@ -820,12 +820,6 @@
 </p>
 </dd>
 </dl></div>
-<div class="paragraph"><p>There is a special version of <code>git_config</code> called <code>git_config_early</code>.
-This version takes an additional parameter to specify the repository
-config, instead of having it looked up via <code>git_path</code>. This is useful
-early in a Git program before the repository has been found. Unless
-you&#8217;re working with early setup code, you probably don&#8217;t want to use
-this.</p></div>
 </div>
 </div>
 <div class="sect1">
@@ -837,6 +831,154 @@
 </div>
 </div>
 <div class="sect1">
+<h2 id="_querying_for_specific_variables">Querying For Specific Variables</h2>
+<div class="sectionbody">
+<div class="paragraph"><p>For programs wanting to query for specific variables in a non-callback
+manner, the config API provides two functions <code>git_config_get_value</code>
+and <code>git_config_get_value_multi</code>. They both read values from an internal
+cache generated previously from reading the config files.</p></div>
+<div class="dlist"><dl>
+<dt class="hdlist1">
+<code>int git_config_get_value(const char *key, const char **value)</code>
+</dt>
+<dd>
+<p>
+        Finds the highest-priority value for the configuration variable <code>key</code>,
+        stores the pointer to it in <code>value</code> and returns 0. When the
+        configuration variable <code>key</code> is not found, returns 1 without touching
+        <code>value</code>. The caller should not free or modify <code>value</code>, as it is owned
+        by the cache.
+</p>
+</dd>
+<dt class="hdlist1">
+<code>const struct string_list *git_config_get_value_multi(const char *key)</code>
+</dt>
+<dd>
+<p>
+        Finds and returns the value list, sorted in order of increasing priority
+        for the configuration variable <code>key</code>. When the configuration variable
+        <code>key</code> is not found, returns NULL. The caller should not free or modify
+        the returned pointer, as it is owned by the cache.
+</p>
+</dd>
+<dt class="hdlist1">
+<code>void git_config_clear(void)</code>
+</dt>
+<dd>
+<p>
+        Resets and invalidates the config cache.
+</p>
+</dd>
+</dl></div>
+<div class="paragraph"><p>The config API also provides type specific API functions which do conversion
+as well as retrieval for the queried variable, including:</p></div>
+<div class="dlist"><dl>
+<dt class="hdlist1">
+<code>int git_config_get_int(const char *key, int *dest)</code>
+</dt>
+<dd>
+<p>
+        Finds and parses the value to an integer for the configuration variable
+        <code>key</code>. Dies on error; otherwise, stores the value of the parsed integer in
+        <code>dest</code> and returns 0. When the configuration variable <code>key</code> is not found,
+        returns 1 without touching <code>dest</code>.
+</p>
+</dd>
+<dt class="hdlist1">
+<code>int git_config_get_ulong(const char *key, unsigned long *dest)</code>
+</dt>
+<dd>
+<p>
+        Similar to <code>git_config_get_int</code> but for unsigned longs.
+</p>
+</dd>
+<dt class="hdlist1">
+<code>int git_config_get_bool(const char *key, int *dest)</code>
+</dt>
+<dd>
+<p>
+        Finds and parses the value into a boolean value, for the configuration
+        variable <code>key</code> respecting keywords like "true" and "false". Integer
+        values are converted into true/false values (when they are non-zero or
+        zero, respectively). Other values cause a die(). If parsing is successful,
+        stores the value of the parsed result in <code>dest</code> and returns 0. When the
+        configuration variable <code>key</code> is not found, returns 1 without touching
+        <code>dest</code>.
+</p>
+</dd>
+<dt class="hdlist1">
+<code>int git_config_get_bool_or_int(const char *key, int *is_bool, int *dest)</code>
+</dt>
+<dd>
+<p>
+        Similar to <code>git_config_get_bool</code>, except that integers are copied as-is,
+        and <code>is_bool</code> flag is unset.
+</p>
+</dd>
+<dt class="hdlist1">
+<code>int git_config_get_maybe_bool(const char *key, int *dest)</code>
+</dt>
+<dd>
+<p>
+        Similar to <code>git_config_get_bool</code>, except that it returns -1 on error
+        rather than dying.
+</p>
+</dd>
+<dt class="hdlist1">
+<code>int git_config_get_string_const(const char *key, const char **dest)</code>
+</dt>
+<dd>
+<p>
+        Allocates and copies the retrieved string into the <code>dest</code> parameter for
+        the configuration variable <code>key</code>; if NULL string is given, prints an
+        error message and returns -1. When the configuration variable <code>key</code> is
+        not found, returns 1 without touching <code>dest</code>.
+</p>
+</dd>
+<dt class="hdlist1">
+<code>int git_config_get_string(const char *key, char **dest)</code>
+</dt>
+<dd>
+<p>
+        Similar to <code>git_config_get_string_const</code>, except that retrieved value
+        copied into the <code>dest</code> parameter is a mutable string.
+</p>
+</dd>
+<dt class="hdlist1">
+<code>int git_config_get_pathname(const char *key, const char **dest)</code>
+</dt>
+<dd>
+<p>
+        Similar to <code>git_config_get_string</code>, but expands <code>~</code> or <code>~user</code> into
+        the user&#8217;s home directory when found at the beginning of the path.
+</p>
+</dd>
+<dt class="hdlist1">
+<code>git_die_config(const char *key, const char *err, ...)</code>
+</dt>
+<dd>
+<p>
+        First prints the error message specified by the caller in <code>err</code> and then
+        dies printing the line number and the file name of the highest priority
+        value for the configuration variable <code>key</code>.
+</p>
+</dd>
+<dt class="hdlist1">
+<code>void git_die_config_linenr(const char *key, const char *filename, int linenr)</code>
+</dt>
+<dd>
+<p>
+        Helper function which formats the die error message according to the
+        parameters entered. Used by <code>git_die_config()</code>. It can be used by callers
+        handling <code>git_config_get_value_multi()</code> to print the correct error message
+        for the desired value.
+</p>
+</dd>
+</dl></div>
+<div class="paragraph"><p>See test-config.c for usage examples.</p></div>
+</div>
+</div>
+<div class="sect1">
 <h2 id="_value_parsing_helpers">Value Parsing Helpers</h2>
 <div class="sectionbody">
 <div class="paragraph"><p>To aid in parsing string values, the config API provides callbacks with
@@ -932,9 +1074,136 @@
 </div>
 </div>
 <div class="sect1">
+<h2 id="_custom_configsets">Custom Configsets</h2>
+<div class="sectionbody">
+<div class="paragraph"><p>A <code>config_set</code> can be used to construct an in-memory cache for
+config-like files that the caller specifies (i.e., files like <code>.gitmodules</code>,
+<code>~/.gitconfig</code> etc.). For example,</p></div>
+<div class="listingblock">
+<div class="content">
+<pre><code>struct config_set gm_config;
+git_configset_init(&amp;gm_config);
+int b;
+/* we add config files to the config_set */
+git_configset_add_file(&amp;gm_config, ".gitmodules");
+git_configset_add_file(&amp;gm_config, ".gitmodules_alt");
+
+if (!git_configset_get_bool(gm_config, "submodule.frotz.ignore", &amp;b)) {
+        /* hack hack hack */
+}
+
+/* when we are done with the configset */
+git_configset_clear(&amp;gm_config);</code></pre>
+</div></div>
+<div class="paragraph"><p>Configset API provides functions for the above mentioned work flow, including:</p></div>
+<div class="dlist"><dl>
+<dt class="hdlist1">
+<code>void git_configset_init(struct config_set *cs)</code>
+</dt>
+<dd>
+<p>
+        Initializes the config_set <code>cs</code>.
+</p>
+</dd>
+<dt class="hdlist1">
+<code>int git_configset_add_file(struct config_set *cs, const char *filename)</code>
+</dt>
+<dd>
+<p>
+        Parses the file and adds the variable-value pairs to the <code>config_set</code>,
+        dies if there is an error in parsing the file. Returns 0 on success, or
+        -1 if the file does not exist or is inaccessible. The user has to decide
+        if he wants to free the incomplete configset or continue using it when
+        the function returns -1.
+</p>
+</dd>
+<dt class="hdlist1">
+<code>int git_configset_get_value(struct config_set *cs, const char *key, const char **value)</code>
+</dt>
+<dd>
+<p>
+        Finds the highest-priority value for the configuration variable <code>key</code>
+        and config set <code>cs</code>, stores the pointer to it in <code>value</code> and returns 0.
+        When the configuration variable <code>key</code> is not found, returns 1 without
+        touching <code>value</code>. The caller should not free or modify <code>value</code>, as it
+        is owned by the cache.
+</p>
+</dd>
+<dt class="hdlist1">
+<code>const struct string_list *git_configset_get_value_multi(struct config_set *cs, const char *key)</code>
+</dt>
+<dd>
+<p>
+        Finds and returns the value list, sorted in order of increasing priority
+        for the configuration variable <code>key</code> and config set <code>cs</code>. When the
+        configuration variable <code>key</code> is not found, returns NULL. The caller
+        should not free or modify the returned pointer, as it is owned by the cache.
+</p>
+</dd>
+<dt class="hdlist1">
+<code>void git_configset_clear(struct config_set *cs)</code>
+</dt>
+<dd>
+<p>
+        Clears <code>config_set</code> structure, removes all saved variable-value pairs.
+</p>
+</dd>
+</dl></div>
+<div class="paragraph"><p>In addition to above functions, the <code>config_set</code> API provides type specific
+functions in the vein of <code>git_config_get_int</code> and family but with an extra
+parameter, pointer to struct <code>config_set</code>.
+They all behave similarly to the <code>git_config_get*()</code> family described in
+"Querying For Specific Variables" above.</p></div>
+</div>
+</div>
+<div class="sect1">
 <h2 id="_writing_config_files">Writing Config Files</h2>
 <div class="sectionbody">
-<div class="paragraph"><p>TODO</p></div>
+<div class="paragraph"><p>Git gives multiple entry points in the Config API to write config values to
+files namely <code>git_config_set_in_file</code> and <code>git_config_set</code>, which write to
+a specific config file or to <code>.git/config</code> respectively. They both take a
+key/value pair as parameter.
+In the end they both call <code>git_config_set_multivar_in_file</code> which takes four
+parameters:</p></div>
+<div class="ulist"><ul>
+<li>
+<p>
+the name of the file, as a string, to which key/value pairs will be written.
+</p>
+</li>
+<li>
+<p>
+the name of key, as a string. This is in canonical "flat" form: the section,
+  subsection, and variable segments will be separated by dots, and the section
+  and variable segments will be all lowercase.
+  E.g., <code>core.ignorecase</code>, <code>diff.SomeType.textconv</code>.
+</p>
+</li>
+<li>
+<p>
+the value of the variable, as a string. If value is equal to NULL, it will
+  remove the matching key from the config file.
+</p>
+</li>
+<li>
+<p>
+the value regex, as a string. It will disregard key/value pairs where value
+  does not match.
+</p>
+</li>
+<li>
+<p>
+a multi_replace value, as an int. If value is equal to zero, nothing or only
+  one matching key/value is replaced, else all matching key/values (regardless
+  how many) are removed, before the new pair is written.
+</p>
+</li>
+</ul></div>
+<div class="paragraph"><p>It returns 0 on success.</p></div>
+<div class="paragraph"><p>Also, there are functions <code>git_config_rename_section</code> and
+<code>git_config_rename_section_in_file</code> with parameters <code>old_name</code> and <code>new_name</code>
+for renaming or removing sections in the config files. If NULL is passed
+through <code>new_name</code> parameter, the section will be removed from the config file.</p></div>
 </div>
 </div>
 </div>
# install technical/api-config.html /usr/share/doc/git-doc/technical/api-config.html
--- /usr/share/doc/git-doc/technical/api-credentials.html	2016-03-21 09:24:30.000000000 -0600
+++ technical/api-credentials.html	2016-10-15 00:44:38.020075626 -0600
@@ -1028,11 +1028,14 @@
 <div class="paragraph"><p>The details of the credential will be provided on the helper&#8217;s stdin
 stream. The exact format is the same as the input/output format of the
 <code>git credential</code> plumbing command (see the section <code>INPUT/OUTPUT
-FORMAT</code> in <a href="../git-credential.html">git-credential(7)</a> for a detailed specification).</p></div>
+FORMAT</code> in <a href="../git-credential.html">git-credential(1)</a> for a detailed specification).</p></div>
 <div class="paragraph"><p>For a <code>get</code> operation, the helper should produce a list of attributes
 on stdout in the same format. A helper is free to produce a subset, or
 even no values at all if it has nothing useful to provide. Any provided
-attributes will overwrite those already known about by Git.</p></div>
+attributes will overwrite those already known about by Git.  If a helper
+outputs a <code>quit</code> attribute with a value of <code>true</code> or <code>1</code>, no further
+helpers will be consulted, nor will the user be prompted (if no
+credential has been provided, the operation will then fail).</p></div>
 <div class="paragraph"><p>For a <code>store</code> or <code>erase</code> operation, the helper&#8217;s output is ignored.
 If it fails to perform the requested operation, it may complain to
 stderr to inform the user. If it does not support the requested
@@ -1047,7 +1050,7 @@
 <h2 id="_see_also">See also</h2>
 <div class="sectionbody">
 <div class="paragraph"><p><a href="../gitcredentials.html">gitcredentials(7)</a></p></div>
-<div class="paragraph"><p><a href="../git-config.html">git-config(5)</a> (See configuration variables <code>credential.*</code>)</p></div>
+<div class="paragraph"><p><a href="../git-config.html">git-config(1)</a> (See configuration variables <code>credential.*</code>)</p></div>
 </div>
 </div>
 </div>
# install technical/api-credentials.html /usr/share/doc/git-doc/technical/api-credentials.html
# install technical/api-error-handling.html /usr/share/doc/git-doc/technical/api-error-handling.html
--- /usr/share/doc/git-doc/technical/api-gitattributes.html	2016-03-21 09:24:30.000000000 -0600
+++ technical/api-gitattributes.html	2016-10-15 00:44:39.268075650 -0600
@@ -887,7 +887,7 @@
                 The attribute is Unset, by listing the name of the
                 attribute prefixed with a dash - for the path.
         } else if (ATTR_UNSET(value)) {
-                The attribute is not set nor unset for the path.
+                The attribute is neither set nor unset for the path.
         } else if (!strcmp(value, "input")) {
                 If none of ATTR_TRUE(), ATTR_FALSE(), or ATTR_UNSET() is
                 true, the value is a string set in the gitattributes
# install technical/api-gitattributes.html /usr/share/doc/git-doc/technical/api-gitattributes.html
# install technical/api-hashmap.html /usr/share/doc/git-doc/technical/api-hashmap.html
--- /usr/share/doc/git-doc/technical/api-index.html	2016-03-21 09:24:30.000000000 -0600
+++ technical/api-index.html	2016-10-15 00:44:48.340075820 -0600
@@ -783,32 +783,32 @@
 </li>
 <li>
 <p>
-<a href="api-gitattributes.html">gitattributes API</a>
+<a href="api-error-handling.html">Error reporting in git</a>
 </p>
 </li>
 <li>
 <p>
-<a href="api-grep.html">grep API</a>
+<a href="api-gitattributes.html">gitattributes API</a>
 </p>
 </li>
 <li>
 <p>
-<a href="api-hash.html">hash API</a>
+<a href="api-grep.html">grep API</a>
 </p>
 </li>
 <li>
 <p>
-<a href="api-history-graph.html">history graph API</a>
+<a href="api-hashmap.html">hashmap API</a>
 </p>
 </li>
 <li>
 <p>
-<a href="api-in-core-index.html">in-core index API</a>
+<a href="api-history-graph.html">history graph API</a>
 </p>
 </li>
 <li>
 <p>
-<a href="api-lockfile.html">lockfile API</a>
+<a href="api-in-core-index.html">in-core index API</a>
 </p>
 </li>
 <li>
@@ -868,12 +868,17 @@
 </li>
 <li>
 <p>
-<a href="api-strbuf.html">strbuf API</a>
+<a href="api-string-list.html">string-list API</a>
 </p>
 </li>
 <li>
 <p>
-<a href="api-string-list.html">string-list API</a>
+<a href="api-submodule-config.html">submodule config cache API</a>
+</p>
+</li>
+<li>
+<p>
+<a href="api-trace.html">trace API</a>
 </p>
 </li>
 <li>
# install technical/api-index.html /usr/share/doc/git-doc/technical/api-index.html
--- /usr/share/doc/git-doc/technical/api-parse-options.html	2016-03-21 09:24:30.000000000 -0600
+++ technical/api-parse-options.html	2016-10-15 00:44:41.072075684 -0600
@@ -996,8 +996,12 @@
 <dd>
 <p>
         Introduce a count-up option.
-        <code>int_var</code> is incremented on each use of <code>--option</code>, and
-        reset to zero with <code>--no-option</code>.
+        Each use of <code>--option</code> increments <code>int_var</code>, starting from zero
+        (even if initially negative), and <code>--no-option</code> resets it to
+        zero. To determine if <code>--option</code> or <code>--no-option</code> was encountered at
+        all, initialize <code>int_var</code> to a negative value, and if it is still
+        negative after parse_options(), then neither <code>--option</code> nor
+        <code>--no-option</code> was seen.
 </p>
 </dd>
 <dt class="hdlist1">
@@ -1029,15 +1033,6 @@
 </p>
 </dd>
 <dt class="hdlist1">
-<code>OPT_SET_PTR(short, long, &amp;ptr_var, description, ptr)</code>
-</dt>
-<dd>
-<p>
-        Introduce a boolean option.
-        If used, set <code>ptr_var</code> to <code>ptr</code>.
-</p>
-</dd>
-<dt class="hdlist1">
 <code>OPT_STRING(short, long, &amp;str_var, arg_str, description)</code>
 </dt>
 <dd>
@@ -1056,6 +1051,17 @@
 </p>
 </dd>
 <dt class="hdlist1">
+<code>OPT_MAGNITUDE(short, long, &amp;unsigned_long_var, description)</code>
+</dt>
+<dd>
+<p>
+        Introduce an option with a size argument. The argument must be a
+        non-negative integer and may include a suffix of <em>k</em>, <em>m</em> or <em>g</em> to
+        scale the provided value by 1024, 1024<sup>2 or 1024</sup>3 respectively.
+        The scaled value is put into <code>unsigned_long_var</code>.
+</p>
+</dd>
+<dt class="hdlist1">
 <code>OPT_DATE(short, long, &amp;int_var, description)</code>
 </dt>
 <dd>
@@ -1139,6 +1145,41 @@
         and ignored silently.
 </p>
 </dd>
+<dt class="hdlist1">
+<code>OPT_PASSTHRU(short, long, &amp;char_var, arg_str, description, flags)</code>
+</dt>
+<dd>
+<p>
+        Introduce an option that will be reconstructed into a char* string,
+        which must be initialized to NULL. This is useful when you need to
+        pass the command-line option to another command. Any previous value
+        will be overwritten, so this should only be used for options where
+        the last one specified on the command line wins.
+</p>
+</dd>
+<dt class="hdlist1">
+<code>OPT_PASSTHRU_ARGV(short, long, &amp;argv_array_var, arg_str, description, flags)</code>
+</dt>
+<dd>
+<p>
+        Introduce an option where all instances of it on the command-line will
+        be reconstructed into an argv_array. This is useful when you need to
+        pass the command-line option, which can be specified multiple times,
+        to another command.
+</p>
+</dd>
+<dt class="hdlist1">
+<code>OPT_CMDMODE(short, long, &amp;int_var, description, enum_val)</code>
+</dt>
+<dd>
+<p>
+        Define an "operation mode" option, only one of which in the same
+        group of "operating mode" options that share the same <code>int_var</code>
+        can be given by the user. <code>enum_val</code> is set to <code>int_var</code> when the
+        option is used, but an error is reported if other "operating mode"
+        option has already set its value to the same <code>int_var</code>.
+</p>
+</dd>
 </dl></div>
 <div class="paragraph"><p>The last element of the array must be <code>OPT_END()</code>.</p></div>
 <div class="paragraph"><p>If not stated otherwise, interpret the arguments as follows:</p></div>
# install technical/api-parse-options.html /usr/share/doc/git-doc/technical/api-parse-options.html
--- /usr/share/doc/git-doc/technical/api-ref-iteration.html	2016-03-21 09:24:30.000000000 -0600
+++ technical/api-ref-iteration.html	2016-10-15 00:44:41.464075691 -0600
@@ -743,7 +743,7 @@
 signature:</p></div>
 <div class="literalblock">
 <div class="content">
-<pre><code>int handle_one_ref(const char *refname, const unsigned char *sha1,
+<pre><code>int handle_one_ref(const char *refname, const struct object_id *oid,
                    int flags, void *cb_data);</code></pre>
 </div></div>
 <div class="paragraph"><p>There are different kinds of iterate functions which all take a
# install technical/api-ref-iteration.html /usr/share/doc/git-doc/technical/api-ref-iteration.html
--- /usr/share/doc/git-doc/technical/api-remote.html	2016-03-21 09:24:30.000000000 -0600
+++ technical/api-remote.html	2016-10-15 00:44:41.740075696 -0600
@@ -822,6 +822,14 @@
         The proxy to use for curl (http, https, ftp, etc.) URLs.
 </p>
 </dd>
+<dt class="hdlist1">
+<code>http_proxy_authmethod</code>
+</dt>
+<dd>
+<p>
+        The method used for authenticating against <code>http_proxy</code>.
+</p>
+</dd>
 </dl></div>
 <div class="paragraph"><p>struct remotes can be found by name with remote_get(), and iterated
 through with for_each_remote(). remote_get(NULL) will return the
@@ -879,14 +887,6 @@
 </p>
 </dd>
 <dt class="hdlist1">
-<code>remote</code>
-</dt>
-<dd>
-<p>
-        The struct remote for that remote.
-</p>
-</dd>
-<dt class="hdlist1">
 <code>merge_name</code>
 </dt>
 <dd>
# install technical/api-remote.html /usr/share/doc/git-doc/technical/api-remote.html
--- /usr/share/doc/git-doc/technical/api-run-command.html	2016-03-21 09:24:30.000000000 -0600
+++ technical/api-run-command.html	2016-10-15 00:44:42.300075707 -0600
@@ -751,6 +751,14 @@
 <div class="sectionbody">
 <div class="dlist"><dl>
 <dt class="hdlist1">
+<code>child_process_init</code>
+</dt>
+<dd>
+<p>
+        Initialize a struct child_process variable.
+</p>
+</dd>
+<dt class="hdlist1">
 <code>start_command</code>
 </dt>
 <dd>
@@ -795,6 +803,17 @@
         corresponds to the member .env.
 </p>
 </dd>
+<dt class="hdlist1">
+<code>child_process_clear</code>
+</dt>
+<dd>
+<p>
+        Release the memory associated with the struct child_process.
+        Most users of the run-command API don&#8217;t need to call this
+        function explicitly because <code>start_command</code> invokes it on
+        failure and <code>finish_command</code> calls it automatically already.
+</p>
+</dd>
 </dl></div>
 <div class="paragraph"><p>The functions above do the following:</p></div>
 <div class="olist arabic"><ol class="arabic">
@@ -883,8 +902,8 @@
 <div class="olist arabic"><ol class="arabic">
 <li>
 <p>
-allocates and clears (memset(&amp;chld, 0, sizeof(chld));) a
-   struct child_process variable;
+allocates and clears (using child_process_init() or
+   CHILD_PROCESS_INIT) a struct child_process variable;
 </p>
 </li>
 <li>
@@ -917,6 +936,12 @@
 terminated), of which .argv[0] is the program name to run (usually
 without a path). If the command to run is a git command, set argv[0] to
 the command name without the <em>git-</em> prefix and set .git_cmd = 1.</p></div>
+<div class="paragraph"><p>Note that the ownership of the memory pointed to by .argv stays with the
+caller, but it should survive until <code>finish_command</code> completes. If the
+.argv member is NULL, <code>start_command</code> will point it at the .args
+<code>argv_array</code> (so you may use one or the other, but you must use exactly
+one). The memory in .args will be cleaned up automatically during
+<code>finish_command</code> (or during <code>start_command</code> when it is unsuccessful).</p></div>
 <div class="paragraph"><p>The members .in, .out, .err are used to redirect stdin, stdout,
 stderr as follows:</p></div>
 <div class="olist arabic"><ol class="arabic">
@@ -1000,6 +1025,10 @@
 </p>
 </li>
 </ol></div>
+<div class="paragraph"><p>If the .env member is NULL, <code>start_command</code> will point it at the
+.env_array <code>argv_array</code> (so you may use one or the other, but not both).
+The memory in .env_array will be cleaned up automatically during
+<code>finish_command</code> (or during <code>start_command</code> when it is unsuccessful).</p></div>
 <div class="paragraph"><p>To specify a new initial working directory for the sub-process,
 specify it in the .dir member.</p></div>
 <div class="paragraph"><p>If the program cannot be found, the functions return -1 and set
# install technical/api-run-command.html /usr/share/doc/git-doc/technical/api-run-command.html
--- /usr/share/doc/git-doc/technical/api-string-list.html	2016-03-21 09:24:30.000000000 -0600
+++ technical/api-string-list.html	2016-10-15 00:44:43.228075724 -0600
@@ -777,7 +777,7 @@
 </li>
 <li>
 <p>
-Can sort an unsorted list using <code>sort_string_list</code>.
+Can sort an unsorted list using <code>string_list_sort</code>.
 </p>
 </li>
 <li>
@@ -842,6 +842,15 @@
 </p>
 <div class="dlist"><dl>
 <dt class="hdlist1">
+<code>string_list_init</code>
+</dt>
+<dd>
+<p>
+        Initialize the members of the string_list, set <code>strdup_strings</code>
+        member according to the value of the second parameter.
+</p>
+</dd>
+<dt class="hdlist1">
 <code>filter_string_list</code>
 </dt>
 <dd>
@@ -964,7 +973,7 @@
 </p>
 </dd>
 <dt class="hdlist1">
-<code>sort_string_list</code>
+<code>string_list_sort</code>
 </dt>
 <dd>
 <p>
@@ -1071,6 +1080,12 @@
   before adding them, see above.
 </p>
 </li>
+<li>
+<p>
+The <code>compare_strings_fn</code> member is used to specify a custom compare
+  function, otherwise <code>strcmp()</code> is used as the default function.
+</p>
+</li>
 </ol></div>
 </div>
 </div>
# install technical/api-string-list.html /usr/share/doc/git-doc/technical/api-string-list.html
# install technical/api-submodule-config.html /usr/share/doc/git-doc/technical/api-submodule-config.html
# install technical/api-trace.html /usr/share/doc/git-doc/technical/api-trace.html
--- /usr/share/doc/git-doc/technical/http-protocol.html	2016-03-21 09:24:30.000000000 -0600
+++ technical/http-protocol.html	2016-10-15 00:44:44.720075752 -0600
@@ -796,7 +796,7 @@
 <div class="paragraph"><p>Because Git repositories are accessed by standard path components
 server administrators MAY use directory based permissions within
 their HTTP server to control repository access.</p></div>
-<div class="paragraph"><p>Clients SHOULD support Basic authentication as described by RFC 2616.
+<div class="paragraph"><p>Clients SHOULD support Basic authentication as described by RFC 2617.
 Servers SHOULD support Basic authentication by relying upon the
 HTTP server placed in front of the Git server software.</p></div>
 <div class="paragraph"><p>Servers SHOULD NOT require HTTP cookies for the purposes of
@@ -1048,7 +1048,8 @@
 <div class="paragraph"><p>Clients MUST send at least one "want" command in the request body.
 Clients MUST NOT reference an id in a "want" command which did not
 appear in the response obtained through ref discovery unless the
-server advertises capability <code>allow-tip-sha1-in-want</code>.</p></div>
+server advertises capability <code>allow-tip-sha1-in-want</code> or
+<code>allow-reachable-sha1-in-want</code>.</p></div>
 <div class="literalblock">
 <div class="content">
 <pre><code>compute_request   =  want_list
@@ -1100,7 +1101,7 @@
 C: 0000</code></pre>
 </div></div>
 <div class="paragraph"><p>The stream is organized into "commands", with each command
-appearing by itself in a pkt-line.  Within a command line
+appearing by itself in a pkt-line.  Within a command line,
 the text leading up to the first space is the command name,
 and the remainder of the line to the first LF is the value.
 Command lines are terminated with an LF as the last byte of
# install technical/http-protocol.html /usr/share/doc/git-doc/technical/http-protocol.html
--- /usr/share/doc/git-doc/technical/index-format.html	2016-03-21 09:24:30.000000000 -0600
+++ technical/index-format.html	2016-10-15 00:44:45.076075759 -0600
@@ -960,6 +960,11 @@
 <pre><code>(Version 4) In version 4, the padding after the pathname does not
 exist.</code></pre>
 </div></div>
+<div class="literalblock">
+<div class="content">
+<pre><code>Interpretation of index entries in split index mode is completely
+different. See below for details.</code></pre>
+</div></div>
 </div>
 </div>
 <div class="sect1">
@@ -1031,7 +1036,7 @@
 <div class="content">
 <pre><code>The entries are written out in the top-down, depth-first order.  The
 first entry represents the root level of the repository, followed by the
-first subtree---let's call this A---of the root level (with its name
+first subtree--let's call this A--of the root level (with its name
 relative to the root level), followed by the first subtree of A (with
 its name relative to A), ...</code></pre>
 </div></div>
@@ -1085,6 +1090,188 @@
 </li>
 </ul></div>
 </div>
+<div class="sect2">
+<h3 id="_split_index">Split index</h3>
+<div class="literalblock">
+<div class="content">
+<pre><code>In split index mode, the majority of index entries could be stored
+in a separate file. This extension records the changes to be made on
+top of that to produce the final index.</code></pre>
+</div></div>
+<div class="literalblock">
+<div class="content">
+<pre><code>The signature for this extension is { 'l', 'i', 'n', 'k' }.</code></pre>
+</div></div>
+<div class="literalblock">
+<div class="content">
+<pre><code>The extension consists of:</code></pre>
+</div></div>
+<div class="ulist"><ul>
+<li>
+<p>
+160-bit SHA-1 of the shared index file. The shared index file path
+    is $GIT_DIR/sharedindex.&lt;SHA-1&gt;. If all 160 bits are zero, the
+    index does not require a shared index file.
+</p>
+</li>
+<li>
+<p>
+An ewah-encoded delete bitmap, each bit represents an entry in the
+    shared index. If a bit is set, its corresponding entry in the
+    shared index will be removed from the final index.  Note, because
+    a delete operation changes index entry positions, but we do need
+    original positions in replace phase, it&#8217;s best to just mark
+    entries for removal, then do a mass deletion after replacement.
+</p>
+</li>
+<li>
+<p>
+An ewah-encoded replace bitmap, each bit represents an entry in
+    the shared index. If a bit is set, its corresponding entry in the
+    shared index will be replaced with an entry in this index
+    file. All replaced entries are stored in sorted order in this
+    index. The first "1" bit in the replace bitmap corresponds to the
+    first index entry, the second "1" bit to the second entry and so
+    on. Replaced entries may have empty path names to save space.
+</p>
+<div class="literalblock">
+<div class="content">
+<pre><code>The remaining index entries after replaced ones will be added to the
+final index. These added entries are also sorted by entry name then
+stage.</code></pre>
+</div></div>
+</li>
+</ul></div>
+</div>
+</div>
+</div>
+<div class="sect1">
+<h2 id="_untracked_cache">Untracked cache</h2>
+<div class="sectionbody">
+<div class="literalblock">
+<div class="content">
+<pre><code>Untracked cache saves the untracked file list and necessary data to
+verify the cache. The signature for this extension is { 'U', 'N',
+'T', 'R' }.</code></pre>
+</div></div>
+<div class="literalblock">
+<div class="content">
+<pre><code>The extension starts with</code></pre>
+</div></div>
+<div class="ulist"><ul>
+<li>
+<p>
+A sequence of NUL-terminated strings, preceded by the size of the
+    sequence in variable width encoding. Each string describes the
+    environment where the cache can be used.
+</p>
+</li>
+<li>
+<p>
+Stat data of $GIT_DIR/info/exclude. See "Index entry" section from
+    ctime field until "file size".
+</p>
+</li>
+<li>
+<p>
+Stat data of core.excludesfile
+</p>
+</li>
+<li>
+<p>
+32-bit dir_flags (see struct dir_struct)
+</p>
+</li>
+<li>
+<p>
+160-bit SHA-1 of $GIT_DIR/info/exclude. Null SHA-1 means the file
+    does not exist.
+</p>
+</li>
+<li>
+<p>
+160-bit SHA-1 of core.excludesfile. Null SHA-1 means the file does
+    not exist.
+</p>
+</li>
+<li>
+<p>
+NUL-terminated string of per-dir exclude file name. This usually
+    is ".gitignore".
+</p>
+</li>
+<li>
+<p>
+The number of following directory blocks, variable width
+    encoding. If this number is zero, the extension ends here with a
+    following NUL.
+</p>
+</li>
+<li>
+<p>
+A number of directory blocks in depth-first-search order, each
+    consists of
+</p>
+</li>
+<li>
+<p>
+The number of untracked entries, variable width encoding.
+</p>
+</li>
+<li>
+<p>
+The number of sub-directory blocks, variable width encoding.
+</p>
+</li>
+<li>
+<p>
+The directory name terminated by NUL.
+</p>
+</li>
+<li>
+<p>
+A number of untracked file/dir names terminated by NUL.
+</p>
+</li>
+</ul></div>
+<div class="paragraph"><p>The remaining data of each directory block is grouped by type:</p></div>
+<div class="ulist"><ul>
+<li>
+<p>
+An ewah bitmap, the n-th bit marks whether the n-th directory has
+    valid untracked cache entries.
+</p>
+</li>
+<li>
+<p>
+An ewah bitmap, the n-th bit records "check-only" bit of
+    read_directory_recursive() for the n-th directory.
+</p>
+</li>
+<li>
+<p>
+An ewah bitmap, the n-th bit indicates whether SHA-1 and stat data
+    is valid for the n-th directory and exists in the next data.
+</p>
+</li>
+<li>
+<p>
+An array of stat data. The n-th data corresponds with the n-th
+    "one" bit in the previous ewah bitmap.
+</p>
+</li>
+<li>
+<p>
+An array of SHA-1. The n-th SHA-1 corresponds with the n-th "one" bit
+    in the previous ewah bitmap.
+</p>
+</li>
+<li>
+<p>
+One NUL.
+</p>
+</li>
+</ul></div>
 </div>
 </div>
 </div>
# install technical/index-format.html /usr/share/doc/git-doc/technical/index-format.html
--- /usr/share/doc/git-doc/technical/pack-protocol.html	2016-03-21 09:24:30.000000000 -0600
+++ technical/pack-protocol.html	2016-10-15 00:44:46.340075783 -0600
@@ -738,11 +738,11 @@
 <div id="content">
 <div id="preamble">
 <div class="sectionbody">
-<div class="paragraph"><p>Git supports transferring data in packfiles over the ssh://, git:// and
+<div class="paragraph"><p>Git supports transferring data in packfiles over the ssh://, git://, http:// and
 file:// transports.  There exist two sets of protocols, one for pushing
 data from a client to a server and another for fetching data from a
-server to a client.  All three transports (ssh, git, file) use the same
-protocol to transfer data.</p></div>
+server to a client.  The three transports (ssh, git, file) use the same
+protocol to transfer data. http is documented in http-protocol.txt.</p></div>
 <div class="paragraph"><p>The processes invoked in the canonical Git implementation are <em>upload-pack</em>
 on the server side and <em>fetch-pack</em> on the client side for fetching data;
 then <em>receive-pack</em> on the server and <em>send-pack</em> on the client for pushing
@@ -752,6 +752,15 @@
 </div>
 </div>
 <div class="sect1">
+<h2 id="_pkt_line_format">pkt-line Format</h2>
+<div class="sectionbody">
+<div class="paragraph"><p>The descriptions below build on the pkt-line format described in
+protocol-common.txt. When the grammar indicate <code>PKT-LINE(...)</code>, unless
+otherwise noted the usual pkt-line LF rules apply: the sender SHOULD
+include a LF, but the receiver MUST NOT complain if it is not present.</p></div>
+</div>
+</div>
+<div class="sect1">
 <h2 id="_transports">Transports</h2>
 <div class="sectionbody">
 <div class="paragraph"><p>There are three transports over which the packfile protocol is
@@ -897,8 +906,6 @@
 003fe92df48743b7bc7d26bcaabfddde0a1e20cae47c refs/tags/v1.0^{}
 0000</code></pre>
 </div></div>
-<div class="paragraph"><p>Server SHOULD terminate each non-flush line using LF ("\n") terminator;
-client MUST NOT complain if there is no terminator.</p></div>
 <div class="paragraph"><p>The returned response is a pkt-line stream describing each ref and
 its current value.  The stream MUST be sorted by name according to
 the C locale ordering.</p></div>
@@ -916,15 +923,15 @@
                       flush-pkt
 
   no-refs          =  PKT-LINE(zero-id SP "capabilities^{}"
-                      NUL capability-list LF)
+                      NUL capability-list)
 
   list-of-refs     =  first-ref *other-ref
   first-ref        =  PKT-LINE(obj-id SP refname
-                      NUL capability-list LF)
+                      NUL capability-list)
 
   other-ref        =  PKT-LINE(other-tip / other-peeled)
-  other-tip        =  obj-id SP refname LF
-  other-peeled     =  obj-id SP refname "^{}" LF
+  other-tip        =  obj-id SP refname
+  other-peeled     =  obj-id SP refname "^{}"
 
   shallow          =  PKT-LINE("shallow" SP obj-id)
 
@@ -962,12 +969,12 @@
   want-list         =  first-want
                        *additional-want
 
-  shallow-line      =  PKT_LINE("shallow" SP obj-id)
+  shallow-line      =  PKT-LINE("shallow" SP obj-id)
 
-  depth-request     =  PKT_LINE("deepen" SP depth)
+  depth-request     =  PKT-LINE("deepen" SP depth)
 
-  first-want        =  PKT-LINE("want" SP obj-id SP capability-list LF)
-  additional-want   =  PKT-LINE("want" SP obj-id LF)
+  first-want        =  PKT-LINE("want" SP obj-id SP capability-list)
+  additional-want   =  PKT-LINE("want" SP obj-id)
 
   depth             =  1*DIGIT</code></pre>
 </div></div>
@@ -984,10 +991,10 @@
 this transaction, which is the number of commits it wants from the
 tip of the history, if any, as a <em>deepen</em> line.  A depth of 0 is the
 same as not making a depth request. The client does not want to receive
-any commits beyond this depth, nor objects needed only to complete
-those commits. Commits whose parents are not received as a result are
-defined as shallow and marked as such in the server. This information
-is sent back to the client in the next step.</p></div>
+any commits beyond this depth, nor does it want objects needed only to
+complete those commits. Commits whose parents are not received as a
+result are defined as shallow and marked as such in the server. This
+information is sent back to the client in the next step.</p></div>
 <div class="paragraph"><p>Once all the <em>want&#8217;s and 'shallow&#8217;s (and optional 'deepen</em>) are
 transferred, clients MUST send a flush-pkt, to tell the server side
 that it is done sending the list.</p></div>
@@ -1026,7 +1033,7 @@
                        compute-end
 
   have-list         =  *have-line
-  have-line         =  PKT-LINE("have" SP obj-id LF)
+  have-line         =  PKT-LINE("have" SP obj-id)
   compute-end       =  flush-pkt / PKT-LINE("done")</code></pre>
 </div></div>
 <div class="paragraph"><p>If the server reads <em>have</em> lines, it then will respond by ACKing any
@@ -1050,7 +1057,7 @@
 </li>
 <li>
 <p>
-the server will then send a <em>NACK</em> and then wait for another response
+the server will then send a <em>NAK</em> and then wait for another response
     from the client - either a <em>done</em> or another list of <em>have</em> lines.
 </p>
 </li>
@@ -1106,10 +1113,10 @@
 <div class="listingblock">
 <div class="content">
 <pre><code>  server-response = *ack_multi ack / nak
-  ack_multi       = PKT-LINE("ACK" SP obj-id ack_status LF)
+  ack_multi       = PKT-LINE("ACK" SP obj-id ack_status)
   ack_status      = "continue" / "common" / "ready"
-  ack             = PKT-LINE("ACK SP obj-id LF)
-  nak             = PKT-LINE("NAK" LF)</code></pre>
+  ack             = PKT-LINE("ACK" SP obj-id)
+  nak             = PKT-LINE("NAK")</code></pre>
 </div></div>
 <div class="paragraph"><p>A simple clone may look like this (with no <em>have</em> lines):</p></div>
 <div class="listingblock">
@@ -1201,7 +1208,8 @@
 fetching protocol. Each reference obj-id and name on the server is sent
 in packet-line format to the client, followed by a flush-pkt.  The only
 real difference is that the capability listing is different - the only
-possible values are <em>report-status</em>, <em>delete-refs</em> and <em>ofs-delta</em>.</p></div>
+possible values are <em>report-status</em>, <em>delete-refs</em>, <em>ofs-delta</em> and
+<em>push-options</em>.</p></div>
 </div>
 </div>
 <div class="sect1">
@@ -1212,17 +1220,18 @@
 that it wants to update, it sends a line listing the obj-id currently on
 the server, the obj-id the client would like to update it to and the name
 of the reference.</p></div>
-<div class="paragraph"><p>This list is followed by a flush-pkt and then the packfile that should
-contain all the objects that the server will need to complete the new
-references.</p></div>
+<div class="paragraph"><p>This list is followed by a flush-pkt. Then the push options are transmitted
+one per packet followed by another flush-pkt. After that the packfile that
+should contain all the objects that the server will need to complete the new
+references will be sent.</p></div>
 <div class="listingblock">
 <div class="content">
-<pre><code>  update-request    =  *shallow command-list [pack-file]
+<pre><code>  update-request    =  *shallow ( command-list | push-cert ) [packfile]
 
   shallow           =  PKT-LINE("shallow" SP obj-id)
 
-  command-list      =  PKT-LINE(command NUL capability-list LF)
-                       *PKT-LINE(command LF)
+  command-list      =  PKT-LINE(command NUL capability-list)
+                       *PKT-LINE(command)
                        flush-pkt
 
   command           =  create / delete / update
@@ -1233,14 +1242,28 @@
   old-id            =  obj-id
   new-id            =  obj-id
 
-  pack-file         = "PACK" 28*(OCTET)</code></pre>
+  push-cert         = PKT-LINE("push-cert" NUL capability-list LF)
+                      PKT-LINE("certificate version 0.1" LF)
+                      PKT-LINE("pusher" SP ident LF)
+                      PKT-LINE("pushee" SP url LF)
+                      PKT-LINE("nonce" SP nonce LF)
+                      PKT-LINE(LF)
+                      *PKT-LINE(command LF)
+                      *PKT-LINE(gpg-signature-lines LF)
+                      PKT-LINE("push-cert-end" LF)
+
+  packfile          = "PACK" 28*(OCTET)</code></pre>
 </div></div>
 <div class="paragraph"><p>If the receiving end does not support delete-refs, the sending end MUST
 NOT ask for delete command.</p></div>
-<div class="paragraph"><p>The pack-file MUST NOT be sent if the only command used is <em>delete</em>.</p></div>
-<div class="paragraph"><p>A pack-file MUST be sent if either create or update command is used,
+<div class="paragraph"><p>If the receiving end does not support push-cert, the sending end
+MUST NOT send a push-cert command.  When a push-cert command is
+sent, command-list MUST NOT be sent; the commands recorded in the
+push certificate is used instead.</p></div>
+<div class="paragraph"><p>The packfile MUST NOT be sent if the only command used is <em>delete</em>.</p></div>
+<div class="paragraph"><p>A packfile MUST be sent if either create or update command is used,
 even if the server already has all the necessary objects.  In this
-case the client MUST send an empty pack-file.   The only time this
+case the client MUST send an empty packfile.   The only time this
 is likely to happen is if the client is creating
 a new branch or a tag that points to an existing obj-id.</p></div>
 <div class="paragraph"><p>The server will receive the packfile, unpack it, then validate each
@@ -1251,6 +1274,51 @@
 </div>
 </div>
 <div class="sect1">
+<h2 id="_push_certificate">Push Certificate</h2>
+<div class="sectionbody">
+<div class="paragraph"><p>A push certificate begins with a set of header lines.  After the
+header and an empty line, the protocol commands follow, one per
+line. Note that the trailing LF in push-cert PKT-LINEs is <em>not</em>
+optional; it must be present.</p></div>
+<div class="paragraph"><p>Currently, the following header fields are defined:</p></div>
+<div class="dlist"><dl>
+<dt class="hdlist1">
+<code>pusher</code> ident
+</dt>
+<dd>
+<p>
+        Identify the GPG key in "Human Readable Name &lt;<a href="mailto:email@address">email@address</a>&gt;"
+        format.
+</p>
+</dd>
+<dt class="hdlist1">
+<code>pushee</code> url
+</dt>
+<dd>
+<p>
+        The repository URL (anonymized, if the URL contains
+        authentication material) the user who ran <code>git push</code>
+        intended to push into.
+</p>
+</dd>
+<dt class="hdlist1">
+<code>nonce</code> nonce
+</dt>
+<dd>
+<p>
+        The <em>nonce</em> string the receiving repository asked the
+        pushing user to include in the certificate, to prevent
+        replay attacks.
+</p>
+</dd>
+</dl></div>
+<div class="paragraph"><p>The GPG signature lines are a detached signature for the contents
+recorded in the push certificate before the signature block begins.
+The detached signature is used to certify that the commands were
+given by the pusher, who must be the signer.</p></div>
+</div>
+</div>
+<div class="sect1">
 <h2 id="_report_status">Report Status</h2>
 <div class="sectionbody">
 <div class="paragraph"><p>After receiving the pack data from the sender, the receiver sends a
@@ -1266,12 +1334,12 @@
                       1*(command-status)
                       flush-pkt
 
-  unpack-status     = PKT-LINE("unpack" SP unpack-result LF)
+  unpack-status     = PKT-LINE("unpack" SP unpack-result)
   unpack-result     = "ok" / error-msg
 
   command-status    = command-ok / command-fail
-  command-ok        = PKT-LINE("ok" SP refname LF)
-  command-fail      = PKT-LINE("ng" SP refname SP error-msg LF)
+  command-ok        = PKT-LINE("ok" SP refname)
+  command-fail      = PKT-LINE("ng" SP refname SP error-msg)
 
   error-msg         = 1*(OCTECT) ; where not "ok"</code></pre>
 </div></div>
# install technical/pack-protocol.html /usr/share/doc/git-doc/technical/pack-protocol.html
--- /usr/share/doc/git-doc/technical/protocol-capabilities.html	2016-03-21 09:24:30.000000000 -0600
+++ technical/protocol-capabilities.html	2016-10-15 00:44:46.696075789 -0600
@@ -751,8 +751,9 @@
 was sent.  Server MUST NOT ignore capabilities that client requested
 and server advertised.  As a consequence of these rules, server MUST
 NOT advertise capabilities it does not understand.</p></div>
-<div class="paragraph"><p>The <em>report-status</em>, <em>delete-refs</em>, and <em>quiet</em> capabilities are sent and
-recognized by the receive-pack (push to server) process.</p></div>
+<div class="paragraph"><p>The <em>atomic</em>, <em>report-status</em>, <em>delete-refs</em>, <em>quiet</em>, and <em>push-cert</em>
+capabilities are sent and recognized by the receive-pack (push to server)
+process.</p></div>
 <div class="paragraph"><p>The <em>ofs-delta</em> and <em>side-band-64k</em> capabilities are sent and recognized
 by both upload-pack and receive-pack protocols.  The <em>agent</em> capability
 may optionally be sent in both protocols.</p></div>
@@ -896,7 +897,7 @@
 ASCII characters except space (i.e., the byte range 32 &lt; x &lt; 127), and
 are typically of the form "package/version" (e.g., "git/1.8.3.1"). The
 agent strings are purely informative for statistics and debugging
-purposes, and MUST NOT be used to programatically assume the presence
+purposes, and MUST NOT be used to programmatically assume the presence
 or absence of particular features.</p></div>
 </div>
 </div>
@@ -976,6 +977,25 @@
 </div>
 </div>
 <div class="sect1">
+<h2 id="_atomic">atomic</h2>
+<div class="sectionbody">
+<div class="paragraph"><p>If the server sends the <em>atomic</em> capability it is capable of accepting
+atomic pushes. If the pushing client requests this capability, the server
+will update the refs in one atomic transaction. Either all refs are
+updated or none.</p></div>
+</div>
+</div>
+<div class="sect1">
+<h2 id="_push_options">push-options</h2>
+<div class="sectionbody">
+<div class="paragraph"><p>If the server sends the <em>push-options</em> capability it is able to accept
+push options after the update commands have been sent, but before the
+packfile is streamed. If the pushing client requests this capability,
+the server will pass the options to the pre- and post- receive hooks
+that process this push request.</p></div>
+</div>
+</div>
+<div class="sect1">
 <h2 id="_allow_tip_sha1_in_want">allow-tip-sha1-in-want</h2>
 <div class="sectionbody">
 <div class="paragraph"><p>If the upload-pack server advertises this capability, fetch-pack may
@@ -983,6 +1003,24 @@
 advertised by upload-pack.</p></div>
 </div>
 </div>
+<div class="sect1">
+<h2 id="_allow_reachable_sha1_in_want">allow-reachable-sha1-in-want</h2>
+<div class="sectionbody">
+<div class="paragraph"><p>If the upload-pack server advertises this capability, fetch-pack may
+send "want" lines with SHA-1s that exist at the server but are not
+advertised by upload-pack.</p></div>
+</div>
+</div>
+<div class="sect1">
+<h2 id="_push_cert_lt_nonce_gt">push-cert=&lt;nonce&gt;</h2>
+<div class="sectionbody">
+<div class="paragraph"><p>The receive-pack server that advertises this capability is willing
+to accept a signed push certificate, and asks the &lt;nonce&gt; to be
+included in the push certificate.  A send-pack client MUST NOT
+send a push-cert packet unless the receive-pack server advertises
+this capability.</p></div>
+</div>
+</div>
 </div>
 <div id="footnotes"><hr /></div>
 <div id="footer">
# install technical/protocol-capabilities.html /usr/share/doc/git-doc/technical/protocol-capabilities.html
--- /usr/share/doc/git-doc/technical/protocol-common.html	2016-03-21 09:24:30.000000000 -0600
+++ technical/protocol-common.html	2016-10-15 00:44:46.928075794 -0600
@@ -788,7 +788,7 @@
 </li>
 <li>
 <p>
-They cannot end with a slash <code>/</code> nor a dot <code>.</code>.
+They cannot end with a slash <code>/</code> or a dot <code>.</code>.
 </p>
 </li>
 <li>
@@ -820,10 +820,13 @@
 <div class="paragraph"><p>A pkt-line MAY contain binary data, so implementors MUST ensure
 pkt-line parsing/formatting routines are 8-bit clean.</p></div>
 <div class="paragraph"><p>A non-binary line SHOULD BE terminated by an LF, which if present
-MUST be included in the total length.</p></div>
-<div class="paragraph"><p>The maximum length of a pkt-line&#8217;s data component is 65520 bytes.
-Implementations MUST NOT send pkt-line whose length exceeds 65524
-(65520 bytes of payload + 4 bytes of length data).</p></div>
+MUST be included in the total length. Receivers MUST treat pkt-lines
+with non-binary data the same whether or not they contain the trailing
+LF (stripping the LF if present, and not complaining when it is
+missing).</p></div>
+<div class="paragraph"><p>The maximum length of a pkt-line&#8217;s data component is 65516 bytes.
+Implementations MUST NOT send pkt-line whose length exceeds 65520
+(65516 bytes of payload + 4 bytes of length data).</p></div>
 <div class="paragraph"><p>Implementations SHOULD NOT send an empty pkt-line ("0004").</p></div>
 <div class="paragraph"><p>A pkt-line with a length field of 0 ("0000"), called a flush-pkt,
 is a special case and MUST be handled differently than an empty
# install technical/protocol-common.html /usr/share/doc/git-doc/technical/protocol-common.html
--- /usr/share/doc/git-doc/technical/racy-git.html	2016-03-21 09:24:30.000000000 -0600
+++ technical/racy-git.html	2016-10-15 00:44:47.200075799 -0600
@@ -773,13 +773,17 @@
 compared, but this is not enabled by default because this member
 is not stable on network filesystems.  With <code>USE_NSEC</code>
 compile-time option, <code>st_mtim.tv_nsec</code> and <code>st_ctim.tv_nsec</code>
-members are also compared, but this is not enabled by default
+members are also compared. On Linux, this is not enabled by default
 because in-core timestamps can have finer granularity than
 on-disk timestamps, resulting in meaningless changes when an
 inode is evicted from the inode cache.  See commit 8ce13b0
 of git://git.kernel.org/pub/scm/linux/kernel/git/tglx/history.git
 ([PATCH] Sync in core time granularity with filesystems,
-2005-01-04).</p></div>
+2005-01-04). This patch is included in kernel 2.6.11 and newer, but
+only fixes the issue for file systems with exactly 1 ns or 1 s
+resolution. Other file systems are still broken in current Linux
+kernels (e.g. CEPH, CIFS, NTFS, UDF), see
+<a href="https://lkml.org/lkml/2015/6/9/714">https://lkml.org/lkml/2015/6/9/714</a></p></div>
 </div>
 </div>
 <div class="sect1">
# install technical/racy-git.html /usr/share/doc/git-doc/technical/racy-git.html
# install technical/signature-format.html /usr/share/doc/git-doc/technical/signature-format.html
# install RelNotes/1.5.0.1.txt /usr/share/doc/git-doc/RelNotes/1.5.0.1.txt
# install RelNotes/1.5.0.2.txt /usr/share/doc/git-doc/RelNotes/1.5.0.2.txt
# install RelNotes/1.5.0.3.txt /usr/share/doc/git-doc/RelNotes/1.5.0.3.txt
# install RelNotes/1.5.0.4.txt /usr/share/doc/git-doc/RelNotes/1.5.0.4.txt
# install RelNotes/1.5.0.5.txt /usr/share/doc/git-doc/RelNotes/1.5.0.5.txt
# install RelNotes/1.5.0.6.txt /usr/share/doc/git-doc/RelNotes/1.5.0.6.txt
# install RelNotes/1.5.0.7.txt /usr/share/doc/git-doc/RelNotes/1.5.0.7.txt
# install RelNotes/1.5.0.txt /usr/share/doc/git-doc/RelNotes/1.5.0.txt
# install RelNotes/1.5.1.1.txt /usr/share/doc/git-doc/RelNotes/1.5.1.1.txt
# install RelNotes/1.5.1.2.txt /usr/share/doc/git-doc/RelNotes/1.5.1.2.txt
# install RelNotes/1.5.1.3.txt /usr/share/doc/git-doc/RelNotes/1.5.1.3.txt
# install RelNotes/1.5.1.4.txt /usr/share/doc/git-doc/RelNotes/1.5.1.4.txt
# install RelNotes/1.5.1.5.txt /usr/share/doc/git-doc/RelNotes/1.5.1.5.txt
# install RelNotes/1.5.1.6.txt /usr/share/doc/git-doc/RelNotes/1.5.1.6.txt
# install RelNotes/1.5.1.txt /usr/share/doc/git-doc/RelNotes/1.5.1.txt
# install RelNotes/1.5.2.1.txt /usr/share/doc/git-doc/RelNotes/1.5.2.1.txt
# install RelNotes/1.5.2.2.txt /usr/share/doc/git-doc/RelNotes/1.5.2.2.txt
# install RelNotes/1.5.2.3.txt /usr/share/doc/git-doc/RelNotes/1.5.2.3.txt
# install RelNotes/1.5.2.4.txt /usr/share/doc/git-doc/RelNotes/1.5.2.4.txt
# install RelNotes/1.5.2.5.txt /usr/share/doc/git-doc/RelNotes/1.5.2.5.txt
# install RelNotes/1.5.2.txt /usr/share/doc/git-doc/RelNotes/1.5.2.txt
# install RelNotes/1.5.3.1.txt /usr/share/doc/git-doc/RelNotes/1.5.3.1.txt
# install RelNotes/1.5.3.2.txt /usr/share/doc/git-doc/RelNotes/1.5.3.2.txt
# install RelNotes/1.5.3.3.txt /usr/share/doc/git-doc/RelNotes/1.5.3.3.txt
# install RelNotes/1.5.3.4.txt /usr/share/doc/git-doc/RelNotes/1.5.3.4.txt
# install RelNotes/1.5.3.5.txt /usr/share/doc/git-doc/RelNotes/1.5.3.5.txt
# install RelNotes/1.5.3.6.txt /usr/share/doc/git-doc/RelNotes/1.5.3.6.txt
# install RelNotes/1.5.3.7.txt /usr/share/doc/git-doc/RelNotes/1.5.3.7.txt
# install RelNotes/1.5.3.8.txt /usr/share/doc/git-doc/RelNotes/1.5.3.8.txt
# install RelNotes/1.5.3.txt /usr/share/doc/git-doc/RelNotes/1.5.3.txt
# install RelNotes/1.5.4.1.txt /usr/share/doc/git-doc/RelNotes/1.5.4.1.txt
# install RelNotes/1.5.4.2.txt /usr/share/doc/git-doc/RelNotes/1.5.4.2.txt
# install RelNotes/1.5.4.3.txt /usr/share/doc/git-doc/RelNotes/1.5.4.3.txt
# install RelNotes/1.5.4.4.txt /usr/share/doc/git-doc/RelNotes/1.5.4.4.txt
# install RelNotes/1.5.4.5.txt /usr/share/doc/git-doc/RelNotes/1.5.4.5.txt
# install RelNotes/1.5.4.6.txt /usr/share/doc/git-doc/RelNotes/1.5.4.6.txt
# install RelNotes/1.5.4.7.txt /usr/share/doc/git-doc/RelNotes/1.5.4.7.txt
# install RelNotes/1.5.4.txt /usr/share/doc/git-doc/RelNotes/1.5.4.txt
# install RelNotes/1.5.5.1.txt /usr/share/doc/git-doc/RelNotes/1.5.5.1.txt
# install RelNotes/1.5.5.2.txt /usr/share/doc/git-doc/RelNotes/1.5.5.2.txt
# install RelNotes/1.5.5.3.txt /usr/share/doc/git-doc/RelNotes/1.5.5.3.txt
# install RelNotes/1.5.5.4.txt /usr/share/doc/git-doc/RelNotes/1.5.5.4.txt
# install RelNotes/1.5.5.5.txt /usr/share/doc/git-doc/RelNotes/1.5.5.5.txt
# install RelNotes/1.5.5.6.txt /usr/share/doc/git-doc/RelNotes/1.5.5.6.txt
# install RelNotes/1.5.5.txt /usr/share/doc/git-doc/RelNotes/1.5.5.txt
# install RelNotes/1.5.6.1.txt /usr/share/doc/git-doc/RelNotes/1.5.6.1.txt
# install RelNotes/1.5.6.2.txt /usr/share/doc/git-doc/RelNotes/1.5.6.2.txt
# install RelNotes/1.5.6.3.txt /usr/share/doc/git-doc/RelNotes/1.5.6.3.txt
# install RelNotes/1.5.6.4.txt /usr/share/doc/git-doc/RelNotes/1.5.6.4.txt
# install RelNotes/1.5.6.5.txt /usr/share/doc/git-doc/RelNotes/1.5.6.5.txt
# install RelNotes/1.5.6.6.txt /usr/share/doc/git-doc/RelNotes/1.5.6.6.txt
# install RelNotes/1.5.6.txt /usr/share/doc/git-doc/RelNotes/1.5.6.txt
# install RelNotes/1.6.0.1.txt /usr/share/doc/git-doc/RelNotes/1.6.0.1.txt
# install RelNotes/1.6.0.2.txt /usr/share/doc/git-doc/RelNotes/1.6.0.2.txt
# install RelNotes/1.6.0.3.txt /usr/share/doc/git-doc/RelNotes/1.6.0.3.txt
# install RelNotes/1.6.0.4.txt /usr/share/doc/git-doc/RelNotes/1.6.0.4.txt
# install RelNotes/1.6.0.5.txt /usr/share/doc/git-doc/RelNotes/1.6.0.5.txt
# install RelNotes/1.6.0.6.txt /usr/share/doc/git-doc/RelNotes/1.6.0.6.txt
# install RelNotes/1.6.0.txt /usr/share/doc/git-doc/RelNotes/1.6.0.txt
# install RelNotes/1.6.1.1.txt /usr/share/doc/git-doc/RelNotes/1.6.1.1.txt
# install RelNotes/1.6.1.2.txt /usr/share/doc/git-doc/RelNotes/1.6.1.2.txt
# install RelNotes/1.6.1.3.txt /usr/share/doc/git-doc/RelNotes/1.6.1.3.txt
# install RelNotes/1.6.1.4.txt /usr/share/doc/git-doc/RelNotes/1.6.1.4.txt
# install RelNotes/1.6.1.txt /usr/share/doc/git-doc/RelNotes/1.6.1.txt
# install RelNotes/1.6.2.1.txt /usr/share/doc/git-doc/RelNotes/1.6.2.1.txt
# install RelNotes/1.6.2.2.txt /usr/share/doc/git-doc/RelNotes/1.6.2.2.txt
# install RelNotes/1.6.2.3.txt /usr/share/doc/git-doc/RelNotes/1.6.2.3.txt
# install RelNotes/1.6.2.4.txt /usr/share/doc/git-doc/RelNotes/1.6.2.4.txt
# install RelNotes/1.6.2.5.txt /usr/share/doc/git-doc/RelNotes/1.6.2.5.txt
# install RelNotes/1.6.2.txt /usr/share/doc/git-doc/RelNotes/1.6.2.txt
# install RelNotes/1.6.3.1.txt /usr/share/doc/git-doc/RelNotes/1.6.3.1.txt
# install RelNotes/1.6.3.2.txt /usr/share/doc/git-doc/RelNotes/1.6.3.2.txt
# install RelNotes/1.6.3.3.txt /usr/share/doc/git-doc/RelNotes/1.6.3.3.txt
# install RelNotes/1.6.3.4.txt /usr/share/doc/git-doc/RelNotes/1.6.3.4.txt
# install RelNotes/1.6.3.txt /usr/share/doc/git-doc/RelNotes/1.6.3.txt
# install RelNotes/1.6.4.1.txt /usr/share/doc/git-doc/RelNotes/1.6.4.1.txt
# install RelNotes/1.6.4.2.txt /usr/share/doc/git-doc/RelNotes/1.6.4.2.txt
# install RelNotes/1.6.4.3.txt /usr/share/doc/git-doc/RelNotes/1.6.4.3.txt
# install RelNotes/1.6.4.4.txt /usr/share/doc/git-doc/RelNotes/1.6.4.4.txt
# install RelNotes/1.6.4.5.txt /usr/share/doc/git-doc/RelNotes/1.6.4.5.txt
# install RelNotes/1.6.4.txt /usr/share/doc/git-doc/RelNotes/1.6.4.txt
# install RelNotes/1.6.5.1.txt /usr/share/doc/git-doc/RelNotes/1.6.5.1.txt
# install RelNotes/1.6.5.2.txt /usr/share/doc/git-doc/RelNotes/1.6.5.2.txt
# install RelNotes/1.6.5.3.txt /usr/share/doc/git-doc/RelNotes/1.6.5.3.txt
# install RelNotes/1.6.5.4.txt /usr/share/doc/git-doc/RelNotes/1.6.5.4.txt
# install RelNotes/1.6.5.5.txt /usr/share/doc/git-doc/RelNotes/1.6.5.5.txt
# install RelNotes/1.6.5.6.txt /usr/share/doc/git-doc/RelNotes/1.6.5.6.txt
# install RelNotes/1.6.5.7.txt /usr/share/doc/git-doc/RelNotes/1.6.5.7.txt
# install RelNotes/1.6.5.8.txt /usr/share/doc/git-doc/RelNotes/1.6.5.8.txt
# install RelNotes/1.6.5.9.txt /usr/share/doc/git-doc/RelNotes/1.6.5.9.txt
# install RelNotes/1.6.5.txt /usr/share/doc/git-doc/RelNotes/1.6.5.txt
# install RelNotes/1.6.6.1.txt /usr/share/doc/git-doc/RelNotes/1.6.6.1.txt
# install RelNotes/1.6.6.2.txt /usr/share/doc/git-doc/RelNotes/1.6.6.2.txt
# install RelNotes/1.6.6.3.txt /usr/share/doc/git-doc/RelNotes/1.6.6.3.txt
# install RelNotes/1.6.6.txt /usr/share/doc/git-doc/RelNotes/1.6.6.txt
# install RelNotes/1.7.0.1.txt /usr/share/doc/git-doc/RelNotes/1.7.0.1.txt
# install RelNotes/1.7.0.2.txt /usr/share/doc/git-doc/RelNotes/1.7.0.2.txt
# install RelNotes/1.7.0.3.txt /usr/share/doc/git-doc/RelNotes/1.7.0.3.txt
# install RelNotes/1.7.0.4.txt /usr/share/doc/git-doc/RelNotes/1.7.0.4.txt
# install RelNotes/1.7.0.5.txt /usr/share/doc/git-doc/RelNotes/1.7.0.5.txt
# install RelNotes/1.7.0.6.txt /usr/share/doc/git-doc/RelNotes/1.7.0.6.txt
# install RelNotes/1.7.0.7.txt /usr/share/doc/git-doc/RelNotes/1.7.0.7.txt
# install RelNotes/1.7.0.8.txt /usr/share/doc/git-doc/RelNotes/1.7.0.8.txt
# install RelNotes/1.7.0.9.txt /usr/share/doc/git-doc/RelNotes/1.7.0.9.txt
# install RelNotes/1.7.0.txt /usr/share/doc/git-doc/RelNotes/1.7.0.txt
# install RelNotes/1.7.1.1.txt /usr/share/doc/git-doc/RelNotes/1.7.1.1.txt
# install RelNotes/1.7.1.2.txt /usr/share/doc/git-doc/RelNotes/1.7.1.2.txt
# install RelNotes/1.7.1.3.txt /usr/share/doc/git-doc/RelNotes/1.7.1.3.txt
# install RelNotes/1.7.1.4.txt /usr/share/doc/git-doc/RelNotes/1.7.1.4.txt
# install RelNotes/1.7.1.txt /usr/share/doc/git-doc/RelNotes/1.7.1.txt
# install RelNotes/1.7.10.1.txt /usr/share/doc/git-doc/RelNotes/1.7.10.1.txt
# install RelNotes/1.7.10.2.txt /usr/share/doc/git-doc/RelNotes/1.7.10.2.txt
# install RelNotes/1.7.10.3.txt /usr/share/doc/git-doc/RelNotes/1.7.10.3.txt
# install RelNotes/1.7.10.4.txt /usr/share/doc/git-doc/RelNotes/1.7.10.4.txt
# install RelNotes/1.7.10.5.txt /usr/share/doc/git-doc/RelNotes/1.7.10.5.txt
# install RelNotes/1.7.10.txt /usr/share/doc/git-doc/RelNotes/1.7.10.txt
# install RelNotes/1.7.11.1.txt /usr/share/doc/git-doc/RelNotes/1.7.11.1.txt
# install RelNotes/1.7.11.2.txt /usr/share/doc/git-doc/RelNotes/1.7.11.2.txt
# install RelNotes/1.7.11.3.txt /usr/share/doc/git-doc/RelNotes/1.7.11.3.txt
# install RelNotes/1.7.11.4.txt /usr/share/doc/git-doc/RelNotes/1.7.11.4.txt
# install RelNotes/1.7.11.5.txt /usr/share/doc/git-doc/RelNotes/1.7.11.5.txt
# install RelNotes/1.7.11.6.txt /usr/share/doc/git-doc/RelNotes/1.7.11.6.txt
# install RelNotes/1.7.11.7.txt /usr/share/doc/git-doc/RelNotes/1.7.11.7.txt
# install RelNotes/1.7.11.txt /usr/share/doc/git-doc/RelNotes/1.7.11.txt
# install RelNotes/1.7.12.1.txt /usr/share/doc/git-doc/RelNotes/1.7.12.1.txt
# install RelNotes/1.7.12.2.txt /usr/share/doc/git-doc/RelNotes/1.7.12.2.txt
# install RelNotes/1.7.12.3.txt /usr/share/doc/git-doc/RelNotes/1.7.12.3.txt
# install RelNotes/1.7.12.4.txt /usr/share/doc/git-doc/RelNotes/1.7.12.4.txt
# install RelNotes/1.7.12.txt /usr/share/doc/git-doc/RelNotes/1.7.12.txt
# install RelNotes/1.7.2.1.txt /usr/share/doc/git-doc/RelNotes/1.7.2.1.txt
# install RelNotes/1.7.2.2.txt /usr/share/doc/git-doc/RelNotes/1.7.2.2.txt
# install RelNotes/1.7.2.3.txt /usr/share/doc/git-doc/RelNotes/1.7.2.3.txt
# install RelNotes/1.7.2.4.txt /usr/share/doc/git-doc/RelNotes/1.7.2.4.txt
# install RelNotes/1.7.2.5.txt /usr/share/doc/git-doc/RelNotes/1.7.2.5.txt
# install RelNotes/1.7.2.txt /usr/share/doc/git-doc/RelNotes/1.7.2.txt
# install RelNotes/1.7.3.1.txt /usr/share/doc/git-doc/RelNotes/1.7.3.1.txt
# install RelNotes/1.7.3.2.txt /usr/share/doc/git-doc/RelNotes/1.7.3.2.txt
# install RelNotes/1.7.3.3.txt /usr/share/doc/git-doc/RelNotes/1.7.3.3.txt
# install RelNotes/1.7.3.4.txt /usr/share/doc/git-doc/RelNotes/1.7.3.4.txt
# install RelNotes/1.7.3.5.txt /usr/share/doc/git-doc/RelNotes/1.7.3.5.txt
# install RelNotes/1.7.3.txt /usr/share/doc/git-doc/RelNotes/1.7.3.txt
# install RelNotes/1.7.4.1.txt /usr/share/doc/git-doc/RelNotes/1.7.4.1.txt
# install RelNotes/1.7.4.2.txt /usr/share/doc/git-doc/RelNotes/1.7.4.2.txt
# install RelNotes/1.7.4.3.txt /usr/share/doc/git-doc/RelNotes/1.7.4.3.txt
# install RelNotes/1.7.4.4.txt /usr/share/doc/git-doc/RelNotes/1.7.4.4.txt
# install RelNotes/1.7.4.5.txt /usr/share/doc/git-doc/RelNotes/1.7.4.5.txt
# install RelNotes/1.7.4.txt /usr/share/doc/git-doc/RelNotes/1.7.4.txt
# install RelNotes/1.7.5.1.txt /usr/share/doc/git-doc/RelNotes/1.7.5.1.txt
# install RelNotes/1.7.5.2.txt /usr/share/doc/git-doc/RelNotes/1.7.5.2.txt
# install RelNotes/1.7.5.3.txt /usr/share/doc/git-doc/RelNotes/1.7.5.3.txt
# install RelNotes/1.7.5.4.txt /usr/share/doc/git-doc/RelNotes/1.7.5.4.txt
# install RelNotes/1.7.5.txt /usr/share/doc/git-doc/RelNotes/1.7.5.txt
# install RelNotes/1.7.6.1.txt /usr/share/doc/git-doc/RelNotes/1.7.6.1.txt
# install RelNotes/1.7.6.2.txt /usr/share/doc/git-doc/RelNotes/1.7.6.2.txt
# install RelNotes/1.7.6.3.txt /usr/share/doc/git-doc/RelNotes/1.7.6.3.txt
# install RelNotes/1.7.6.4.txt /usr/share/doc/git-doc/RelNotes/1.7.6.4.txt
# install RelNotes/1.7.6.5.txt /usr/share/doc/git-doc/RelNotes/1.7.6.5.txt
# install RelNotes/1.7.6.6.txt /usr/share/doc/git-doc/RelNotes/1.7.6.6.txt
# install RelNotes/1.7.6.txt /usr/share/doc/git-doc/RelNotes/1.7.6.txt
# install RelNotes/1.7.7.1.txt /usr/share/doc/git-doc/RelNotes/1.7.7.1.txt
# install RelNotes/1.7.7.2.txt /usr/share/doc/git-doc/RelNotes/1.7.7.2.txt
# install RelNotes/1.7.7.3.txt /usr/share/doc/git-doc/RelNotes/1.7.7.3.txt
# install RelNotes/1.7.7.4.txt /usr/share/doc/git-doc/RelNotes/1.7.7.4.txt
# install RelNotes/1.7.7.5.txt /usr/share/doc/git-doc/RelNotes/1.7.7.5.txt
# install RelNotes/1.7.7.6.txt /usr/share/doc/git-doc/RelNotes/1.7.7.6.txt
# install RelNotes/1.7.7.7.txt /usr/share/doc/git-doc/RelNotes/1.7.7.7.txt
# install RelNotes/1.7.7.txt /usr/share/doc/git-doc/RelNotes/1.7.7.txt
# install RelNotes/1.7.8.1.txt /usr/share/doc/git-doc/RelNotes/1.7.8.1.txt
# install RelNotes/1.7.8.2.txt /usr/share/doc/git-doc/RelNotes/1.7.8.2.txt
# install RelNotes/1.7.8.3.txt /usr/share/doc/git-doc/RelNotes/1.7.8.3.txt
# install RelNotes/1.7.8.4.txt /usr/share/doc/git-doc/RelNotes/1.7.8.4.txt
# install RelNotes/1.7.8.5.txt /usr/share/doc/git-doc/RelNotes/1.7.8.5.txt
# install RelNotes/1.7.8.6.txt /usr/share/doc/git-doc/RelNotes/1.7.8.6.txt
# install RelNotes/1.7.8.txt /usr/share/doc/git-doc/RelNotes/1.7.8.txt
# install RelNotes/1.7.9.1.txt /usr/share/doc/git-doc/RelNotes/1.7.9.1.txt
# install RelNotes/1.7.9.2.txt /usr/share/doc/git-doc/RelNotes/1.7.9.2.txt
# install RelNotes/1.7.9.3.txt /usr/share/doc/git-doc/RelNotes/1.7.9.3.txt
# install RelNotes/1.7.9.4.txt /usr/share/doc/git-doc/RelNotes/1.7.9.4.txt
# install RelNotes/1.7.9.5.txt /usr/share/doc/git-doc/RelNotes/1.7.9.5.txt
# install RelNotes/1.7.9.6.txt /usr/share/doc/git-doc/RelNotes/1.7.9.6.txt
# install RelNotes/1.7.9.7.txt /usr/share/doc/git-doc/RelNotes/1.7.9.7.txt
# install RelNotes/1.7.9.txt /usr/share/doc/git-doc/RelNotes/1.7.9.txt
# install RelNotes/1.8.0.1.txt /usr/share/doc/git-doc/RelNotes/1.8.0.1.txt
# install RelNotes/1.8.0.2.txt /usr/share/doc/git-doc/RelNotes/1.8.0.2.txt
# install RelNotes/1.8.0.3.txt /usr/share/doc/git-doc/RelNotes/1.8.0.3.txt
# install RelNotes/1.8.0.txt /usr/share/doc/git-doc/RelNotes/1.8.0.txt
# install RelNotes/1.8.1.1.txt /usr/share/doc/git-doc/RelNotes/1.8.1.1.txt
# install RelNotes/1.8.1.2.txt /usr/share/doc/git-doc/RelNotes/1.8.1.2.txt
# install RelNotes/1.8.1.3.txt /usr/share/doc/git-doc/RelNotes/1.8.1.3.txt
# install RelNotes/1.8.1.4.txt /usr/share/doc/git-doc/RelNotes/1.8.1.4.txt
# install RelNotes/1.8.1.5.txt /usr/share/doc/git-doc/RelNotes/1.8.1.5.txt
# install RelNotes/1.8.1.6.txt /usr/share/doc/git-doc/RelNotes/1.8.1.6.txt
# install RelNotes/1.8.1.txt /usr/share/doc/git-doc/RelNotes/1.8.1.txt
# install RelNotes/1.8.2.1.txt /usr/share/doc/git-doc/RelNotes/1.8.2.1.txt
# install RelNotes/1.8.2.2.txt /usr/share/doc/git-doc/RelNotes/1.8.2.2.txt
# install RelNotes/1.8.2.3.txt /usr/share/doc/git-doc/RelNotes/1.8.2.3.txt
# install RelNotes/1.8.2.txt /usr/share/doc/git-doc/RelNotes/1.8.2.txt
# install RelNotes/1.8.3.1.txt /usr/share/doc/git-doc/RelNotes/1.8.3.1.txt
# install RelNotes/1.8.3.2.txt /usr/share/doc/git-doc/RelNotes/1.8.3.2.txt
# install RelNotes/1.8.3.3.txt /usr/share/doc/git-doc/RelNotes/1.8.3.3.txt
# install RelNotes/1.8.3.4.txt /usr/share/doc/git-doc/RelNotes/1.8.3.4.txt
# install RelNotes/1.8.3.txt /usr/share/doc/git-doc/RelNotes/1.8.3.txt
# install RelNotes/1.8.4.1.txt /usr/share/doc/git-doc/RelNotes/1.8.4.1.txt
# install RelNotes/1.8.4.2.txt /usr/share/doc/git-doc/RelNotes/1.8.4.2.txt
# install RelNotes/1.8.4.3.txt /usr/share/doc/git-doc/RelNotes/1.8.4.3.txt
# install RelNotes/1.8.4.4.txt /usr/share/doc/git-doc/RelNotes/1.8.4.4.txt
# install RelNotes/1.8.4.5.txt /usr/share/doc/git-doc/RelNotes/1.8.4.5.txt
# install RelNotes/1.8.4.txt /usr/share/doc/git-doc/RelNotes/1.8.4.txt
# install RelNotes/1.8.5.1.txt /usr/share/doc/git-doc/RelNotes/1.8.5.1.txt
# install RelNotes/1.8.5.2.txt /usr/share/doc/git-doc/RelNotes/1.8.5.2.txt
# install RelNotes/1.8.5.3.txt /usr/share/doc/git-doc/RelNotes/1.8.5.3.txt
# install RelNotes/1.8.5.4.txt /usr/share/doc/git-doc/RelNotes/1.8.5.4.txt
# install RelNotes/1.8.5.5.txt /usr/share/doc/git-doc/RelNotes/1.8.5.5.txt
# install RelNotes/1.8.5.6.txt /usr/share/doc/git-doc/RelNotes/1.8.5.6.txt
# install RelNotes/1.8.5.txt /usr/share/doc/git-doc/RelNotes/1.8.5.txt
# install RelNotes/1.9.0.txt /usr/share/doc/git-doc/RelNotes/1.9.0.txt
# install RelNotes/1.9.1.txt /usr/share/doc/git-doc/RelNotes/1.9.1.txt
# install RelNotes/1.9.2.txt /usr/share/doc/git-doc/RelNotes/1.9.2.txt
# install RelNotes/1.9.3.txt /usr/share/doc/git-doc/RelNotes/1.9.3.txt
# install RelNotes/1.9.4.txt /usr/share/doc/git-doc/RelNotes/1.9.4.txt
# install RelNotes/1.9.5.txt /usr/share/doc/git-doc/RelNotes/1.9.5.txt
# install RelNotes/2.0.0.txt /usr/share/doc/git-doc/RelNotes/2.0.0.txt
# install RelNotes/2.0.1.txt /usr/share/doc/git-doc/RelNotes/2.0.1.txt
# install RelNotes/2.0.2.txt /usr/share/doc/git-doc/RelNotes/2.0.2.txt
# install RelNotes/2.0.3.txt /usr/share/doc/git-doc/RelNotes/2.0.3.txt
# install RelNotes/2.0.4.txt /usr/share/doc/git-doc/RelNotes/2.0.4.txt
# install RelNotes/2.0.5.txt /usr/share/doc/git-doc/RelNotes/2.0.5.txt
# install RelNotes/2.1.0.txt /usr/share/doc/git-doc/RelNotes/2.1.0.txt
# install RelNotes/2.1.1.txt /usr/share/doc/git-doc/RelNotes/2.1.1.txt
# install RelNotes/2.1.2.txt /usr/share/doc/git-doc/RelNotes/2.1.2.txt
# install RelNotes/2.1.3.txt /usr/share/doc/git-doc/RelNotes/2.1.3.txt
# install RelNotes/2.1.4.txt /usr/share/doc/git-doc/RelNotes/2.1.4.txt
# install RelNotes/2.10.0.txt /usr/share/doc/git-doc/RelNotes/2.10.0.txt
# install RelNotes/2.10.1.txt /usr/share/doc/git-doc/RelNotes/2.10.1.txt
# install RelNotes/2.2.0.txt /usr/share/doc/git-doc/RelNotes/2.2.0.txt
# install RelNotes/2.2.1.txt /usr/share/doc/git-doc/RelNotes/2.2.1.txt
# install RelNotes/2.2.2.txt /usr/share/doc/git-doc/RelNotes/2.2.2.txt
# install RelNotes/2.2.3.txt /usr/share/doc/git-doc/RelNotes/2.2.3.txt
# install RelNotes/2.3.0.txt /usr/share/doc/git-doc/RelNotes/2.3.0.txt
# install RelNotes/2.3.1.txt /usr/share/doc/git-doc/RelNotes/2.3.1.txt
# install RelNotes/2.3.10.txt /usr/share/doc/git-doc/RelNotes/2.3.10.txt
# install RelNotes/2.3.2.txt /usr/share/doc/git-doc/RelNotes/2.3.2.txt
# install RelNotes/2.3.3.txt /usr/share/doc/git-doc/RelNotes/2.3.3.txt
# install RelNotes/2.3.4.txt /usr/share/doc/git-doc/RelNotes/2.3.4.txt
# install RelNotes/2.3.5.txt /usr/share/doc/git-doc/RelNotes/2.3.5.txt
# install RelNotes/2.3.6.txt /usr/share/doc/git-doc/RelNotes/2.3.6.txt
# install RelNotes/2.3.7.txt /usr/share/doc/git-doc/RelNotes/2.3.7.txt
# install RelNotes/2.3.8.txt /usr/share/doc/git-doc/RelNotes/2.3.8.txt
# install RelNotes/2.3.9.txt /usr/share/doc/git-doc/RelNotes/2.3.9.txt
# install RelNotes/2.4.0.txt /usr/share/doc/git-doc/RelNotes/2.4.0.txt
# install RelNotes/2.4.1.txt /usr/share/doc/git-doc/RelNotes/2.4.1.txt
# install RelNotes/2.4.10.txt /usr/share/doc/git-doc/RelNotes/2.4.10.txt
# install RelNotes/2.4.11.txt /usr/share/doc/git-doc/RelNotes/2.4.11.txt
# install RelNotes/2.4.2.txt /usr/share/doc/git-doc/RelNotes/2.4.2.txt
# install RelNotes/2.4.3.txt /usr/share/doc/git-doc/RelNotes/2.4.3.txt
# install RelNotes/2.4.4.txt /usr/share/doc/git-doc/RelNotes/2.4.4.txt
# install RelNotes/2.4.5.txt /usr/share/doc/git-doc/RelNotes/2.4.5.txt
# install RelNotes/2.4.6.txt /usr/share/doc/git-doc/RelNotes/2.4.6.txt
# install RelNotes/2.4.7.txt /usr/share/doc/git-doc/RelNotes/2.4.7.txt
# install RelNotes/2.4.8.txt /usr/share/doc/git-doc/RelNotes/2.4.8.txt
# install RelNotes/2.4.9.txt /usr/share/doc/git-doc/RelNotes/2.4.9.txt
# install RelNotes/2.5.0.txt /usr/share/doc/git-doc/RelNotes/2.5.0.txt
# install RelNotes/2.5.1.txt /usr/share/doc/git-doc/RelNotes/2.5.1.txt
# install RelNotes/2.5.2.txt /usr/share/doc/git-doc/RelNotes/2.5.2.txt
# install RelNotes/2.5.3.txt /usr/share/doc/git-doc/RelNotes/2.5.3.txt
# install RelNotes/2.5.4.txt /usr/share/doc/git-doc/RelNotes/2.5.4.txt
# install RelNotes/2.5.5.txt /usr/share/doc/git-doc/RelNotes/2.5.5.txt
# install RelNotes/2.6.0.txt /usr/share/doc/git-doc/RelNotes/2.6.0.txt
# install RelNotes/2.6.1.txt /usr/share/doc/git-doc/RelNotes/2.6.1.txt
# install RelNotes/2.6.2.txt /usr/share/doc/git-doc/RelNotes/2.6.2.txt
# install RelNotes/2.6.3.txt /usr/share/doc/git-doc/RelNotes/2.6.3.txt
# install RelNotes/2.6.4.txt /usr/share/doc/git-doc/RelNotes/2.6.4.txt
# install RelNotes/2.6.5.txt /usr/share/doc/git-doc/RelNotes/2.6.5.txt
# install RelNotes/2.6.6.txt /usr/share/doc/git-doc/RelNotes/2.6.6.txt
# install RelNotes/2.7.0.txt /usr/share/doc/git-doc/RelNotes/2.7.0.txt
# install RelNotes/2.7.1.txt /usr/share/doc/git-doc/RelNotes/2.7.1.txt
# install RelNotes/2.7.2.txt /usr/share/doc/git-doc/RelNotes/2.7.2.txt
# install RelNotes/2.7.3.txt /usr/share/doc/git-doc/RelNotes/2.7.3.txt
# install RelNotes/2.7.4.txt /usr/share/doc/git-doc/RelNotes/2.7.4.txt
# install RelNotes/2.8.0.txt /usr/share/doc/git-doc/RelNotes/2.8.0.txt
# install RelNotes/2.8.1.txt /usr/share/doc/git-doc/RelNotes/2.8.1.txt
# install RelNotes/2.8.2.txt /usr/share/doc/git-doc/RelNotes/2.8.2.txt
# install RelNotes/2.8.3.txt /usr/share/doc/git-doc/RelNotes/2.8.3.txt
# install RelNotes/2.8.4.txt /usr/share/doc/git-doc/RelNotes/2.8.4.txt
# install RelNotes/2.9.0.txt /usr/share/doc/git-doc/RelNotes/2.9.0.txt
# install RelNotes/2.9.1.txt /usr/share/doc/git-doc/RelNotes/2.9.1.txt
# install RelNotes/2.9.2.txt /usr/share/doc/git-doc/RelNotes/2.9.2.txt
# install RelNotes/2.9.3.txt /usr/share/doc/git-doc/RelNotes/2.9.3.txt
# install RelNotes/2.9.4.txt /usr/share/doc/git-doc/RelNotes/2.9.4.txt
# rm -f /usr/share/doc/git-doc/git-remote-bzr.html
# rm -f /usr/share/doc/git-doc/git-subtree.html
# rm -f /usr/share/doc/git-doc/everyday.txt
# rm -f /usr/share/doc/git-doc/git-subtree.txt
# rm -f /usr/share/doc/git-doc/technical/api-hash.txt
# rm -f /usr/share/doc/git-doc/technical/api-lockfile.txt
# rm -f /usr/share/doc/git-doc/technical/api-strbuf.txt
# rm -f /usr/share/doc/git-doc/technical/api-hash.html
# rm -f /usr/share/doc/git-doc/technical/api-lockfile.html
# rm -f /usr/share/doc/git-doc/technical/api-strbuf.html
make[1]: Leaving directory `/home/chip/Downloads/git-2.10.1/Documentation'
make -C Documentation install-info
make[1]: Entering directory `/home/chip/Downloads/git-2.10.1/Documentation'
    GEN doc.dep
make[2]: Entering directory `/home/chip/Downloads/git-2.10.1'
make[2]: `GIT-VERSION-FILE' is up to date.
make[2]: Leaving directory `/home/chip/Downloads/git-2.10.1'
make[1]: Leaving directory `/home/chip/Downloads/git-2.10.1/Documentation'
make[1]: Entering directory `/home/chip/Downloads/git-2.10.1/Documentation'
make[2]: Entering directory `/home/chip/Downloads/git-2.10.1'
make[2]: `GIT-VERSION-FILE' is up to date.
make[2]: Leaving directory `/home/chip/Downloads/git-2.10.1'
    DB2TEXI user-manual.texi
docbook2texi:/article: no description for directory entry
    MAKEINFO git.info
user-manual.texi:3190: warning: @ref cross-reference name should not contain `:'
    DB2TEXI gitman.texi
    MAKEINFO gitman.info
install -d -m 755 /usr/share/info
install -m 644 git.info gitman.info /usr/share/info
if test -r /usr/share/info/dir; then \
	  install-info --info-dir=/usr/share/info git.info ;\
	  install-info --info-dir=/usr/share/info gitman.info ;\
	else \
	  echo "No directory found in /usr/share/info" >&2 ; \
	fi
This is not dpkg install-info anymore, but GNU install-info
See the man page for ginstall-info for command line arguments
This is not dpkg install-info anymore, but GNU install-info
See the man page for ginstall-info for command line arguments
make[1]: Leaving directory `/home/chip/Downloads/git-2.10.1/Documentation'
